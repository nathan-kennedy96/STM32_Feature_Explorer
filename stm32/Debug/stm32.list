
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08010300  08010300  00020300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ecc  08012ecc  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012ecc  08012ecc  00022ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ed4  08012ed4  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ed4  08012ed4  00022ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ed8  08012ed8  00022ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000084bc  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008544  20008544  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c033  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000054be  00000000  00000000  0004c12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001488  00000000  00000000  000515f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000105b  00000000  00000000  00052a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d58b  00000000  00000000  00053ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000255b7  00000000  00000000  0008105e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbe0e  00000000  00000000  000a6615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a98  00000000  00000000  00182424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00187ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080102e8 	.word	0x080102e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080102e8 	.word	0x080102e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <nok>:

#include "command_manager.h"

FunctionPointer function_map[NUM_FUNCTIONS];

void nok(Message* rx_msg, uint8_t* tx_buffer){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	// Respond with all zeros
	const Message ret_msg = {
 8000586:	2300      	movs	r3, #0
 8000588:	733b      	strb	r3, [r7, #12]
 800058a:	2300      	movs	r3, #0
 800058c:	81fb      	strh	r3, [r7, #14]
		.cmd = NOK,
		.data = 0
	};
	serialize_message(&ret_msg, tx_buffer);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f966 	bl	8000866 <serialize_message>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <hello>:

void hello(Message* rx_msg, uint8_t* tx_buffer){
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
	//For now we will just have hello respond their number + 1
	const Message ret_msg = {
 80005ac:	2301      	movs	r3, #1
 80005ae:	733b      	strb	r3, [r7, #12]
	        .cmd = HELLO,
	        .data = rx_msg->data + 1
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b29b      	uxth	r3, r3
	const Message ret_msg = {
 80005b8:	81fb      	strh	r3, [r7, #14]
	};
	serialize_message(&ret_msg, tx_buffer);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f950 	bl	8000866 <serialize_message>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <initialize_function_map>:

// Initialization function for the command map
void initialize_function_map(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    function_map[NOK] = nok;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <initialize_function_map+0x1c>)
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <initialize_function_map+0x20>)
 80005d8:	601a      	str	r2, [r3, #0]
    function_map[HELLO] = hello;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <initialize_function_map+0x1c>)
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <initialize_function_map+0x24>)
 80005de:	605a      	str	r2, [r3, #4]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000a4 	.word	0x200000a4
 80005f0:	0800057d 	.word	0x0800057d
 80005f4:	080005a3 	.word	0x080005a3

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialize_function_map();
 80005fc:	f7ff ffe8 	bl	80005d0 <initialize_function_map>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fce2 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f818 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8b2 	bl	8000770 <MX_GPIO_Init>
  MX_UART4_Init();
 800060c:	f000 f87e 	bl	800070c <MX_UART4_Init>
  MX_LWIP_Init();
 8000610:	f003 fdba 	bl	8004188 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, rx_buffer, COMM_BUFFER_SIZE);
 8000614:	2204      	movs	r2, #4
 8000616:	4906      	ldr	r1, [pc, #24]	; (8000630 <main+0x38>)
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x3c>)
 800061a:	f002 fe8b 	bl	8003334 <HAL_UART_Receive_IT>
  tcp_server_init();
 800061e:	f000 fabb 	bl	8000b98 <tcp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MX_LWIP_Process();
 8000622:	f003 fefd 	bl	8004420 <MX_LWIP_Process>
    HAL_Delay(1); // Add a small delay to allow other interrupts to be serviced
 8000626:	2001      	movs	r0, #1
 8000628:	f000 fd40 	bl	80010ac <HAL_Delay>
    MX_LWIP_Process();
 800062c:	e7f9      	b.n	8000622 <main+0x2a>
 800062e:	bf00      	nop
 8000630:	200000f0 	.word	0x200000f0
 8000634:	200000ac 	.word	0x200000ac

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00e ffa1 	bl	800f58e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f94f 	bl	8002960 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f8b8 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fbb0 	bl	8002e50 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f8a1 	bl	800083c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_UART4_Init+0x5c>)
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <MX_UART4_Init+0x60>)
 8000714:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_UART4_Init+0x5c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_UART4_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_UART4_Init+0x5c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_UART4_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_UART4_Init+0x5c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_UART4_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_UART4_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_UART4_Init+0x5c>)
 8000744:	f002 fd64 	bl	8003210 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f875 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Enable the UART interrupt in NVIC
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2034      	movs	r0, #52	; 0x34
 8000758:	f000 fda7 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 800075c:	2034      	movs	r0, #52	; 0x34
 800075e:	f000 fdc0 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000ac 	.word	0x200000ac
 800076c:	40004c00 	.word	0x40004c00

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x68>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x68>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_GPIO_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_GPIO_Init+0x68>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x68>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_GPIO_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_GPIO_Init+0x68>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x68>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_GPIO_Init+0x68>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_UART_RxCpltCallback+0x48>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d116      	bne.n	800081c <HAL_UART_RxCpltCallback+0x40>
  {
      //Deserialize the message
	  deserialize_message(rx_buffer, &rx_message); //TODO: handle deserialization failures and unknown msgs!
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <HAL_UART_RxCpltCallback+0x4c>)
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <HAL_UART_RxCpltCallback+0x50>)
 80007f2:	f000 f828 	bl	8000846 <deserialize_message>
	  // We should use the NOK return for those!
	  function_map[rx_message.cmd](&rx_message, tx_buffer);
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_UART_RxCpltCallback+0x4c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_UART_RxCpltCallback+0x54>)
 80007fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <HAL_UART_RxCpltCallback+0x58>)
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <HAL_UART_RxCpltCallback+0x4c>)
 8000806:	4798      	blx	r3
	  // Transmit the received data back
	  HAL_UART_Transmit_IT(&huart4, tx_buffer, COMM_BUFFER_SIZE);
 8000808:	2204      	movs	r2, #4
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <HAL_UART_RxCpltCallback+0x58>)
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_UART_RxCpltCallback+0x5c>)
 800080e:	f002 fd4c 	bl	80032aa <HAL_UART_Transmit_IT>

	  // Restart UART reception
	  HAL_UART_Receive_IT(&huart4, rx_buffer, COMM_BUFFER_SIZE);
 8000812:	2204      	movs	r2, #4
 8000814:	4905      	ldr	r1, [pc, #20]	; (800082c <HAL_UART_RxCpltCallback+0x50>)
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <HAL_UART_RxCpltCallback+0x5c>)
 8000818:	f002 fd8c 	bl	8003334 <HAL_UART_Receive_IT>
  }
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40004c00 	.word	0x40004c00
 8000828:	200000f4 	.word	0x200000f4
 800082c:	200000f0 	.word	0x200000f0
 8000830:	200000a4 	.word	0x200000a4
 8000834:	200000f8 	.word	0x200000f8
 8000838:	200000ac 	.word	0x200000ac

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>

08000846 <deserialize_message>:
 */


#include "message.h"

void deserialize_message(const uint8_t* buffer, Message* msg) {
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
	memcpy((uint8_t*)msg, buffer, sizeof(Message));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <serialize_message>:
void serialize_message(const Message* msg, uint8_t* buffer) {
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
	 memcpy(buffer, (uint8_t*)msg, sizeof(Message));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_UART_MspInit+0x94>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d134      	bne.n	8000964 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x98>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000932:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000944:	2308      	movs	r3, #8
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_UART_MspInit+0x9c>)
 8000950:	f001 fe6a 	bl	8002628 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2034      	movs	r0, #52	; 0x34
 800095a:	f000 fca6 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800095e:	2034      	movs	r0, #52	; 0x34
 8000960:	f000 fcbf 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004c00 	.word	0x40004c00
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 fb52 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <UART4_IRQHandler+0x10>)
 80009d2:	f002 fcdf 	bl	8003394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000ac 	.word	0x200000ac

080009e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_kill>:

int _kill(int pid, int sig)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <_kill+0x20>)
 80009fc:	2216      	movs	r2, #22
 80009fe:	601a      	str	r2, [r3, #0]
  return -1;
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	20008534 	.word	0x20008534

08000a14 <_exit>:

void _exit (int status)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ffe5 	bl	80009f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a26:	e7fe      	b.n	8000a26 <_exit+0x12>

08000a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
  }

  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
  }
  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d205      	bcs.n	8000b40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <_sbrk+0x6c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	200000fc 	.word	0x200000fc
 8000b6c:	20008548 	.word	0x20008548
 8000b70:	20008534 	.word	0x20008534

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <tcp_server_init>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err);
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
static void tcp_server_error(void *arg, err_t err);

void tcp_server_init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
    tcp_server_pcb = tcp_new();
 8000b9e:	f007 f981 	bl	8007ea4 <tcp_new>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <tcp_server_init+0x5c>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if (tcp_server_pcb != NULL) {
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <tcp_server_init+0x5c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d01c      	beq.n	8000bea <tcp_server_init+0x52>
        err_t err;
        err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, SERVER_PORT);
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <tcp_server_init+0x5c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f243 0239 	movw	r2, #12345	; 0x3039
 8000bb8:	490f      	ldr	r1, [pc, #60]	; (8000bf8 <tcp_server_init+0x60>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 f8ce 	bl	8006d5c <tcp_bind>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
        if (err == ERR_OK) {
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10e      	bne.n	8000bea <tcp_server_init+0x52>
            tcp_server_pcb = tcp_listen(tcp_server_pcb);
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <tcp_server_init+0x5c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	21ff      	movs	r1, #255	; 0xff
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f006 f97a 	bl	8006ecc <tcp_listen_with_backlog>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <tcp_server_init+0x5c>)
 8000bdc:	6013      	str	r3, [r2, #0]
            tcp_accept(tcp_server_pcb, tcp_server_accept);
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <tcp_server_init+0x5c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4906      	ldr	r1, [pc, #24]	; (8000bfc <tcp_server_init+0x64>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f007 f9a9 	bl	8007f3c <tcp_accept>
            // Handle error
        }
    } else {
        // Handle error
    }
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000100 	.word	0x20000100
 8000bf8:	08012ddc 	.word	0x08012ddc
 8000bfc:	08000c01 	.word	0x08000c01

08000c00 <tcp_server_accept>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	71fb      	strb	r3, [r7, #7]
    tcp_setprio(newpcb, TCP_PRIO_NORMAL);
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f006 ff55 	bl	8007ac0 <tcp_setprio>
    tcp_recv(newpcb, tcp_server_recv);
 8000c16:	4906      	ldr	r1, [pc, #24]	; (8000c30 <tcp_server_accept+0x30>)
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f007 f94b 	bl	8007eb4 <tcp_recv>
    tcp_err(newpcb, tcp_server_error);
 8000c1e:	4905      	ldr	r1, [pc, #20]	; (8000c34 <tcp_server_accept+0x34>)
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f007 f969 	bl	8007ef8 <tcp_err>
    return ERR_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08000c39 	.word	0x08000c39
 8000c34:	08000c9d 	.word	0x08000c9d

08000c38 <tcp_server_recv>:

static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d108      	bne.n	8000c5e <tcp_server_recv+0x26>
        tcp_close(tpcb);
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f005 ff8f 	bl	8006b70 <tcp_close>
        tcp_recv(tpcb, NULL);
 8000c52:	2100      	movs	r1, #0
 8000c54:	68b8      	ldr	r0, [r7, #8]
 8000c56:	f007 f92d 	bl	8007eb4 <tcp_recv>
        return ERR_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e018      	b.n	8000c90 <tcp_server_recv+0x58>
    } else {
        // Handle received data
        char response[] = "hello";
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <tcp_server_recv+0x60>)
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c68:	6018      	str	r0, [r3, #0]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	8019      	strh	r1, [r3, #0]
        tcp_write(tpcb, response, strlen(response), TCP_WRITE_FLAG_COPY);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff faac 	bl	80001d0 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f107 0110 	add.w	r1, r7, #16
 8000c80:	2301      	movs	r3, #1
 8000c82:	68b8      	ldr	r0, [r7, #8]
 8000c84:	f009 fff4 	bl	800ac70 <tcp_write>
        pbuf_free(p);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f005 fad3 	bl	8006234 <pbuf_free>
        return ERR_OK;
 8000c8e:	2300      	movs	r3, #0
    }
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	08010300 	.word	0x08010300

08000c9c <tcp_server_error>:

static void tcp_server_error(void *arg, err_t err) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
    // Handle error
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ff49 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f00e fca3 	bl	800f62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc87 	bl	80005f8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cf8:	08012edc 	.word	0x08012edc
  ldr r2, =_sbss
 8000cfc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d00:	20008544 	.word	0x20008544

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>

08000d06 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <LAN8742_RegisterBusIO+0x28>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <LAN8742_RegisterBusIO+0x28>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <LAN8742_RegisterBusIO+0x28>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e014      	b.n	8000d5e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d17c      	bne.n	8000e84 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e01c      	b.n	8000dde <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	f107 0208 	add.w	r2, r7, #8
 8000dac:	2112      	movs	r1, #18
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da03      	bge.n	8000dc0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000db8:	f06f 0304 	mvn.w	r3, #4
 8000dbc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000dbe:	e00b      	b.n	8000dd8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d105      	bne.n	8000dd8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
         break;
 8000dd6:	e005      	b.n	8000de4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b1f      	cmp	r3, #31
 8000de2:	d9df      	bls.n	8000da4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	d902      	bls.n	8000df2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dec:	f06f 0302 	mvn.w	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d145      	bne.n	8000e84 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6810      	ldr	r0, [r2, #0]
 8000e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e04:	2100      	movs	r1, #0
 8000e06:	4798      	blx	r3
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db37      	blt.n	8000e7e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6810      	ldr	r0, [r2, #0]
 8000e16:	f107 0208 	add.w	r2, r7, #8
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4798      	blx	r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db28      	blt.n	8000e76 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4798      	blx	r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e2e:	e01c      	b.n	8000e6a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4798      	blx	r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e42:	d80e      	bhi.n	8000e62 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	f107 0208 	add.w	r2, r7, #8
 8000e50:	2100      	movs	r1, #0
 8000e52:	4798      	blx	r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da07      	bge.n	8000e6a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e5a:	f06f 0304 	mvn.w	r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
                 break;
 8000e60:	e010      	b.n	8000e84 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e62:	f06f 0301 	mvn.w	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
               break;
 8000e68:	e00c      	b.n	8000e84 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1dd      	bne.n	8000e30 <LAN8742_Init+0xc6>
 8000e74:	e006      	b.n	8000e84 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e76:	f06f 0304 	mvn.w	r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e002      	b.n	8000e84 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e7e:	f06f 0303 	mvn.w	r3, #3
 8000e82:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d112      	bne.n	8000eb0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4798      	blx	r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e94:	bf00      	nop
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4798      	blx	r3
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ea8:	d9f5      	bls.n	8000e96 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 }
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6810      	ldr	r0, [r2, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da02      	bge.n	8000ee2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000edc:	f06f 0304 	mvn.w	r3, #4
 8000ee0:	e06e      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6810      	ldr	r0, [r2, #0]
 8000eea:	f107 020c 	add.w	r2, r7, #12
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da02      	bge.n	8000efe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ef8:	f06f 0304 	mvn.w	r3, #4
 8000efc:	e060      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e059      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6810      	ldr	r0, [r2, #0]
 8000f14:	f107 020c 	add.w	r2, r7, #12
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4798      	blx	r3
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da02      	bge.n	8000f28 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f22:	f06f 0304 	mvn.w	r3, #4
 8000f26:	e04b      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11b      	bne.n	8000f6a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <LAN8742_GetLinkState+0x90>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f46:	2302      	movs	r3, #2
 8000f48:	e03a      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e033      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f62:	2304      	movs	r3, #4
 8000f64:	e02c      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f66:	2305      	movs	r3, #5
 8000f68:	e02a      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6810      	ldr	r0, [r2, #0]
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	211f      	movs	r1, #31
 8000f78:	4798      	blx	r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da02      	bge.n	8000f86 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f80:	f06f 0304 	mvn.w	r3, #4
 8000f84:	e01c      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f90:	2306      	movs	r3, #6
 8000f92:	e015      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 031c 	and.w	r3, r3, #28
 8000f9a:	2b18      	cmp	r3, #24
 8000f9c:	d101      	bne.n	8000fa2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e00e      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 031c 	and.w	r3, r3, #28
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d101      	bne.n	8000fb0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e007      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 031c 	and.w	r3, r3, #28
 8000fb6:	2b14      	cmp	r3, #20
 8000fb8:	d101      	bne.n	8000fbe <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e000      	b.n	8000fc0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fbe:	2305      	movs	r3, #5
    }				
  }
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f94f 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fc44 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f967 	bl	80012fe <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f92f 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20000104 	.word	0x20000104

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000104 	.word	0x20000104

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff feb6 	bl	8001094 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d008      	beq.n	8001348 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e052      	b.n	80013ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0216 	bic.w	r2, r2, #22
 8001356:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001366:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <HAL_DMA_Abort+0x62>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001398:	e013      	b.n	80013c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139a:	f7ff fe7b 	bl	8001094 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d90c      	bls.n	80013c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e015      	b.n	80013ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e4      	bne.n	800139a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	223f      	movs	r2, #63	; 0x3f
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d004      	beq.n	8001414 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e00c      	b.n	800142e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2205      	movs	r2, #5
 8001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06c      	b.n	8001528 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2223      	movs	r2, #35	; 0x23
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f003 f999 	bl	8004798 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_ETH_Init+0xf4>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <HAL_ETH_Init+0xf4>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_ETH_Init+0xf4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4927      	ldr	r1, [pc, #156]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_ETH_Init+0xf8>)
 800149e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fdec 	bl	8001094 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014be:	e011      	b.n	80014e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014c0:	f7ff fde8 	bl	8001094 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ce:	d909      	bls.n	80014e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	22e0      	movs	r2, #224	; 0xe0
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e021      	b.n	8001528 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e4      	bne.n	80014c0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fdf0 	bl	80020dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fe97 	bl	8002230 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 feed 	bl	80022e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fe55 	bl	80021c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2210      	movs	r2, #16
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800

08001538 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001546:	2b10      	cmp	r3, #16
 8001548:	d150      	bne.n	80015ec <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2223      	movs	r2, #35	; 0x23
 800154e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f9fd 	bl	8001958 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0208 	orr.w	r2, r2, #8
 800156c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fd98 	bl	80010ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0204 	orr.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fd85 	bl	80010ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fc36 	bl	8001e1c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015de:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2223      	movs	r2, #35	; 0x23
 80015e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e000      	b.n	80015ee <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001604:	2b23      	cmp	r3, #35	; 0x23
 8001606:	d14a      	bne.n	800169e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2223      	movs	r2, #35	; 0x23
 800160c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001626:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fd27 	bl	80010ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fbd8 	bl	8001e1c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0208 	bic.w	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff fd11 	bl	80010ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2210      	movs	r2, #16
 8001696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
  }
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07c      	b.n	80017c8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d4:	2b23      	cmp	r3, #35	; 0x23
 80016d6:	d176      	bne.n	80017c6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80016d8:	2200      	movs	r2, #0
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fe6d 	bl	80023bc <ETH_Prepare_Tx_Descriptors>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	f043 0202 	orr.w	r2, r3, #2
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e065      	b.n	80017c8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016fc:	f3bf 8f4f 	dsb	sy
}
 8001700:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3206      	adds	r2, #6
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b03      	cmp	r3, #3
 8001720:	d904      	bls.n	800172c <HAL_ETH_Transmit+0x84>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	1f1a      	subs	r2, r3, #4
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3106      	adds	r1, #6
 8001738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800173c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001740:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001742:	f7ff fca7 	bl	8001094 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001748:	e037      	b.n	80017ba <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d011      	beq.n	8001780 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	f043 0208 	orr.w	r2, r3, #8
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e023      	b.n	80017c8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001786:	d018      	beq.n	80017ba <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7ff fc84 	bl	8001094 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d302      	bcc.n	800179e <HAL_ETH_Transmit+0xf6>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017b4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e006      	b.n	80017c8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dbc3      	blt.n	800174a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0a8      	b.n	800194e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001802:	2b23      	cmp	r3, #35	; 0x23
 8001804:	d001      	beq.n	800180a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0a1      	b.n	800194e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	3212      	adds	r2, #18
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001820:	f1c3 0304 	rsb	r3, r3, #4
 8001824:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001826:	e06a      	b.n	80018fe <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <HAL_ETH_ReadData+0x88>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d040      	beq.n	80018da <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800188c:	3b04      	subs	r3, #4
 800188e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018b4:	461a      	mov	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f003 f91d 	bl	8004af8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	441a      	add	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d902      	bls.n	80018ec <HAL_ETH_ReadData+0x11c>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b04      	subs	r3, #4
 80018ea:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	3212      	adds	r2, #18
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001902:	2b00      	cmp	r3, #0
 8001904:	db06      	blt.n	8001914 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	d202      	bcs.n	8001914 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d089      	beq.n	8001828 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	441a      	add	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f815 	bl	8001958 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001964:	2301      	movs	r3, #1
 8001966:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800196c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	3212      	adds	r2, #18
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001980:	e040      	b.n	8001a04 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d112      	bne.n	80019b0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f882 	bl	8004a98 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	74fb      	strb	r3, [r7, #19]
 800199e:	e007      	b.n	80019b0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80019b0:	7cfb      	ldrb	r3, [r7, #19]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d026      	beq.n	8001a04 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <ETH_UpdateDescriptor+0xe4>)
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	e003      	b.n	80019ce <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80019cc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019ce:	f3bf 8f5f 	dmb	sy
}
 80019d2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	3301      	adds	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d902      	bls.n	80019f2 <ETH_UpdateDescriptor+0x9a>
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3b04      	subs	r3, #4
 80019f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	3212      	adds	r2, #18
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <ETH_UpdateDescriptor+0xb8>
 8001a0a:	7cfb      	ldrb	r3, [r7, #19]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1b8      	bne.n	8001982 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d00c      	beq.n	8001a34 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	461a      	mov	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	80004600 	.word	0x80004600

08001a40 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	02db      	lsls	r3, r3, #11
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f023 0302 	bic.w	r3, r3, #2
 8001a7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a90:	f7ff fb00 	bl	8001094 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a96:	e00d      	b.n	8001ab4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a98:	f7ff fafc 	bl	8001094 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d301      	bcc.n	8001aac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e010      	b.n	8001ace <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ec      	bne.n	8001a98 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 031c 	and.w	r3, r3, #28
 8001af2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	02db      	lsls	r3, r3, #11
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	019b      	lsls	r3, r3, #6
 8001b04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b30:	f7ff fab0 	bl	8001094 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b36:	e00d      	b.n	8001b54 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b38:	f7ff faac 	bl	8001094 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d301      	bcc.n	8001b4c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e009      	b.n	8001b60 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ec      	bne.n	8001b38 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d9      	b.n	8001d30 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e00b      	b.n	8001d68 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d105      	bne.n	8001d66 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d5a:	6839      	ldr	r1, [r7, #0]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f883 	bl	8001e68 <ETH_SetMACConfig>

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 031c 	bic.w	r3, r3, #28
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d88:	f001 fa0e 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 8001d8c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d908      	bls.n	8001da8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d804      	bhi.n	8001da8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e027      	b.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d908      	bls.n	8001dc2 <HAL_ETH_SetMDIOClockRange+0x52>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d204      	bcs.n	8001dc2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f043 030c 	orr.w	r3, r3, #12
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e01a      	b.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d303      	bcc.n	8001dd2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d911      	bls.n	8001df6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d908      	bls.n	8001dec <HAL_ETH_SetMDIOClockRange+0x7c>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d804      	bhi.n	8001dec <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e005      	b.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e000      	b.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001df6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	01312cff 	.word	0x01312cff
 8001e0c:	02160ebf 	.word	0x02160ebf
 8001e10:	03938700 	.word	0x03938700
 8001e14:	05f5e0ff 	.word	0x05f5e0ff
 8001e18:	08f0d17f 	.word	0x08f0d17f

08001e1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e3e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff f92d 	bl	80010ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5c:	6193      	str	r3, [r2, #24]
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <ETH_SetMACConfig+0x15c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7c1b      	ldrb	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <ETH_SetMACConfig+0x28>
 8001e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e8e:	e000      	b.n	8001e92 <ETH_SetMACConfig+0x2a>
 8001e90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	7c5b      	ldrb	r3, [r3, #17]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <ETH_SetMACConfig+0x38>
 8001e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e9e:	e000      	b.n	8001ea2 <ETH_SetMACConfig+0x3a>
 8001ea0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7fdb      	ldrb	r3, [r3, #31]
 8001eae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eb0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	7f92      	ldrb	r2, [r2, #30]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d102      	bne.n	8001ec6 <ETH_SetMACConfig+0x5e>
 8001ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec4:	e000      	b.n	8001ec8 <ETH_SetMACConfig+0x60>
 8001ec6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ec8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7f1b      	ldrb	r3, [r3, #28]
 8001ece:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ed6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_SetMACConfig+0x88>
 8001eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eee:	e000      	b.n	8001ef2 <ETH_SetMACConfig+0x8a>
 8001ef0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7bdb      	ldrb	r3, [r3, #15]
 8001ef8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001efa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff f8c2 	bl	80010ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d101      	bne.n	8001f56 <ETH_SetMACConfig+0xee>
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	e000      	b.n	8001f58 <ETH_SetMACConfig+0xf0>
 8001f56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f66:	2a01      	cmp	r2, #1
 8001f68:	d101      	bne.n	8001f6e <ETH_SetMACConfig+0x106>
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	e000      	b.n	8001f70 <ETH_SetMACConfig+0x108>
 8001f6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f78:	2a01      	cmp	r2, #1
 8001f7a:	d101      	bne.n	8001f80 <ETH_SetMACConfig+0x118>
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	e000      	b.n	8001f82 <ETH_SetMACConfig+0x11a>
 8001f80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f8a:	2a01      	cmp	r2, #1
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0x12a>
 8001f8e:	2202      	movs	r2, #2
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0x12c>
 8001f92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff f87d 	bl	80010ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	ff20810f 	.word	0xff20810f

08001fc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <ETH_SetDMAConfig+0x110>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <ETH_SetDMAConfig+0x2c>
 8001fee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ff2:	e000      	b.n	8001ff6 <ETH_SetDMAConfig+0x2e>
 8001ff4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	7b5b      	ldrb	r3, [r3, #13]
 8001ffa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ffc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	7f52      	ldrb	r2, [r2, #29]
 8002002:	2a00      	cmp	r2, #0
 8002004:	d102      	bne.n	800200c <ETH_SetDMAConfig+0x44>
 8002006:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800200a:	e000      	b.n	800200e <ETH_SetDMAConfig+0x46>
 800200c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800200e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	7b9b      	ldrb	r3, [r3, #14]
 8002014:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002016:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800201c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002024:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7f9b      	ldrb	r3, [r3, #30]
 800202a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800202c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800203c:	4313      	orrs	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff f824 	bl	80010ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	791b      	ldrb	r3, [r3, #4]
 8002076:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800207c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002082:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002088:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002090:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002092:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800209a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7fe fff5 	bl	80010ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	f8de3f23 	.word	0xf8de3f23

080020dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0a6      	sub	sp, #152	; 0x98
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002118:	2300      	movs	r3, #0
 800211a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002122:	2300      	movs	r3, #0
 8002124:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800213e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fe86 	bl	8001e68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002160:	2301      	movs	r3, #1
 8002162:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800216a:	2301      	movs	r3, #1
 800216c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002196:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff08 	bl	8001fc8 <ETH_SetDMAConfig>
}
 80021b8:	bf00      	nop
 80021ba:	3798      	adds	r7, #152	; 0x98
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3305      	adds	r3, #5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3204      	adds	r2, #4
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <ETH_MACAddressConfig+0x68>)
 80021e2:	4413      	add	r3, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3302      	adds	r3, #2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	4313      	orrs	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <ETH_MACAddressConfig+0x6c>)
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40028040 	.word	0x40028040
 800222c:	40028044 	.word	0x40028044

08002230 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e03e      	b.n	80022bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	3206      	adds	r2, #6
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d80c      	bhi.n	80022a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68d9      	ldr	r1, [r3, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e004      	b.n	80022aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d9bd      	bls.n	800223e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	611a      	str	r2, [r3, #16]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e046      	b.n	800237e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800232c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002334:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	3212      	adds	r2, #18
 800234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d80c      	bhi.n	800236e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6919      	ldr	r1, [r3, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e004      	b.n	8002378 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d9b5      	bls.n	80022f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08d      	sub	sp, #52	; 0x34
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3318      	adds	r3, #24
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fe:	d007      	beq.n	8002410 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	3304      	adds	r3, #4
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002410:	2302      	movs	r3, #2
 8002412:	e103      	b.n	800261c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	3301      	adds	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800242c:	f023 031f 	bic.w	r3, r3, #31
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	6852      	ldr	r2, [r2, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	431a      	orrs	r2, r3
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	431a      	orrs	r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800249a:	f3bf 8f5f 	dmb	sy
}
 800249e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024ac:	e084      	b.n	80025b8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e005      	b.n	80024da <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	3301      	adds	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d902      	bls.n	80024ec <ETH_Prepare_Tx_Descriptors+0x130>
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	3b04      	subs	r3, #4
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800250a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800250e:	d007      	beq.n	8002520 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	3304      	adds	r3, #4
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d029      	beq.n	8002574 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
 8002532:	e019      	b.n	8002568 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002534:	f3bf 8f5f 	dmb	sy
}
 8002538:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	3301      	adds	r3, #1
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	2b03      	cmp	r3, #3
 8002550:	d902      	bls.n	8002558 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	3b04      	subs	r3, #4
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	3301      	adds	r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
 8002568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	429a      	cmp	r2, r3
 800256e:	d3e1      	bcc.n	8002534 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	e053      	b.n	800261c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	3301      	adds	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002592:	f023 031f 	bic.w	r3, r3, #31
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	6852      	ldr	r2, [r2, #4]
 800259a:	431a      	orrs	r2, r3
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80025a6:	f3bf 8f5f 	dmb	sy
}
 80025aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f af76 	bne.w	80024ae <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e005      	b.n	80025e2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f2:	6979      	ldr	r1, [r7, #20]
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	3304      	adds	r3, #4
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002602:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002616:	b662      	cpsie	i
}
 8002618:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3734      	adds	r7, #52	; 0x34
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e16b      	b.n	800291c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	f040 815a 	bne.w	8002916 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d005      	beq.n	800267a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	2b02      	cmp	r3, #2
 8002678:	d130      	bne.n	80026dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d017      	beq.n	8002718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d123      	bne.n	800276c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80b4 	beq.w	8002916 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b60      	ldr	r3, [pc, #384]	; (8002934 <HAL_GPIO_Init+0x30c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a5f      	ldr	r2, [pc, #380]	; (8002934 <HAL_GPIO_Init+0x30c>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_GPIO_Init+0x30c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_GPIO_Init+0x310>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_GPIO_Init+0x314>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02b      	beq.n	800284e <HAL_GPIO_Init+0x226>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a51      	ldr	r2, [pc, #324]	; (8002940 <HAL_GPIO_Init+0x318>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d025      	beq.n	800284a <HAL_GPIO_Init+0x222>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_GPIO_Init+0x31c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <HAL_GPIO_Init+0x21e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4f      	ldr	r2, [pc, #316]	; (8002948 <HAL_GPIO_Init+0x320>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x21a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_GPIO_Init+0x324>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x216>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_GPIO_Init+0x328>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x212>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_GPIO_Init+0x32c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x20e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4b      	ldr	r2, [pc, #300]	; (8002958 <HAL_GPIO_Init+0x330>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x20a>
 800282e:	2307      	movs	r3, #7
 8002830:	e00e      	b.n	8002850 <HAL_GPIO_Init+0x228>
 8002832:	2308      	movs	r3, #8
 8002834:	e00c      	b.n	8002850 <HAL_GPIO_Init+0x228>
 8002836:	2306      	movs	r3, #6
 8002838:	e00a      	b.n	8002850 <HAL_GPIO_Init+0x228>
 800283a:	2305      	movs	r3, #5
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x228>
 800283e:	2304      	movs	r3, #4
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x228>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x228>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x228>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x228>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <HAL_GPIO_Init+0x310>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_GPIO_Init+0x334>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002892:	4a32      	ldr	r2, [pc, #200]	; (800295c <HAL_GPIO_Init+0x334>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_GPIO_Init+0x334>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <HAL_GPIO_Init+0x334>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_GPIO_Init+0x334>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_GPIO_Init+0x334>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_GPIO_Init+0x334>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_GPIO_Init+0x334>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f ae90 	bls.w	8002644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40021400 	.word	0x40021400
 8002954:	40021800 	.word	0x40021800
 8002958:	40021c00 	.word	0x40021c00
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e267      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d075      	beq.n	8002a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d112      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d10b      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05b      	beq.n	8002a68 <HAL_RCC_OscConfig+0x108>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e242      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x74>
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6f      	ldr	r2, [pc, #444]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6c      	ldr	r2, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029f8:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fb3c 	bl	8001094 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fb38 	bl	8001094 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e207      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xc0>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fb28 	bl	8001094 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe fb24 	bl	8001094 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1f3      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0xe8>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4937      	ldr	r1, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fadd 	bl	8001094 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe fad9 	bl	8001094 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1a8      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4925      	ldr	r1, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fabc 	bl	8001094 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b20:	f7fe fab8 	bl	8001094 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e187      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fa9c 	bl	8001094 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b60:	f7fe fa98 	bl	8001094 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e167      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x200>
 8002b7e:	e01b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fa85 	bl	8001094 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fa81 	bl	8001094 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d907      	bls.n	8002bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e150      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ea      	bne.n	8002b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8097 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a7c      	ldr	r2, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b7a      	ldr	r3, [pc, #488]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a73      	ldr	r2, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fa41 	bl	8001094 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fa3d 	bl	8001094 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e10c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a63      	ldr	r2, [pc, #396]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c6c:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fa02 	bl	8001094 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe f9fe 	bl	8001094 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0cb      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7fe f9ec 	bl	8001094 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f9e8 	bl	8001094 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0b5      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	4a38      	ldr	r2, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a1 	beq.w	8002e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d05c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d141      	bne.n	8002d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe f9bc 	bl	8001094 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe f9b8 	bl	8001094 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e087      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe f991 	bl	8001094 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe f98d 	bl	8001094 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e05c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x416>
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f97a 	bl	8001094 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe f976 	bl	8001094 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e045      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e038      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d028      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cc      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d90c      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d044      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e067      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4934      	ldr	r1, [pc, #208]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7fe f8a8 	bl	8001094 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7fe f8a4 	bl	8001094 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d20c      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f808 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00
 800300c:	40023800 	.word	0x40023800
 8003010:	08012ce8 	.word	0x08012ce8
 8003014:	20000000 	.word	0x20000000
 8003018:	20000004 	.word	0x20000004

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b090      	sub	sp, #64	; 0x40
 8003022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
 8003028:	2300      	movs	r3, #0
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302c:	2300      	movs	r3, #0
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00d      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x40>
 8003040:	2b08      	cmp	r3, #8
 8003042:	f200 80a1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x16c>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x34>
 800304a:	2b04      	cmp	r3, #4
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x3a>
 800304e:	e09b      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003054:	e09b      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800305a:	e098      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	627a      	str	r2, [r7, #36]	; 0x24
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003084:	2100      	movs	r1, #0
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003088:	fb03 f201 	mul.w	r2, r3, r1
 800308c:	2300      	movs	r3, #0
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	4413      	add	r3, r2
 8003094:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003096:	fba0 1202 	umull	r1, r2, r0, r2
 800309a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800309c:	460a      	mov	r2, r1
 800309e:	62ba      	str	r2, [r7, #40]	; 0x28
 80030a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a2:	4413      	add	r3, r2
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	2200      	movs	r2, #0
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030b6:	f7fd f8e3 	bl	8000280 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4613      	mov	r3, r2
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	e053      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	2200      	movs	r2, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	617a      	str	r2, [r7, #20]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030d6:	f04f 0b00 	mov.w	fp, #0
 80030da:	4652      	mov	r2, sl
 80030dc:	465b      	mov	r3, fp
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	ebb2 080a 	subs.w	r8, r2, sl
 80030f6:	eb63 090b 	sbc.w	r9, r3, fp
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800310a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800310e:	ebb2 0408 	subs.w	r4, r2, r8
 8003112:	eb63 0509 	sbc.w	r5, r3, r9
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	00eb      	lsls	r3, r5, #3
 8003120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003124:	00e2      	lsls	r2, r4, #3
 8003126:	4614      	mov	r4, r2
 8003128:	461d      	mov	r5, r3
 800312a:	eb14 030a 	adds.w	r3, r4, sl
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	eb45 030b 	adc.w	r3, r5, fp
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003142:	4629      	mov	r1, r5
 8003144:	028b      	lsls	r3, r1, #10
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800314c:	4621      	mov	r1, r4
 800314e:	028a      	lsls	r2, r1, #10
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	2200      	movs	r2, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	60fa      	str	r2, [r7, #12]
 800315c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003160:	f7fd f88e 	bl	8000280 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800317c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003190:	4618      	mov	r0, r3
 8003192:	3740      	adds	r7, #64	; 0x40
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	017d7840 	.word	0x017d7840

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08012cf8 	.word	0x08012cf8

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031ec:	f7ff ffdc 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0b5b      	lsrs	r3, r3, #13
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08012cf8 	.word	0x08012cf8

08003210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e03f      	b.n	80032a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fb4e 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fd23 	bl	8003ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d130      	bne.n	8003326 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Transmit_IT+0x26>
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e029      	b.n	8003328 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Transmit_IT+0x38>
 80032de:	2302      	movs	r3, #2
 80032e0:	e022      	b.n	8003328 <HAL_UART_Transmit_IT+0x7e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	; 0x21
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003320:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	d11d      	bne.n	800338a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_UART_Receive_IT+0x26>
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e016      	b.n	800338c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_UART_Receive_IT+0x38>
 8003368:	2302      	movs	r3, #2
 800336a:	e00f      	b.n	800338c <HAL_UART_Receive_IT+0x58>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	461a      	mov	r2, r3
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fab5 	bl	80038f0 <UART_Start_Receive_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	e000      	b.n	800338c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0ba      	sub	sp, #232	; 0xe8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_UART_IRQHandler+0x66>
 80033e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fb99 	bl	8003b2a <UART_Receive_IT>
      return;
 80033f8:	e256      	b.n	80038a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80de 	beq.w	80035c0 <HAL_UART_IRQHandler+0x22c>
 8003404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80d1 	beq.w	80035c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_UART_IRQHandler+0xae>
 800342a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_UART_IRQHandler+0xd2>
 800344e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_UART_IRQHandler+0xf6>
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d011      	beq.n	80034ba <HAL_UART_IRQHandler+0x126>
 8003496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0208 	orr.w	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 81ed 	beq.w	800389e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_UART_IRQHandler+0x14e>
 80034d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb24 	bl	8003b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_UART_IRQHandler+0x17a>
 8003506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04f      	beq.n	80035ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa2c 	bl	800396c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d141      	bne.n	80035a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3314      	adds	r3, #20
 800354a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800354e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800355a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1d9      	bne.n	8003522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4a7d      	ldr	r2, [pc, #500]	; (8003770 <HAL_UART_IRQHandler+0x3dc>)
 800357c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd ff37 	bl	80013f6 <HAL_DMA_Abort_IT>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003598:	4610      	mov	r0, r2
 800359a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	e00e      	b.n	80035bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f990 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	e00a      	b.n	80035bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f98c 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e006      	b.n	80035bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f988 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035ba:	e170      	b.n	800389e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	bf00      	nop
    return;
 80035be:	e16e      	b.n	800389e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 814a 	bne.w	800385e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8143 	beq.w	800385e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 813c 	beq.w	800385e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	f040 80b4 	bne.w	8003774 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8140 	beq.w	80038a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362a:	429a      	cmp	r2, r3
 800362c:	f080 8139 	bcs.w	80038a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003636:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	f000 8088 	beq.w	8003756 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800365c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800367e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800368a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1d9      	bne.n	8003646 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e1      	bne.n	8003692 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3314      	adds	r3, #20
 80036ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e3      	bne.n	80036ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003726:	f023 0310 	bic.w	r3, r3, #16
 800372a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003738:	65ba      	str	r2, [r7, #88]	; 0x58
 800373a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800373e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e3      	bne.n	8003714 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fde0 	bl	8001316 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375e:	b29b      	uxth	r3, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	b29b      	uxth	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8b6 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800376c:	e099      	b.n	80038a2 <HAL_UART_IRQHandler+0x50e>
 800376e:	bf00      	nop
 8003770:	08003a33 	.word	0x08003a33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377c:	b29b      	uxth	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 808b 	beq.w	80038a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8086 	beq.w	80038a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037be:	647a      	str	r2, [r7, #68]	; 0x44
 80037c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e3      	bne.n	800379a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	623b      	str	r3, [r7, #32]
   return(result);
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037f6:	633a      	str	r2, [r7, #48]	; 0x30
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e3      	bne.n	80037d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	60fb      	str	r3, [r7, #12]
   return(result);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0310 	bic.w	r3, r3, #16
 800382e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	617b      	str	r3, [r7, #20]
   return(result);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e3      	bne.n	8003818 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f83e 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385c:	e023      	b.n	80038a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_UART_IRQHandler+0x4ea>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8ef 	bl	8003a5a <UART_Transmit_IT>
    return;
 800387c:	e014      	b.n	80038a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <HAL_UART_IRQHandler+0x514>
 800388a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f92f 	bl	8003afa <UART_EndTransmit_IT>
    return;
 800389c:	e004      	b.n	80038a8 <HAL_UART_IRQHandler+0x514>
    return;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_UART_IRQHandler+0x514>
      return;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_UART_IRQHandler+0x514>
      return;
 80038a6:	bf00      	nop
  }
}
 80038a8:	37e8      	adds	r7, #232	; 0xe8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop

080038b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2222      	movs	r2, #34	; 0x22
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0220 	orr.w	r2, r2, #32
 800395c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b095      	sub	sp, #84	; 0x54
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003994:	643a      	str	r2, [r7, #64]	; 0x40
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800399a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	64bb      	str	r3, [r7, #72]	; 0x48
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d119      	bne.n	8003a18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f023 0310 	bic.w	r3, r3, #16
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a04:	61ba      	str	r2, [r7, #24]
 8003a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	613b      	str	r3, [r7, #16]
   return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a26:	bf00      	nop
 8003a28:	3754      	adds	r7, #84	; 0x54
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff ff39 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b21      	cmp	r3, #33	; 0x21
 8003a6c:	d13e      	bne.n	8003aec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	d114      	bne.n	8003aa2 <UART_Transmit_IT+0x48>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d110      	bne.n	8003aa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]
 8003aa0:	e008      	b.n	8003ab4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	1c59      	adds	r1, r3, #1
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6211      	str	r1, [r2, #32]
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10f      	bne.n	8003ae8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fec8 	bl	80038b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b08c      	sub	sp, #48	; 0x30
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b22      	cmp	r3, #34	; 0x22
 8003b3c:	f040 80ab 	bne.w	8003c96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b48:	d117      	bne.n	8003b7a <UART_Receive_IT+0x50>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
 8003b78:	e026      	b.n	8003bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d007      	beq.n	8003b9e <UART_Receive_IT+0x74>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <UART_Receive_IT+0x82>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	e008      	b.n	8003bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d15a      	bne.n	8003c92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0220 	bic.w	r2, r2, #32
 8003bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d135      	bne.n	8003c88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f023 0310 	bic.w	r3, r3, #16
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	623a      	str	r2, [r7, #32]
 8003c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69f9      	ldr	r1, [r7, #28]
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d10a      	bne.n	8003c7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe29 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
 8003c86:	e002      	b.n	8003c8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fc fda7 	bl	80007dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e002      	b.n	8003c98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3730      	adds	r7, #48	; 0x30
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b0c0      	sub	sp, #256	; 0x100
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	68d9      	ldr	r1, [r3, #12]
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	ea40 0301 	orr.w	r3, r0, r1
 8003cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf8:	f021 010c 	bic.w	r1, r1, #12
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d06:	430b      	orrs	r3, r1
 8003d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	6999      	ldr	r1, [r3, #24]
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	ea40 0301 	orr.w	r3, r0, r1
 8003d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b8f      	ldr	r3, [pc, #572]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d005      	beq.n	8003d40 <UART_SetConfig+0xa0>
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b8d      	ldr	r3, [pc, #564]	; (8003f70 <UART_SetConfig+0x2d0>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d104      	bne.n	8003d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff fa52 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8003d44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d48:	e003      	b.n	8003d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d4a:	f7ff fa39 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8003d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5c:	f040 810c 	bne.w	8003f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d82:	4621      	mov	r1, r4
 8003d84:	eb12 0801 	adds.w	r8, r2, r1
 8003d88:	4629      	mov	r1, r5
 8003d8a:	eb43 0901 	adc.w	r9, r3, r1
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003da2:	4690      	mov	r8, r2
 8003da4:	4699      	mov	r9, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	eb18 0303 	adds.w	r3, r8, r3
 8003dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003db0:	462b      	mov	r3, r5
 8003db2:	eb49 0303 	adc.w	r3, r9, r3
 8003db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	18db      	adds	r3, r3, r3
 8003dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	eb42 0303 	adc.w	r3, r2, r3
 8003dda:	657b      	str	r3, [r7, #84]	; 0x54
 8003ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003de4:	f7fc fa4c 	bl	8000280 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003dee:	fba3 2302 	umull	r2, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	011c      	lsls	r4, r3, #4
 8003df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e08:	4642      	mov	r2, r8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	1891      	adds	r1, r2, r2
 8003e0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e10:	415b      	adcs	r3, r3
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e18:	4641      	mov	r1, r8
 8003e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb43 0b01 	adc.w	fp, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e38:	4692      	mov	sl, r2
 8003e3a:	469b      	mov	fp, r3
 8003e3c:	4643      	mov	r3, r8
 8003e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e46:	464b      	mov	r3, r9
 8003e48:	eb4b 0303 	adc.w	r3, fp, r3
 8003e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e64:	460b      	mov	r3, r1
 8003e66:	18db      	adds	r3, r3, r3
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	eb42 0303 	adc.w	r3, r2, r3
 8003e70:	647b      	str	r3, [r7, #68]	; 0x44
 8003e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e7a:	f7fc fa01 	bl	8000280 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003e86:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2264      	movs	r2, #100	; 0x64
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	1acb      	subs	r3, r1, r3
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea8:	441c      	add	r4, r3
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ecc:	4641      	mov	r1, r8
 8003ece:	1851      	adds	r1, r2, r1
 8003ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	414b      	adcs	r3, r1
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	00cb      	lsls	r3, r1, #3
 8003ee8:	4651      	mov	r1, sl
 8003eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eee:	4651      	mov	r1, sl
 8003ef0:	00ca      	lsls	r2, r1, #3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f00:	464b      	mov	r3, r9
 8003f02:	460a      	mov	r2, r1
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f36:	f7fc f9a3 	bl	8000280 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	; 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4422      	add	r2, r4
 8003f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f68:	e106      	b.n	8004178 <UART_SetConfig+0x4d8>
 8003f6a:	bf00      	nop
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	40011400 	.word	0x40011400
 8003f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	1891      	adds	r1, r2, r2
 8003f90:	6239      	str	r1, [r7, #32]
 8003f92:	415b      	adcs	r3, r3
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
 8003f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	1854      	adds	r4, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb43 0501 	adc.w	r5, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	00eb      	lsls	r3, r5, #3
 8003fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb2:	00e2      	lsls	r2, r4, #3
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	4643      	mov	r3, r8
 8003fba:	18e3      	adds	r3, r4, r3
 8003fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	eb45 0303 	adc.w	r3, r5, r3
 8003fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	008b      	lsls	r3, r1, #2
 8003fea:	4621      	mov	r1, r4
 8003fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	008a      	lsls	r2, r1, #2
 8003ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ff8:	f7fc f942 	bl	8000280 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4b60      	ldr	r3, [pc, #384]	; (8004184 <UART_SetConfig+0x4e4>)
 8004002:	fba3 2302 	umull	r2, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	011c      	lsls	r4, r3, #4
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004014:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	61b9      	str	r1, [r7, #24]
 8004024:	415b      	adcs	r3, r3
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800402c:	4641      	mov	r1, r8
 800402e:	1851      	adds	r1, r2, r1
 8004030:	6139      	str	r1, [r7, #16]
 8004032:	4649      	mov	r1, r9
 8004034:	414b      	adcs	r3, r1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004044:	4659      	mov	r1, fp
 8004046:	00cb      	lsls	r3, r1, #3
 8004048:	4651      	mov	r1, sl
 800404a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404e:	4651      	mov	r1, sl
 8004050:	00ca      	lsls	r2, r1, #3
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	4603      	mov	r3, r0
 8004058:	4642      	mov	r2, r8
 800405a:	189b      	adds	r3, r3, r2
 800405c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004060:	464b      	mov	r3, r9
 8004062:	460a      	mov	r2, r1
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	67bb      	str	r3, [r7, #120]	; 0x78
 8004076:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004084:	4649      	mov	r1, r9
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	4641      	mov	r1, r8
 800408a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408e:	4641      	mov	r1, r8
 8004090:	008a      	lsls	r2, r1, #2
 8004092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004096:	f7fc f8f3 	bl	8000280 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <UART_SetConfig+0x4e4>)
 80040a2:	fba3 2301 	umull	r2, r3, r3, r1
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2264      	movs	r2, #100	; 0x64
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	1acb      	subs	r3, r1, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a33      	ldr	r2, [pc, #204]	; (8004184 <UART_SetConfig+0x4e4>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	441c      	add	r4, r3
 80040c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c6:	2200      	movs	r2, #0
 80040c8:	673b      	str	r3, [r7, #112]	; 0x70
 80040ca:	677a      	str	r2, [r7, #116]	; 0x74
 80040cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	415b      	adcs	r3, r3
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e0:	4641      	mov	r1, r8
 80040e2:	1851      	adds	r1, r2, r1
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	4649      	mov	r1, r9
 80040e8:	414b      	adcs	r3, r1
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f8:	4659      	mov	r1, fp
 80040fa:	00cb      	lsls	r3, r1, #3
 80040fc:	4651      	mov	r1, sl
 80040fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004102:	4651      	mov	r1, sl
 8004104:	00ca      	lsls	r2, r1, #3
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	4603      	mov	r3, r0
 800410c:	4642      	mov	r2, r8
 800410e:	189b      	adds	r3, r3, r2
 8004110:	66bb      	str	r3, [r7, #104]	; 0x68
 8004112:	464b      	mov	r3, r9
 8004114:	460a      	mov	r2, r1
 8004116:	eb42 0303 	adc.w	r3, r2, r3
 800411a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	663b      	str	r3, [r7, #96]	; 0x60
 8004126:	667a      	str	r2, [r7, #100]	; 0x64
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004134:	4649      	mov	r1, r9
 8004136:	008b      	lsls	r3, r1, #2
 8004138:	4641      	mov	r1, r8
 800413a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800413e:	4641      	mov	r1, r8
 8004140:	008a      	lsls	r2, r1, #2
 8004142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004146:	f7fc f89b 	bl	8000280 <__aeabi_uldivmod>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <UART_SetConfig+0x4e4>)
 8004150:	fba3 1302 	umull	r1, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	2164      	movs	r1, #100	; 0x64
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	3332      	adds	r3, #50	; 0x32
 8004162:	4a08      	ldr	r2, [pc, #32]	; (8004184 <UART_SetConfig+0x4e4>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4422      	add	r2, r4
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800417e:	46bd      	mov	sp, r7
 8004180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004184:	51eb851f 	.word	0x51eb851f

08004188 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800418e:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004190:	22c0      	movs	r2, #192	; 0xc0
 8004192:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004194:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004196:	22a8      	movs	r2, #168	; 0xa8
 8004198:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800419a:	4b8a      	ldr	r3, [pc, #552]	; (80043c4 <MX_LWIP_Init+0x23c>)
 800419c:	2200      	movs	r2, #0
 800419e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041a2:	220a      	movs	r2, #10
 80041a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80041a6:	4b88      	ldr	r3, [pc, #544]	; (80043c8 <MX_LWIP_Init+0x240>)
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041ac:	4b86      	ldr	r3, [pc, #536]	; (80043c8 <MX_LWIP_Init+0x240>)
 80041ae:	22ff      	movs	r2, #255	; 0xff
 80041b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <MX_LWIP_Init+0x240>)
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80041b8:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <MX_LWIP_Init+0x240>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80041be:	4b83      	ldr	r3, [pc, #524]	; (80043cc <MX_LWIP_Init+0x244>)
 80041c0:	22c0      	movs	r2, #192	; 0xc0
 80041c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80041c4:	4b81      	ldr	r3, [pc, #516]	; (80043cc <MX_LWIP_Init+0x244>)
 80041c6:	22a8      	movs	r2, #168	; 0xa8
 80041c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80041ca:	4b80      	ldr	r3, [pc, #512]	; (80043cc <MX_LWIP_Init+0x244>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80041d0:	4b7e      	ldr	r3, [pc, #504]	; (80043cc <MX_LWIP_Init+0x244>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80041d6:	f000 fcfd 	bl	8004bd4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	061a      	lsls	r2, r3, #24
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	431a      	orrs	r2, r3
 80041e8:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041ea:	789b      	ldrb	r3, [r3, #2]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4313      	orrs	r3, r2
 80041f0:	4a74      	ldr	r2, [pc, #464]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041f2:	78d2      	ldrb	r2, [r2, #3]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	061a      	lsls	r2, r3, #24
 80041f8:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <MX_LWIP_Init+0x23c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	0619      	lsls	r1, r3, #24
 80041fe:	4b71      	ldr	r3, [pc, #452]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	4319      	orrs	r1, r3
 8004206:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004208:	789b      	ldrb	r3, [r3, #2]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	430b      	orrs	r3, r1
 800420e:	496d      	ldr	r1, [pc, #436]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004210:	78c9      	ldrb	r1, [r1, #3]
 8004212:	430b      	orrs	r3, r1
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800421a:	431a      	orrs	r2, r3
 800421c:	4b69      	ldr	r3, [pc, #420]	; (80043c4 <MX_LWIP_Init+0x23c>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	0619      	lsls	r1, r3, #24
 8004222:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	4319      	orrs	r1, r3
 800422a:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <MX_LWIP_Init+0x23c>)
 800422c:	789b      	ldrb	r3, [r3, #2]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	430b      	orrs	r3, r1
 8004232:	4964      	ldr	r1, [pc, #400]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004234:	78c9      	ldrb	r1, [r1, #3]
 8004236:	430b      	orrs	r3, r1
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800423e:	431a      	orrs	r2, r3
 8004240:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0619      	lsls	r1, r3, #24
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	4319      	orrs	r1, r3
 800424e:	4b5d      	ldr	r3, [pc, #372]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004250:	789b      	ldrb	r3, [r3, #2]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	430b      	orrs	r3, r1
 8004256:	495b      	ldr	r1, [pc, #364]	; (80043c4 <MX_LWIP_Init+0x23c>)
 8004258:	78c9      	ldrb	r1, [r1, #3]
 800425a:	430b      	orrs	r3, r1
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	4313      	orrs	r3, r2
 8004260:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <MX_LWIP_Init+0x248>)
 8004262:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004264:	4b58      	ldr	r3, [pc, #352]	; (80043c8 <MX_LWIP_Init+0x240>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	061a      	lsls	r2, r3, #24
 800426a:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <MX_LWIP_Init+0x240>)
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	041b      	lsls	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <MX_LWIP_Init+0x240>)
 8004274:	789b      	ldrb	r3, [r3, #2]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4313      	orrs	r3, r2
 800427a:	4a53      	ldr	r2, [pc, #332]	; (80043c8 <MX_LWIP_Init+0x240>)
 800427c:	78d2      	ldrb	r2, [r2, #3]
 800427e:	4313      	orrs	r3, r2
 8004280:	061a      	lsls	r2, r3, #24
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <MX_LWIP_Init+0x240>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	0619      	lsls	r1, r3, #24
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <MX_LWIP_Init+0x240>)
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	4319      	orrs	r1, r3
 8004290:	4b4d      	ldr	r3, [pc, #308]	; (80043c8 <MX_LWIP_Init+0x240>)
 8004292:	789b      	ldrb	r3, [r3, #2]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	430b      	orrs	r3, r1
 8004298:	494b      	ldr	r1, [pc, #300]	; (80043c8 <MX_LWIP_Init+0x240>)
 800429a:	78c9      	ldrb	r1, [r1, #3]
 800429c:	430b      	orrs	r3, r1
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042a4:	431a      	orrs	r2, r3
 80042a6:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	0619      	lsls	r1, r3, #24
 80042ac:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	4319      	orrs	r1, r3
 80042b4:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042b6:	789b      	ldrb	r3, [r3, #2]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	430b      	orrs	r3, r1
 80042bc:	4942      	ldr	r1, [pc, #264]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042be:	78c9      	ldrb	r1, [r1, #3]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042c8:	431a      	orrs	r2, r3
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	0619      	lsls	r1, r3, #24
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	4319      	orrs	r1, r3
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	430b      	orrs	r3, r1
 80042e0:	4939      	ldr	r1, [pc, #228]	; (80043c8 <MX_LWIP_Init+0x240>)
 80042e2:	78c9      	ldrb	r1, [r1, #3]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	4313      	orrs	r3, r2
 80042ea:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <MX_LWIP_Init+0x24c>)
 80042ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80042ee:	4b37      	ldr	r3, [pc, #220]	; (80043cc <MX_LWIP_Init+0x244>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	061a      	lsls	r2, r3, #24
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <MX_LWIP_Init+0x244>)
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	4b33      	ldr	r3, [pc, #204]	; (80043cc <MX_LWIP_Init+0x244>)
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	4313      	orrs	r3, r2
 8004304:	4a31      	ldr	r2, [pc, #196]	; (80043cc <MX_LWIP_Init+0x244>)
 8004306:	78d2      	ldrb	r2, [r2, #3]
 8004308:	4313      	orrs	r3, r2
 800430a:	061a      	lsls	r2, r3, #24
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <MX_LWIP_Init+0x244>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	0619      	lsls	r1, r3, #24
 8004312:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <MX_LWIP_Init+0x244>)
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	4319      	orrs	r1, r3
 800431a:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <MX_LWIP_Init+0x244>)
 800431c:	789b      	ldrb	r3, [r3, #2]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	430b      	orrs	r3, r1
 8004322:	492a      	ldr	r1, [pc, #168]	; (80043cc <MX_LWIP_Init+0x244>)
 8004324:	78c9      	ldrb	r1, [r1, #3]
 8004326:	430b      	orrs	r3, r1
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800432e:	431a      	orrs	r2, r3
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <MX_LWIP_Init+0x244>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	0619      	lsls	r1, r3, #24
 8004336:	4b25      	ldr	r3, [pc, #148]	; (80043cc <MX_LWIP_Init+0x244>)
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	4319      	orrs	r1, r3
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <MX_LWIP_Init+0x244>)
 8004340:	789b      	ldrb	r3, [r3, #2]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	430b      	orrs	r3, r1
 8004346:	4921      	ldr	r1, [pc, #132]	; (80043cc <MX_LWIP_Init+0x244>)
 8004348:	78c9      	ldrb	r1, [r1, #3]
 800434a:	430b      	orrs	r3, r1
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004352:	431a      	orrs	r2, r3
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <MX_LWIP_Init+0x244>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	0619      	lsls	r1, r3, #24
 800435a:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <MX_LWIP_Init+0x244>)
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	4319      	orrs	r1, r3
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <MX_LWIP_Init+0x244>)
 8004364:	789b      	ldrb	r3, [r3, #2]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	430b      	orrs	r3, r1
 800436a:	4918      	ldr	r1, [pc, #96]	; (80043cc <MX_LWIP_Init+0x244>)
 800436c:	78c9      	ldrb	r1, [r1, #3]
 800436e:	430b      	orrs	r3, r1
 8004370:	0e1b      	lsrs	r3, r3, #24
 8004372:	4313      	orrs	r3, r2
 8004374:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <MX_LWIP_Init+0x250>)
 8004376:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <MX_LWIP_Init+0x254>)
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <MX_LWIP_Init+0x258>)
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	2300      	movs	r3, #0
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <MX_LWIP_Init+0x250>)
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <MX_LWIP_Init+0x24c>)
 8004388:	4911      	ldr	r1, [pc, #68]	; (80043d0 <MX_LWIP_Init+0x248>)
 800438a:	4816      	ldr	r0, [pc, #88]	; (80043e4 <MX_LWIP_Init+0x25c>)
 800438c:	f001 f90e 	bl	80055ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004390:	4814      	ldr	r0, [pc, #80]	; (80043e4 <MX_LWIP_Init+0x25c>)
 8004392:	f001 fabd 	bl	8005910 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <MX_LWIP_Init+0x25c>)
 8004398:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043a8:	480e      	ldr	r0, [pc, #56]	; (80043e4 <MX_LWIP_Init+0x25c>)
 80043aa:	f001 fac1 	bl	8005930 <netif_set_up>
 80043ae:	e002      	b.n	80043b6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043b0:	480c      	ldr	r0, [pc, #48]	; (80043e4 <MX_LWIP_Init+0x25c>)
 80043b2:	f001 fb29 	bl	8005a08 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80043b6:	490c      	ldr	r1, [pc, #48]	; (80043e8 <MX_LWIP_Init+0x260>)
 80043b8:	480a      	ldr	r0, [pc, #40]	; (80043e4 <MX_LWIP_Init+0x25c>)
 80043ba:	f001 fbbb 	bl	8005b34 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000014c 	.word	0x2000014c
 80043c8:	20000150 	.word	0x20000150
 80043cc:	20000154 	.word	0x20000154
 80043d0:	20000140 	.word	0x20000140
 80043d4:	20000144 	.word	0x20000144
 80043d8:	20000148 	.word	0x20000148
 80043dc:	0800f119 	.word	0x0800f119
 80043e0:	080046f9 	.word	0x080046f9
 80043e4:	2000010c 	.word	0x2000010c
 80043e8:	0800443d 	.word	0x0800443d

080043ec <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80043f4:	f7fc fe4e 	bl	8001094 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <Ethernet_Link_Periodic_Handle+0x30>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b63      	cmp	r3, #99	; 0x63
 8004402:	d907      	bls.n	8004414 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004404:	f7fc fe46 	bl	8001094 <HAL_GetTick>
 8004408:	4603      	mov	r3, r0
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <Ethernet_Link_Periodic_Handle+0x30>)
 800440c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fab6 	bl	8004980 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000108 	.word	0x20000108

08004420 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004424:	4804      	ldr	r0, [pc, #16]	; (8004438 <MX_LWIP_Process+0x18>)
 8004426:	f000 f947 	bl	80046b8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800442a:	f008 fa89 	bl	800c940 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800442e:	4802      	ldr	r0, [pc, #8]	; (8004438 <MX_LWIP_Process+0x18>)
 8004430:	f7ff ffdc 	bl	80043ec <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2000010c 	.word	0x2000010c

0800443c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800445c:	4b40      	ldr	r3, [pc, #256]	; (8004560 <low_level_init+0x110>)
 800445e:	4a41      	ldr	r2, [pc, #260]	; (8004564 <low_level_init+0x114>)
 8004460:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004462:	2300      	movs	r3, #0
 8004464:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800446a:	23e1      	movs	r3, #225	; 0xe1
 800446c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004476:	2300      	movs	r3, #0
 8004478:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800447a:	4a39      	ldr	r2, [pc, #228]	; (8004560 <low_level_init+0x110>)
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004482:	4b37      	ldr	r3, [pc, #220]	; (8004560 <low_level_init+0x110>)
 8004484:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004488:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <low_level_init+0x110>)
 800448c:	4a36      	ldr	r2, [pc, #216]	; (8004568 <low_level_init+0x118>)
 800448e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <low_level_init+0x110>)
 8004492:	4a36      	ldr	r2, [pc, #216]	; (800456c <low_level_init+0x11c>)
 8004494:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004496:	4b32      	ldr	r3, [pc, #200]	; (8004560 <low_level_init+0x110>)
 8004498:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800449c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800449e:	4830      	ldr	r0, [pc, #192]	; (8004560 <low_level_init+0x110>)
 80044a0:	f7fc ffcc 	bl	800143c <HAL_ETH_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80044a8:	2238      	movs	r2, #56	; 0x38
 80044aa:	2100      	movs	r1, #0
 80044ac:	4830      	ldr	r0, [pc, #192]	; (8004570 <low_level_init+0x120>)
 80044ae:	f00b f86e 	bl	800f58e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <low_level_init+0x120>)
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <low_level_init+0x120>)
 80044ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80044be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <low_level_init+0x120>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80044c6:	482b      	ldr	r0, [pc, #172]	; (8004574 <low_level_init+0x124>)
 80044c8:	f000 ff38 	bl	800533c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2206      	movs	r2, #6
 80044d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <low_level_init+0x110>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <low_level_init+0x110>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	785a      	ldrb	r2, [r3, #1]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <low_level_init+0x110>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	789a      	ldrb	r2, [r3, #2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <low_level_init+0x110>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	78da      	ldrb	r2, [r3, #3]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <low_level_init+0x110>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	791a      	ldrb	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <low_level_init+0x110>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	795a      	ldrb	r2, [r3, #5]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004522:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800452a:	f043 030a 	orr.w	r3, r3, #10
 800452e:	b2da      	uxtb	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004536:	4910      	ldr	r1, [pc, #64]	; (8004578 <low_level_init+0x128>)
 8004538:	4810      	ldr	r0, [pc, #64]	; (800457c <low_level_init+0x12c>)
 800453a:	f7fc fbe4 	bl	8000d06 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800453e:	480f      	ldr	r0, [pc, #60]	; (800457c <low_level_init+0x12c>)
 8004540:	f7fc fc13 	bl	8000d6a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa18 	bl	8004980 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004550:	e001      	b.n	8004556 <low_level_init+0x106>
    Error_Handler();
 8004552:	f7fc f973 	bl	800083c <Error_Handler>
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20004c24 	.word	0x20004c24
 8004564:	40028000 	.word	0x40028000
 8004568:	20004b84 	.word	0x20004b84
 800456c:	20004ae4 	.word	0x20004ae4
 8004570:	20004cd4 	.word	0x20004cd4
 8004574:	08012d00 	.word	0x08012d00
 8004578:	2000000c 	.word	0x2000000c
 800457c:	20004d0c 	.word	0x20004d0c

08004580 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b092      	sub	sp, #72	; 0x48
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004598:	f107 030c 	add.w	r3, r7, #12
 800459c:	2230      	movs	r2, #48	; 0x30
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f00a fff4 	bl	800f58e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	2230      	movs	r2, #48	; 0x30
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00a ffed 	bl	800f58e <memset>

  for(q = p; q != NULL; q = q->next)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40
 80045b8:	e045      	b.n	8004646 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80045ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d902      	bls.n	80045c6 <low_level_output+0x46>
      return ERR_IF;
 80045c0:	f06f 030b 	mvn.w	r3, #11
 80045c4:	e055      	b.n	8004672 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	3348      	adds	r3, #72	; 0x48
 80045d6:	443b      	add	r3, r7
 80045d8:	3b3c      	subs	r3, #60	; 0x3c
 80045da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80045dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045de:	895b      	ldrh	r3, [r3, #10]
 80045e0:	4619      	mov	r1, r3
 80045e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	3348      	adds	r3, #72	; 0x48
 80045ee:	443b      	add	r3, r7
 80045f0:	3b38      	subs	r3, #56	; 0x38
 80045f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80045f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80045fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	f107 000c 	add.w	r0, r7, #12
 8004602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004604:	460b      	mov	r3, r1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	440b      	add	r3, r1
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	18c1      	adds	r1, r0, r3
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	443b      	add	r3, r7
 800461a:	3b34      	subs	r3, #52	; 0x34
 800461c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800461e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3348      	adds	r3, #72	; 0x48
 8004632:	443b      	add	r3, r7
 8004634:	3b34      	subs	r3, #52	; 0x34
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    }

    i++;
 800463a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463c:	3301      	adds	r3, #1
 800463e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	643b      	str	r3, [r7, #64]	; 0x40
 8004646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1b6      	bne.n	80045ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	891b      	ldrh	r3, [r3, #8]
 8004650:	461a      	mov	r2, r3
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <low_level_output+0xfc>)
 8004654:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <low_level_output+0xfc>)
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <low_level_output+0xfc>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004664:	2214      	movs	r2, #20
 8004666:	4905      	ldr	r1, [pc, #20]	; (800467c <low_level_output+0xfc>)
 8004668:	4805      	ldr	r0, [pc, #20]	; (8004680 <low_level_output+0x100>)
 800466a:	f7fd f81d 	bl	80016a8 <HAL_ETH_Transmit>

  return errval;
 800466e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004672:	4618      	mov	r0, r3
 8004674:	3748      	adds	r7, #72	; 0x48
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20004cd4 	.word	0x20004cd4
 8004680:	20004c24 	.word	0x20004c24

08004684 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <low_level_input+0x2c>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4619      	mov	r1, r3
 800469e:	4805      	ldr	r0, [pc, #20]	; (80046b4 <low_level_input+0x30>)
 80046a0:	f7fd f896 	bl	80017d0 <HAL_ETH_ReadData>
  }

  return p;
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20004ae0 	.word	0x20004ae0
 80046b4:	20004c24 	.word	0x20004c24

080046b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ffdd 	bl	8004684 <low_level_input>
 80046ca:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	4798      	blx	r3
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f001 fda6 	bl	8006234 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ea      	bne.n	80046c4 <ethernetif_input+0xc>
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <ethernetif_init+0x1c>
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <ethernetif_init+0x48>)
 8004708:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800470c:	490d      	ldr	r1, [pc, #52]	; (8004744 <ethernetif_init+0x4c>)
 800470e:	480e      	ldr	r0, [pc, #56]	; (8004748 <ethernetif_init+0x50>)
 8004710:	f00a fed8 	bl	800f4c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2273      	movs	r2, #115	; 0x73
 8004718:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2274      	movs	r2, #116	; 0x74
 8004720:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <ethernetif_init+0x54>)
 8004728:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a08      	ldr	r2, [pc, #32]	; (8004750 <ethernetif_init+0x58>)
 800472e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fe8d 	bl	8004450 <low_level_init>

  return ERR_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	08010308 	.word	0x08010308
 8004744:	08010324 	.word	0x08010324
 8004748:	08010334 	.word	0x08010334
 800474c:	0800d5d1 	.word	0x0800d5d1
 8004750:	08004581 	.word	0x08004581

08004754 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <pbuf_free_custom+0x2c>)
 8004764:	f000 fecc 	bl	8005500 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <pbuf_free_custom+0x30>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d102      	bne.n	8004776 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <pbuf_free_custom+0x30>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
  }
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08012d00 	.word	0x08012d00
 8004784:	20004ae0 	.word	0x20004ae0

08004788 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800478c:	f7fc fc82 	bl	8001094 <HAL_GetTick>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	; 0x38
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_ETH_MspInit+0x138>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f040 8085 	bne.w	80048c6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	4a43      	ldr	r2, [pc, #268]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ca:	6313      	str	r3, [r2, #48]	; 0x30
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047e6:	6313      	str	r3, [r2, #48]	; 0x30
 80047e8:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	4a35      	ldr	r2, [pc, #212]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 80047fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004802:	6313      	str	r3, [r2, #48]	; 0x30
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	6313      	str	r3, [r2, #48]	; 0x30
 8004820:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6313      	str	r3, [r2, #48]	; 0x30
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 8004852:	f043 0302 	orr.w	r3, r3, #2
 8004856:	6313      	str	r3, [r2, #48]	; 0x30
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_ETH_MspInit+0x13c>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004864:	2332      	movs	r3, #50	; 0x32
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004870:	2303      	movs	r3, #3
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004874:	230b      	movs	r3, #11
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487c:	4619      	mov	r1, r3
 800487e:	4816      	ldr	r0, [pc, #88]	; (80048d8 <HAL_ETH_MspInit+0x140>)
 8004880:	f7fd fed2 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004884:	2386      	movs	r3, #134	; 0x86
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004890:	2303      	movs	r3, #3
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004894:	230b      	movs	r3, #11
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489c:	4619      	mov	r1, r3
 800489e:	480f      	ldr	r0, [pc, #60]	; (80048dc <HAL_ETH_MspInit+0x144>)
 80048a0:	f7fd fec2 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80048a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048b6:	230b      	movs	r3, #11
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048be:	4619      	mov	r1, r3
 80048c0:	4807      	ldr	r0, [pc, #28]	; (80048e0 <HAL_ETH_MspInit+0x148>)
 80048c2:	f7fd feb1 	bl	8002628 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80048c6:	bf00      	nop
 80048c8:	3738      	adds	r7, #56	; 0x38
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40028000 	.word	0x40028000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40020800 	.word	0x40020800
 80048dc:	40020000 	.word	0x40020000
 80048e0:	40020400 	.word	0x40020400

080048e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <ETH_PHY_IO_Init+0x10>)
 80048ea:	f7fd fa41 	bl	8001d70 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20004c24 	.word	0x20004c24

080048f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return 0;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	4807      	ldr	r0, [pc, #28]	; (8004938 <ETH_PHY_IO_ReadReg+0x30>)
 800491c:	f7fd f890 	bl	8001a40 <HAL_ETH_ReadPHYRegister>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	e000      	b.n	800492e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20004c24 	.word	0x20004c24

0800493c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4807      	ldr	r0, [pc, #28]	; (800496c <ETH_PHY_IO_WriteReg+0x30>)
 8004950:	f7fd f8c1 	bl	8001ad6 <HAL_ETH_WritePHYRegister>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e000      	b.n	8004962 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20004c24 	.word	0x20004c24

08004970 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004974:	f7fc fb8e 	bl	8001094 <HAL_GetTick>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b0a0      	sub	sp, #128	; 0x80
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	2264      	movs	r2, #100	; 0x64
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f00a fdfc 	bl	800f58e <memset>
  int32_t PHYLinkState = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800499e:	2300      	movs	r3, #0
 80049a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a2:	2300      	movs	r3, #0
 80049a4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049a6:	483a      	ldr	r0, [pc, #232]	; (8004a90 <ethernet_link_check_state+0x110>)
 80049a8:	f7fc fa87 	bl	8000eba <LAN8742_GetLinkState>
 80049ac:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <ethernet_link_check_state+0x5a>
 80049c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	dc09      	bgt.n	80049da <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80049c6:	4833      	ldr	r0, [pc, #204]	; (8004a94 <ethernet_link_check_state+0x114>)
 80049c8:	f7fc fe15 	bl	80015f6 <HAL_ETH_Stop>
    netif_set_down(netif);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f81b 	bl	8005a08 <netif_set_down>
    netif_set_link_down(netif);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 f87e 	bl	8005ad4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80049d8:	e055      	b.n	8004a86 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d14e      	bne.n	8004a86 <ethernet_link_check_state+0x106>
 80049e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	dd4b      	ble.n	8004a86 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80049ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f0:	3b02      	subs	r3, #2
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d82a      	bhi.n	8004a4c <ethernet_link_check_state+0xcc>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <ethernet_link_check_state+0x7c>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1f 	.word	0x08004a1f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
      duplex = ETH_FULLDUPLEX_MODE;
 8004a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a1c:	e017      	b.n	8004a4e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a2c:	e00f      	b.n	8004a4e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a32:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a34:	2300      	movs	r3, #0
 8004a36:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a3c:	e007      	b.n	8004a4e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a42:	2300      	movs	r3, #0
 8004a44:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a4a:	e000      	b.n	8004a4e <ethernet_link_check_state+0xce>
      break;
 8004a4c:	bf00      	nop
    if(linkchanged)
 8004a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d018      	beq.n	8004a86 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	4619      	mov	r1, r3
 8004a5a:	480e      	ldr	r0, [pc, #56]	; (8004a94 <ethernet_link_check_state+0x114>)
 8004a5c:	f7fd f884 	bl	8001b68 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a66:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4809      	ldr	r0, [pc, #36]	; (8004a94 <ethernet_link_check_state+0x114>)
 8004a70:	f7fd f964 	bl	8001d3c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004a74:	4807      	ldr	r0, [pc, #28]	; (8004a94 <ethernet_link_check_state+0x114>)
 8004a76:	f7fc fd5f 	bl	8001538 <HAL_ETH_Start>
      netif_set_up(netif);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 ff58 	bl	8005930 <netif_set_up>
      netif_set_link_up(netif);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fff3 	bl	8005a6c <netif_set_link_up>
}
 8004a86:	bf00      	nop
 8004a88:	3780      	adds	r7, #128	; 0x80
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20004d0c 	.word	0x20004d0c
 8004a94:	20004c24 	.word	0x20004c24

08004a98 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004aa0:	4812      	ldr	r0, [pc, #72]	; (8004aec <HAL_ETH_RxAllocateCallback+0x54>)
 8004aa2:	f000 fcbf 	bl	8005424 <memp_malloc_pool>
 8004aa6:	60f8      	str	r0, [r7, #12]
  if (p)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f103 0220 	add.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <HAL_ETH_RxAllocateCallback+0x58>)
 8004abc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ac6:	9201      	str	r2, [sp, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2241      	movs	r2, #65	; 0x41
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f001 f9f5 	bl	8005ec0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004ad6:	e005      	b.n	8004ae4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	08012d00 	.word	0x08012d00
 8004af0:	08004755 	.word	0x08004755
 8004af4:	20004ae0 	.word	0x20004ae0

08004af8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	; 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3b20      	subs	r3, #32
 8004b16:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2200      	movs	r2, #0
 8004b22:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e003      	b.n	8004b42 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	e009      	b.n	8004b64 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	891a      	ldrh	r2, [r3, #8]
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	4413      	add	r3, r2
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f2      	bne.n	8004b50 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	3724      	adds	r7, #36	; 0x24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	b21a      	sxth	r2, r3
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	b29b      	uxth	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	061a      	lsls	r2, r3, #24
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	4313      	orrs	r3, r2
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004bde:	f000 f8d5 	bl	8004d8c <mem_init>
  memp_init();
 8004be2:	f000 fbdb 	bl	800539c <memp_init>
  pbuf_init();
  netif_init();
 8004be6:	f000 fcd9 	bl	800559c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004bea:	f007 feeb 	bl	800c9c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004bee:	f001 fdaf 	bl	8006750 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004bf2:	f007 fe5d 	bl	800c8b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <ptr_to_mem+0x20>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	4413      	add	r3, r2
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20005398 	.word	0x20005398

08004c24 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <mem_to_ptr+0x20>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	b29b      	uxth	r3, r3
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20005398 	.word	0x20005398

08004c48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c50:	4b45      	ldr	r3, [pc, #276]	; (8004d68 <plug_holes+0x120>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d206      	bcs.n	8004c68 <plug_holes+0x20>
 8004c5a:	4b44      	ldr	r3, [pc, #272]	; (8004d6c <plug_holes+0x124>)
 8004c5c:	f240 12df 	movw	r2, #479	; 0x1df
 8004c60:	4943      	ldr	r1, [pc, #268]	; (8004d70 <plug_holes+0x128>)
 8004c62:	4844      	ldr	r0, [pc, #272]	; (8004d74 <plug_holes+0x12c>)
 8004c64:	f00a fc2e 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004c68:	4b43      	ldr	r3, [pc, #268]	; (8004d78 <plug_holes+0x130>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d306      	bcc.n	8004c80 <plug_holes+0x38>
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <plug_holes+0x124>)
 8004c74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c78:	4940      	ldr	r1, [pc, #256]	; (8004d7c <plug_holes+0x134>)
 8004c7a:	483e      	ldr	r0, [pc, #248]	; (8004d74 <plug_holes+0x12c>)
 8004c7c:	f00a fc22 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	791b      	ldrb	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <plug_holes+0x4e>
 8004c88:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <plug_holes+0x124>)
 8004c8a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004c8e:	493c      	ldr	r1, [pc, #240]	; (8004d80 <plug_holes+0x138>)
 8004c90:	4838      	ldr	r0, [pc, #224]	; (8004d74 <plug_holes+0x12c>)
 8004c92:	f00a fc17 	bl	800f4c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c9e:	d906      	bls.n	8004cae <plug_holes+0x66>
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <plug_holes+0x124>)
 8004ca2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004ca6:	4937      	ldr	r1, [pc, #220]	; (8004d84 <plug_holes+0x13c>)
 8004ca8:	4832      	ldr	r0, [pc, #200]	; (8004d74 <plug_holes+0x12c>)
 8004caa:	f00a fc0b 	bl	800f4c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ffa4 	bl	8004c00 <ptr_to_mem>
 8004cb8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d024      	beq.n	8004d0c <plug_holes+0xc4>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	791b      	ldrb	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d120      	bne.n	8004d0c <plug_holes+0xc4>
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <plug_holes+0x130>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d01b      	beq.n	8004d0c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004cd4:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <plug_holes+0x140>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d102      	bne.n	8004ce4 <plug_holes+0x9c>
      lfree = mem;
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <plug_holes+0x140>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cf4:	d00a      	beq.n	8004d0c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff80 	bl	8004c00 <ptr_to_mem>
 8004d00:	4604      	mov	r4, r0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff8e 	bl	8004c24 <mem_to_ptr>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	885b      	ldrh	r3, [r3, #2]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff75 	bl	8004c00 <ptr_to_mem>
 8004d16:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d01f      	beq.n	8004d60 <plug_holes+0x118>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	791b      	ldrb	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11b      	bne.n	8004d60 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004d28:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <plug_holes+0x140>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d102      	bne.n	8004d38 <plug_holes+0xf0>
      lfree = pmem;
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <plug_holes+0x140>)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d48:	d00a      	beq.n	8004d60 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff56 	bl	8004c00 <ptr_to_mem>
 8004d54:	4604      	mov	r4, r0
 8004d56:	68b8      	ldr	r0, [r7, #8]
 8004d58:	f7ff ff64 	bl	8004c24 <mem_to_ptr>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd90      	pop	{r4, r7, pc}
 8004d68:	20005398 	.word	0x20005398
 8004d6c:	0801035c 	.word	0x0801035c
 8004d70:	0801038c 	.word	0x0801038c
 8004d74:	080103a4 	.word	0x080103a4
 8004d78:	2000539c 	.word	0x2000539c
 8004d7c:	080103cc 	.word	0x080103cc
 8004d80:	080103e8 	.word	0x080103e8
 8004d84:	08010404 	.word	0x08010404
 8004d88:	200053a0 	.word	0x200053a0

08004d8c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <mem_init+0x68>)
 8004d94:	3303      	adds	r3, #3
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <mem_init+0x6c>)
 8004d9e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <mem_init+0x6c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004dac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004dba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004dbe:	f7ff ff1f 	bl	8004c00 <ptr_to_mem>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <mem_init+0x70>)
 8004dc6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <mem_init+0x70>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <mem_init+0x70>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004dd8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004dda:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <mem_init+0x70>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004de2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <mem_init+0x6c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <mem_init+0x74>)
 8004dea:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20004d44 	.word	0x20004d44
 8004df8:	20005398 	.word	0x20005398
 8004dfc:	2000539c 	.word	0x2000539c
 8004e00:	200053a0 	.word	0x200053a0

08004e04 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff09 	bl	8004c24 <mem_to_ptr>
 8004e12:	4603      	mov	r3, r0
 8004e14:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fef0 	bl	8004c00 <ptr_to_mem>
 8004e20:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff feea 	bl	8004c00 <ptr_to_mem>
 8004e2c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e36:	d818      	bhi.n	8004e6a <mem_link_valid+0x66>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	885b      	ldrh	r3, [r3, #2]
 8004e3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e40:	d813      	bhi.n	8004e6a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d004      	beq.n	8004e56 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	8afa      	ldrh	r2, [r7, #22]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d109      	bne.n	8004e6a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <mem_link_valid+0x74>)
 8004e58:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d006      	beq.n	8004e6e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	885b      	ldrh	r3, [r3, #2]
 8004e64:	8afa      	ldrh	r2, [r7, #22]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <mem_link_valid+0x6a>
    return 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <mem_link_valid+0x6c>
  }
  return 1;
 8004e6e:	2301      	movs	r3, #1
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000539c 	.word	0x2000539c

08004e7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04c      	beq.n	8004f24 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <mem_free+0xb0>)
 8004e96:	f240 2273 	movw	r2, #627	; 0x273
 8004e9a:	4925      	ldr	r1, [pc, #148]	; (8004f30 <mem_free+0xb4>)
 8004e9c:	4825      	ldr	r0, [pc, #148]	; (8004f34 <mem_free+0xb8>)
 8004e9e:	f00a fb11 	bl	800f4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ea2:	e040      	b.n	8004f26 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3b08      	subs	r3, #8
 8004ea8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <mem_free+0xbc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d306      	bcc.n	8004ec2 <mem_free+0x46>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 020c 	add.w	r2, r3, #12
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <mem_free+0xc0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d907      	bls.n	8004ed2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004ec2:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <mem_free+0xb0>)
 8004ec4:	f240 227f 	movw	r2, #639	; 0x27f
 8004ec8:	491d      	ldr	r1, [pc, #116]	; (8004f40 <mem_free+0xc4>)
 8004eca:	481a      	ldr	r0, [pc, #104]	; (8004f34 <mem_free+0xb8>)
 8004ecc:	f00a fafa 	bl	800f4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ed0:	e029      	b.n	8004f26 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <mem_free+0xb0>)
 8004edc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004ee0:	4918      	ldr	r1, [pc, #96]	; (8004f44 <mem_free+0xc8>)
 8004ee2:	4814      	ldr	r0, [pc, #80]	; (8004f34 <mem_free+0xb8>)
 8004ee4:	f00a faee 	bl	800f4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ee8:	e01d      	b.n	8004f26 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff8a 	bl	8004e04 <mem_link_valid>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d107      	bne.n	8004f06 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <mem_free+0xb0>)
 8004ef8:	f240 2295 	movw	r2, #661	; 0x295
 8004efc:	4912      	ldr	r1, [pc, #72]	; (8004f48 <mem_free+0xcc>)
 8004efe:	480d      	ldr	r0, [pc, #52]	; (8004f34 <mem_free+0xb8>)
 8004f00:	f00a fae0 	bl	800f4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f04:	e00f      	b.n	8004f26 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <mem_free+0xd0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d202      	bcs.n	8004f1c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <mem_free+0xd0>)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff fe93 	bl	8004c48 <plug_holes>
 8004f22:	e000      	b.n	8004f26 <mem_free+0xaa>
    return;
 8004f24:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	0801035c 	.word	0x0801035c
 8004f30:	08010430 	.word	0x08010430
 8004f34:	080103a4 	.word	0x080103a4
 8004f38:	20005398 	.word	0x20005398
 8004f3c:	2000539c 	.word	0x2000539c
 8004f40:	08010454 	.word	0x08010454
 8004f44:	08010470 	.word	0x08010470
 8004f48:	08010498 	.word	0x08010498
 8004f4c:	200053a0 	.word	0x200053a0

08004f50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	3303      	adds	r3, #3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004f68:	8bfb      	ldrh	r3, [r7, #30]
 8004f6a:	2b0b      	cmp	r3, #11
 8004f6c:	d801      	bhi.n	8004f72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004f6e:	230c      	movs	r3, #12
 8004f70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004f72:	8bfb      	ldrh	r3, [r7, #30]
 8004f74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f78:	d803      	bhi.n	8004f82 <mem_trim+0x32>
 8004f7a:	8bfa      	ldrh	r2, [r7, #30]
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d201      	bcs.n	8004f86 <mem_trim+0x36>
    return NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e0cc      	b.n	8005120 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004f86:	4b68      	ldr	r3, [pc, #416]	; (8005128 <mem_trim+0x1d8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d304      	bcc.n	8004f9a <mem_trim+0x4a>
 8004f90:	4b66      	ldr	r3, [pc, #408]	; (800512c <mem_trim+0x1dc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d306      	bcc.n	8004fa8 <mem_trim+0x58>
 8004f9a:	4b65      	ldr	r3, [pc, #404]	; (8005130 <mem_trim+0x1e0>)
 8004f9c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004fa0:	4964      	ldr	r1, [pc, #400]	; (8005134 <mem_trim+0x1e4>)
 8004fa2:	4865      	ldr	r0, [pc, #404]	; (8005138 <mem_trim+0x1e8>)
 8004fa4:	f00a fa8e 	bl	800f4c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004fa8:	4b5f      	ldr	r3, [pc, #380]	; (8005128 <mem_trim+0x1d8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d304      	bcc.n	8004fbc <mem_trim+0x6c>
 8004fb2:	4b5e      	ldr	r3, [pc, #376]	; (800512c <mem_trim+0x1dc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d301      	bcc.n	8004fc0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	e0af      	b.n	8005120 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3b08      	subs	r3, #8
 8004fc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004fc6:	69b8      	ldr	r0, [r7, #24]
 8004fc8:	f7ff fe2c 	bl	8004c24 <mem_to_ptr>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	8afb      	ldrh	r3, [r7, #22]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b08      	subs	r3, #8
 8004fdc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004fde:	8bfa      	ldrh	r2, [r7, #30]
 8004fe0:	8abb      	ldrh	r3, [r7, #20]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d906      	bls.n	8004ff4 <mem_trim+0xa4>
 8004fe6:	4b52      	ldr	r3, [pc, #328]	; (8005130 <mem_trim+0x1e0>)
 8004fe8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004fec:	4953      	ldr	r1, [pc, #332]	; (800513c <mem_trim+0x1ec>)
 8004fee:	4852      	ldr	r0, [pc, #328]	; (8005138 <mem_trim+0x1e8>)
 8004ff0:	f00a fa68 	bl	800f4c4 <iprintf>
  if (newsize > size) {
 8004ff4:	8bfa      	ldrh	r2, [r7, #30]
 8004ff6:	8abb      	ldrh	r3, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d901      	bls.n	8005000 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e08f      	b.n	8005120 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005000:	8bfa      	ldrh	r2, [r7, #30]
 8005002:	8abb      	ldrh	r3, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d101      	bne.n	800500c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	e089      	b.n	8005120 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fdf5 	bl	8004c00 <ptr_to_mem>
 8005016:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	791b      	ldrb	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d13f      	bne.n	80050a0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005028:	d106      	bne.n	8005038 <mem_trim+0xe8>
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <mem_trim+0x1e0>)
 800502c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005030:	4943      	ldr	r1, [pc, #268]	; (8005140 <mem_trim+0x1f0>)
 8005032:	4841      	ldr	r0, [pc, #260]	; (8005138 <mem_trim+0x1e8>)
 8005034:	f00a fa46 	bl	800f4c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800503e:	8afa      	ldrh	r2, [r7, #22]
 8005040:	8bfb      	ldrh	r3, [r7, #30]
 8005042:	4413      	add	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	3308      	adds	r3, #8
 8005048:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <mem_trim+0x1f4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d106      	bne.n	8005062 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fdd2 	bl	8004c00 <ptr_to_mem>
 800505c:	4603      	mov	r3, r0
 800505e:	4a39      	ldr	r2, [pc, #228]	; (8005144 <mem_trim+0x1f4>)
 8005060:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fdcb 	bl	8004c00 <ptr_to_mem>
 800506a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2200      	movs	r2, #0
 8005070:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	89ba      	ldrh	r2, [r7, #12]
 8005076:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	8afa      	ldrh	r2, [r7, #22]
 800507c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	89fa      	ldrh	r2, [r7, #14]
 8005082:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800508c:	d047      	beq.n	800511e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fdb4 	bl	8004c00 <ptr_to_mem>
 8005098:	4602      	mov	r2, r0
 800509a:	89fb      	ldrh	r3, [r7, #14]
 800509c:	8053      	strh	r3, [r2, #2]
 800509e:	e03e      	b.n	800511e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80050a0:	8bfb      	ldrh	r3, [r7, #30]
 80050a2:	f103 0214 	add.w	r2, r3, #20
 80050a6:	8abb      	ldrh	r3, [r7, #20]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d838      	bhi.n	800511e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80050ac:	8afa      	ldrh	r2, [r7, #22]
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	4413      	add	r3, r2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3308      	adds	r3, #8
 80050b6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050c0:	d106      	bne.n	80050d0 <mem_trim+0x180>
 80050c2:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <mem_trim+0x1e0>)
 80050c4:	f240 3216 	movw	r2, #790	; 0x316
 80050c8:	491d      	ldr	r1, [pc, #116]	; (8005140 <mem_trim+0x1f0>)
 80050ca:	481b      	ldr	r0, [pc, #108]	; (8005138 <mem_trim+0x1e8>)
 80050cc:	f00a f9fa 	bl	800f4c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fd94 	bl	8004c00 <ptr_to_mem>
 80050d8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <mem_trim+0x1f4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d202      	bcs.n	80050ea <mem_trim+0x19a>
      lfree = mem2;
 80050e4:	4a17      	ldr	r2, [pc, #92]	; (8005144 <mem_trim+0x1f4>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2200      	movs	r2, #0
 80050ee:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	881a      	ldrh	r2, [r3, #0]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	8afa      	ldrh	r2, [r7, #22]
 80050fc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	89fa      	ldrh	r2, [r7, #14]
 8005102:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800510c:	d007      	beq.n	800511e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fd74 	bl	8004c00 <ptr_to_mem>
 8005118:	4602      	mov	r2, r0
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800511e:	687b      	ldr	r3, [r7, #4]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20005398 	.word	0x20005398
 800512c:	2000539c 	.word	0x2000539c
 8005130:	0801035c 	.word	0x0801035c
 8005134:	080104cc 	.word	0x080104cc
 8005138:	080103a4 	.word	0x080103a4
 800513c:	080104e4 	.word	0x080104e4
 8005140:	08010504 	.word	0x08010504
 8005144:	200053a0 	.word	0x200053a0

08005148 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <mem_malloc+0x14>
    return NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	e0d9      	b.n	8005310 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	3303      	adds	r3, #3
 8005160:	b29b      	uxth	r3, r3
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005168:	8bbb      	ldrh	r3, [r7, #28]
 800516a:	2b0b      	cmp	r3, #11
 800516c:	d801      	bhi.n	8005172 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800516e:	230c      	movs	r3, #12
 8005170:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005172:	8bbb      	ldrh	r3, [r7, #28]
 8005174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005178:	d803      	bhi.n	8005182 <mem_malloc+0x3a>
 800517a:	8bba      	ldrh	r2, [r7, #28]
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	429a      	cmp	r2, r3
 8005180:	d201      	bcs.n	8005186 <mem_malloc+0x3e>
    return NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	e0c4      	b.n	8005310 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005186:	4b64      	ldr	r3, [pc, #400]	; (8005318 <mem_malloc+0x1d0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fd4a 	bl	8004c24 <mem_to_ptr>
 8005190:	4603      	mov	r3, r0
 8005192:	83fb      	strh	r3, [r7, #30]
 8005194:	e0b4      	b.n	8005300 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fd31 	bl	8004c00 <ptr_to_mem>
 800519e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	791b      	ldrb	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f040 80a4 	bne.w	80052f2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f1a3 0208 	sub.w	r2, r3, #8
 80051b8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f0c0 8099 	bcc.w	80052f2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	8bfb      	ldrh	r3, [r7, #30]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f1a3 0208 	sub.w	r2, r3, #8
 80051ce:	8bbb      	ldrh	r3, [r7, #28]
 80051d0:	3314      	adds	r3, #20
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d333      	bcc.n	800523e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80051d6:	8bfa      	ldrh	r2, [r7, #30]
 80051d8:	8bbb      	ldrh	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3308      	adds	r3, #8
 80051e0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80051e2:	8a7b      	ldrh	r3, [r7, #18]
 80051e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051e8:	d106      	bne.n	80051f8 <mem_malloc+0xb0>
 80051ea:	4b4c      	ldr	r3, [pc, #304]	; (800531c <mem_malloc+0x1d4>)
 80051ec:	f240 3287 	movw	r2, #903	; 0x387
 80051f0:	494b      	ldr	r1, [pc, #300]	; (8005320 <mem_malloc+0x1d8>)
 80051f2:	484c      	ldr	r0, [pc, #304]	; (8005324 <mem_malloc+0x1dc>)
 80051f4:	f00a f966 	bl	800f4c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80051f8:	8a7b      	ldrh	r3, [r7, #18]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fd00 	bl	8004c00 <ptr_to_mem>
 8005200:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8bfa      	ldrh	r2, [r7, #30]
 8005214:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	8a7a      	ldrh	r2, [r7, #18]
 800521a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2201      	movs	r2, #1
 8005220:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800522a:	d00b      	beq.n	8005244 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fce5 	bl	8004c00 <ptr_to_mem>
 8005236:	4602      	mov	r2, r0
 8005238:	8a7b      	ldrh	r3, [r7, #18]
 800523a:	8053      	strh	r3, [r2, #2]
 800523c:	e002      	b.n	8005244 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2201      	movs	r2, #1
 8005242:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005244:	4b34      	ldr	r3, [pc, #208]	; (8005318 <mem_malloc+0x1d0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	429a      	cmp	r2, r3
 800524c:	d127      	bne.n	800529e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800524e:	4b32      	ldr	r3, [pc, #200]	; (8005318 <mem_malloc+0x1d0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005254:	e005      	b.n	8005262 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fcd0 	bl	8004c00 <ptr_to_mem>
 8005260:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	791b      	ldrb	r3, [r3, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <mem_malloc+0x12c>
 800526a:	4b2f      	ldr	r3, [pc, #188]	; (8005328 <mem_malloc+0x1e0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d1f0      	bne.n	8005256 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <mem_malloc+0x1d0>)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <mem_malloc+0x1d0>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <mem_malloc+0x1e0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d00b      	beq.n	800529e <mem_malloc+0x156>
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <mem_malloc+0x1d0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	791b      	ldrb	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <mem_malloc+0x156>
 8005290:	4b22      	ldr	r3, [pc, #136]	; (800531c <mem_malloc+0x1d4>)
 8005292:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005296:	4925      	ldr	r1, [pc, #148]	; (800532c <mem_malloc+0x1e4>)
 8005298:	4822      	ldr	r0, [pc, #136]	; (8005324 <mem_malloc+0x1dc>)
 800529a:	f00a f913 	bl	800f4c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800529e:	8bba      	ldrh	r2, [r7, #28]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	3308      	adds	r3, #8
 80052a6:	4a20      	ldr	r2, [pc, #128]	; (8005328 <mem_malloc+0x1e0>)
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d906      	bls.n	80052bc <mem_malloc+0x174>
 80052ae:	4b1b      	ldr	r3, [pc, #108]	; (800531c <mem_malloc+0x1d4>)
 80052b0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80052b4:	491e      	ldr	r1, [pc, #120]	; (8005330 <mem_malloc+0x1e8>)
 80052b6:	481b      	ldr	r0, [pc, #108]	; (8005324 <mem_malloc+0x1dc>)
 80052b8:	f00a f904 	bl	800f4c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <mem_malloc+0x18c>
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <mem_malloc+0x1d4>)
 80052c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80052cc:	4919      	ldr	r1, [pc, #100]	; (8005334 <mem_malloc+0x1ec>)
 80052ce:	4815      	ldr	r0, [pc, #84]	; (8005324 <mem_malloc+0x1dc>)
 80052d0:	f00a f8f8 	bl	800f4c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <mem_malloc+0x1a4>
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <mem_malloc+0x1d4>)
 80052e0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80052e4:	4914      	ldr	r1, [pc, #80]	; (8005338 <mem_malloc+0x1f0>)
 80052e6:	480f      	ldr	r0, [pc, #60]	; (8005324 <mem_malloc+0x1dc>)
 80052e8:	f00a f8ec 	bl	800f4c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3308      	adds	r3, #8
 80052f0:	e00e      	b.n	8005310 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80052f2:	8bfb      	ldrh	r3, [r7, #30]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fc83 	bl	8004c00 <ptr_to_mem>
 80052fa:	4603      	mov	r3, r0
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005300:	8bfa      	ldrh	r2, [r7, #30]
 8005302:	8bbb      	ldrh	r3, [r7, #28]
 8005304:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005308:	429a      	cmp	r2, r3
 800530a:	f4ff af44 	bcc.w	8005196 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200053a0 	.word	0x200053a0
 800531c:	0801035c 	.word	0x0801035c
 8005320:	08010504 	.word	0x08010504
 8005324:	080103a4 	.word	0x080103a4
 8005328:	2000539c 	.word	0x2000539c
 800532c:	08010518 	.word	0x08010518
 8005330:	08010534 	.word	0x08010534
 8005334:	08010564 	.word	0x08010564
 8005338:	08010594 	.word	0x08010594

0800533c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	3303      	adds	r3, #3
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e011      	b.n	8005382 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4413      	add	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	885b      	ldrh	r3, [r3, #2]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4293      	cmp	r3, r2
 800538c:	dbe7      	blt.n	800535e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053a2:	2300      	movs	r3, #0
 80053a4:	80fb      	strh	r3, [r7, #6]
 80053a6:	e009      	b.n	80053bc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	4a08      	ldr	r2, [pc, #32]	; (80053cc <memp_init+0x30>)
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ffc3 	bl	800533c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	3301      	adds	r3, #1
 80053ba:	80fb      	strh	r3, [r7, #6]
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d9f2      	bls.n	80053a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08012d78 	.word	0x08012d78

080053d0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d012      	beq.n	800540c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d006      	beq.n	8005408 <do_memp_malloc_pool+0x38>
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <do_memp_malloc_pool+0x48>)
 80053fc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <do_memp_malloc_pool+0x4c>)
 8005402:	4807      	ldr	r0, [pc, #28]	; (8005420 <do_memp_malloc_pool+0x50>)
 8005404:	f00a f85e 	bl	800f4c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	e000      	b.n	800540e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	080105b8 	.word	0x080105b8
 800541c:	080105e8 	.word	0x080105e8
 8005420:	0801060c 	.word	0x0801060c

08005424 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <memp_malloc_pool+0x1c>
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <memp_malloc_pool+0x38>)
 8005434:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005438:	4909      	ldr	r1, [pc, #36]	; (8005460 <memp_malloc_pool+0x3c>)
 800543a:	480a      	ldr	r0, [pc, #40]	; (8005464 <memp_malloc_pool+0x40>)
 800543c:	f00a f842 	bl	800f4c4 <iprintf>
  if (desc == NULL) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <memp_malloc_pool+0x26>
    return NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	e003      	b.n	8005452 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff ffc0 	bl	80053d0 <do_memp_malloc_pool>
 8005450:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	080105b8 	.word	0x080105b8
 8005460:	08010634 	.word	0x08010634
 8005464:	0801060c 	.word	0x0801060c

08005468 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d908      	bls.n	800548a <memp_malloc+0x22>
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <memp_malloc+0x3c>)
 800547a:	f240 1257 	movw	r2, #343	; 0x157
 800547e:	490a      	ldr	r1, [pc, #40]	; (80054a8 <memp_malloc+0x40>)
 8005480:	480a      	ldr	r0, [pc, #40]	; (80054ac <memp_malloc+0x44>)
 8005482:	f00a f81f 	bl	800f4c4 <iprintf>
 8005486:	2300      	movs	r3, #0
 8005488:	e008      	b.n	800549c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <memp_malloc+0x48>)
 800548e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff9c 	bl	80053d0 <do_memp_malloc_pool>
 8005498:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	080105b8 	.word	0x080105b8
 80054a8:	08010648 	.word	0x08010648
 80054ac:	0801060c 	.word	0x0801060c
 80054b0:	08012d78 	.word	0x08012d78

080054b4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <do_memp_free_pool+0x22>
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <do_memp_free_pool+0x40>)
 80054ca:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80054ce:	490a      	ldr	r1, [pc, #40]	; (80054f8 <do_memp_free_pool+0x44>)
 80054d0:	480a      	ldr	r0, [pc, #40]	; (80054fc <do_memp_free_pool+0x48>)
 80054d2:	f009 fff7 	bl	800f4c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	080105b8 	.word	0x080105b8
 80054f8:	08010668 	.word	0x08010668
 80054fc:	0801060c 	.word	0x0801060c

08005500 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <memp_free_pool+0x1e>
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <memp_free_pool+0x3c>)
 8005512:	f240 1295 	movw	r2, #405	; 0x195
 8005516:	490a      	ldr	r1, [pc, #40]	; (8005540 <memp_free_pool+0x40>)
 8005518:	480a      	ldr	r0, [pc, #40]	; (8005544 <memp_free_pool+0x44>)
 800551a:	f009 ffd3 	bl	800f4c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <memp_free_pool+0x34>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ffc1 	bl	80054b4 <do_memp_free_pool>
 8005532:	e000      	b.n	8005536 <memp_free_pool+0x36>
    return;
 8005534:	bf00      	nop
}
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	080105b8 	.word	0x080105b8
 8005540:	08010634 	.word	0x08010634
 8005544:	0801060c 	.word	0x0801060c

08005548 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d907      	bls.n	800556a <memp_free+0x22>
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <memp_free+0x44>)
 800555c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005560:	490b      	ldr	r1, [pc, #44]	; (8005590 <memp_free+0x48>)
 8005562:	480c      	ldr	r0, [pc, #48]	; (8005594 <memp_free+0x4c>)
 8005564:	f009 ffae 	bl	800f4c4 <iprintf>
 8005568:	e00c      	b.n	8005584 <memp_free+0x3c>

  if (mem == NULL) {
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <memp_free+0x50>)
 8005574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff9a 	bl	80054b4 <do_memp_free_pool>
 8005580:	e000      	b.n	8005584 <memp_free+0x3c>
    return;
 8005582:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	080105b8 	.word	0x080105b8
 8005590:	08010688 	.word	0x08010688
 8005594:	0801060c 	.word	0x0801060c
 8005598:	08012d78 	.word	0x08012d78

0800559c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d108      	bne.n	80055d2 <netif_add+0x26>
 80055c0:	4b57      	ldr	r3, [pc, #348]	; (8005720 <netif_add+0x174>)
 80055c2:	f240 1227 	movw	r2, #295	; 0x127
 80055c6:	4957      	ldr	r1, [pc, #348]	; (8005724 <netif_add+0x178>)
 80055c8:	4857      	ldr	r0, [pc, #348]	; (8005728 <netif_add+0x17c>)
 80055ca:	f009 ff7b 	bl	800f4c4 <iprintf>
 80055ce:	2300      	movs	r3, #0
 80055d0:	e0a2      	b.n	8005718 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <netif_add+0x3e>
 80055d8:	4b51      	ldr	r3, [pc, #324]	; (8005720 <netif_add+0x174>)
 80055da:	f44f 7294 	mov.w	r2, #296	; 0x128
 80055de:	4953      	ldr	r1, [pc, #332]	; (800572c <netif_add+0x180>)
 80055e0:	4851      	ldr	r0, [pc, #324]	; (8005728 <netif_add+0x17c>)
 80055e2:	f009 ff6f 	bl	800f4c4 <iprintf>
 80055e6:	2300      	movs	r3, #0
 80055e8:	e096      	b.n	8005718 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80055f0:	4b4f      	ldr	r3, [pc, #316]	; (8005730 <netif_add+0x184>)
 80055f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80055fa:	4b4d      	ldr	r3, [pc, #308]	; (8005730 <netif_add+0x184>)
 80055fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005604:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <netif_add+0x184>)
 8005606:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a45      	ldr	r2, [pc, #276]	; (8005734 <netif_add+0x188>)
 800561e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800563a:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <netif_add+0x18c>)
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005648:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f913 	bl	800587c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <netif_add+0xba>
    return NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	e058      	b.n	8005718 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800566c:	2bff      	cmp	r3, #255	; 0xff
 800566e:	d103      	bne.n	8005678 <netif_add+0xcc>
        netif->num = 0;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800567c:	4b2f      	ldr	r3, [pc, #188]	; (800573c <netif_add+0x190>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e02b      	b.n	80056dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	429a      	cmp	r2, r3
 800568a:	d106      	bne.n	800569a <netif_add+0xee>
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <netif_add+0x174>)
 800568e:	f240 128b 	movw	r2, #395	; 0x18b
 8005692:	492b      	ldr	r1, [pc, #172]	; (8005740 <netif_add+0x194>)
 8005694:	4824      	ldr	r0, [pc, #144]	; (8005728 <netif_add+0x17c>)
 8005696:	f009 ff15 	bl	800f4c4 <iprintf>
        num_netifs++;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	3301      	adds	r3, #1
 800569e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2bff      	cmp	r3, #255	; 0xff
 80056a4:	dd06      	ble.n	80056b4 <netif_add+0x108>
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <netif_add+0x174>)
 80056a8:	f240 128d 	movw	r2, #397	; 0x18d
 80056ac:	4925      	ldr	r1, [pc, #148]	; (8005744 <netif_add+0x198>)
 80056ae:	481e      	ldr	r0, [pc, #120]	; (8005728 <netif_add+0x17c>)
 80056b0:	f009 ff08 	bl	800f4c4 <iprintf>
        if (netif2->num == netif->num) {
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d108      	bne.n	80056d6 <netif_add+0x12a>
          netif->num++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80056d4:	e005      	b.n	80056e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1d0      	bne.n	8005684 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1be      	bne.n	8005666 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ee:	2bfe      	cmp	r3, #254	; 0xfe
 80056f0:	d103      	bne.n	80056fa <netif_add+0x14e>
    netif_num = 0;
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <netif_add+0x18c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e006      	b.n	8005708 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005700:	3301      	adds	r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <netif_add+0x18c>)
 8005706:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <netif_add+0x190>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <netif_add+0x190>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	080106a4 	.word	0x080106a4
 8005724:	08010738 	.word	0x08010738
 8005728:	080106f4 	.word	0x080106f4
 800572c:	08010754 	.word	0x08010754
 8005730:	08012ddc 	.word	0x08012ddc
 8005734:	08005b57 	.word	0x08005b57
 8005738:	20008298 	.word	0x20008298
 800573c:	20008290 	.word	0x20008290
 8005740:	08010778 	.word	0x08010778
 8005744:	0801078c 	.word	0x0801078c

08005748 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f002 fd7f 	bl	8008258 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f007 fabb 	bl	800ccd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <netif_do_set_ipaddr+0x20>
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <netif_do_set_ipaddr+0x88>)
 8005780:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005784:	491c      	ldr	r1, [pc, #112]	; (80057f8 <netif_do_set_ipaddr+0x8c>)
 8005786:	481d      	ldr	r0, [pc, #116]	; (80057fc <netif_do_set_ipaddr+0x90>)
 8005788:	f009 fe9c 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <netif_do_set_ipaddr+0x34>
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <netif_do_set_ipaddr+0x88>)
 8005794:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005798:	4917      	ldr	r1, [pc, #92]	; (80057f8 <netif_do_set_ipaddr+0x8c>)
 800579a:	4818      	ldr	r0, [pc, #96]	; (80057fc <netif_do_set_ipaddr+0x90>)
 800579c:	f009 fe92 	bl	800f4c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3304      	adds	r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d01c      	beq.n	80057e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3304      	adds	r3, #4
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ffbf 	bl	8005748 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <netif_do_set_ipaddr+0x6a>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	e000      	b.n	80057d8 <netif_do_set_ipaddr+0x6c>
 80057d6:	2300      	movs	r3, #0
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80057dc:	2101      	movs	r1, #1
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f8d2 	bl	8005988 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	080106a4 	.word	0x080106a4
 80057f8:	080107bc 	.word	0x080107bc
 80057fc:	080106f4 	.word	0x080106f4

08005800 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3308      	adds	r3, #8
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d00a      	beq.n	8005830 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <netif_do_set_netmask+0x26>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	e000      	b.n	8005828 <netif_do_set_netmask+0x28>
 8005826:	2300      	movs	r3, #0
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	330c      	adds	r3, #12
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d00a      	beq.n	800586e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <netif_do_set_gw+0x26>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	e000      	b.n	8005866 <netif_do_set_gw+0x28>
 8005864:	2300      	movs	r3, #0
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <netif_set_addr+0x90>)
 800589a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <netif_set_addr+0x90>)
 80058a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <netif_set_addr+0x90>)
 80058ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <netif_set_addr+0x42>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <netif_set_addr+0x46>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <netif_set_addr+0x48>
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	461a      	mov	r2, r3
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff ff49 	bl	800576c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff ff8e 	bl	8005800 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ffa8 	bl	800583e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	461a      	mov	r2, r3
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff ff35 	bl	800576c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005902:	bf00      	nop
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08012ddc 	.word	0x08012ddc

08005910 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005918:	4a04      	ldr	r2, [pc, #16]	; (800592c <netif_set_default+0x1c>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20008294 	.word	0x20008294

08005930 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <netif_set_up+0x1e>
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <netif_set_up+0x4c>)
 8005940:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005944:	490e      	ldr	r1, [pc, #56]	; (8005980 <netif_set_up+0x50>)
 8005946:	480f      	ldr	r0, [pc, #60]	; (8005984 <netif_set_up+0x54>)
 8005948:	f009 fdbc 	bl	800f4c4 <iprintf>
 800594c:	e013      	b.n	8005976 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800596e:	2103      	movs	r1, #3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f809 	bl	8005988 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	080106a4 	.word	0x080106a4
 8005980:	0801082c 	.word	0x0801082c
 8005984:	080106f4 	.word	0x080106f4

08005988 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <netif_issue_reports+0x20>
 800599a:	4b18      	ldr	r3, [pc, #96]	; (80059fc <netif_issue_reports+0x74>)
 800599c:	f240 326d 	movw	r2, #877	; 0x36d
 80059a0:	4917      	ldr	r1, [pc, #92]	; (8005a00 <netif_issue_reports+0x78>)
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <netif_issue_reports+0x7c>)
 80059a4:	f009 fd8e 	bl	800f4c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01e      	beq.n	80059f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f008 f8dd 	bl	800dbac <etharp_request>
 80059f2:	e000      	b.n	80059f6 <netif_issue_reports+0x6e>
    return;
 80059f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	080106a4 	.word	0x080106a4
 8005a00:	08010848 	.word	0x08010848
 8005a04:	080106f4 	.word	0x080106f4

08005a08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <netif_set_down+0x1e>
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <netif_set_down+0x58>)
 8005a18:	f240 329b 	movw	r2, #923	; 0x39b
 8005a1c:	4911      	ldr	r1, [pc, #68]	; (8005a64 <netif_set_down+0x5c>)
 8005a1e:	4812      	ldr	r0, [pc, #72]	; (8005a68 <netif_set_down+0x60>)
 8005a20:	f009 fd50 	bl	800f4c4 <iprintf>
 8005a24:	e019      	b.n	8005a5a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d012      	beq.n	8005a5a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f007 fc67 	bl	800d328 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	080106a4 	.word	0x080106a4
 8005a64:	0801086c 	.word	0x0801086c
 8005a68:	080106f4 	.word	0x080106f4

08005a6c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <netif_set_link_up+0x1e>
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <netif_set_link_up+0x5c>)
 8005a7c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005a80:	4912      	ldr	r1, [pc, #72]	; (8005acc <netif_set_link_up+0x60>)
 8005a82:	4813      	ldr	r0, [pc, #76]	; (8005ad0 <netif_set_link_up+0x64>)
 8005a84:	f009 fd1e 	bl	800f4c4 <iprintf>
 8005a88:	e01b      	b.n	8005ac2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005aaa:	2103      	movs	r1, #3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff6b 	bl	8005988 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <netif_set_link_up+0x56>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	080106a4 	.word	0x080106a4
 8005acc:	0801088c 	.word	0x0801088c
 8005ad0:	080106f4 	.word	0x080106f4

08005ad4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <netif_set_link_down+0x1e>
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <netif_set_link_down+0x54>)
 8005ae4:	f240 4206 	movw	r2, #1030	; 0x406
 8005ae8:	4910      	ldr	r1, [pc, #64]	; (8005b2c <netif_set_link_down+0x58>)
 8005aea:	4811      	ldr	r0, [pc, #68]	; (8005b30 <netif_set_link_down+0x5c>)
 8005aec:	f009 fcea 	bl	800f4c4 <iprintf>
 8005af0:	e017      	b.n	8005b22 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d010      	beq.n	8005b22 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <netif_set_link_down+0x4e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	080106a4 	.word	0x080106a4
 8005b2c:	080108b0 	.word	0x080108b0
 8005b30:	080106f4 	.word	0x080106f4

08005b34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	61da      	str	r2, [r3, #28]
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005b62:	f06f 030b 	mvn.w	r3, #11
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <netif_get_by_index+0x48>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e00c      	b.n	8005ba6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b92:	3301      	adds	r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	79fa      	ldrb	r2, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d101      	bne.n	8005ba0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	e006      	b.n	8005bae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1ef      	bne.n	8005b8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20008290 	.word	0x20008290

08005bc0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <pbuf_free_ooseq+0x38>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <pbuf_free_ooseq+0x3c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e00a      	b.n	8005bea <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f002 fb79 	bl	80082d4 <tcp_free_ooseq>
      return;
 8005be2:	e005      	b.n	8005bf0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f1      	bne.n	8005bd4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20008299 	.word	0x20008299
 8005bfc:	200082a8 	.word	0x200082a8

08005c00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005c04:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <pbuf_pool_is_empty+0x14>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20008299 	.word	0x20008299

08005c18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	460b      	mov	r3, r1
 8005c28:	80fb      	strh	r3, [r7, #6]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88ba      	ldrh	r2, [r7, #4]
 8005c44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005c46:	8b3b      	ldrh	r3, [r7, #24]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	7f3a      	ldrb	r2, [r7, #28]
 8005c52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	73da      	strb	r2, [r3, #15]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	; 0x30
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
 8005c76:	460b      	mov	r3, r1
 8005c78:	80bb      	strh	r3, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005c82:	887b      	ldrh	r3, [r7, #2]
 8005c84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c88:	d07f      	beq.n	8005d8a <pbuf_alloc+0x11e>
 8005c8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c8e:	f300 80c8 	bgt.w	8005e22 <pbuf_alloc+0x1b6>
 8005c92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c96:	d010      	beq.n	8005cba <pbuf_alloc+0x4e>
 8005c98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c9c:	f300 80c1 	bgt.w	8005e22 <pbuf_alloc+0x1b6>
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d002      	beq.n	8005caa <pbuf_alloc+0x3e>
 8005ca4:	2b41      	cmp	r3, #65	; 0x41
 8005ca6:	f040 80bc 	bne.w	8005e22 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	88bb      	ldrh	r3, [r7, #4]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f000 f8d1 	bl	8005e58 <pbuf_alloc_reference>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005cb8:	e0bd      	b.n	8005e36 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005cc2:	88bb      	ldrh	r3, [r7, #4]
 8005cc4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005cc6:	2008      	movs	r0, #8
 8005cc8:	f7ff fbce 	bl	8005468 <memp_malloc>
 8005ccc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005cd4:	f7ff ff94 	bl	8005c00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ce0:	f000 faa8 	bl	8006234 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e0a7      	b.n	8005e38 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cea:	3303      	adds	r3, #3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	8b7a      	ldrh	r2, [r7, #26]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bf28      	it	cs
 8005d00:	4613      	movcs	r3, r2
 8005d02:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d06:	3310      	adds	r3, #16
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	4618      	mov	r0, r3
 8005d14:	89f9      	ldrh	r1, [r7, #14]
 8005d16:	8b7a      	ldrh	r2, [r7, #26]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	460b      	mov	r3, r1
 8005d22:	4601      	mov	r1, r0
 8005d24:	6938      	ldr	r0, [r7, #16]
 8005d26:	f7ff ff77 	bl	8005c18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <pbuf_alloc+0xd8>
 8005d36:	4b42      	ldr	r3, [pc, #264]	; (8005e40 <pbuf_alloc+0x1d4>)
 8005d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d3c:	4941      	ldr	r1, [pc, #260]	; (8005e44 <pbuf_alloc+0x1d8>)
 8005d3e:	4842      	ldr	r0, [pc, #264]	; (8005e48 <pbuf_alloc+0x1dc>)
 8005d40:	f009 fbc0 	bl	800f4c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005d44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d46:	3303      	adds	r3, #3
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005d50:	d106      	bne.n	8005d60 <pbuf_alloc+0xf4>
 8005d52:	4b3b      	ldr	r3, [pc, #236]	; (8005e40 <pbuf_alloc+0x1d4>)
 8005d54:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005d58:	493c      	ldr	r1, [pc, #240]	; (8005e4c <pbuf_alloc+0x1e0>)
 8005d5a:	483b      	ldr	r0, [pc, #236]	; (8005e48 <pbuf_alloc+0x1dc>)
 8005d5c:	f009 fbb2 	bl	800f4c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6a:	e002      	b.n	8005d72 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005d76:	8b7a      	ldrh	r2, [r7, #26]
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005d82:	8b7b      	ldrh	r3, [r7, #26]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d19e      	bne.n	8005cc6 <pbuf_alloc+0x5a>
      break;
 8005d88:	e055      	b.n	8005e36 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	88bb      	ldrh	r3, [r7, #4]
 8005d98:	3303      	adds	r3, #3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f023 0303 	bic.w	r3, r3, #3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005da6:	8b3b      	ldrh	r3, [r7, #24]
 8005da8:	3310      	adds	r3, #16
 8005daa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005dac:	8b3a      	ldrh	r2, [r7, #24]
 8005dae:	88bb      	ldrh	r3, [r7, #4]
 8005db0:	3303      	adds	r3, #3
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d306      	bcc.n	8005dc8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005dba:	8afa      	ldrh	r2, [r7, #22]
 8005dbc:	88bb      	ldrh	r3, [r7, #4]
 8005dbe:	3303      	adds	r3, #3
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d201      	bcs.n	8005dcc <pbuf_alloc+0x160>
        return NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e035      	b.n	8005e38 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005dcc:	8afb      	ldrh	r3, [r7, #22]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff f9ba 	bl	8005148 <mem_malloc>
 8005dd4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <pbuf_alloc+0x174>
        return NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e02b      	b.n	8005e38 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005de0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005de2:	3310      	adds	r3, #16
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	4413      	add	r3, r2
 8005de8:	3303      	adds	r3, #3
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	4618      	mov	r0, r3
 8005df0:	88b9      	ldrh	r1, [r7, #4]
 8005df2:	88ba      	ldrh	r2, [r7, #4]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4601      	mov	r1, r0
 8005e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e02:	f7ff ff09 	bl	8005c18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <pbuf_alloc+0x1c8>
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <pbuf_alloc+0x1d4>)
 8005e14:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005e18:	490d      	ldr	r1, [pc, #52]	; (8005e50 <pbuf_alloc+0x1e4>)
 8005e1a:	480b      	ldr	r0, [pc, #44]	; (8005e48 <pbuf_alloc+0x1dc>)
 8005e1c:	f009 fb52 	bl	800f4c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005e20:	e008      	b.n	8005e34 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <pbuf_alloc+0x1d4>)
 8005e24:	f240 1227 	movw	r2, #295	; 0x127
 8005e28:	490a      	ldr	r1, [pc, #40]	; (8005e54 <pbuf_alloc+0x1e8>)
 8005e2a:	4807      	ldr	r0, [pc, #28]	; (8005e48 <pbuf_alloc+0x1dc>)
 8005e2c:	f009 fb4a 	bl	800f4c4 <iprintf>
      return NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e001      	b.n	8005e38 <pbuf_alloc+0x1cc>
      break;
 8005e34:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	080108d4 	.word	0x080108d4
 8005e44:	08010904 	.word	0x08010904
 8005e48:	08010934 	.word	0x08010934
 8005e4c:	0801095c 	.word	0x0801095c
 8005e50:	08010990 	.word	0x08010990
 8005e54:	080109bc 	.word	0x080109bc

08005e58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
 8005e64:	4613      	mov	r3, r2
 8005e66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005e68:	883b      	ldrh	r3, [r7, #0]
 8005e6a:	2b41      	cmp	r3, #65	; 0x41
 8005e6c:	d009      	beq.n	8005e82 <pbuf_alloc_reference+0x2a>
 8005e6e:	883b      	ldrh	r3, [r7, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d006      	beq.n	8005e82 <pbuf_alloc_reference+0x2a>
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <pbuf_alloc_reference+0x5c>)
 8005e76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005e7a:	490f      	ldr	r1, [pc, #60]	; (8005eb8 <pbuf_alloc_reference+0x60>)
 8005e7c:	480f      	ldr	r0, [pc, #60]	; (8005ebc <pbuf_alloc_reference+0x64>)
 8005e7e:	f009 fb21 	bl	800f4c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005e82:	2007      	movs	r0, #7
 8005e84:	f7ff faf0 	bl	8005468 <memp_malloc>
 8005e88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e00b      	b.n	8005eac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005e94:	8879      	ldrh	r1, [r7, #2]
 8005e96:	887a      	ldrh	r2, [r7, #2]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	883b      	ldrh	r3, [r7, #0]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff feb7 	bl	8005c18 <pbuf_init_alloced_pbuf>
  return p;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	080108d4 	.word	0x080108d4
 8005eb8:	080109d8 	.word	0x080109d8
 8005ebc:	08010934 	.word	0x08010934

08005ec0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	81bb      	strh	r3, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005ed8:	8a7b      	ldrh	r3, [r7, #18]
 8005eda:	3303      	adds	r3, #3
 8005edc:	f023 0203 	bic.w	r2, r3, #3
 8005ee0:	89bb      	ldrh	r3, [r7, #12]
 8005ee2:	441a      	add	r2, r3
 8005ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d901      	bls.n	8005eee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e018      	b.n	8005f20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ef4:	8a7b      	ldrh	r3, [r7, #18]
 8005ef6:	3303      	adds	r3, #3
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	4413      	add	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	89b9      	ldrh	r1, [r7, #12]
 8005f0c:	89ba      	ldrh	r2, [r7, #12]
 8005f0e:	2302      	movs	r3, #2
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	897b      	ldrh	r3, [r7, #10]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	460b      	mov	r3, r1
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	f7ff fe7d 	bl	8005c18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005f1e:	687b      	ldr	r3, [r7, #4]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <pbuf_realloc+0x20>
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <pbuf_realloc+0xfc>)
 8005f3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005f40:	4939      	ldr	r1, [pc, #228]	; (8006028 <pbuf_realloc+0x100>)
 8005f42:	483a      	ldr	r0, [pc, #232]	; (800602c <pbuf_realloc+0x104>)
 8005f44:	f009 fabe 	bl	800f4c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	891b      	ldrh	r3, [r3, #8]
 8005f4c:	887a      	ldrh	r2, [r7, #2]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d263      	bcs.n	800601a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	891a      	ldrh	r2, [r3, #8]
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005f5c:	887b      	ldrh	r3, [r7, #2]
 8005f5e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005f64:	e018      	b.n	8005f98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	895b      	ldrh	r3, [r3, #10]
 8005f6a:	897a      	ldrh	r2, [r7, #10]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	891a      	ldrh	r2, [r3, #8]
 8005f74:	893b      	ldrh	r3, [r7, #8]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <pbuf_realloc+0x70>
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <pbuf_realloc+0xfc>)
 8005f8c:	f240 12af 	movw	r2, #431	; 0x1af
 8005f90:	4927      	ldr	r1, [pc, #156]	; (8006030 <pbuf_realloc+0x108>)
 8005f92:	4826      	ldr	r0, [pc, #152]	; (800602c <pbuf_realloc+0x104>)
 8005f94:	f009 fa96 	bl	800f4c4 <iprintf>
  while (rem_len > q->len) {
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	895b      	ldrh	r3, [r3, #10]
 8005f9c:	897a      	ldrh	r2, [r7, #10]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d8e1      	bhi.n	8005f66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d121      	bne.n	8005ff2 <pbuf_realloc+0xca>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	895b      	ldrh	r3, [r3, #10]
 8005fb2:	897a      	ldrh	r2, [r7, #10]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d01c      	beq.n	8005ff2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	7b5b      	ldrb	r3, [r3, #13]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	897b      	ldrh	r3, [r7, #10]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7fe ffba 	bl	8004f50 <mem_trim>
 8005fdc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <pbuf_realloc+0xca>
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <pbuf_realloc+0xfc>)
 8005fe6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005fea:	4912      	ldr	r1, [pc, #72]	; (8006034 <pbuf_realloc+0x10c>)
 8005fec:	480f      	ldr	r0, [pc, #60]	; (800602c <pbuf_realloc+0x104>)
 8005fee:	f009 fa69 	bl	800f4c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	897a      	ldrh	r2, [r7, #10]
 8005ff6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	895a      	ldrh	r2, [r3, #10]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f911 	bl	8006234 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e000      	b.n	800601c <pbuf_realloc+0xf4>
    return;
 800601a:	bf00      	nop

}
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	080108d4 	.word	0x080108d4
 8006028:	080109ec 	.word	0x080109ec
 800602c:	08010934 	.word	0x08010934
 8006030:	08010a04 	.word	0x08010a04
 8006034:	08010a1c 	.word	0x08010a1c

08006038 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <pbuf_add_header_impl+0x22>
 800604c:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <pbuf_add_header_impl+0xc4>)
 800604e:	f240 12df 	movw	r2, #479	; 0x1df
 8006052:	492b      	ldr	r1, [pc, #172]	; (8006100 <pbuf_add_header_impl+0xc8>)
 8006054:	482b      	ldr	r0, [pc, #172]	; (8006104 <pbuf_add_header_impl+0xcc>)
 8006056:	f009 fa35 	bl	800f4c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <pbuf_add_header_impl+0x30>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d301      	bcc.n	800606c <pbuf_add_header_impl+0x34>
    return 1;
 8006068:	2301      	movs	r3, #1
 800606a:	e043      	b.n	80060f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <pbuf_add_header_impl+0x3e>
    return 0;
 8006072:	2300      	movs	r3, #0
 8006074:	e03e      	b.n	80060f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	891a      	ldrh	r2, [r3, #8]
 800607e:	8a7b      	ldrh	r3, [r7, #18]
 8006080:	4413      	add	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	8a7a      	ldrh	r2, [r7, #18]
 8006086:	429a      	cmp	r2, r3
 8006088:	d901      	bls.n	800608e <pbuf_add_header_impl+0x56>
    return 1;
 800608a:	2301      	movs	r3, #1
 800608c:	e032      	b.n	80060f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	7b1b      	ldrb	r3, [r3, #12]
 8006092:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006094:	8a3b      	ldrh	r3, [r7, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	425b      	negs	r3, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3310      	adds	r3, #16
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d20d      	bcs.n	80060d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e01d      	b.n	80060f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	425b      	negs	r3, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e001      	b.n	80060d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e011      	b.n	80060f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	895a      	ldrh	r2, [r3, #10]
 80060da:	8a7b      	ldrh	r3, [r7, #18]
 80060dc:	4413      	add	r3, r2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	891a      	ldrh	r2, [r3, #8]
 80060e8:	8a7b      	ldrh	r3, [r7, #18]
 80060ea:	4413      	add	r3, r2
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	811a      	strh	r2, [r3, #8]


  return 0;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	080108d4 	.word	0x080108d4
 8006100:	08010a38 	.word	0x08010a38
 8006104:	08010934 	.word	0x08010934

08006108 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006112:	2200      	movs	r2, #0
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ff8e 	bl	8006038 <pbuf_add_header_impl>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <pbuf_remove_header+0x1e>
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <pbuf_remove_header+0x94>)
 800613a:	f240 224b 	movw	r2, #587	; 0x24b
 800613e:	4920      	ldr	r1, [pc, #128]	; (80061c0 <pbuf_remove_header+0x98>)
 8006140:	4820      	ldr	r0, [pc, #128]	; (80061c4 <pbuf_remove_header+0x9c>)
 8006142:	f009 f9bf 	bl	800f4c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <pbuf_remove_header+0x2c>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006152:	d301      	bcc.n	8006158 <pbuf_remove_header+0x30>
    return 1;
 8006154:	2301      	movs	r3, #1
 8006156:	e02c      	b.n	80061b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <pbuf_remove_header+0x3a>
    return 0;
 800615e:	2300      	movs	r3, #0
 8006160:	e027      	b.n	80061b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	895b      	ldrh	r3, [r3, #10]
 800616a:	89fa      	ldrh	r2, [r7, #14]
 800616c:	429a      	cmp	r2, r3
 800616e:	d908      	bls.n	8006182 <pbuf_remove_header+0x5a>
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <pbuf_remove_header+0x94>)
 8006172:	f240 2255 	movw	r2, #597	; 0x255
 8006176:	4914      	ldr	r1, [pc, #80]	; (80061c8 <pbuf_remove_header+0xa0>)
 8006178:	4812      	ldr	r0, [pc, #72]	; (80061c4 <pbuf_remove_header+0x9c>)
 800617a:	f009 f9a3 	bl	800f4c4 <iprintf>
 800617e:	2301      	movs	r3, #1
 8006180:	e017      	b.n	80061b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	895a      	ldrh	r2, [r3, #10]
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	891a      	ldrh	r2, [r3, #8]
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	080108d4 	.word	0x080108d4
 80061c0:	08010a38 	.word	0x08010a38
 80061c4:	08010934 	.word	0x08010934
 80061c8:	08010a44 	.word	0x08010a44

080061cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80061dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da08      	bge.n	80061f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80061e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061e8:	425b      	negs	r3, r3
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff9b 	bl	8006128 <pbuf_remove_header>
 80061f2:	4603      	mov	r3, r0
 80061f4:	e007      	b.n	8006206 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80061f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061fa:	787a      	ldrb	r2, [r7, #1]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff1a 	bl	8006038 <pbuf_add_header_impl>
 8006204:	4603      	mov	r3, r0
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800621a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800621e:	2201      	movs	r2, #1
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ffd2 	bl	80061cc <pbuf_header_impl>
 8006228:	4603      	mov	r3, r0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <pbuf_free+0x22>
 8006248:	4b38      	ldr	r3, [pc, #224]	; (800632c <pbuf_free+0xf8>)
 800624a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800624e:	4938      	ldr	r1, [pc, #224]	; (8006330 <pbuf_free+0xfc>)
 8006250:	4838      	ldr	r0, [pc, #224]	; (8006334 <pbuf_free+0x100>)
 8006252:	f009 f937 	bl	800f4c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006256:	2300      	movs	r3, #0
 8006258:	e063      	b.n	8006322 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800625e:	e05c      	b.n	800631a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7b9b      	ldrb	r3, [r3, #14]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <pbuf_free+0x42>
 8006268:	4b30      	ldr	r3, [pc, #192]	; (800632c <pbuf_free+0xf8>)
 800626a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800626e:	4932      	ldr	r1, [pc, #200]	; (8006338 <pbuf_free+0x104>)
 8006270:	4830      	ldr	r0, [pc, #192]	; (8006334 <pbuf_free+0x100>)
 8006272:	f009 f927 	bl	800f4c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7b9b      	ldrb	r3, [r3, #14]
 800627a:	3b01      	subs	r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	739a      	strb	r2, [r3, #14]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	7b9b      	ldrb	r3, [r3, #14]
 8006286:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006288:	7dbb      	ldrb	r3, [r7, #22]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d143      	bne.n	8006316 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7b1b      	ldrb	r3, [r3, #12]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7b5b      	ldrb	r3, [r3, #13]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d011      	beq.n	80062ce <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <pbuf_free+0x90>
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <pbuf_free+0xf8>)
 80062b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80062bc:	491f      	ldr	r1, [pc, #124]	; (800633c <pbuf_free+0x108>)
 80062be:	481d      	ldr	r0, [pc, #116]	; (8006334 <pbuf_free+0x100>)
 80062c0:	f009 f900 	bl	800f4c4 <iprintf>
        pc->custom_free_function(p);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
 80062cc:	e01d      	b.n	800630a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d104      	bne.n	80062de <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	2008      	movs	r0, #8
 80062d8:	f7ff f936 	bl	8005548 <memp_free>
 80062dc:	e015      	b.n	800630a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d104      	bne.n	80062ee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	2007      	movs	r0, #7
 80062e8:	f7ff f92e 	bl	8005548 <memp_free>
 80062ec:	e00d      	b.n	800630a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <pbuf_free+0xc8>
          mem_free(p);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fe fdc1 	bl	8004e7c <mem_free>
 80062fa:	e006      	b.n	800630a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <pbuf_free+0xf8>)
 80062fe:	f240 320f 	movw	r2, #783	; 0x30f
 8006302:	490f      	ldr	r1, [pc, #60]	; (8006340 <pbuf_free+0x10c>)
 8006304:	480b      	ldr	r0, [pc, #44]	; (8006334 <pbuf_free+0x100>)
 8006306:	f009 f8dd 	bl	800f4c4 <iprintf>
        }
      }
      count++;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	3301      	adds	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	e001      	b.n	800631a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d19f      	bne.n	8006260 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	080108d4 	.word	0x080108d4
 8006330:	08010a38 	.word	0x08010a38
 8006334:	08010934 	.word	0x08010934
 8006338:	08010a64 	.word	0x08010a64
 800633c:	08010a7c 	.word	0x08010a7c
 8006340:	08010aa0 	.word	0x08010aa0

08006344 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006350:	e005      	b.n	800635e <pbuf_clen+0x1a>
    ++len;
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	3301      	adds	r3, #1
 8006356:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f6      	bne.n	8006352 <pbuf_clen+0xe>
  }
  return len;
 8006364:	89fb      	ldrh	r3, [r7, #14]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d010      	beq.n	80063a4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7b9b      	ldrb	r3, [r3, #14]
 8006386:	3301      	adds	r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7b9b      	ldrb	r3, [r3, #14]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <pbuf_ref+0x30>
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <pbuf_ref+0x38>)
 8006398:	f240 3242 	movw	r2, #834	; 0x342
 800639c:	4904      	ldr	r1, [pc, #16]	; (80063b0 <pbuf_ref+0x3c>)
 800639e:	4805      	ldr	r0, [pc, #20]	; (80063b4 <pbuf_ref+0x40>)
 80063a0:	f009 f890 	bl	800f4c4 <iprintf>
  }
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	080108d4 	.word	0x080108d4
 80063b0:	08010ab4 	.word	0x08010ab4
 80063b4:	08010934 	.word	0x08010934

080063b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <pbuf_cat+0x16>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <pbuf_cat+0x26>
 80063ce:	4b20      	ldr	r3, [pc, #128]	; (8006450 <pbuf_cat+0x98>)
 80063d0:	f240 3259 	movw	r2, #857	; 0x359
 80063d4:	491f      	ldr	r1, [pc, #124]	; (8006454 <pbuf_cat+0x9c>)
 80063d6:	4820      	ldr	r0, [pc, #128]	; (8006458 <pbuf_cat+0xa0>)
 80063d8:	f009 f874 	bl	800f4c4 <iprintf>
 80063dc:	e034      	b.n	8006448 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e00a      	b.n	80063fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	891a      	ldrh	r2, [r3, #8]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	891b      	ldrh	r3, [r3, #8]
 80063ec:	4413      	add	r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	891a      	ldrh	r2, [r3, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	895b      	ldrh	r3, [r3, #10]
 800640a:	429a      	cmp	r2, r3
 800640c:	d006      	beq.n	800641c <pbuf_cat+0x64>
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <pbuf_cat+0x98>)
 8006410:	f240 3262 	movw	r2, #866	; 0x362
 8006414:	4911      	ldr	r1, [pc, #68]	; (800645c <pbuf_cat+0xa4>)
 8006416:	4810      	ldr	r0, [pc, #64]	; (8006458 <pbuf_cat+0xa0>)
 8006418:	f009 f854 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <pbuf_cat+0x7a>
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <pbuf_cat+0x98>)
 8006426:	f240 3263 	movw	r2, #867	; 0x363
 800642a:	490d      	ldr	r1, [pc, #52]	; (8006460 <pbuf_cat+0xa8>)
 800642c:	480a      	ldr	r0, [pc, #40]	; (8006458 <pbuf_cat+0xa0>)
 800642e:	f009 f849 	bl	800f4c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	891a      	ldrh	r2, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	891b      	ldrh	r3, [r3, #8]
 800643a:	4413      	add	r3, r2
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	080108d4 	.word	0x080108d4
 8006454:	08010ac8 	.word	0x08010ac8
 8006458:	08010934 	.word	0x08010934
 800645c:	08010b00 	.word	0x08010b00
 8006460:	08010b30 	.word	0x08010b30

08006464 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <pbuf_copy+0x2a>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <pbuf_copy+0x2a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	891a      	ldrh	r2, [r3, #8]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	891b      	ldrh	r3, [r3, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d209      	bcs.n	80064a2 <pbuf_copy+0x3e>
 800648e:	4b57      	ldr	r3, [pc, #348]	; (80065ec <pbuf_copy+0x188>)
 8006490:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006494:	4956      	ldr	r1, [pc, #344]	; (80065f0 <pbuf_copy+0x18c>)
 8006496:	4857      	ldr	r0, [pc, #348]	; (80065f4 <pbuf_copy+0x190>)
 8006498:	f009 f814 	bl	800f4c4 <iprintf>
 800649c:	f06f 030f 	mvn.w	r3, #15
 80064a0:	e09f      	b.n	80065e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	895b      	ldrh	r3, [r3, #10]
 80064a6:	461a      	mov	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	895b      	ldrh	r3, [r3, #10]
 80064b0:	4619      	mov	r1, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1acb      	subs	r3, r1, r3
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d306      	bcc.n	80064c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	895b      	ldrh	r3, [r3, #10]
 80064be:	461a      	mov	r2, r3
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e005      	b.n	80064d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	895b      	ldrh	r3, [r3, #10]
 80064cc:	461a      	mov	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	18d0      	adds	r0, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4413      	add	r3, r2
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4619      	mov	r1, r3
 80064e8:	f009 f8c7 	bl	800f67a <memcpy>
    offset_to += len;
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	895b      	ldrh	r3, [r3, #10]
 8006500:	461a      	mov	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4293      	cmp	r3, r2
 8006506:	d906      	bls.n	8006516 <pbuf_copy+0xb2>
 8006508:	4b38      	ldr	r3, [pc, #224]	; (80065ec <pbuf_copy+0x188>)
 800650a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800650e:	493a      	ldr	r1, [pc, #232]	; (80065f8 <pbuf_copy+0x194>)
 8006510:	4838      	ldr	r0, [pc, #224]	; (80065f4 <pbuf_copy+0x190>)
 8006512:	f008 ffd7 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	895b      	ldrh	r3, [r3, #10]
 800651a:	461a      	mov	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4293      	cmp	r3, r2
 8006520:	d906      	bls.n	8006530 <pbuf_copy+0xcc>
 8006522:	4b32      	ldr	r3, [pc, #200]	; (80065ec <pbuf_copy+0x188>)
 8006524:	f240 32da 	movw	r2, #986	; 0x3da
 8006528:	4934      	ldr	r1, [pc, #208]	; (80065fc <pbuf_copy+0x198>)
 800652a:	4832      	ldr	r0, [pc, #200]	; (80065f4 <pbuf_copy+0x190>)
 800652c:	f008 ffca 	bl	800f4c4 <iprintf>
    if (offset_from >= p_from->len) {
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	895b      	ldrh	r3, [r3, #10]
 8006534:	461a      	mov	r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4293      	cmp	r3, r2
 800653a:	d304      	bcc.n	8006546 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	895b      	ldrh	r3, [r3, #10]
 800654a:	461a      	mov	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4293      	cmp	r3, r2
 8006550:	d114      	bne.n	800657c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <pbuf_copy+0x118>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <pbuf_copy+0x118>
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <pbuf_copy+0x188>)
 800656a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800656e:	4924      	ldr	r1, [pc, #144]	; (8006600 <pbuf_copy+0x19c>)
 8006570:	4820      	ldr	r0, [pc, #128]	; (80065f4 <pbuf_copy+0x190>)
 8006572:	f008 ffa7 	bl	800f4c4 <iprintf>
 8006576:	f06f 030f 	mvn.w	r3, #15
 800657a:	e032      	b.n	80065e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <pbuf_copy+0x146>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	895a      	ldrh	r2, [r3, #10]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	891b      	ldrh	r3, [r3, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d10d      	bne.n	80065aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <pbuf_copy+0x146>
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <pbuf_copy+0x188>)
 8006598:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800659c:	4919      	ldr	r1, [pc, #100]	; (8006604 <pbuf_copy+0x1a0>)
 800659e:	4815      	ldr	r0, [pc, #84]	; (80065f4 <pbuf_copy+0x190>)
 80065a0:	f008 ff90 	bl	800f4c4 <iprintf>
 80065a4:	f06f 0305 	mvn.w	r3, #5
 80065a8:	e01b      	b.n	80065e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d013      	beq.n	80065d8 <pbuf_copy+0x174>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	895a      	ldrh	r2, [r3, #10]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	891b      	ldrh	r3, [r3, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d10d      	bne.n	80065d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <pbuf_copy+0x174>
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <pbuf_copy+0x188>)
 80065c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80065ca:	490e      	ldr	r1, [pc, #56]	; (8006604 <pbuf_copy+0x1a0>)
 80065cc:	4809      	ldr	r0, [pc, #36]	; (80065f4 <pbuf_copy+0x190>)
 80065ce:	f008 ff79 	bl	800f4c4 <iprintf>
 80065d2:	f06f 0305 	mvn.w	r3, #5
 80065d6:	e004      	b.n	80065e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af61 	bne.w	80064a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	080108d4 	.word	0x080108d4
 80065f0:	08010b7c 	.word	0x08010b7c
 80065f4:	08010934 	.word	0x08010934
 80065f8:	08010bac 	.word	0x08010bac
 80065fc:	08010bc4 	.word	0x08010bc4
 8006600:	08010be0 	.word	0x08010be0
 8006604:	08010bf0 	.word	0x08010bf0

08006608 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	460b      	mov	r3, r1
 8006618:	80fb      	strh	r3, [r7, #6]
 800661a:	4613      	mov	r3, r2
 800661c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <pbuf_copy_partial+0x36>
 800662c:	4b2b      	ldr	r3, [pc, #172]	; (80066dc <pbuf_copy_partial+0xd4>)
 800662e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006632:	492b      	ldr	r1, [pc, #172]	; (80066e0 <pbuf_copy_partial+0xd8>)
 8006634:	482b      	ldr	r0, [pc, #172]	; (80066e4 <pbuf_copy_partial+0xdc>)
 8006636:	f008 ff45 	bl	800f4c4 <iprintf>
 800663a:	2300      	movs	r3, #0
 800663c:	e04a      	b.n	80066d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <pbuf_copy_partial+0x4e>
 8006644:	4b25      	ldr	r3, [pc, #148]	; (80066dc <pbuf_copy_partial+0xd4>)
 8006646:	f240 420b 	movw	r2, #1035	; 0x40b
 800664a:	4927      	ldr	r1, [pc, #156]	; (80066e8 <pbuf_copy_partial+0xe0>)
 800664c:	4825      	ldr	r0, [pc, #148]	; (80066e4 <pbuf_copy_partial+0xdc>)
 800664e:	f008 ff39 	bl	800f4c4 <iprintf>
 8006652:	2300      	movs	r3, #0
 8006654:	e03e      	b.n	80066d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	e034      	b.n	80066c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800665c:	88bb      	ldrh	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <pbuf_copy_partial+0x70>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	895b      	ldrh	r3, [r3, #10]
 8006666:	88ba      	ldrh	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d305      	bcc.n	8006678 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	895b      	ldrh	r3, [r3, #10]
 8006670:	88ba      	ldrh	r2, [r7, #4]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	80bb      	strh	r3, [r7, #4]
 8006676:	e023      	b.n	80066c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	895a      	ldrh	r2, [r3, #10]
 800667c:	88bb      	ldrh	r3, [r7, #4]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006682:	8b3a      	ldrh	r2, [r7, #24]
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	429a      	cmp	r2, r3
 8006688:	d901      	bls.n	800668e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800668e:	8b7b      	ldrh	r3, [r7, #26]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	18d0      	adds	r0, r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	88bb      	ldrh	r3, [r7, #4]
 800669a:	4413      	add	r3, r2
 800669c:	8b3a      	ldrh	r2, [r7, #24]
 800669e:	4619      	mov	r1, r3
 80066a0:	f008 ffeb 	bl	800f67a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80066a4:	8afa      	ldrh	r2, [r7, #22]
 80066a6:	8b3b      	ldrh	r3, [r7, #24]
 80066a8:	4413      	add	r3, r2
 80066aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80066ac:	8b7a      	ldrh	r2, [r7, #26]
 80066ae:	8b3b      	ldrh	r3, [r7, #24]
 80066b0:	4413      	add	r3, r2
 80066b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	8b3b      	ldrh	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <pbuf_copy_partial+0xca>
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1c4      	bne.n	800665c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80066d2:	8afb      	ldrh	r3, [r7, #22]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	080108d4 	.word	0x080108d4
 80066e0:	08010c1c 	.word	0x08010c1c
 80066e4:	08010934 	.word	0x08010934
 80066e8:	08010c3c 	.word	0x08010c3c

080066ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	603a      	str	r2, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
 80066f8:	460b      	mov	r3, r1
 80066fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	8919      	ldrh	r1, [r3, #8]
 8006700:	88ba      	ldrh	r2, [r7, #4]
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fab1 	bl	8005c6c <pbuf_alloc>
 800670a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <pbuf_clone+0x2a>
    return NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	e011      	b.n	800673a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fea3 	bl	8006464 <pbuf_copy>
 800671e:	4603      	mov	r3, r0
 8006720:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006722:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <pbuf_clone+0x4c>
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <pbuf_clone+0x58>)
 800672c:	f240 5224 	movw	r2, #1316	; 0x524
 8006730:	4905      	ldr	r1, [pc, #20]	; (8006748 <pbuf_clone+0x5c>)
 8006732:	4806      	ldr	r0, [pc, #24]	; (800674c <pbuf_clone+0x60>)
 8006734:	f008 fec6 	bl	800f4c4 <iprintf>
  return q;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	080108d4 	.word	0x080108d4
 8006748:	08010d48 	.word	0x08010d48
 800674c:	08010934 	.word	0x08010934

08006750 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006754:	f008 fdb6 	bl	800f2c4 <rand>
 8006758:	4603      	mov	r3, r0
 800675a:	b29b      	uxth	r3, r3
 800675c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006760:	b29b      	uxth	r3, r3
 8006762:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006766:	b29a      	uxth	r2, r3
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <tcp_init+0x20>)
 800676a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800676c:	bf00      	nop
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000020 	.word	0x20000020

08006774 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7d1b      	ldrb	r3, [r3, #20]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <tcp_free+0x1c>
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <tcp_free+0x2c>)
 8006786:	22d4      	movs	r2, #212	; 0xd4
 8006788:	4906      	ldr	r1, [pc, #24]	; (80067a4 <tcp_free+0x30>)
 800678a:	4807      	ldr	r0, [pc, #28]	; (80067a8 <tcp_free+0x34>)
 800678c:	f008 fe9a 	bl	800f4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	2001      	movs	r0, #1
 8006794:	f7fe fed8 	bl	8005548 <memp_free>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	08010dd4 	.word	0x08010dd4
 80067a4:	08010e04 	.word	0x08010e04
 80067a8:	08010e18 	.word	0x08010e18

080067ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7d1b      	ldrb	r3, [r3, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <tcp_free_listen+0x1c>
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <tcp_free_listen+0x2c>)
 80067be:	22df      	movs	r2, #223	; 0xdf
 80067c0:	4906      	ldr	r1, [pc, #24]	; (80067dc <tcp_free_listen+0x30>)
 80067c2:	4807      	ldr	r0, [pc, #28]	; (80067e0 <tcp_free_listen+0x34>)
 80067c4:	f008 fe7e 	bl	800f4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	2002      	movs	r0, #2
 80067cc:	f7fe febc 	bl	8005548 <memp_free>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08010dd4 	.word	0x08010dd4
 80067dc:	08010e40 	.word	0x08010e40
 80067e0:	08010e18 	.word	0x08010e18

080067e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80067e8:	f001 f85c 	bl	80078a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <tcp_tmr+0x28>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <tcp_tmr+0x28>)
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	4b04      	ldr	r3, [pc, #16]	; (800680c <tcp_tmr+0x28>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006804:	f000 fd0e 	bl	8007224 <tcp_slowtmr>
  }
}
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200082b1 	.word	0x200082b1

08006810 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <tcp_remove_listener+0x1c>
 8006820:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <tcp_remove_listener+0x48>)
 8006822:	22ff      	movs	r2, #255	; 0xff
 8006824:	490d      	ldr	r1, [pc, #52]	; (800685c <tcp_remove_listener+0x4c>)
 8006826:	480e      	ldr	r0, [pc, #56]	; (8006860 <tcp_remove_listener+0x50>)
 8006828:	f008 fe4c 	bl	800f4c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e00a      	b.n	8006848 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d102      	bne.n	8006842 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f1      	bne.n	8006832 <tcp_remove_listener+0x22>
    }
  }
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08010dd4 	.word	0x08010dd4
 800685c:	08010e5c 	.word	0x08010e5c
 8006860:	08010e18 	.word	0x08010e18

08006864 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <tcp_listen_closed+0x1c>
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <tcp_listen_closed+0x60>)
 8006874:	f240 1211 	movw	r2, #273	; 0x111
 8006878:	4913      	ldr	r1, [pc, #76]	; (80068c8 <tcp_listen_closed+0x64>)
 800687a:	4814      	ldr	r0, [pc, #80]	; (80068cc <tcp_listen_closed+0x68>)
 800687c:	f008 fe22 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7d1b      	ldrb	r3, [r3, #20]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d006      	beq.n	8006896 <tcp_listen_closed+0x32>
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <tcp_listen_closed+0x60>)
 800688a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800688e:	4910      	ldr	r1, [pc, #64]	; (80068d0 <tcp_listen_closed+0x6c>)
 8006890:	480e      	ldr	r0, [pc, #56]	; (80068cc <tcp_listen_closed+0x68>)
 8006892:	f008 fe17 	bl	800f4c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006896:	2301      	movs	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e00b      	b.n	80068b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800689c:	4a0d      	ldr	r2, [pc, #52]	; (80068d4 <tcp_listen_closed+0x70>)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ffb1 	bl	8006810 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d9f0      	bls.n	800689c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	08010dd4 	.word	0x08010dd4
 80068c8:	08010e84 	.word	0x08010e84
 80068cc:	08010e18 	.word	0x08010e18
 80068d0:	08010e90 	.word	0x08010e90
 80068d4:	08012db4 	.word	0x08012db4

080068d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80068d8:	b5b0      	push	{r4, r5, r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af04      	add	r7, sp, #16
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <tcp_close_shutdown+0x20>
 80068ea:	4b63      	ldr	r3, [pc, #396]	; (8006a78 <tcp_close_shutdown+0x1a0>)
 80068ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80068f0:	4962      	ldr	r1, [pc, #392]	; (8006a7c <tcp_close_shutdown+0x1a4>)
 80068f2:	4863      	ldr	r0, [pc, #396]	; (8006a80 <tcp_close_shutdown+0x1a8>)
 80068f4:	f008 fde6 	bl	800f4c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d066      	beq.n	80069cc <tcp_close_shutdown+0xf4>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	2b04      	cmp	r3, #4
 8006904:	d003      	beq.n	800690e <tcp_close_shutdown+0x36>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7d1b      	ldrb	r3, [r3, #20]
 800690a:	2b07      	cmp	r3, #7
 800690c:	d15e      	bne.n	80069cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <tcp_close_shutdown+0x48>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800691e:	d055      	beq.n	80069cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8b5b      	ldrh	r3, [r3, #26]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <tcp_close_shutdown+0x62>
 800692c:	4b52      	ldr	r3, [pc, #328]	; (8006a78 <tcp_close_shutdown+0x1a0>)
 800692e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006932:	4954      	ldr	r1, [pc, #336]	; (8006a84 <tcp_close_shutdown+0x1ac>)
 8006934:	4852      	ldr	r0, [pc, #328]	; (8006a80 <tcp_close_shutdown+0x1a8>)
 8006936:	f008 fdc5 	bl	800f4c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006942:	687d      	ldr	r5, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	8ad2      	ldrh	r2, [r2, #22]
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	8b09      	ldrh	r1, [r1, #24]
 8006950:	9102      	str	r1, [sp, #8]
 8006952:	9201      	str	r2, [sp, #4]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	462b      	mov	r3, r5
 8006958:	4622      	mov	r2, r4
 800695a:	4601      	mov	r1, r0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f005 fd25 	bl	800c3ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fb02 	bl	8007f6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006968:	4b47      	ldr	r3, [pc, #284]	; (8006a88 <tcp_close_shutdown+0x1b0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d105      	bne.n	800697e <tcp_close_shutdown+0xa6>
 8006972:	4b45      	ldr	r3, [pc, #276]	; (8006a88 <tcp_close_shutdown+0x1b0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a43      	ldr	r2, [pc, #268]	; (8006a88 <tcp_close_shutdown+0x1b0>)
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e013      	b.n	80069a6 <tcp_close_shutdown+0xce>
 800697e:	4b42      	ldr	r3, [pc, #264]	; (8006a88 <tcp_close_shutdown+0x1b0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e00c      	b.n	80069a0 <tcp_close_shutdown+0xc8>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d104      	bne.n	800699a <tcp_close_shutdown+0xc2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	e005      	b.n	80069a6 <tcp_close_shutdown+0xce>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1ef      	bne.n	8006986 <tcp_close_shutdown+0xae>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	4b37      	ldr	r3, [pc, #220]	; (8006a8c <tcp_close_shutdown+0x1b4>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80069b2:	4b37      	ldr	r3, [pc, #220]	; (8006a90 <tcp_close_shutdown+0x1b8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d102      	bne.n	80069c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80069bc:	f003 ff9a 	bl	800a8f4 <tcp_trigger_input_pcb_close>
 80069c0:	e002      	b.n	80069c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fed6 	bl	8006774 <tcp_free>
      }
      return ERR_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e050      	b.n	8006a6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7d1b      	ldrb	r3, [r3, #20]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d03b      	beq.n	8006a4c <tcp_close_shutdown+0x174>
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	dc44      	bgt.n	8006a62 <tcp_close_shutdown+0x18a>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <tcp_close_shutdown+0x10a>
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d02a      	beq.n	8006a36 <tcp_close_shutdown+0x15e>
 80069e0:	e03f      	b.n	8006a62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8adb      	ldrh	r3, [r3, #22]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d021      	beq.n	8006a2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069ea:	4b2a      	ldr	r3, [pc, #168]	; (8006a94 <tcp_close_shutdown+0x1bc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d105      	bne.n	8006a00 <tcp_close_shutdown+0x128>
 80069f4:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <tcp_close_shutdown+0x1bc>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <tcp_close_shutdown+0x1bc>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e013      	b.n	8006a28 <tcp_close_shutdown+0x150>
 8006a00:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <tcp_close_shutdown+0x1bc>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	e00c      	b.n	8006a22 <tcp_close_shutdown+0x14a>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d104      	bne.n	8006a1c <tcp_close_shutdown+0x144>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e005      	b.n	8006a28 <tcp_close_shutdown+0x150>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ef      	bne.n	8006a08 <tcp_close_shutdown+0x130>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fea0 	bl	8006774 <tcp_free>
      break;
 8006a34:	e01a      	b.n	8006a6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff14 	bl	8006864 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4816      	ldr	r0, [pc, #88]	; (8006a98 <tcp_close_shutdown+0x1c0>)
 8006a40:	f001 fae4 	bl	800800c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff feb1 	bl	80067ac <tcp_free_listen>
      break;
 8006a4a:	e00f      	b.n	8006a6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	480e      	ldr	r0, [pc, #56]	; (8006a88 <tcp_close_shutdown+0x1b0>)
 8006a50:	f001 fadc 	bl	800800c <tcp_pcb_remove>
 8006a54:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <tcp_close_shutdown+0x1b4>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff fe8a 	bl	8006774 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a60:	e004      	b.n	8006a6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f81a 	bl	8006a9c <tcp_close_shutdown_fin>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	e000      	b.n	8006a6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bdb0      	pop	{r4, r5, r7, pc}
 8006a76:	bf00      	nop
 8006a78:	08010dd4 	.word	0x08010dd4
 8006a7c:	08010ea8 	.word	0x08010ea8
 8006a80:	08010e18 	.word	0x08010e18
 8006a84:	08010ec8 	.word	0x08010ec8
 8006a88:	200082a8 	.word	0x200082a8
 8006a8c:	200082b0 	.word	0x200082b0
 8006a90:	200082e8 	.word	0x200082e8
 8006a94:	200082a0 	.word	0x200082a0
 8006a98:	200082a4 	.word	0x200082a4

08006a9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <tcp_close_shutdown_fin+0x1c>
 8006aaa:	4b2e      	ldr	r3, [pc, #184]	; (8006b64 <tcp_close_shutdown_fin+0xc8>)
 8006aac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006ab0:	492d      	ldr	r1, [pc, #180]	; (8006b68 <tcp_close_shutdown_fin+0xcc>)
 8006ab2:	482e      	ldr	r0, [pc, #184]	; (8006b6c <tcp_close_shutdown_fin+0xd0>)
 8006ab4:	f008 fd06 	bl	800f4c4 <iprintf>

  switch (pcb->state) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	7d1b      	ldrb	r3, [r3, #20]
 8006abc:	2b07      	cmp	r3, #7
 8006abe:	d020      	beq.n	8006b02 <tcp_close_shutdown_fin+0x66>
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	dc2b      	bgt.n	8006b1c <tcp_close_shutdown_fin+0x80>
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d002      	beq.n	8006ace <tcp_close_shutdown_fin+0x32>
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d00d      	beq.n	8006ae8 <tcp_close_shutdown_fin+0x4c>
 8006acc:	e026      	b.n	8006b1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f004 fd7a 	bl	800b5c8 <tcp_send_fin>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11f      	bne.n	8006b20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2205      	movs	r2, #5
 8006ae4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ae6:	e01b      	b.n	8006b20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f004 fd6d 	bl	800b5c8 <tcp_send_fin>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d114      	bne.n	8006b24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2205      	movs	r2, #5
 8006afe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b00:	e010      	b.n	8006b24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f004 fd60 	bl	800b5c8 <tcp_send_fin>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2209      	movs	r2, #9
 8006b18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b1a:	e005      	b.n	8006b28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e01c      	b.n	8006b5a <tcp_close_shutdown_fin+0xbe>
      break;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <tcp_close_shutdown_fin+0x8e>
      break;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <tcp_close_shutdown_fin+0x8e>
      break;
 8006b28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f004 fe86 	bl	800b844 <tcp_output>
 8006b38:	e00d      	b.n	8006b56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d108      	bne.n	8006b56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8b5b      	ldrh	r3, [r3, #26]
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e001      	b.n	8006b5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	08010dd4 	.word	0x08010dd4
 8006b68:	08010e84 	.word	0x08010e84
 8006b6c:	08010e18 	.word	0x08010e18

08006b70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <tcp_close+0x22>
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <tcp_close+0x4c>)
 8006b80:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006b84:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <tcp_close+0x50>)
 8006b86:	480f      	ldr	r0, [pc, #60]	; (8006bc4 <tcp_close+0x54>)
 8006b88:	f008 fc9c 	bl	800f4c4 <iprintf>
 8006b8c:	f06f 030f 	mvn.w	r3, #15
 8006b90:	e00f      	b.n	8006bb2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7d1b      	ldrb	r3, [r3, #20]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d006      	beq.n	8006ba8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8b5b      	ldrh	r3, [r3, #26]
 8006b9e:	f043 0310 	orr.w	r3, r3, #16
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006ba8:	2101      	movs	r1, #1
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fe94 	bl	80068d8 <tcp_close_shutdown>
 8006bb0:	4603      	mov	r3, r0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	08010dd4 	.word	0x08010dd4
 8006bc0:	08010ee4 	.word	0x08010ee4
 8006bc4:	08010e18 	.word	0x08010e18

08006bc8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08e      	sub	sp, #56	; 0x38
 8006bcc:	af04      	add	r7, sp, #16
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d107      	bne.n	8006be8 <tcp_abandon+0x20>
 8006bd8:	4b52      	ldr	r3, [pc, #328]	; (8006d24 <tcp_abandon+0x15c>)
 8006bda:	f240 223d 	movw	r2, #573	; 0x23d
 8006bde:	4952      	ldr	r1, [pc, #328]	; (8006d28 <tcp_abandon+0x160>)
 8006be0:	4852      	ldr	r0, [pc, #328]	; (8006d2c <tcp_abandon+0x164>)
 8006be2:	f008 fc6f 	bl	800f4c4 <iprintf>
 8006be6:	e099      	b.n	8006d1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d106      	bne.n	8006bfe <tcp_abandon+0x36>
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <tcp_abandon+0x15c>)
 8006bf2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006bf6:	494e      	ldr	r1, [pc, #312]	; (8006d30 <tcp_abandon+0x168>)
 8006bf8:	484c      	ldr	r0, [pc, #304]	; (8006d2c <tcp_abandon+0x164>)
 8006bfa:	f008 fc63 	bl	800f4c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	2b0a      	cmp	r3, #10
 8006c04:	d107      	bne.n	8006c16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	484a      	ldr	r0, [pc, #296]	; (8006d34 <tcp_abandon+0x16c>)
 8006c0a:	f001 f9ff 	bl	800800c <tcp_pcb_remove>
    tcp_free(pcb);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fdb0 	bl	8006774 <tcp_free>
 8006c14:	e082      	b.n	8006d1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7d1b      	ldrb	r3, [r3, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d126      	bne.n	8006c8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8adb      	ldrh	r3, [r3, #22]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02e      	beq.n	8006ca6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c48:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <tcp_abandon+0x170>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d105      	bne.n	8006c5e <tcp_abandon+0x96>
 8006c52:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <tcp_abandon+0x170>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4a37      	ldr	r2, [pc, #220]	; (8006d38 <tcp_abandon+0x170>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	e013      	b.n	8006c86 <tcp_abandon+0xbe>
 8006c5e:	4b36      	ldr	r3, [pc, #216]	; (8006d38 <tcp_abandon+0x170>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e00c      	b.n	8006c80 <tcp_abandon+0xb8>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d104      	bne.n	8006c7a <tcp_abandon+0xb2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	60da      	str	r2, [r3, #12]
 8006c78:	e005      	b.n	8006c86 <tcp_abandon+0xbe>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1ef      	bne.n	8006c66 <tcp_abandon+0x9e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e00b      	b.n	8006ca6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8adb      	ldrh	r3, [r3, #22]
 8006c96:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4828      	ldr	r0, [pc, #160]	; (8006d3c <tcp_abandon+0x174>)
 8006c9c:	f001 f9b6 	bl	800800c <tcp_pcb_remove>
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <tcp_abandon+0x178>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fed6 	bl	8007a64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fecd 	bl	8007a64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fec4 	bl	8007a64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	8b12      	ldrh	r2, [r2, #24]
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cf0:	9201      	str	r2, [sp, #4]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f005 fb56 	bl	800c3ac <tcp_rst>
    }
    last_state = pcb->state;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7d1b      	ldrb	r3, [r3, #20]
 8006d04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fd34 	bl	8006774 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <tcp_abandon+0x154>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f06f 010c 	mvn.w	r1, #12
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	4798      	blx	r3
  }
}
 8006d1c:	3728      	adds	r7, #40	; 0x28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	08010dd4 	.word	0x08010dd4
 8006d28:	08010f18 	.word	0x08010f18
 8006d2c:	08010e18 	.word	0x08010e18
 8006d30:	08010f34 	.word	0x08010f34
 8006d34:	200082ac 	.word	0x200082ac
 8006d38:	200082a0 	.word	0x200082a0
 8006d3c:	200082a8 	.word	0x200082a8
 8006d40:	200082b0 	.word	0x200082b0

08006d44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff ff3a 	bl	8006bc8 <tcp_abandon>
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006d74:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <tcp_bind+0x114>)
 8006d76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <tcp_bind+0x36>
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <tcp_bind+0x118>)
 8006d80:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006d84:	493c      	ldr	r1, [pc, #240]	; (8006e78 <tcp_bind+0x11c>)
 8006d86:	483d      	ldr	r0, [pc, #244]	; (8006e7c <tcp_bind+0x120>)
 8006d88:	f008 fb9c 	bl	800f4c4 <iprintf>
 8006d8c:	f06f 030f 	mvn.w	r3, #15
 8006d90:	e06a      	b.n	8006e68 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7d1b      	ldrb	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <tcp_bind+0x52>
 8006d9a:	4b36      	ldr	r3, [pc, #216]	; (8006e74 <tcp_bind+0x118>)
 8006d9c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006da0:	4937      	ldr	r1, [pc, #220]	; (8006e80 <tcp_bind+0x124>)
 8006da2:	4836      	ldr	r0, [pc, #216]	; (8006e7c <tcp_bind+0x120>)
 8006da4:	f008 fb8e 	bl	800f4c4 <iprintf>
 8006da8:	f06f 0305 	mvn.w	r3, #5
 8006dac:	e05c      	b.n	8006e68 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006db4:	f000 f9f0 	bl	8007198 <tcp_new_port>
 8006db8:	4603      	mov	r3, r0
 8006dba:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d135      	bne.n	8006e2e <tcp_bind+0xd2>
      return ERR_BUF;
 8006dc2:	f06f 0301 	mvn.w	r3, #1
 8006dc6:	e04f      	b.n	8006e68 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e02b      	b.n	8006e26 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006dce:	4a2d      	ldr	r2, [pc, #180]	; (8006e84 <tcp_bind+0x128>)
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e01e      	b.n	8006e1a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	8adb      	ldrh	r3, [r3, #22]
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d116      	bne.n	8006e14 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006de6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <tcp_bind+0xb2>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d102      	bne.n	8006e14 <tcp_bind+0xb8>
              return ERR_USE;
 8006e0e:	f06f 0307 	mvn.w	r3, #7
 8006e12:	e029      	b.n	8006e68 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1dd      	bne.n	8006ddc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	3301      	adds	r3, #1
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	dbcf      	blt.n	8006dce <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00c      	beq.n	8006e4e <tcp_bind+0xf2>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <tcp_bind+0xec>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	e000      	b.n	8006e4a <tcp_bind+0xee>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <tcp_bind+0x12c>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	60da      	str	r2, [r3, #12]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <tcp_bind+0x12c>)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	f005 fc65 	bl	800c730 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	08012ddc 	.word	0x08012ddc
 8006e74:	08010dd4 	.word	0x08010dd4
 8006e78:	08010f68 	.word	0x08010f68
 8006e7c:	08010e18 	.word	0x08010e18
 8006e80:	08010f80 	.word	0x08010f80
 8006e84:	08012db4 	.word	0x08012db4
 8006e88:	200082a0 	.word	0x200082a0

08006e8c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <tcp_accept_null+0x22>
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <tcp_accept_null+0x34>)
 8006ea2:	f240 320f 	movw	r2, #783	; 0x30f
 8006ea6:	4907      	ldr	r1, [pc, #28]	; (8006ec4 <tcp_accept_null+0x38>)
 8006ea8:	4807      	ldr	r0, [pc, #28]	; (8006ec8 <tcp_accept_null+0x3c>)
 8006eaa:	f008 fb0b 	bl	800f4c4 <iprintf>

  tcp_abort(pcb);
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f7ff ff48 	bl	8006d44 <tcp_abort>

  return ERR_ABRT;
 8006eb4:	f06f 030c 	mvn.w	r3, #12
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08010dd4 	.word	0x08010dd4
 8006ec4:	08010fa8 	.word	0x08010fa8
 8006ec8:	08010e18 	.word	0x08010e18

08006ecc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	2200      	movs	r2, #0
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f806 	bl	8006ef0 <tcp_listen_with_backlog_and_err>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <tcp_listen_with_backlog_and_err+0x2c>
 8006f08:	4b47      	ldr	r3, [pc, #284]	; (8007028 <tcp_listen_with_backlog_and_err+0x138>)
 8006f0a:	f240 3259 	movw	r2, #857	; 0x359
 8006f0e:	4947      	ldr	r1, [pc, #284]	; (800702c <tcp_listen_with_backlog_and_err+0x13c>)
 8006f10:	4847      	ldr	r0, [pc, #284]	; (8007030 <tcp_listen_with_backlog_and_err+0x140>)
 8006f12:	f008 fad7 	bl	800f4c4 <iprintf>
 8006f16:	23f0      	movs	r3, #240	; 0xf0
 8006f18:	76fb      	strb	r3, [r7, #27]
 8006f1a:	e079      	b.n	8007010 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7d1b      	ldrb	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <tcp_listen_with_backlog_and_err+0x48>
 8006f24:	4b40      	ldr	r3, [pc, #256]	; (8007028 <tcp_listen_with_backlog_and_err+0x138>)
 8006f26:	f240 325a 	movw	r2, #858	; 0x35a
 8006f2a:	4942      	ldr	r1, [pc, #264]	; (8007034 <tcp_listen_with_backlog_and_err+0x144>)
 8006f2c:	4840      	ldr	r0, [pc, #256]	; (8007030 <tcp_listen_with_backlog_and_err+0x140>)
 8006f2e:	f008 fac9 	bl	800f4c4 <iprintf>
 8006f32:	23f1      	movs	r3, #241	; 0xf1
 8006f34:	76fb      	strb	r3, [r7, #27]
 8006f36:	e06b      	b.n	8007010 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d104      	bne.n	8006f4a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006f44:	23f7      	movs	r3, #247	; 0xf7
 8006f46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006f48:	e062      	b.n	8007010 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006f4a:	2002      	movs	r0, #2
 8006f4c:	f7fe fa8c 	bl	8005468 <memp_malloc>
 8006f50:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006f58:	23ff      	movs	r3, #255	; 0xff
 8006f5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006f5c:	e058      	b.n	8007010 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8ada      	ldrh	r2, [r3, #22]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	2201      	movs	r2, #1
 8006f72:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7d5a      	ldrb	r2, [r3, #21]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	7a5a      	ldrb	r2, [r3, #9]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	2200      	movs	r2, #0
 8006f88:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7ada      	ldrb	r2, [r3, #11]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	7a9a      	ldrb	r2, [r3, #10]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8adb      	ldrh	r3, [r3, #22]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d021      	beq.n	8006fee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <tcp_listen_with_backlog_and_err+0x148>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d105      	bne.n	8006fc0 <tcp_listen_with_backlog_and_err+0xd0>
 8006fb4:	4b20      	ldr	r3, [pc, #128]	; (8007038 <tcp_listen_with_backlog_and_err+0x148>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4a1f      	ldr	r2, [pc, #124]	; (8007038 <tcp_listen_with_backlog_and_err+0x148>)
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e013      	b.n	8006fe8 <tcp_listen_with_backlog_and_err+0xf8>
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <tcp_listen_with_backlog_and_err+0x148>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e00c      	b.n	8006fe2 <tcp_listen_with_backlog_and_err+0xf2>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d104      	bne.n	8006fdc <tcp_listen_with_backlog_and_err+0xec>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	e005      	b.n	8006fe8 <tcp_listen_with_backlog_and_err+0xf8>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ef      	bne.n	8006fc8 <tcp_listen_with_backlog_and_err+0xd8>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff fbc0 	bl	8006774 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4a11      	ldr	r2, [pc, #68]	; (800703c <tcp_listen_with_backlog_and_err+0x14c>)
 8006ff8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006ffa:	4b11      	ldr	r3, [pc, #68]	; (8007040 <tcp_listen_with_backlog_and_err+0x150>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	4a0f      	ldr	r2, [pc, #60]	; (8007040 <tcp_listen_with_backlog_and_err+0x150>)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	f005 fb92 	bl	800c730 <tcp_timer_needed>
  res = ERR_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7efa      	ldrb	r2, [r7, #27]
 800701a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800701c:	69fb      	ldr	r3, [r7, #28]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	08010dd4 	.word	0x08010dd4
 800702c:	08010fc8 	.word	0x08010fc8
 8007030:	08010e18 	.word	0x08010e18
 8007034:	08010ff8 	.word	0x08010ff8
 8007038:	200082a0 	.word	0x200082a0
 800703c:	08006e8d 	.word	0x08006e8d
 8007040:	200082a4 	.word	0x200082a4

08007044 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <tcp_update_rcv_ann_wnd+0x1c>
 8007052:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007054:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007058:	4924      	ldr	r1, [pc, #144]	; (80070ec <tcp_update_rcv_ann_wnd+0xa8>)
 800705a:	4825      	ldr	r0, [pc, #148]	; (80070f0 <tcp_update_rcv_ann_wnd+0xac>)
 800705c:	f008 fa32 	bl	800f4c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007068:	4413      	add	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007074:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007078:	bf28      	it	cs
 800707a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800707e:	b292      	uxth	r2, r2
 8007080:	4413      	add	r3, r2
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	db08      	blt.n	800709c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	e020      	b.n	80070de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd03      	ble.n	80070b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070b0:	e014      	b.n	80070dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c4:	d306      	bcc.n	80070d4 <tcp_update_rcv_ann_wnd+0x90>
 80070c6:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <tcp_update_rcv_ann_wnd+0xa4>)
 80070c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80070cc:	4909      	ldr	r1, [pc, #36]	; (80070f4 <tcp_update_rcv_ann_wnd+0xb0>)
 80070ce:	4808      	ldr	r0, [pc, #32]	; (80070f0 <tcp_update_rcv_ann_wnd+0xac>)
 80070d0:	f008 f9f8 	bl	800f4c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80070dc:	2300      	movs	r3, #0
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	08010dd4 	.word	0x08010dd4
 80070ec:	08011030 	.word	0x08011030
 80070f0:	08010e18 	.word	0x08010e18
 80070f4:	08011054 	.word	0x08011054

080070f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <tcp_recved+0x22>
 800710a:	4b1f      	ldr	r3, [pc, #124]	; (8007188 <tcp_recved+0x90>)
 800710c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007110:	491e      	ldr	r1, [pc, #120]	; (800718c <tcp_recved+0x94>)
 8007112:	481f      	ldr	r0, [pc, #124]	; (8007190 <tcp_recved+0x98>)
 8007114:	f008 f9d6 	bl	800f4c4 <iprintf>
 8007118:	e032      	b.n	8007180 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7d1b      	ldrb	r3, [r3, #20]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d106      	bne.n	8007130 <tcp_recved+0x38>
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <tcp_recved+0x90>)
 8007124:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007128:	491a      	ldr	r1, [pc, #104]	; (8007194 <tcp_recved+0x9c>)
 800712a:	4819      	ldr	r0, [pc, #100]	; (8007190 <tcp_recved+0x98>)
 800712c:	f008 f9ca 	bl	800f4c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007134:	887b      	ldrh	r3, [r7, #2]
 8007136:	4413      	add	r3, r2
 8007138:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800713a:	89fb      	ldrh	r3, [r7, #14]
 800713c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007140:	d804      	bhi.n	800714c <tcp_recved+0x54>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	89fa      	ldrh	r2, [r7, #14]
 8007148:	429a      	cmp	r2, r3
 800714a:	d204      	bcs.n	8007156 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007152:	851a      	strh	r2, [r3, #40]	; 0x28
 8007154:	e002      	b.n	800715c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	89fa      	ldrh	r2, [r7, #14]
 800715a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff71 	bl	8007044 <tcp_update_rcv_ann_wnd>
 8007162:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800716a:	d309      	bcc.n	8007180 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8b5b      	ldrh	r3, [r3, #26]
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f004 fb62 	bl	800b844 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	08010dd4 	.word	0x08010dd4
 800718c:	08011070 	.word	0x08011070
 8007190:	08010e18 	.word	0x08010e18
 8007194:	08011088 	.word	0x08011088

08007198 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80071a2:	4b1e      	ldr	r3, [pc, #120]	; (800721c <tcp_new_port+0x84>)
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	4b1c      	ldr	r3, [pc, #112]	; (800721c <tcp_new_port+0x84>)
 80071ac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80071ae:	4b1b      	ldr	r3, [pc, #108]	; (800721c <tcp_new_port+0x84>)
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d103      	bne.n	80071c2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <tcp_new_port+0x84>)
 80071bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80071c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071c2:	2300      	movs	r3, #0
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	e01e      	b.n	8007206 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4a15      	ldr	r2, [pc, #84]	; (8007220 <tcp_new_port+0x88>)
 80071cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	e011      	b.n	80071fa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	8ada      	ldrh	r2, [r3, #22]
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <tcp_new_port+0x84>)
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d108      	bne.n	80071f4 <tcp_new_port+0x5c>
        n++;
 80071e2:	88bb      	ldrh	r3, [r7, #4]
 80071e4:	3301      	adds	r3, #1
 80071e6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80071e8:	88bb      	ldrh	r3, [r7, #4]
 80071ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ee:	d3d8      	bcc.n	80071a2 <tcp_new_port+0xa>
          return 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e00d      	b.n	8007210 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1ea      	bne.n	80071d6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	3301      	adds	r3, #1
 8007204:	71fb      	strb	r3, [r7, #7]
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d9dd      	bls.n	80071c8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <tcp_new_port+0x84>)
 800720e:	881b      	ldrh	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20000020 	.word	0x20000020
 8007220:	08012db4 	.word	0x08012db4

08007224 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007224:	b5b0      	push	{r4, r5, r7, lr}
 8007226:	b090      	sub	sp, #64	; 0x40
 8007228:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007230:	4b94      	ldr	r3, [pc, #592]	; (8007484 <tcp_slowtmr+0x260>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a93      	ldr	r2, [pc, #588]	; (8007484 <tcp_slowtmr+0x260>)
 8007238:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800723a:	4b93      	ldr	r3, [pc, #588]	; (8007488 <tcp_slowtmr+0x264>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4b91      	ldr	r3, [pc, #580]	; (8007488 <tcp_slowtmr+0x264>)
 8007244:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800724a:	4b90      	ldr	r3, [pc, #576]	; (800748c <tcp_slowtmr+0x268>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007250:	e29f      	b.n	8007792 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <tcp_slowtmr+0x44>
 800725a:	4b8d      	ldr	r3, [pc, #564]	; (8007490 <tcp_slowtmr+0x26c>)
 800725c:	f240 42be 	movw	r2, #1214	; 0x4be
 8007260:	498c      	ldr	r1, [pc, #560]	; (8007494 <tcp_slowtmr+0x270>)
 8007262:	488d      	ldr	r0, [pc, #564]	; (8007498 <tcp_slowtmr+0x274>)
 8007264:	f008 f92e 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	7d1b      	ldrb	r3, [r3, #20]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d106      	bne.n	800727e <tcp_slowtmr+0x5a>
 8007270:	4b87      	ldr	r3, [pc, #540]	; (8007490 <tcp_slowtmr+0x26c>)
 8007272:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007276:	4989      	ldr	r1, [pc, #548]	; (800749c <tcp_slowtmr+0x278>)
 8007278:	4887      	ldr	r0, [pc, #540]	; (8007498 <tcp_slowtmr+0x274>)
 800727a:	f008 f923 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	7d1b      	ldrb	r3, [r3, #20]
 8007282:	2b0a      	cmp	r3, #10
 8007284:	d106      	bne.n	8007294 <tcp_slowtmr+0x70>
 8007286:	4b82      	ldr	r3, [pc, #520]	; (8007490 <tcp_slowtmr+0x26c>)
 8007288:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800728c:	4984      	ldr	r1, [pc, #528]	; (80074a0 <tcp_slowtmr+0x27c>)
 800728e:	4882      	ldr	r0, [pc, #520]	; (8007498 <tcp_slowtmr+0x274>)
 8007290:	f008 f918 	bl	800f4c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	7f9a      	ldrb	r2, [r3, #30]
 8007298:	4b7b      	ldr	r3, [pc, #492]	; (8007488 <tcp_slowtmr+0x264>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d105      	bne.n	80072ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80072aa:	e272      	b.n	8007792 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80072ac:	4b76      	ldr	r3, [pc, #472]	; (8007488 <tcp_slowtmr+0x264>)
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d10a      	bne.n	80072de <tcp_slowtmr+0xba>
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d905      	bls.n	80072de <tcp_slowtmr+0xba>
      ++pcb_remove;
 80072d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d6:	3301      	adds	r3, #1
 80072d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072dc:	e11e      	b.n	800751c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e4:	2b0b      	cmp	r3, #11
 80072e6:	d905      	bls.n	80072f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	3301      	adds	r3, #1
 80072ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072f2:	e113      	b.n	800751c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d075      	beq.n	80073ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	2b00      	cmp	r3, #0
 8007304:	d006      	beq.n	8007314 <tcp_slowtmr+0xf0>
 8007306:	4b62      	ldr	r3, [pc, #392]	; (8007490 <tcp_slowtmr+0x26c>)
 8007308:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800730c:	4965      	ldr	r1, [pc, #404]	; (80074a4 <tcp_slowtmr+0x280>)
 800730e:	4862      	ldr	r0, [pc, #392]	; (8007498 <tcp_slowtmr+0x274>)
 8007310:	f008 f8d8 	bl	800f4c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d106      	bne.n	800732a <tcp_slowtmr+0x106>
 800731c:	4b5c      	ldr	r3, [pc, #368]	; (8007490 <tcp_slowtmr+0x26c>)
 800731e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007322:	4961      	ldr	r1, [pc, #388]	; (80074a8 <tcp_slowtmr+0x284>)
 8007324:	485c      	ldr	r0, [pc, #368]	; (8007498 <tcp_slowtmr+0x274>)
 8007326:	f008 f8cd 	bl	800f4c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007330:	2b0b      	cmp	r3, #11
 8007332:	d905      	bls.n	8007340 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007338:	3301      	adds	r3, #1
 800733a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800733e:	e0ed      	b.n	800751c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007346:	3b01      	subs	r3, #1
 8007348:	4a58      	ldr	r2, [pc, #352]	; (80074ac <tcp_slowtmr+0x288>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007354:	7c7a      	ldrb	r2, [r7, #17]
 8007356:	429a      	cmp	r2, r3
 8007358:	d907      	bls.n	800736a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007360:	3301      	adds	r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007370:	7c7a      	ldrb	r2, [r7, #17]
 8007372:	429a      	cmp	r2, r3
 8007374:	f200 80d2 	bhi.w	800751c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007378:	2301      	movs	r3, #1
 800737a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d108      	bne.n	8007398 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007388:	f005 f904 	bl	800c594 <tcp_zero_window_probe>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007392:	2300      	movs	r3, #0
 8007394:	623b      	str	r3, [r7, #32]
 8007396:	e011      	b.n	80073bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800739e:	4619      	mov	r1, r3
 80073a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a2:	f003 ffc9 	bl	800b338 <tcp_split_unsent_seg>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80073ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ae:	f004 fa49 	bl	800b844 <tcp_output>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80ac 	beq.w	800751c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073d2:	2b06      	cmp	r3, #6
 80073d4:	f200 80a2 	bhi.w	800751c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073de:	3301      	adds	r3, #1
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80073e8:	e098      	b.n	800751c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	db0f      	blt.n	8007414 <tcp_slowtmr+0x1f0>
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073fe:	4293      	cmp	r3, r2
 8007400:	d008      	beq.n	8007414 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007408:	b29b      	uxth	r3, r3
 800740a:	3301      	adds	r3, #1
 800740c:	b29b      	uxth	r3, r3
 800740e:	b21a      	sxth	r2, r3
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007420:	429a      	cmp	r2, r3
 8007422:	db7b      	blt.n	800751c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007426:	f004 fd01 	bl	800be2c <tcp_rexmit_rto_prepare>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <tcp_slowtmr+0x21c>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	2b00      	cmp	r3, #0
 8007436:	d171      	bne.n	800751c <tcp_slowtmr+0x2f8>
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d06d      	beq.n	800751c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	7d1b      	ldrb	r3, [r3, #20]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d03a      	beq.n	80074be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800744e:	2b0c      	cmp	r3, #12
 8007450:	bf28      	it	cs
 8007452:	230c      	movcs	r3, #12
 8007454:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800745c:	10db      	asrs	r3, r3, #3
 800745e:	b21b      	sxth	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007468:	4413      	add	r3, r2
 800746a:	7efa      	ldrb	r2, [r7, #27]
 800746c:	4910      	ldr	r1, [pc, #64]	; (80074b0 <tcp_slowtmr+0x28c>)
 800746e:	5c8a      	ldrb	r2, [r1, r2]
 8007470:	4093      	lsls	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800747a:	4293      	cmp	r3, r2
 800747c:	dc1a      	bgt.n	80074b4 <tcp_slowtmr+0x290>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	b21a      	sxth	r2, r3
 8007482:	e019      	b.n	80074b8 <tcp_slowtmr+0x294>
 8007484:	2000829c 	.word	0x2000829c
 8007488:	200082b2 	.word	0x200082b2
 800748c:	200082a8 	.word	0x200082a8
 8007490:	08010dd4 	.word	0x08010dd4
 8007494:	08011118 	.word	0x08011118
 8007498:	08010e18 	.word	0x08010e18
 800749c:	08011144 	.word	0x08011144
 80074a0:	08011170 	.word	0x08011170
 80074a4:	080111a0 	.word	0x080111a0
 80074a8:	080111d4 	.word	0x080111d4
 80074ac:	08012dac 	.word	0x08012dac
 80074b0:	08012d9c 	.word	0x08012d9c
 80074b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	2200      	movs	r2, #0
 80074c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074d0:	4293      	cmp	r3, r2
 80074d2:	bf28      	it	cs
 80074d4:	4613      	movcs	r3, r2
 80074d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d206      	bcs.n	8007504 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	2200      	movs	r2, #0
 8007512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007518:	f004 fcf8 	bl	800bf0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	7d1b      	ldrb	r3, [r3, #20]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d111      	bne.n	8007548 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	8b5b      	ldrh	r3, [r3, #26]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007530:	4b9d      	ldr	r3, [pc, #628]	; (80077a8 <tcp_slowtmr+0x584>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b28      	cmp	r3, #40	; 0x28
 800753c:	d904      	bls.n	8007548 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800753e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007542:	3301      	adds	r3, #1
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	7a5b      	ldrb	r3, [r3, #9]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d04c      	beq.n	80075ee <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007558:	2b04      	cmp	r3, #4
 800755a:	d003      	beq.n	8007564 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007560:	2b07      	cmp	r3, #7
 8007562:	d144      	bne.n	80075ee <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007564:	4b90      	ldr	r3, [pc, #576]	; (80077a8 <tcp_slowtmr+0x584>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007574:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007578:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800757c:	498b      	ldr	r1, [pc, #556]	; (80077ac <tcp_slowtmr+0x588>)
 800757e:	fba1 1303 	umull	r1, r3, r1, r3
 8007582:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007584:	429a      	cmp	r2, r3
 8007586:	d90a      	bls.n	800759e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758c:	3301      	adds	r3, #1
 800758e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007592:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007596:	3301      	adds	r3, #1
 8007598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800759c:	e027      	b.n	80075ee <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800759e:	4b82      	ldr	r3, [pc, #520]	; (80077a8 <tcp_slowtmr+0x584>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075b4:	4618      	mov	r0, r3
 80075b6:	4b7e      	ldr	r3, [pc, #504]	; (80077b0 <tcp_slowtmr+0x58c>)
 80075b8:	fb00 f303 	mul.w	r3, r0, r3
 80075bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80075be:	497b      	ldr	r1, [pc, #492]	; (80077ac <tcp_slowtmr+0x588>)
 80075c0:	fba1 1303 	umull	r1, r3, r1, r3
 80075c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d911      	bls.n	80075ee <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80075ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075cc:	f004 ffa2 	bl	800c514 <tcp_keepalive>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80075d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075e4:	3301      	adds	r3, #1
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d011      	beq.n	800761a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80075f6:	4b6c      	ldr	r3, [pc, #432]	; (80077a8 <tcp_slowtmr+0x584>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	1ad2      	subs	r2, r2, r3
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007606:	4619      	mov	r1, r3
 8007608:	460b      	mov	r3, r1
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	440b      	add	r3, r1
 800760e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007610:	429a      	cmp	r2, r3
 8007612:	d302      	bcc.n	800761a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007616:	f000 fe5d 	bl	80082d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	7d1b      	ldrb	r3, [r3, #20]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d10b      	bne.n	800763a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007622:	4b61      	ldr	r3, [pc, #388]	; (80077a8 <tcp_slowtmr+0x584>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b28      	cmp	r3, #40	; 0x28
 800762e:	d904      	bls.n	800763a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007634:	3301      	adds	r3, #1
 8007636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	7d1b      	ldrb	r3, [r3, #20]
 800763e:	2b09      	cmp	r3, #9
 8007640:	d10b      	bne.n	800765a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007642:	4b59      	ldr	r3, [pc, #356]	; (80077a8 <tcp_slowtmr+0x584>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2bf0      	cmp	r3, #240	; 0xf0
 800764e:	d904      	bls.n	800765a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007654:	3301      	adds	r3, #1
 8007656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800765a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765e:	2b00      	cmp	r3, #0
 8007660:	d060      	beq.n	8007724 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007668:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800766a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800766c:	f000 fc7e 	bl	8007f6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d010      	beq.n	8007698 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007676:	4b4f      	ldr	r3, [pc, #316]	; (80077b4 <tcp_slowtmr+0x590>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d106      	bne.n	800768e <tcp_slowtmr+0x46a>
 8007680:	4b4d      	ldr	r3, [pc, #308]	; (80077b8 <tcp_slowtmr+0x594>)
 8007682:	f240 526d 	movw	r2, #1389	; 0x56d
 8007686:	494d      	ldr	r1, [pc, #308]	; (80077bc <tcp_slowtmr+0x598>)
 8007688:	484d      	ldr	r0, [pc, #308]	; (80077c0 <tcp_slowtmr+0x59c>)
 800768a:	f007 ff1b 	bl	800f4c4 <iprintf>
        prev->next = pcb->next;
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	60da      	str	r2, [r3, #12]
 8007696:	e00f      	b.n	80076b8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007698:	4b46      	ldr	r3, [pc, #280]	; (80077b4 <tcp_slowtmr+0x590>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d006      	beq.n	80076b0 <tcp_slowtmr+0x48c>
 80076a2:	4b45      	ldr	r3, [pc, #276]	; (80077b8 <tcp_slowtmr+0x594>)
 80076a4:	f240 5271 	movw	r2, #1393	; 0x571
 80076a8:	4946      	ldr	r1, [pc, #280]	; (80077c4 <tcp_slowtmr+0x5a0>)
 80076aa:	4845      	ldr	r0, [pc, #276]	; (80077c0 <tcp_slowtmr+0x59c>)
 80076ac:	f007 ff0a 	bl	800f4c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a3f      	ldr	r2, [pc, #252]	; (80077b4 <tcp_slowtmr+0x590>)
 80076b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80076b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	3304      	adds	r3, #4
 80076ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d0:	8ad2      	ldrh	r2, [r2, #22]
 80076d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d4:	8b09      	ldrh	r1, [r1, #24]
 80076d6:	9102      	str	r1, [sp, #8]
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	462b      	mov	r3, r5
 80076de:	4622      	mov	r2, r4
 80076e0:	4601      	mov	r1, r0
 80076e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076e4:	f004 fe62 	bl	800c3ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	7d1b      	ldrb	r3, [r3, #20]
 80076f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80076fe:	6838      	ldr	r0, [r7, #0]
 8007700:	f7ff f838 	bl	8006774 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007704:	4b30      	ldr	r3, [pc, #192]	; (80077c8 <tcp_slowtmr+0x5a4>)
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <tcp_slowtmr+0x4f6>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f06f 010c 	mvn.w	r1, #12
 8007716:	68b8      	ldr	r0, [r7, #8]
 8007718:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800771a:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <tcp_slowtmr+0x5a4>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d037      	beq.n	8007792 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007722:	e590      	b.n	8007246 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	7f1b      	ldrb	r3, [r3, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	7f1a      	ldrb	r2, [r3, #28]
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	7f5b      	ldrb	r3, [r3, #29]
 8007742:	429a      	cmp	r2, r3
 8007744:	d325      	bcc.n	8007792 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <tcp_slowtmr+0x5a4>)
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <tcp_slowtmr+0x550>
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007764:	6912      	ldr	r2, [r2, #16]
 8007766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007772:	e002      	b.n	800777a <tcp_slowtmr+0x556>
 8007774:	2300      	movs	r3, #0
 8007776:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <tcp_slowtmr+0x5a4>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d000      	beq.n	8007784 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007782:	e560      	b.n	8007246 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007784:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800778c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800778e:	f004 f859 	bl	800b844 <tcp_output>
  while (pcb != NULL) {
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f ad5c 	bne.w	8007252 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <tcp_slowtmr+0x5a8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80077a4:	e067      	b.n	8007876 <tcp_slowtmr+0x652>
 80077a6:	bf00      	nop
 80077a8:	2000829c 	.word	0x2000829c
 80077ac:	10624dd3 	.word	0x10624dd3
 80077b0:	000124f8 	.word	0x000124f8
 80077b4:	200082a8 	.word	0x200082a8
 80077b8:	08010dd4 	.word	0x08010dd4
 80077bc:	0801120c 	.word	0x0801120c
 80077c0:	08010e18 	.word	0x08010e18
 80077c4:	08011238 	.word	0x08011238
 80077c8:	200082b0 	.word	0x200082b0
 80077cc:	200082ac 	.word	0x200082ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	7d1b      	ldrb	r3, [r3, #20]
 80077d4:	2b0a      	cmp	r3, #10
 80077d6:	d006      	beq.n	80077e6 <tcp_slowtmr+0x5c2>
 80077d8:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <tcp_slowtmr+0x664>)
 80077da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80077de:	492b      	ldr	r1, [pc, #172]	; (800788c <tcp_slowtmr+0x668>)
 80077e0:	482b      	ldr	r0, [pc, #172]	; (8007890 <tcp_slowtmr+0x66c>)
 80077e2:	f007 fe6f 	bl	800f4c4 <iprintf>
    pcb_remove = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077ec:	4b29      	ldr	r3, [pc, #164]	; (8007894 <tcp_slowtmr+0x670>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2bf0      	cmp	r3, #240	; 0xf0
 80077f8:	d904      	bls.n	8007804 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80077fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077fe:	3301      	adds	r3, #1
 8007800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007808:	2b00      	cmp	r3, #0
 800780a:	d02f      	beq.n	800786c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800780c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800780e:	f000 fbad 	bl	8007f6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007818:	4b1f      	ldr	r3, [pc, #124]	; (8007898 <tcp_slowtmr+0x674>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781e:	429a      	cmp	r2, r3
 8007820:	d106      	bne.n	8007830 <tcp_slowtmr+0x60c>
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <tcp_slowtmr+0x664>)
 8007824:	f240 52af 	movw	r2, #1455	; 0x5af
 8007828:	491c      	ldr	r1, [pc, #112]	; (800789c <tcp_slowtmr+0x678>)
 800782a:	4819      	ldr	r0, [pc, #100]	; (8007890 <tcp_slowtmr+0x66c>)
 800782c:	f007 fe4a 	bl	800f4c4 <iprintf>
        prev->next = pcb->next;
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e00f      	b.n	800785a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <tcp_slowtmr+0x674>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d006      	beq.n	8007852 <tcp_slowtmr+0x62e>
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <tcp_slowtmr+0x664>)
 8007846:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800784a:	4915      	ldr	r1, [pc, #84]	; (80078a0 <tcp_slowtmr+0x67c>)
 800784c:	4810      	ldr	r0, [pc, #64]	; (8007890 <tcp_slowtmr+0x66c>)
 800784e:	f007 fe39 	bl	800f4c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	4a10      	ldr	r2, [pc, #64]	; (8007898 <tcp_slowtmr+0x674>)
 8007858:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007864:	69f8      	ldr	r0, [r7, #28]
 8007866:	f7fe ff85 	bl	8006774 <tcp_free>
 800786a:	e004      	b.n	8007876 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1a9      	bne.n	80077d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	3730      	adds	r7, #48	; 0x30
 8007882:	46bd      	mov	sp, r7
 8007884:	bdb0      	pop	{r4, r5, r7, pc}
 8007886:	bf00      	nop
 8007888:	08010dd4 	.word	0x08010dd4
 800788c:	08011264 	.word	0x08011264
 8007890:	08010e18 	.word	0x08010e18
 8007894:	2000829c 	.word	0x2000829c
 8007898:	200082ac 	.word	0x200082ac
 800789c:	08011294 	.word	0x08011294
 80078a0:	080112bc 	.word	0x080112bc

080078a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80078aa:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <tcp_fasttmr+0xbc>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <tcp_fasttmr+0xbc>)
 80078b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80078b6:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <tcp_fasttmr+0xc0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80078bc:	e048      	b.n	8007950 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7f9a      	ldrb	r2, [r3, #30]
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <tcp_fasttmr+0xbc>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d03f      	beq.n	800794a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80078ca:	4b25      	ldr	r3, [pc, #148]	; (8007960 <tcp_fasttmr+0xbc>)
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8b5b      	ldrh	r3, [r3, #26]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8b5b      	ldrh	r3, [r3, #26]
 80078e2:	f043 0302 	orr.w	r3, r3, #2
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f003 ffa9 	bl	800b844 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8b5b      	ldrh	r3, [r3, #26]
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8b5b      	ldrh	r3, [r3, #26]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	8b5b      	ldrh	r3, [r3, #26]
 8007910:	f023 0308 	bic.w	r3, r3, #8
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff f8be 	bl	8006a9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <tcp_fasttmr+0xc4>)
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f819 	bl	800796c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <tcp_fasttmr+0xc4>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d000      	beq.n	8007944 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007942:	e7b8      	b.n	80078b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	607b      	str	r3, [r7, #4]
 8007948:	e002      	b.n	8007950 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1b3      	bne.n	80078be <tcp_fasttmr+0x1a>
    }
  }
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	200082b2 	.word	0x200082b2
 8007964:	200082a8 	.word	0x200082a8
 8007968:	200082b0 	.word	0x200082b0

0800796c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <tcp_process_refused_data+0x22>
 800797a:	4b37      	ldr	r3, [pc, #220]	; (8007a58 <tcp_process_refused_data+0xec>)
 800797c:	f240 6209 	movw	r2, #1545	; 0x609
 8007980:	4936      	ldr	r1, [pc, #216]	; (8007a5c <tcp_process_refused_data+0xf0>)
 8007982:	4837      	ldr	r0, [pc, #220]	; (8007a60 <tcp_process_refused_data+0xf4>)
 8007984:	f007 fd9e 	bl	800f4c4 <iprintf>
 8007988:	f06f 030f 	mvn.w	r3, #15
 800798c:	e060      	b.n	8007a50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007992:	7b5b      	ldrb	r3, [r3, #13]
 8007994:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800799a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <tcp_process_refused_data+0x58>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6918      	ldr	r0, [r3, #16]
 80079b6:	2300      	movs	r3, #0
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	47a0      	blx	r4
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	e007      	b.n	80079d4 <tcp_process_refused_data+0x68>
 80079c4:	2300      	movs	r3, #0
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	2000      	movs	r0, #0
 80079cc:	f000 f8c2 	bl	8007b54 <tcp_recv_null>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80079d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d12a      	bne.n	8007a32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d033      	beq.n	8007a4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80079ee:	d005      	beq.n	80079fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f4:	3301      	adds	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <tcp_process_refused_data+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6918      	ldr	r0, [r3, #16]
 8007a10:	2300      	movs	r3, #0
 8007a12:	2200      	movs	r2, #0
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	47a0      	blx	r4
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e001      	b.n	8007a22 <tcp_process_refused_data+0xb6>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a26:	f113 0f0d 	cmn.w	r3, #13
 8007a2a:	d110      	bne.n	8007a4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007a2c:	f06f 030c 	mvn.w	r3, #12
 8007a30:	e00e      	b.n	8007a50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a36:	f113 0f0d 	cmn.w	r3, #13
 8007a3a:	d102      	bne.n	8007a42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007a3c:	f06f 030c 	mvn.w	r3, #12
 8007a40:	e006      	b.n	8007a50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007a48:	f06f 0304 	mvn.w	r3, #4
 8007a4c:	e000      	b.n	8007a50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd90      	pop	{r4, r7, pc}
 8007a58:	08010dd4 	.word	0x08010dd4
 8007a5c:	080112e4 	.word	0x080112e4
 8007a60:	08010e18 	.word	0x08010e18

08007a64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007a6c:	e007      	b.n	8007a7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f80a 	bl	8007a8e <tcp_seg_free>
    seg = next;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f4      	bne.n	8007a6e <tcp_segs_free+0xa>
  }
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe fbc3 	bl	8006234 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	2003      	movs	r0, #3
 8007ab2:	f7fd fd49 	bl	8005548 <memp_free>
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <tcp_setprio+0x22>
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <tcp_setprio+0x30>)
 8007ad4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007ad8:	4906      	ldr	r1, [pc, #24]	; (8007af4 <tcp_setprio+0x34>)
 8007ada:	4807      	ldr	r0, [pc, #28]	; (8007af8 <tcp_setprio+0x38>)
 8007adc:	f007 fcf2 	bl	800f4c4 <iprintf>
 8007ae0:	e002      	b.n	8007ae8 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	755a      	strb	r2, [r3, #21]
}
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08010dd4 	.word	0x08010dd4
 8007af4:	0801130c 	.word	0x0801130c
 8007af8:	08010e18 	.word	0x08010e18

08007afc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <tcp_seg_copy+0x1c>
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <tcp_seg_copy+0x4c>)
 8007b0c:	f240 6282 	movw	r2, #1666	; 0x682
 8007b10:	490e      	ldr	r1, [pc, #56]	; (8007b4c <tcp_seg_copy+0x50>)
 8007b12:	480f      	ldr	r0, [pc, #60]	; (8007b50 <tcp_seg_copy+0x54>)
 8007b14:	f007 fcd6 	bl	800f4c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007b18:	2003      	movs	r0, #3
 8007b1a:	f7fd fca5 	bl	8005468 <memp_malloc>
 8007b1e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <tcp_seg_copy+0x2e>
    return NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e00a      	b.n	8007b40 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f007 fda3 	bl	800f67a <memcpy>
  pbuf_ref(cseg->p);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fc1b 	bl	8006374 <pbuf_ref>
  return cseg;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	08010dd4 	.word	0x08010dd4
 8007b4c:	08011328 	.word	0x08011328
 8007b50:	08010e18 	.word	0x08010e18

08007b54 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <tcp_recv_null+0x28>
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <tcp_recv_null+0x60>)
 8007b6a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007b6e:	4912      	ldr	r1, [pc, #72]	; (8007bb8 <tcp_recv_null+0x64>)
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <tcp_recv_null+0x68>)
 8007b72:	f007 fca7 	bl	800f4c4 <iprintf>
 8007b76:	f06f 030f 	mvn.w	r3, #15
 8007b7a:	e016      	b.n	8007baa <tcp_recv_null+0x56>

  if (p != NULL) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	891b      	ldrh	r3, [r3, #8]
 8007b86:	4619      	mov	r1, r3
 8007b88:	68b8      	ldr	r0, [r7, #8]
 8007b8a:	f7ff fab5 	bl	80070f8 <tcp_recved>
    pbuf_free(p);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fe fb50 	bl	8006234 <pbuf_free>
 8007b94:	e008      	b.n	8007ba8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	f7fe ffe6 	bl	8006b70 <tcp_close>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e000      	b.n	8007baa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	08010dd4 	.word	0x08010dd4
 8007bb8:	08011344 	.word	0x08011344
 8007bbc:	08010e18 	.word	0x08010e18

08007bc0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	db01      	blt.n	8007bd6 <tcp_kill_prio+0x16>
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	e000      	b.n	8007bd8 <tcp_kill_prio+0x18>
 8007bd6:	237f      	movs	r3, #127	; 0x7f
 8007bd8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d034      	beq.n	8007c4a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <tcp_kill_prio+0x94>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e01f      	b.n	8007c36 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	7d5b      	ldrb	r3, [r3, #21]
 8007bfa:	7afa      	ldrb	r2, [r7, #11]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d80c      	bhi.n	8007c1a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007c04:	7afa      	ldrb	r2, [r7, #11]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d112      	bne.n	8007c30 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <tcp_kill_prio+0x98>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d80a      	bhi.n	8007c30 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <tcp_kill_prio+0x98>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	7d5b      	ldrb	r3, [r3, #21]
 8007c2e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1dc      	bne.n	8007bf6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007c42:	6938      	ldr	r0, [r7, #16]
 8007c44:	f7ff f87e 	bl	8006d44 <tcp_abort>
 8007c48:	e000      	b.n	8007c4c <tcp_kill_prio+0x8c>
    return;
 8007c4a:	bf00      	nop
  }
}
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200082a8 	.word	0x200082a8
 8007c58:	2000829c 	.word	0x2000829c

08007c5c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d009      	beq.n	8007c80 <tcp_kill_state+0x24>
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d006      	beq.n	8007c80 <tcp_kill_state+0x24>
 8007c72:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <tcp_kill_state+0x80>)
 8007c74:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007c78:	4919      	ldr	r1, [pc, #100]	; (8007ce0 <tcp_kill_state+0x84>)
 8007c7a:	481a      	ldr	r0, [pc, #104]	; (8007ce4 <tcp_kill_state+0x88>)
 8007c7c:	f007 fc22 	bl	800f4c4 <iprintf>

  inactivity = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c88:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <tcp_kill_state+0x8c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e017      	b.n	8007cc0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	7d1b      	ldrb	r3, [r3, #20]
 8007c94:	79fa      	ldrb	r2, [r7, #7]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d10f      	bne.n	8007cba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c9a:	4b14      	ldr	r3, [pc, #80]	; (8007cec <tcp_kill_state+0x90>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d807      	bhi.n	8007cba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007caa:	4b10      	ldr	r3, [pc, #64]	; (8007cec <tcp_kill_state+0x90>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e4      	bne.n	8007c90 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6938      	ldr	r0, [r7, #16]
 8007cd0:	f7fe ff7a 	bl	8006bc8 <tcp_abandon>
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	08010dd4 	.word	0x08010dd4
 8007ce0:	08011360 	.word	0x08011360
 8007ce4:	08010e18 	.word	0x08010e18
 8007ce8:	200082a8 	.word	0x200082a8
 8007cec:	2000829c 	.word	0x2000829c

08007cf0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <tcp_kill_timewait+0x58>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e012      	b.n	8007d2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <tcp_kill_timewait+0x5c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d807      	bhi.n	8007d26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <tcp_kill_timewait+0x5c>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e9      	bne.n	8007d06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f7ff f803 	bl	8006d44 <tcp_abort>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200082ac 	.word	0x200082ac
 8007d4c:	2000829c 	.word	0x2000829c

08007d50 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <tcp_handle_closepend+0x48>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007d5c:	e014      	b.n	8007d88 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8b5b      	ldrh	r3, [r3, #26]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8b5b      	ldrh	r3, [r3, #26]
 8007d74:	f023 0308 	bic.w	r3, r3, #8
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fe fe8c 	bl	8006a9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e7      	bne.n	8007d5e <tcp_handle_closepend+0xe>
  }
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	200082a8 	.word	0x200082a8

08007d9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007da6:	2001      	movs	r0, #1
 8007da8:	f7fd fb5e 	bl	8005468 <memp_malloc>
 8007dac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d126      	bne.n	8007e02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007db4:	f7ff ffcc 	bl	8007d50 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007db8:	f7ff ff9a 	bl	8007cf0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	f7fd fb53 	bl	8005468 <memp_malloc>
 8007dc2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11b      	bne.n	8007e02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007dca:	2009      	movs	r0, #9
 8007dcc:	f7ff ff46 	bl	8007c5c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	f7fd fb49 	bl	8005468 <memp_malloc>
 8007dd6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d111      	bne.n	8007e02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007dde:	2008      	movs	r0, #8
 8007de0:	f7ff ff3c 	bl	8007c5c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fd fb3f 	bl	8005468 <memp_malloc>
 8007dea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fee3 	bl	8007bc0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	f7fd fb34 	bl	8005468 <memp_malloc>
 8007e00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d03f      	beq.n	8007e88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007e08:	229c      	movs	r2, #156	; 0x9c
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f007 fbbe 	bl	800f58e <memset>
    pcb->prio = prio;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	79fa      	ldrb	r2, [r7, #7]
 8007e16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007e3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2206      	movs	r2, #6
 8007e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <tcp_alloc+0xf8>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e66:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <tcp_alloc+0xfc>)
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a08      	ldr	r2, [pc, #32]	; (8007e9c <tcp_alloc+0x100>)
 8007e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a07      	ldr	r2, [pc, #28]	; (8007ea0 <tcp_alloc+0x104>)
 8007e84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000829c 	.word	0x2000829c
 8007e98:	200082b2 	.word	0x200082b2
 8007e9c:	08007b55 	.word	0x08007b55
 8007ea0:	006ddd00 	.word	0x006ddd00

08007ea4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007ea8:	2040      	movs	r0, #64	; 0x40
 8007eaa:	f7ff ff77 	bl	8007d9c <tcp_alloc>
 8007eae:	4603      	mov	r3, r0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7d1b      	ldrb	r3, [r3, #20]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d106      	bne.n	8007eda <tcp_recv+0x26>
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <tcp_recv+0x38>)
 8007ece:	f240 72df 	movw	r2, #2015	; 0x7df
 8007ed2:	4907      	ldr	r1, [pc, #28]	; (8007ef0 <tcp_recv+0x3c>)
 8007ed4:	4807      	ldr	r0, [pc, #28]	; (8007ef4 <tcp_recv+0x40>)
 8007ed6:	f007 faf5 	bl	800f4c4 <iprintf>
    pcb->recv = recv;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	08010dd4 	.word	0x08010dd4
 8007ef0:	08011370 	.word	0x08011370
 8007ef4:	08010e18 	.word	0x08010e18

08007ef8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00e      	beq.n	8007f26 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7d1b      	ldrb	r3, [r3, #20]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d106      	bne.n	8007f1e <tcp_err+0x26>
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <tcp_err+0x38>)
 8007f12:	f640 020d 	movw	r2, #2061	; 0x80d
 8007f16:	4907      	ldr	r1, [pc, #28]	; (8007f34 <tcp_err+0x3c>)
 8007f18:	4807      	ldr	r0, [pc, #28]	; (8007f38 <tcp_err+0x40>)
 8007f1a:	f007 fad3 	bl	800f4c4 <iprintf>
    pcb->errf = err;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	08010dd4 	.word	0x08010dd4
 8007f34:	080113c0 	.word	0x080113c0
 8007f38:	08010e18 	.word	0x08010e18

08007f3c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <tcp_accept+0x22>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7d1b      	ldrb	r3, [r3, #20]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d104      	bne.n	8007f5e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	619a      	str	r2, [r3, #24]
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <tcp_pcb_purge+0x1e>
 8007f7a:	4b21      	ldr	r3, [pc, #132]	; (8008000 <tcp_pcb_purge+0x94>)
 8007f7c:	f640 0251 	movw	r2, #2129	; 0x851
 8007f80:	4920      	ldr	r1, [pc, #128]	; (8008004 <tcp_pcb_purge+0x98>)
 8007f82:	4821      	ldr	r0, [pc, #132]	; (8008008 <tcp_pcb_purge+0x9c>)
 8007f84:	f007 fa9e 	bl	800f4c4 <iprintf>
 8007f88:	e037      	b.n	8007ffa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7d1b      	ldrb	r3, [r3, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d033      	beq.n	8007ffa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007f96:	2b0a      	cmp	r3, #10
 8007f98:	d02f      	beq.n	8007ffa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d02b      	beq.n	8007ffa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe f940 	bl	8006234 <pbuf_free>
      pcb->refused_data = NULL;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f986 	bl	80082d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fd45 	bl	8007a64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd40 	bl	8007a64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	66da      	str	r2, [r3, #108]	; 0x6c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	08010dd4 	.word	0x08010dd4
 8008004:	08011420 	.word	0x08011420
 8008008:	08010e18 	.word	0x08010e18

0800800c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <tcp_pcb_remove+0x1e>
 800801c:	4b3e      	ldr	r3, [pc, #248]	; (8008118 <tcp_pcb_remove+0x10c>)
 800801e:	f640 0283 	movw	r2, #2179	; 0x883
 8008022:	493e      	ldr	r1, [pc, #248]	; (800811c <tcp_pcb_remove+0x110>)
 8008024:	483e      	ldr	r0, [pc, #248]	; (8008120 <tcp_pcb_remove+0x114>)
 8008026:	f007 fa4d 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d106      	bne.n	800803e <tcp_pcb_remove+0x32>
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <tcp_pcb_remove+0x10c>)
 8008032:	f640 0284 	movw	r2, #2180	; 0x884
 8008036:	493b      	ldr	r1, [pc, #236]	; (8008124 <tcp_pcb_remove+0x118>)
 8008038:	4839      	ldr	r0, [pc, #228]	; (8008120 <tcp_pcb_remove+0x114>)
 800803a:	f007 fa43 	bl	800f4c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d105      	bne.n	8008054 <tcp_pcb_remove+0x48>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e013      	b.n	800807c <tcp_pcb_remove+0x70>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e00c      	b.n	8008076 <tcp_pcb_remove+0x6a>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d104      	bne.n	8008070 <tcp_pcb_remove+0x64>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	60da      	str	r2, [r3, #12]
 800806e:	e005      	b.n	800807c <tcp_pcb_remove+0x70>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1ef      	bne.n	800805c <tcp_pcb_remove+0x50>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f7ff ff72 	bl	8007f6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	7d1b      	ldrb	r3, [r3, #20]
 800808c:	2b0a      	cmp	r3, #10
 800808e:	d013      	beq.n	80080b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008094:	2b01      	cmp	r3, #1
 8008096:	d00f      	beq.n	80080b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	8b5b      	ldrh	r3, [r3, #26]
 800809c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	8b5b      	ldrh	r3, [r3, #26]
 80080a8:	f043 0302 	orr.w	r3, r3, #2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80080b2:	6838      	ldr	r0, [r7, #0]
 80080b4:	f003 fbc6 	bl	800b844 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	7d1b      	ldrb	r3, [r3, #20]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d020      	beq.n	8008102 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <tcp_pcb_remove+0xca>
 80080c8:	4b13      	ldr	r3, [pc, #76]	; (8008118 <tcp_pcb_remove+0x10c>)
 80080ca:	f640 0293 	movw	r2, #2195	; 0x893
 80080ce:	4916      	ldr	r1, [pc, #88]	; (8008128 <tcp_pcb_remove+0x11c>)
 80080d0:	4813      	ldr	r0, [pc, #76]	; (8008120 <tcp_pcb_remove+0x114>)
 80080d2:	f007 f9f7 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d006      	beq.n	80080ec <tcp_pcb_remove+0xe0>
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <tcp_pcb_remove+0x10c>)
 80080e0:	f640 0294 	movw	r2, #2196	; 0x894
 80080e4:	4911      	ldr	r1, [pc, #68]	; (800812c <tcp_pcb_remove+0x120>)
 80080e6:	480e      	ldr	r0, [pc, #56]	; (8008120 <tcp_pcb_remove+0x114>)
 80080e8:	f007 f9ec 	bl	800f4c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d006      	beq.n	8008102 <tcp_pcb_remove+0xf6>
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <tcp_pcb_remove+0x10c>)
 80080f6:	f640 0296 	movw	r2, #2198	; 0x896
 80080fa:	490d      	ldr	r1, [pc, #52]	; (8008130 <tcp_pcb_remove+0x124>)
 80080fc:	4808      	ldr	r0, [pc, #32]	; (8008120 <tcp_pcb_remove+0x114>)
 80080fe:	f007 f9e1 	bl	800f4c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2200      	movs	r2, #0
 8008106:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	08010dd4 	.word	0x08010dd4
 800811c:	0801143c 	.word	0x0801143c
 8008120:	08010e18 	.word	0x08010e18
 8008124:	08011458 	.word	0x08011458
 8008128:	08011478 	.word	0x08011478
 800812c:	08011490 	.word	0x08011490
 8008130:	080114ac 	.word	0x080114ac

08008134 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <tcp_next_iss+0x1c>
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <tcp_next_iss+0x38>)
 8008144:	f640 02af 	movw	r2, #2223	; 0x8af
 8008148:	4909      	ldr	r1, [pc, #36]	; (8008170 <tcp_next_iss+0x3c>)
 800814a:	480a      	ldr	r0, [pc, #40]	; (8008174 <tcp_next_iss+0x40>)
 800814c:	f007 f9ba 	bl	800f4c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <tcp_next_iss+0x44>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <tcp_next_iss+0x48>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4413      	add	r3, r2
 800815a:	4a07      	ldr	r2, [pc, #28]	; (8008178 <tcp_next_iss+0x44>)
 800815c:	6013      	str	r3, [r2, #0]
  return iss;
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <tcp_next_iss+0x44>)
 8008160:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	08010dd4 	.word	0x08010dd4
 8008170:	080114c4 	.word	0x080114c4
 8008174:	08010e18 	.word	0x08010e18
 8008178:	20000024 	.word	0x20000024
 800817c:	2000829c 	.word	0x2000829c

08008180 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <tcp_eff_send_mss_netif+0x22>
 8008194:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <tcp_eff_send_mss_netif+0x68>)
 8008196:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800819a:	4914      	ldr	r1, [pc, #80]	; (80081ec <tcp_eff_send_mss_netif+0x6c>)
 800819c:	4814      	ldr	r0, [pc, #80]	; (80081f0 <tcp_eff_send_mss_netif+0x70>)
 800819e:	f007 f991 	bl	800f4c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80081a8:	89fb      	ldrh	r3, [r7, #14]
 80081aa:	e019      	b.n	80081e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80081b2:	8afb      	ldrh	r3, [r7, #22]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d012      	beq.n	80081de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80081b8:	2328      	movs	r3, #40	; 0x28
 80081ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80081bc:	8afa      	ldrh	r2, [r7, #22]
 80081be:	8abb      	ldrh	r3, [r7, #20]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d904      	bls.n	80081ce <tcp_eff_send_mss_netif+0x4e>
 80081c4:	8afa      	ldrh	r2, [r7, #22]
 80081c6:	8abb      	ldrh	r3, [r7, #20]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	e000      	b.n	80081d0 <tcp_eff_send_mss_netif+0x50>
 80081ce:	2300      	movs	r3, #0
 80081d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80081d2:	8a7a      	ldrh	r2, [r7, #18]
 80081d4:	89fb      	ldrh	r3, [r7, #14]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bf28      	it	cs
 80081da:	4613      	movcs	r3, r2
 80081dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80081de:	89fb      	ldrh	r3, [r7, #14]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	08010dd4 	.word	0x08010dd4
 80081ec:	080114e0 	.word	0x080114e0
 80081f0:	08010e18 	.word	0x08010e18

080081f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d119      	bne.n	800823c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008208:	4b10      	ldr	r3, [pc, #64]	; (800824c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800820a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800820e:	4910      	ldr	r1, [pc, #64]	; (8008250 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008210:	4810      	ldr	r0, [pc, #64]	; (8008254 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008212:	f007 f957 	bl	800f4c4 <iprintf>

  while (pcb != NULL) {
 8008216:	e011      	b.n	800823c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d108      	bne.n	8008236 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7fe fd8a 	bl	8006d44 <tcp_abort>
      pcb = next;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e002      	b.n	800823c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1ea      	bne.n	8008218 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	08010dd4 	.word	0x08010dd4
 8008250:	08011508 	.word	0x08011508
 8008254:	08010e18 	.word	0x08010e18

08008258 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d02a      	beq.n	80082be <tcp_netif_ip_addr_changed+0x66>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d026      	beq.n	80082be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <tcp_netif_ip_addr_changed+0x70>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff ffbc 	bl	80081f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800827c:	4b13      	ldr	r3, [pc, #76]	; (80082cc <tcp_netif_ip_addr_changed+0x74>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff ffb6 	bl	80081f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d017      	beq.n	80082be <tcp_netif_ip_addr_changed+0x66>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008296:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <tcp_netif_ip_addr_changed+0x78>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e00c      	b.n	80082b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d103      	bne.n	80082b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1ef      	bne.n	800829e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	200082a8 	.word	0x200082a8
 80082cc:	200082a0 	.word	0x200082a0
 80082d0:	200082a4 	.word	0x200082a4

080082d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff fbbb 	bl	8007a64 <tcp_segs_free>
    pcb->ooseq = NULL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b08d      	sub	sp, #52	; 0x34
 8008300:	af04      	add	r7, sp, #16
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <tcp_input+0x1c>
 800830c:	4b9b      	ldr	r3, [pc, #620]	; (800857c <tcp_input+0x280>)
 800830e:	2283      	movs	r2, #131	; 0x83
 8008310:	499b      	ldr	r1, [pc, #620]	; (8008580 <tcp_input+0x284>)
 8008312:	489c      	ldr	r0, [pc, #624]	; (8008584 <tcp_input+0x288>)
 8008314:	f007 f8d6 	bl	800f4c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	4a9a      	ldr	r2, [pc, #616]	; (8008588 <tcp_input+0x28c>)
 800831e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	2b13      	cmp	r3, #19
 8008326:	f240 83d1 	bls.w	8008acc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800832a:	4b98      	ldr	r3, [pc, #608]	; (800858c <tcp_input+0x290>)
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	4a97      	ldr	r2, [pc, #604]	; (800858c <tcp_input+0x290>)
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f006 f86f 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 83c7 	bne.w	8008ad0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008342:	4b92      	ldr	r3, [pc, #584]	; (800858c <tcp_input+0x290>)
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800834a:	2be0      	cmp	r3, #224	; 0xe0
 800834c:	f000 83c0 	beq.w	8008ad0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008350:	4b8d      	ldr	r3, [pc, #564]	; (8008588 <tcp_input+0x28c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	899b      	ldrh	r3, [r3, #12]
 8008356:	b29b      	uxth	r3, r3
 8008358:	4618      	mov	r0, r3
 800835a:	f7fc fc0d 	bl	8004b78 <lwip_htons>
 800835e:	4603      	mov	r3, r0
 8008360:	0b1b      	lsrs	r3, r3, #12
 8008362:	b29b      	uxth	r3, r3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800836a:	7cbb      	ldrb	r3, [r7, #18]
 800836c:	2b13      	cmp	r3, #19
 800836e:	f240 83b1 	bls.w	8008ad4 <tcp_input+0x7d8>
 8008372:	7cbb      	ldrb	r3, [r7, #18]
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	891b      	ldrh	r3, [r3, #8]
 800837a:	429a      	cmp	r2, r3
 800837c:	f200 83aa 	bhi.w	8008ad4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008380:	7cbb      	ldrb	r3, [r7, #18]
 8008382:	b29b      	uxth	r3, r3
 8008384:	3b14      	subs	r3, #20
 8008386:	b29a      	uxth	r2, r3
 8008388:	4b81      	ldr	r3, [pc, #516]	; (8008590 <tcp_input+0x294>)
 800838a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800838c:	4b81      	ldr	r3, [pc, #516]	; (8008594 <tcp_input+0x298>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	895a      	ldrh	r2, [r3, #10]
 8008396:	7cbb      	ldrb	r3, [r7, #18]
 8008398:	b29b      	uxth	r3, r3
 800839a:	429a      	cmp	r2, r3
 800839c:	d309      	bcc.n	80083b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800839e:	4b7c      	ldr	r3, [pc, #496]	; (8008590 <tcp_input+0x294>)
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	4b7d      	ldr	r3, [pc, #500]	; (8008598 <tcp_input+0x29c>)
 80083a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80083a6:	7cbb      	ldrb	r3, [r7, #18]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fd febc 	bl	8006128 <pbuf_remove_header>
 80083b0:	e04e      	b.n	8008450 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <tcp_input+0xca>
 80083ba:	4b70      	ldr	r3, [pc, #448]	; (800857c <tcp_input+0x280>)
 80083bc:	22c2      	movs	r2, #194	; 0xc2
 80083be:	4977      	ldr	r1, [pc, #476]	; (800859c <tcp_input+0x2a0>)
 80083c0:	4870      	ldr	r0, [pc, #448]	; (8008584 <tcp_input+0x288>)
 80083c2:	f007 f87f 	bl	800f4c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80083c6:	2114      	movs	r1, #20
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fd fead 	bl	8006128 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	895a      	ldrh	r2, [r3, #10]
 80083d2:	4b71      	ldr	r3, [pc, #452]	; (8008598 <tcp_input+0x29c>)
 80083d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80083d6:	4b6e      	ldr	r3, [pc, #440]	; (8008590 <tcp_input+0x294>)
 80083d8:	881a      	ldrh	r2, [r3, #0]
 80083da:	4b6f      	ldr	r3, [pc, #444]	; (8008598 <tcp_input+0x29c>)
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80083e2:	4b6d      	ldr	r3, [pc, #436]	; (8008598 <tcp_input+0x29c>)
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7fd fe9d 	bl	8006128 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	895b      	ldrh	r3, [r3, #10]
 80083f4:	8a3a      	ldrh	r2, [r7, #16]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	f200 836e 	bhi.w	8008ad8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	4a64      	ldr	r2, [pc, #400]	; (8008594 <tcp_input+0x298>)
 8008404:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	8a3a      	ldrh	r2, [r7, #16]
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd fe8a 	bl	8006128 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	891a      	ldrh	r2, [r3, #8]
 8008418:	8a3b      	ldrh	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	895b      	ldrh	r3, [r3, #10]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <tcp_input+0x13a>
 800842a:	4b54      	ldr	r3, [pc, #336]	; (800857c <tcp_input+0x280>)
 800842c:	22df      	movs	r2, #223	; 0xdf
 800842e:	495c      	ldr	r1, [pc, #368]	; (80085a0 <tcp_input+0x2a4>)
 8008430:	4854      	ldr	r0, [pc, #336]	; (8008584 <tcp_input+0x288>)
 8008432:	f007 f847 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	891a      	ldrh	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	891b      	ldrh	r3, [r3, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	d005      	beq.n	8008450 <tcp_input+0x154>
 8008444:	4b4d      	ldr	r3, [pc, #308]	; (800857c <tcp_input+0x280>)
 8008446:	22e0      	movs	r2, #224	; 0xe0
 8008448:	4956      	ldr	r1, [pc, #344]	; (80085a4 <tcp_input+0x2a8>)
 800844a:	484e      	ldr	r0, [pc, #312]	; (8008584 <tcp_input+0x288>)
 800844c:	f007 f83a 	bl	800f4c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008450:	4b4d      	ldr	r3, [pc, #308]	; (8008588 <tcp_input+0x28c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	4a4b      	ldr	r2, [pc, #300]	; (8008588 <tcp_input+0x28c>)
 800845a:	6814      	ldr	r4, [r2, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f7fc fb8b 	bl	8004b78 <lwip_htons>
 8008462:	4603      	mov	r3, r0
 8008464:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008466:	4b48      	ldr	r3, [pc, #288]	; (8008588 <tcp_input+0x28c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	b29b      	uxth	r3, r3
 800846e:	4a46      	ldr	r2, [pc, #280]	; (8008588 <tcp_input+0x28c>)
 8008470:	6814      	ldr	r4, [r2, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fc fb80 	bl	8004b78 <lwip_htons>
 8008478:	4603      	mov	r3, r0
 800847a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800847c:	4b42      	ldr	r3, [pc, #264]	; (8008588 <tcp_input+0x28c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	4a41      	ldr	r2, [pc, #260]	; (8008588 <tcp_input+0x28c>)
 8008484:	6814      	ldr	r4, [r2, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7fc fb8b 	bl	8004ba2 <lwip_htonl>
 800848c:	4603      	mov	r3, r0
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	4a45      	ldr	r2, [pc, #276]	; (80085a8 <tcp_input+0x2ac>)
 8008494:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008496:	4b3c      	ldr	r3, [pc, #240]	; (8008588 <tcp_input+0x28c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4a3a      	ldr	r2, [pc, #232]	; (8008588 <tcp_input+0x28c>)
 800849e:	6814      	ldr	r4, [r2, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fc fb7e 	bl	8004ba2 <lwip_htonl>
 80084a6:	4603      	mov	r3, r0
 80084a8:	60a3      	str	r3, [r4, #8]
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	4a3f      	ldr	r2, [pc, #252]	; (80085ac <tcp_input+0x2b0>)
 80084ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80084b0:	4b35      	ldr	r3, [pc, #212]	; (8008588 <tcp_input+0x28c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	89db      	ldrh	r3, [r3, #14]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4a33      	ldr	r2, [pc, #204]	; (8008588 <tcp_input+0x28c>)
 80084ba:	6814      	ldr	r4, [r2, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fc fb5b 	bl	8004b78 <lwip_htons>
 80084c2:	4603      	mov	r3, r0
 80084c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80084c6:	4b30      	ldr	r3, [pc, #192]	; (8008588 <tcp_input+0x28c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	899b      	ldrh	r3, [r3, #12]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fc fb52 	bl	8004b78 <lwip_htons>
 80084d4:	4603      	mov	r3, r0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <tcp_input+0x2b4>)
 80084e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	891a      	ldrh	r2, [r3, #8]
 80084e6:	4b33      	ldr	r3, [pc, #204]	; (80085b4 <tcp_input+0x2b8>)
 80084e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80084ea:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <tcp_input+0x2b4>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00c      	beq.n	8008510 <tcp_input+0x214>
    tcplen++;
 80084f6:	4b2f      	ldr	r3, [pc, #188]	; (80085b4 <tcp_input+0x2b8>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <tcp_input+0x2b8>)
 8008500:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	891a      	ldrh	r2, [r3, #8]
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <tcp_input+0x2b8>)
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	f200 82e6 	bhi.w	8008adc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008514:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <tcp_input+0x2bc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	e09d      	b.n	8008658 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	7d1b      	ldrb	r3, [r3, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <tcp_input+0x234>
 8008524:	4b15      	ldr	r3, [pc, #84]	; (800857c <tcp_input+0x280>)
 8008526:	22fb      	movs	r2, #251	; 0xfb
 8008528:	4924      	ldr	r1, [pc, #144]	; (80085bc <tcp_input+0x2c0>)
 800852a:	4816      	ldr	r0, [pc, #88]	; (8008584 <tcp_input+0x288>)
 800852c:	f006 ffca 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	7d1b      	ldrb	r3, [r3, #20]
 8008534:	2b0a      	cmp	r3, #10
 8008536:	d105      	bne.n	8008544 <tcp_input+0x248>
 8008538:	4b10      	ldr	r3, [pc, #64]	; (800857c <tcp_input+0x280>)
 800853a:	22fc      	movs	r2, #252	; 0xfc
 800853c:	4920      	ldr	r1, [pc, #128]	; (80085c0 <tcp_input+0x2c4>)
 800853e:	4811      	ldr	r0, [pc, #68]	; (8008584 <tcp_input+0x288>)
 8008540:	f006 ffc0 	bl	800f4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	7d1b      	ldrb	r3, [r3, #20]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d105      	bne.n	8008558 <tcp_input+0x25c>
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <tcp_input+0x280>)
 800854e:	22fd      	movs	r2, #253	; 0xfd
 8008550:	491c      	ldr	r1, [pc, #112]	; (80085c4 <tcp_input+0x2c8>)
 8008552:	480c      	ldr	r0, [pc, #48]	; (8008584 <tcp_input+0x288>)
 8008554:	f006 ffb6 	bl	800f4c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	7a1b      	ldrb	r3, [r3, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d033      	beq.n	80085c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	7a1a      	ldrb	r2, [r3, #8]
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <tcp_input+0x290>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800856c:	3301      	adds	r3, #1
 800856e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008570:	429a      	cmp	r2, r3
 8008572:	d029      	beq.n	80085c8 <tcp_input+0x2cc>
      prev = pcb;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	61bb      	str	r3, [r7, #24]
      continue;
 8008578:	e06b      	b.n	8008652 <tcp_input+0x356>
 800857a:	bf00      	nop
 800857c:	0801153c 	.word	0x0801153c
 8008580:	08011570 	.word	0x08011570
 8008584:	08011588 	.word	0x08011588
 8008588:	200082c4 	.word	0x200082c4
 800858c:	20004d2c 	.word	0x20004d2c
 8008590:	200082c8 	.word	0x200082c8
 8008594:	200082cc 	.word	0x200082cc
 8008598:	200082ca 	.word	0x200082ca
 800859c:	080115b0 	.word	0x080115b0
 80085a0:	080115c0 	.word	0x080115c0
 80085a4:	080115cc 	.word	0x080115cc
 80085a8:	200082d4 	.word	0x200082d4
 80085ac:	200082d8 	.word	0x200082d8
 80085b0:	200082e0 	.word	0x200082e0
 80085b4:	200082de 	.word	0x200082de
 80085b8:	200082a8 	.word	0x200082a8
 80085bc:	080115ec 	.word	0x080115ec
 80085c0:	08011614 	.word	0x08011614
 80085c4:	08011640 	.word	0x08011640
    }

    if (pcb->remote_port == tcphdr->src &&
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	8b1a      	ldrh	r2, [r3, #24]
 80085cc:	4b72      	ldr	r3, [pc, #456]	; (8008798 <tcp_input+0x49c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d13a      	bne.n	800864e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	8ada      	ldrh	r2, [r3, #22]
 80085dc:	4b6e      	ldr	r3, [pc, #440]	; (8008798 <tcp_input+0x49c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d132      	bne.n	800864e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b6b      	ldr	r3, [pc, #428]	; (800879c <tcp_input+0x4a0>)
 80085ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d12c      	bne.n	800864e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	4b68      	ldr	r3, [pc, #416]	; (800879c <tcp_input+0x4a0>)
 80085fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d126      	bne.n	800864e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	429a      	cmp	r2, r3
 8008608:	d106      	bne.n	8008618 <tcp_input+0x31c>
 800860a:	4b65      	ldr	r3, [pc, #404]	; (80087a0 <tcp_input+0x4a4>)
 800860c:	f240 120d 	movw	r2, #269	; 0x10d
 8008610:	4964      	ldr	r1, [pc, #400]	; (80087a4 <tcp_input+0x4a8>)
 8008612:	4865      	ldr	r0, [pc, #404]	; (80087a8 <tcp_input+0x4ac>)
 8008614:	f006 ff56 	bl	800f4c4 <iprintf>
      if (prev != NULL) {
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <tcp_input+0x338>
        prev->next = pcb->next;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008626:	4b61      	ldr	r3, [pc, #388]	; (80087ac <tcp_input+0x4b0>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800862e:	4a5f      	ldr	r2, [pc, #380]	; (80087ac <tcp_input+0x4b0>)
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	429a      	cmp	r2, r3
 800863c:	d111      	bne.n	8008662 <tcp_input+0x366>
 800863e:	4b58      	ldr	r3, [pc, #352]	; (80087a0 <tcp_input+0x4a4>)
 8008640:	f240 1215 	movw	r2, #277	; 0x115
 8008644:	495a      	ldr	r1, [pc, #360]	; (80087b0 <tcp_input+0x4b4>)
 8008646:	4858      	ldr	r0, [pc, #352]	; (80087a8 <tcp_input+0x4ac>)
 8008648:	f006 ff3c 	bl	800f4c4 <iprintf>
      break;
 800864c:	e009      	b.n	8008662 <tcp_input+0x366>
    }
    prev = pcb;
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f47f af5e 	bne.w	800851c <tcp_input+0x220>
 8008660:	e000      	b.n	8008664 <tcp_input+0x368>
      break;
 8008662:	bf00      	nop
  }

  if (pcb == NULL) {
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 80aa 	bne.w	80087c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800866c:	4b51      	ldr	r3, [pc, #324]	; (80087b4 <tcp_input+0x4b8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e03f      	b.n	80086f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	7d1b      	ldrb	r3, [r3, #20]
 8008678:	2b0a      	cmp	r3, #10
 800867a:	d006      	beq.n	800868a <tcp_input+0x38e>
 800867c:	4b48      	ldr	r3, [pc, #288]	; (80087a0 <tcp_input+0x4a4>)
 800867e:	f240 121f 	movw	r2, #287	; 0x11f
 8008682:	494d      	ldr	r1, [pc, #308]	; (80087b8 <tcp_input+0x4bc>)
 8008684:	4848      	ldr	r0, [pc, #288]	; (80087a8 <tcp_input+0x4ac>)
 8008686:	f006 ff1d 	bl	800f4c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	7a1b      	ldrb	r3, [r3, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	7a1a      	ldrb	r2, [r3, #8]
 8008696:	4b41      	ldr	r3, [pc, #260]	; (800879c <tcp_input+0x4a0>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800869e:	3301      	adds	r3, #1
 80086a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d122      	bne.n	80086ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	8b1a      	ldrh	r2, [r3, #24]
 80086aa:	4b3b      	ldr	r3, [pc, #236]	; (8008798 <tcp_input+0x49c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d11b      	bne.n	80086ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	8ada      	ldrh	r2, [r3, #22]
 80086ba:	4b37      	ldr	r3, [pc, #220]	; (8008798 <tcp_input+0x49c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	885b      	ldrh	r3, [r3, #2]
 80086c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d113      	bne.n	80086ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b34      	ldr	r3, [pc, #208]	; (800879c <tcp_input+0x4a0>)
 80086cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d10d      	bne.n	80086ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b31      	ldr	r3, [pc, #196]	; (800879c <tcp_input+0x4a0>)
 80086d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086da:	429a      	cmp	r2, r3
 80086dc:	d107      	bne.n	80086ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80086de:	69f8      	ldr	r0, [r7, #28]
 80086e0:	f000 fb56 	bl	8008d90 <tcp_timewait_input>
        }
        pbuf_free(p);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7fd fda5 	bl	8006234 <pbuf_free>
        return;
 80086ea:	e1fd      	b.n	8008ae8 <tcp_input+0x7ec>
        continue;
 80086ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1bc      	bne.n	8008674 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086fe:	4b2f      	ldr	r3, [pc, #188]	; (80087bc <tcp_input+0x4c0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e02a      	b.n	800875c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	7a1b      	ldrb	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	7a1a      	ldrb	r2, [r3, #8]
 8008712:	4b22      	ldr	r3, [pc, #136]	; (800879c <tcp_input+0x4a0>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800871a:	3301      	adds	r3, #1
 800871c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800871e:	429a      	cmp	r2, r3
 8008720:	d002      	beq.n	8008728 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	61bb      	str	r3, [r7, #24]
        continue;
 8008726:	e016      	b.n	8008756 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	8ada      	ldrh	r2, [r3, #22]
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <tcp_input+0x49c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	885b      	ldrh	r3, [r3, #2]
 8008732:	b29b      	uxth	r3, r3
 8008734:	429a      	cmp	r2, r3
 8008736:	d10c      	bne.n	8008752 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	4b17      	ldr	r3, [pc, #92]	; (800879c <tcp_input+0x4a0>)
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	429a      	cmp	r2, r3
 8008742:	d00f      	beq.n	8008764 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00d      	beq.n	8008766 <tcp_input+0x46a>
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	617b      	str	r3, [r7, #20]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1d1      	bne.n	8008706 <tcp_input+0x40a>
 8008762:	e000      	b.n	8008766 <tcp_input+0x46a>
            break;
 8008764:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d029      	beq.n	80087c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <tcp_input+0x4c0>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008782:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <tcp_input+0x4c0>)
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008788:	6978      	ldr	r0, [r7, #20]
 800878a:	f000 fa03 	bl	8008b94 <tcp_listen_input>
      }
      pbuf_free(p);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7fd fd50 	bl	8006234 <pbuf_free>
      return;
 8008794:	e1a8      	b.n	8008ae8 <tcp_input+0x7ec>
 8008796:	bf00      	nop
 8008798:	200082c4 	.word	0x200082c4
 800879c:	20004d2c 	.word	0x20004d2c
 80087a0:	0801153c 	.word	0x0801153c
 80087a4:	08011668 	.word	0x08011668
 80087a8:	08011588 	.word	0x08011588
 80087ac:	200082a8 	.word	0x200082a8
 80087b0:	08011694 	.word	0x08011694
 80087b4:	200082ac 	.word	0x200082ac
 80087b8:	080116c0 	.word	0x080116c0
 80087bc:	200082a4 	.word	0x200082a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8158 	beq.w	8008a78 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80087c8:	4b95      	ldr	r3, [pc, #596]	; (8008a20 <tcp_input+0x724>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	891a      	ldrh	r2, [r3, #8]
 80087d2:	4b93      	ldr	r3, [pc, #588]	; (8008a20 <tcp_input+0x724>)
 80087d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80087d6:	4a92      	ldr	r2, [pc, #584]	; (8008a20 <tcp_input+0x724>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80087dc:	4b91      	ldr	r3, [pc, #580]	; (8008a24 <tcp_input+0x728>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a8f      	ldr	r2, [pc, #572]	; (8008a20 <tcp_input+0x724>)
 80087e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80087e4:	4b90      	ldr	r3, [pc, #576]	; (8008a28 <tcp_input+0x72c>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80087ea:	4b90      	ldr	r3, [pc, #576]	; (8008a2c <tcp_input+0x730>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80087f0:	4b8f      	ldr	r3, [pc, #572]	; (8008a30 <tcp_input+0x734>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80087f6:	4b8f      	ldr	r3, [pc, #572]	; (8008a34 <tcp_input+0x738>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d006      	beq.n	8008810 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7b5b      	ldrb	r3, [r3, #13]
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008814:	2b00      	cmp	r3, #0
 8008816:	d017      	beq.n	8008848 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008818:	69f8      	ldr	r0, [r7, #28]
 800881a:	f7ff f8a7 	bl	800796c <tcp_process_refused_data>
 800881e:	4603      	mov	r3, r0
 8008820:	f113 0f0d 	cmn.w	r3, #13
 8008824:	d007      	beq.n	8008836 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00c      	beq.n	8008848 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800882e:	4b82      	ldr	r3, [pc, #520]	; (8008a38 <tcp_input+0x73c>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 80e3 	bne.w	8008a06 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008840:	69f8      	ldr	r0, [r7, #28]
 8008842:	f003 fe05 	bl	800c450 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008846:	e0de      	b.n	8008a06 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008848:	4a7c      	ldr	r2, [pc, #496]	; (8008a3c <tcp_input+0x740>)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800884e:	69f8      	ldr	r0, [r7, #28]
 8008850:	f000 fb18 	bl	8008e84 <tcp_process>
 8008854:	4603      	mov	r3, r0
 8008856:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800885c:	f113 0f0d 	cmn.w	r3, #13
 8008860:	f000 80d3 	beq.w	8008a0a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008864:	4b71      	ldr	r3, [pc, #452]	; (8008a2c <tcp_input+0x730>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b00      	cmp	r3, #0
 800886e:	d015      	beq.n	800889c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <tcp_input+0x590>
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	6912      	ldr	r2, [r2, #16]
 8008884:	f06f 010d 	mvn.w	r1, #13
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800888c:	69f9      	ldr	r1, [r7, #28]
 800888e:	486c      	ldr	r0, [pc, #432]	; (8008a40 <tcp_input+0x744>)
 8008890:	f7ff fbbc 	bl	800800c <tcp_pcb_remove>
        tcp_free(pcb);
 8008894:	69f8      	ldr	r0, [r7, #28]
 8008896:	f7fd ff6d 	bl	8006774 <tcp_free>
 800889a:	e0da      	b.n	8008a52 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80088a0:	4b63      	ldr	r3, [pc, #396]	; (8008a30 <tcp_input+0x734>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01d      	beq.n	80088e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80088a8:	4b61      	ldr	r3, [pc, #388]	; (8008a30 <tcp_input+0x734>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <tcp_input+0x5d2>
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	6910      	ldr	r0, [r2, #16]
 80088c2:	89fa      	ldrh	r2, [r7, #14]
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	4798      	blx	r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	74fb      	strb	r3, [r7, #19]
 80088cc:	e001      	b.n	80088d2 <tcp_input+0x5d6>
 80088ce:	2300      	movs	r3, #0
 80088d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80088d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088d6:	f113 0f0d 	cmn.w	r3, #13
 80088da:	f000 8098 	beq.w	8008a0e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80088de:	4b54      	ldr	r3, [pc, #336]	; (8008a30 <tcp_input+0x734>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80088e4:	69f8      	ldr	r0, [r7, #28]
 80088e6:	f000 f915 	bl	8008b14 <tcp_input_delayed_close>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8090 	bne.w	8008a12 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80088f2:	4b4d      	ldr	r3, [pc, #308]	; (8008a28 <tcp_input+0x72c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d041      	beq.n	800897e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d006      	beq.n	8008910 <tcp_input+0x614>
 8008902:	4b50      	ldr	r3, [pc, #320]	; (8008a44 <tcp_input+0x748>)
 8008904:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008908:	494f      	ldr	r1, [pc, #316]	; (8008a48 <tcp_input+0x74c>)
 800890a:	4850      	ldr	r0, [pc, #320]	; (8008a4c <tcp_input+0x750>)
 800890c:	f006 fdda 	bl	800f4c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	8b5b      	ldrh	r3, [r3, #26]
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b00      	cmp	r3, #0
 800891a:	d008      	beq.n	800892e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800891c:	4b42      	ldr	r3, [pc, #264]	; (8008a28 <tcp_input+0x72c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7fd fc87 	bl	8006234 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008926:	69f8      	ldr	r0, [r7, #28]
 8008928:	f7fe fa0c 	bl	8006d44 <tcp_abort>
            goto aborted;
 800892c:	e091      	b.n	8008a52 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00c      	beq.n	8008952 <tcp_input+0x656>
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	6918      	ldr	r0, [r3, #16]
 8008942:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <tcp_input+0x72c>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	47a0      	blx	r4
 800894c:	4603      	mov	r3, r0
 800894e:	74fb      	strb	r3, [r7, #19]
 8008950:	e008      	b.n	8008964 <tcp_input+0x668>
 8008952:	4b35      	ldr	r3, [pc, #212]	; (8008a28 <tcp_input+0x72c>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	69f9      	ldr	r1, [r7, #28]
 800895a:	2000      	movs	r0, #0
 800895c:	f7ff f8fa 	bl	8007b54 <tcp_recv_null>
 8008960:	4603      	mov	r3, r0
 8008962:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008968:	f113 0f0d 	cmn.w	r3, #13
 800896c:	d053      	beq.n	8008a16 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800896e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008976:	4b2c      	ldr	r3, [pc, #176]	; (8008a28 <tcp_input+0x72c>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800897e:	4b2b      	ldr	r3, [pc, #172]	; (8008a2c <tcp_input+0x730>)
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b00      	cmp	r3, #0
 8008988:	d030      	beq.n	80089ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008996:	7b5a      	ldrb	r2, [r3, #13]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899c:	f042 0220 	orr.w	r2, r2, #32
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	735a      	strb	r2, [r3, #13]
 80089a4:	e022      	b.n	80089ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80089ae:	d005      	beq.n	80089bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b4:	3301      	adds	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <tcp_input+0x6e2>
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	6918      	ldr	r0, [r3, #16]
 80089d0:	2300      	movs	r3, #0
 80089d2:	2200      	movs	r2, #0
 80089d4:	69f9      	ldr	r1, [r7, #28]
 80089d6:	47a0      	blx	r4
 80089d8:	4603      	mov	r3, r0
 80089da:	74fb      	strb	r3, [r7, #19]
 80089dc:	e001      	b.n	80089e2 <tcp_input+0x6e6>
 80089de:	2300      	movs	r3, #0
 80089e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e6:	f113 0f0d 	cmn.w	r3, #13
 80089ea:	d016      	beq.n	8008a1a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <tcp_input+0x740>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80089f2:	69f8      	ldr	r0, [r7, #28]
 80089f4:	f000 f88e 	bl	8008b14 <tcp_input_delayed_close>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d128      	bne.n	8008a50 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80089fe:	69f8      	ldr	r0, [r7, #28]
 8008a00:	f002 ff20 	bl	800b844 <tcp_output>
 8008a04:	e025      	b.n	8008a52 <tcp_input+0x756>
        goto aborted;
 8008a06:	bf00      	nop
 8008a08:	e023      	b.n	8008a52 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008a0a:	bf00      	nop
 8008a0c:	e021      	b.n	8008a52 <tcp_input+0x756>
              goto aborted;
 8008a0e:	bf00      	nop
 8008a10:	e01f      	b.n	8008a52 <tcp_input+0x756>
          goto aborted;
 8008a12:	bf00      	nop
 8008a14:	e01d      	b.n	8008a52 <tcp_input+0x756>
            goto aborted;
 8008a16:	bf00      	nop
 8008a18:	e01b      	b.n	8008a52 <tcp_input+0x756>
              goto aborted;
 8008a1a:	bf00      	nop
 8008a1c:	e019      	b.n	8008a52 <tcp_input+0x756>
 8008a1e:	bf00      	nop
 8008a20:	200082b4 	.word	0x200082b4
 8008a24:	200082c4 	.word	0x200082c4
 8008a28:	200082e4 	.word	0x200082e4
 8008a2c:	200082e1 	.word	0x200082e1
 8008a30:	200082dc 	.word	0x200082dc
 8008a34:	200082e0 	.word	0x200082e0
 8008a38:	200082de 	.word	0x200082de
 8008a3c:	200082e8 	.word	0x200082e8
 8008a40:	200082a8 	.word	0x200082a8
 8008a44:	0801153c 	.word	0x0801153c
 8008a48:	080116f0 	.word	0x080116f0
 8008a4c:	08011588 	.word	0x08011588
          goto aborted;
 8008a50:	bf00      	nop
    tcp_input_pcb = NULL;
 8008a52:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <tcp_input+0x7f4>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008a58:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <tcp_input+0x7f8>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008a5e:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <tcp_input+0x7fc>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d03f      	beq.n	8008ae6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <tcp_input+0x7fc>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fd fbe2 	bl	8006234 <pbuf_free>
      inseg.p = NULL;
 8008a70:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <tcp_input+0x7fc>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008a76:	e036      	b.n	8008ae6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008a78:	4b20      	ldr	r3, [pc, #128]	; (8008afc <tcp_input+0x800>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	899b      	ldrh	r3, [r3, #12]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fc f879 	bl	8004b78 <lwip_htons>
 8008a86:	4603      	mov	r3, r0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d118      	bne.n	8008ac4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a92:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <tcp_input+0x804>)
 8008a94:	6819      	ldr	r1, [r3, #0]
 8008a96:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <tcp_input+0x808>)
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <tcp_input+0x80c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aa2:	4b16      	ldr	r3, [pc, #88]	; (8008afc <tcp_input+0x800>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aa6:	885b      	ldrh	r3, [r3, #2]
 8008aa8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aaa:	4a14      	ldr	r2, [pc, #80]	; (8008afc <tcp_input+0x800>)
 8008aac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aae:	8812      	ldrh	r2, [r2, #0]
 8008ab0:	b292      	uxth	r2, r2
 8008ab2:	9202      	str	r2, [sp, #8]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <tcp_input+0x810>)
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <tcp_input+0x814>)
 8008abc:	4602      	mov	r2, r0
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f003 fc74 	bl	800c3ac <tcp_rst>
    pbuf_free(p);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fd fbb5 	bl	8006234 <pbuf_free>
  return;
 8008aca:	e00c      	b.n	8008ae6 <tcp_input+0x7ea>
    goto dropped;
 8008acc:	bf00      	nop
 8008ace:	e006      	b.n	8008ade <tcp_input+0x7e2>
    goto dropped;
 8008ad0:	bf00      	nop
 8008ad2:	e004      	b.n	8008ade <tcp_input+0x7e2>
    goto dropped;
 8008ad4:	bf00      	nop
 8008ad6:	e002      	b.n	8008ade <tcp_input+0x7e2>
      goto dropped;
 8008ad8:	bf00      	nop
 8008ada:	e000      	b.n	8008ade <tcp_input+0x7e2>
      goto dropped;
 8008adc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fd fba8 	bl	8006234 <pbuf_free>
 8008ae4:	e000      	b.n	8008ae8 <tcp_input+0x7ec>
  return;
 8008ae6:	bf00      	nop
}
 8008ae8:	3724      	adds	r7, #36	; 0x24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd90      	pop	{r4, r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200082e8 	.word	0x200082e8
 8008af4:	200082e4 	.word	0x200082e4
 8008af8:	200082b4 	.word	0x200082b4
 8008afc:	200082c4 	.word	0x200082c4
 8008b00:	200082d8 	.word	0x200082d8
 8008b04:	200082de 	.word	0x200082de
 8008b08:	200082d4 	.word	0x200082d4
 8008b0c:	20004d3c 	.word	0x20004d3c
 8008b10:	20004d40 	.word	0x20004d40

08008b14 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <tcp_input_delayed_close+0x1c>
 8008b22:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <tcp_input_delayed_close+0x6c>)
 8008b24:	f240 225a 	movw	r2, #602	; 0x25a
 8008b28:	4916      	ldr	r1, [pc, #88]	; (8008b84 <tcp_input_delayed_close+0x70>)
 8008b2a:	4817      	ldr	r0, [pc, #92]	; (8008b88 <tcp_input_delayed_close+0x74>)
 8008b2c:	f006 fcca 	bl	800f4c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008b30:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <tcp_input_delayed_close+0x78>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01c      	beq.n	8008b76 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8b5b      	ldrh	r3, [r3, #26]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <tcp_input_delayed_close+0x50>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6912      	ldr	r2, [r2, #16]
 8008b5c:	f06f 010e 	mvn.w	r1, #14
 8008b60:	4610      	mov	r0, r2
 8008b62:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	480a      	ldr	r0, [pc, #40]	; (8008b90 <tcp_input_delayed_close+0x7c>)
 8008b68:	f7ff fa50 	bl	800800c <tcp_pcb_remove>
    tcp_free(pcb);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fd fe01 	bl	8006774 <tcp_free>
    return 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	0801153c 	.word	0x0801153c
 8008b84:	0801170c 	.word	0x0801170c
 8008b88:	08011588 	.word	0x08011588
 8008b8c:	200082e1 	.word	0x200082e1
 8008b90:	200082a8 	.word	0x200082a8

08008b94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b08b      	sub	sp, #44	; 0x2c
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008b9c:	4b6f      	ldr	r3, [pc, #444]	; (8008d5c <tcp_listen_input+0x1c8>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f040 80d2 	bne.w	8008d4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <tcp_listen_input+0x2a>
 8008bb0:	4b6b      	ldr	r3, [pc, #428]	; (8008d60 <tcp_listen_input+0x1cc>)
 8008bb2:	f240 2281 	movw	r2, #641	; 0x281
 8008bb6:	496b      	ldr	r1, [pc, #428]	; (8008d64 <tcp_listen_input+0x1d0>)
 8008bb8:	486b      	ldr	r0, [pc, #428]	; (8008d68 <tcp_listen_input+0x1d4>)
 8008bba:	f006 fc83 	bl	800f4c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008bbe:	4b67      	ldr	r3, [pc, #412]	; (8008d5c <tcp_listen_input+0x1c8>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d019      	beq.n	8008bfe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bca:	4b68      	ldr	r3, [pc, #416]	; (8008d6c <tcp_listen_input+0x1d8>)
 8008bcc:	6819      	ldr	r1, [r3, #0]
 8008bce:	4b68      	ldr	r3, [pc, #416]	; (8008d70 <tcp_listen_input+0x1dc>)
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4b67      	ldr	r3, [pc, #412]	; (8008d74 <tcp_listen_input+0x1e0>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bda:	4b67      	ldr	r3, [pc, #412]	; (8008d78 <tcp_listen_input+0x1e4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008be2:	4a65      	ldr	r2, [pc, #404]	; (8008d78 <tcp_listen_input+0x1e4>)
 8008be4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008be6:	8812      	ldrh	r2, [r2, #0]
 8008be8:	b292      	uxth	r2, r2
 8008bea:	9202      	str	r2, [sp, #8]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	4b63      	ldr	r3, [pc, #396]	; (8008d7c <tcp_listen_input+0x1e8>)
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4b63      	ldr	r3, [pc, #396]	; (8008d80 <tcp_listen_input+0x1ec>)
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f003 fbd8 	bl	800c3ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008bfc:	e0a9      	b.n	8008d52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008bfe:	4b57      	ldr	r3, [pc, #348]	; (8008d5c <tcp_listen_input+0x1c8>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80a3 	beq.w	8008d52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7d5b      	ldrb	r3, [r3, #21]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff f8c3 	bl	8007d9c <tcp_alloc>
 8008c16:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d111      	bne.n	8008c42 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <tcp_listen_input+0xa8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6910      	ldr	r0, [r2, #16]
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c32:	2100      	movs	r1, #0
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]
      return;
 8008c3a:	e08b      	b.n	8008d54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c3c:	23f0      	movs	r3, #240	; 0xf0
 8008c3e:	73bb      	strb	r3, [r7, #14]
      return;
 8008c40:	e088      	b.n	8008d54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c42:	4b50      	ldr	r3, [pc, #320]	; (8008d84 <tcp_listen_input+0x1f0>)
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008c4a:	4b4e      	ldr	r3, [pc, #312]	; (8008d84 <tcp_listen_input+0x1f0>)
 8008c4c:	691a      	ldr	r2, [r3, #16]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8ada      	ldrh	r2, [r3, #22]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008c5a:	4b47      	ldr	r3, [pc, #284]	; (8008d78 <tcp_listen_input+0x1e4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c6c:	4b41      	ldr	r3, [pc, #260]	; (8008d74 <tcp_listen_input+0x1e0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff fa58 	bl	8008134 <tcp_next_iss>
 8008c84:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c9e:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <tcp_listen_input+0x1e0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	1e5a      	subs	r2, r3, #1
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7a5b      	ldrb	r3, [r3, #9]
 8008cba:	f003 030c 	and.w	r3, r3, #12
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	7a1a      	ldrb	r2, [r3, #8]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008ccc:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <tcp_listen_input+0x1f4>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <tcp_listen_input+0x1f4>)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	f003 fd29 	bl	800c730 <tcp_timer_needed>
 8008cde:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <tcp_listen_input+0x1f8>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008ce4:	6978      	ldr	r0, [r7, #20]
 8008ce6:	f001 fd8f 	bl	800a808 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008cea:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <tcp_listen_input+0x1e4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	89db      	ldrh	r3, [r3, #14]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f005 f8ed 	bl	800deec <ip4_route>
 8008d12:	4601      	mov	r1, r0
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	3304      	adds	r3, #4
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff fa30 	bl	8008180 <tcp_eff_send_mss_netif>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d28:	2112      	movs	r1, #18
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f002 fc9c 	bl	800b668 <tcp_enqueue_flags>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f7fd ff42 	bl	8006bc8 <tcp_abandon>
      return;
 8008d44:	e006      	b.n	8008d54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	f002 fd7c 	bl	800b844 <tcp_output>
  return;
 8008d4c:	e001      	b.n	8008d52 <tcp_listen_input+0x1be>
    return;
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <tcp_listen_input+0x1c0>
  return;
 8008d52:	bf00      	nop
}
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd90      	pop	{r4, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200082e0 	.word	0x200082e0
 8008d60:	0801153c 	.word	0x0801153c
 8008d64:	08011734 	.word	0x08011734
 8008d68:	08011588 	.word	0x08011588
 8008d6c:	200082d8 	.word	0x200082d8
 8008d70:	200082de 	.word	0x200082de
 8008d74:	200082d4 	.word	0x200082d4
 8008d78:	200082c4 	.word	0x200082c4
 8008d7c:	20004d3c 	.word	0x20004d3c
 8008d80:	20004d40 	.word	0x20004d40
 8008d84:	20004d2c 	.word	0x20004d2c
 8008d88:	200082a8 	.word	0x200082a8
 8008d8c:	200082b0 	.word	0x200082b0

08008d90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008d98:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <tcp_timewait_input+0xc8>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d153      	bne.n	8008e4c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <tcp_timewait_input+0x28>
 8008daa:	4b2c      	ldr	r3, [pc, #176]	; (8008e5c <tcp_timewait_input+0xcc>)
 8008dac:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008db0:	492b      	ldr	r1, [pc, #172]	; (8008e60 <tcp_timewait_input+0xd0>)
 8008db2:	482c      	ldr	r0, [pc, #176]	; (8008e64 <tcp_timewait_input+0xd4>)
 8008db4:	f006 fb86 	bl	800f4c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008db8:	4b27      	ldr	r3, [pc, #156]	; (8008e58 <tcp_timewait_input+0xc8>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d02a      	beq.n	8008e1a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008dc4:	4b28      	ldr	r3, [pc, #160]	; (8008e68 <tcp_timewait_input+0xd8>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	db2d      	blt.n	8008e2e <tcp_timewait_input+0x9e>
 8008dd2:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <tcp_timewait_input+0xd8>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dde:	440b      	add	r3, r1
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dc23      	bgt.n	8008e2e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008de6:	4b21      	ldr	r3, [pc, #132]	; (8008e6c <tcp_timewait_input+0xdc>)
 8008de8:	6819      	ldr	r1, [r3, #0]
 8008dea:	4b21      	ldr	r3, [pc, #132]	; (8008e70 <tcp_timewait_input+0xe0>)
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <tcp_timewait_input+0xd8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008df6:	4b1f      	ldr	r3, [pc, #124]	; (8008e74 <tcp_timewait_input+0xe4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dfe:	4a1d      	ldr	r2, [pc, #116]	; (8008e74 <tcp_timewait_input+0xe4>)
 8008e00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e02:	8812      	ldrh	r2, [r2, #0]
 8008e04:	b292      	uxth	r2, r2
 8008e06:	9202      	str	r2, [sp, #8]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <tcp_timewait_input+0xe8>)
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <tcp_timewait_input+0xec>)
 8008e10:	4602      	mov	r2, r0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f003 faca 	bl	800c3ac <tcp_rst>
      return;
 8008e18:	e01b      	b.n	8008e52 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008e1a:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <tcp_timewait_input+0xc8>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e26:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <tcp_timewait_input+0xf0>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008e2e:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <tcp_timewait_input+0xe0>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00c      	beq.n	8008e50 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	8b5b      	ldrh	r3, [r3, #26]
 8008e3a:	f043 0302 	orr.w	r3, r3, #2
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f002 fcfd 	bl	800b844 <tcp_output>
  }
  return;
 8008e4a:	e001      	b.n	8008e50 <tcp_timewait_input+0xc0>
    return;
 8008e4c:	bf00      	nop
 8008e4e:	e000      	b.n	8008e52 <tcp_timewait_input+0xc2>
  return;
 8008e50:	bf00      	nop
}
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	200082e0 	.word	0x200082e0
 8008e5c:	0801153c 	.word	0x0801153c
 8008e60:	08011754 	.word	0x08011754
 8008e64:	08011588 	.word	0x08011588
 8008e68:	200082d4 	.word	0x200082d4
 8008e6c:	200082d8 	.word	0x200082d8
 8008e70:	200082de 	.word	0x200082de
 8008e74:	200082c4 	.word	0x200082c4
 8008e78:	20004d3c 	.word	0x20004d3c
 8008e7c:	20004d40 	.word	0x20004d40
 8008e80:	2000829c 	.word	0x2000829c

08008e84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008e84:	b590      	push	{r4, r7, lr}
 8008e86:	b08d      	sub	sp, #52	; 0x34
 8008e88:	af04      	add	r7, sp, #16
 8008e8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <tcp_process+0x24>
 8008e9a:	4b9d      	ldr	r3, [pc, #628]	; (8009110 <tcp_process+0x28c>)
 8008e9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008ea0:	499c      	ldr	r1, [pc, #624]	; (8009114 <tcp_process+0x290>)
 8008ea2:	489d      	ldr	r0, [pc, #628]	; (8009118 <tcp_process+0x294>)
 8008ea4:	f006 fb0e 	bl	800f4c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008ea8:	4b9c      	ldr	r3, [pc, #624]	; (800911c <tcp_process+0x298>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d04e      	beq.n	8008f52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7d1b      	ldrb	r3, [r3, #20]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d108      	bne.n	8008ece <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ec0:	4b97      	ldr	r3, [pc, #604]	; (8009120 <tcp_process+0x29c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d123      	bne.n	8008f10 <tcp_process+0x8c>
        acceptable = 1;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	76fb      	strb	r3, [r7, #27]
 8008ecc:	e020      	b.n	8008f10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ed2:	4b94      	ldr	r3, [pc, #592]	; (8009124 <tcp_process+0x2a0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d102      	bne.n	8008ee0 <tcp_process+0x5c>
        acceptable = 1;
 8008eda:	2301      	movs	r3, #1
 8008edc:	76fb      	strb	r3, [r7, #27]
 8008ede:	e017      	b.n	8008f10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ee0:	4b90      	ldr	r3, [pc, #576]	; (8009124 <tcp_process+0x2a0>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	db10      	blt.n	8008f10 <tcp_process+0x8c>
 8008eee:	4b8d      	ldr	r3, [pc, #564]	; (8009124 <tcp_process+0x2a0>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008efa:	440b      	add	r3, r1
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc06      	bgt.n	8008f10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8b5b      	ldrh	r3, [r3, #26]
 8008f06:	f043 0302 	orr.w	r3, r3, #2
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008f10:	7efb      	ldrb	r3, [r7, #27]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d01b      	beq.n	8008f4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	7d1b      	ldrb	r3, [r3, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <tcp_process+0xa8>
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	; (8009110 <tcp_process+0x28c>)
 8008f20:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008f24:	4980      	ldr	r1, [pc, #512]	; (8009128 <tcp_process+0x2a4>)
 8008f26:	487c      	ldr	r0, [pc, #496]	; (8009118 <tcp_process+0x294>)
 8008f28:	f006 facc 	bl	800f4c4 <iprintf>
      recv_flags |= TF_RESET;
 8008f2c:	4b7f      	ldr	r3, [pc, #508]	; (800912c <tcp_process+0x2a8>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f043 0308 	orr.w	r3, r3, #8
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	4b7d      	ldr	r3, [pc, #500]	; (800912c <tcp_process+0x2a8>)
 8008f38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	8b5b      	ldrh	r3, [r3, #26]
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008f48:	f06f 030d 	mvn.w	r3, #13
 8008f4c:	e37a      	b.n	8009644 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e378      	b.n	8009644 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008f52:	4b72      	ldr	r3, [pc, #456]	; (800911c <tcp_process+0x298>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <tcp_process+0xfc>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7d1b      	ldrb	r3, [r3, #20]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00c      	beq.n	8008f80 <tcp_process+0xfc>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	7d1b      	ldrb	r3, [r3, #20]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d008      	beq.n	8008f80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8b5b      	ldrh	r3, [r3, #26]
 8008f72:	f043 0302 	orr.w	r3, r3, #2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e361      	b.n	8009644 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8b5b      	ldrh	r3, [r3, #26]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d103      	bne.n	8008f94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008f8c:	4b68      	ldr	r3, [pc, #416]	; (8009130 <tcp_process+0x2ac>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fc2f 	bl	800a808 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7d1b      	ldrb	r3, [r3, #20]
 8008fae:	3b02      	subs	r3, #2
 8008fb0:	2b07      	cmp	r3, #7
 8008fb2:	f200 8337 	bhi.w	8009624 <tcp_process+0x7a0>
 8008fb6:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <tcp_process+0x138>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008fdd 	.word	0x08008fdd
 8008fc0:	0800920d 	.word	0x0800920d
 8008fc4:	08009385 	.word	0x08009385
 8008fc8:	080093af 	.word	0x080093af
 8008fcc:	080094d3 	.word	0x080094d3
 8008fd0:	08009385 	.word	0x08009385
 8008fd4:	0800955f 	.word	0x0800955f
 8008fd8:	080095ef 	.word	0x080095ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008fdc:	4b4f      	ldr	r3, [pc, #316]	; (800911c <tcp_process+0x298>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80e4 	beq.w	80091b2 <tcp_process+0x32e>
 8008fea:	4b4c      	ldr	r3, [pc, #304]	; (800911c <tcp_process+0x298>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80dd 	beq.w	80091b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	4b48      	ldr	r3, [pc, #288]	; (8009120 <tcp_process+0x29c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	f040 80d5 	bne.w	80091b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009008:	4b46      	ldr	r3, [pc, #280]	; (8009124 <tcp_process+0x2a0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800901a:	4b41      	ldr	r3, [pc, #260]	; (8009120 <tcp_process+0x29c>)
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009022:	4b44      	ldr	r3, [pc, #272]	; (8009134 <tcp_process+0x2b0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	89db      	ldrh	r3, [r3, #14]
 8009028:	b29a      	uxth	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800903c:	4b39      	ldr	r3, [pc, #228]	; (8009124 <tcp_process+0x2a0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	1e5a      	subs	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f004 ff49 	bl	800deec <ip4_route>
 800905a:	4601      	mov	r1, r0
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	461a      	mov	r2, r3
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff f88c 	bl	8008180 <tcp_eff_send_mss_netif>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009074:	009a      	lsls	r2, r3, #2
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009080:	428b      	cmp	r3, r1
 8009082:	bf38      	it	cc
 8009084:	460b      	movcc	r3, r1
 8009086:	429a      	cmp	r2, r3
 8009088:	d204      	bcs.n	8009094 <tcp_process+0x210>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	b29b      	uxth	r3, r3
 8009092:	e00d      	b.n	80090b0 <tcp_process+0x22c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	f241 121c 	movw	r2, #4380	; 0x111c
 800909e:	4293      	cmp	r3, r2
 80090a0:	d904      	bls.n	80090ac <tcp_process+0x228>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	e001      	b.n	80090b0 <tcp_process+0x22c>
 80090ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <tcp_process+0x24a>
 80090c0:	4b13      	ldr	r3, [pc, #76]	; (8009110 <tcp_process+0x28c>)
 80090c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80090c6:	491c      	ldr	r1, [pc, #112]	; (8009138 <tcp_process+0x2b4>)
 80090c8:	4813      	ldr	r0, [pc, #76]	; (8009118 <tcp_process+0x294>)
 80090ca:	f006 f9fb 	bl	800f4c4 <iprintf>
        --pcb->snd_queuelen;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d12a      	bne.n	8009140 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <tcp_process+0x280>
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <tcp_process+0x28c>)
 80090f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80090fc:	490f      	ldr	r1, [pc, #60]	; (800913c <tcp_process+0x2b8>)
 80090fe:	4806      	ldr	r0, [pc, #24]	; (8009118 <tcp_process+0x294>)
 8009100:	f006 f9e0 	bl	800f4c4 <iprintf>
          pcb->unsent = rseg->next;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	66da      	str	r2, [r3, #108]	; 0x6c
 800910c:	e01c      	b.n	8009148 <tcp_process+0x2c4>
 800910e:	bf00      	nop
 8009110:	0801153c 	.word	0x0801153c
 8009114:	08011774 	.word	0x08011774
 8009118:	08011588 	.word	0x08011588
 800911c:	200082e0 	.word	0x200082e0
 8009120:	200082d8 	.word	0x200082d8
 8009124:	200082d4 	.word	0x200082d4
 8009128:	08011790 	.word	0x08011790
 800912c:	200082e1 	.word	0x200082e1
 8009130:	2000829c 	.word	0x2000829c
 8009134:	200082c4 	.word	0x200082c4
 8009138:	080117b0 	.word	0x080117b0
 800913c:	080117c8 	.word	0x080117c8
        } else {
          pcb->unacked = rseg->next;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009148:	69f8      	ldr	r0, [r7, #28]
 800914a:	f7fe fca0 	bl	8007a8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800915c:	861a      	strh	r2, [r3, #48]	; 0x30
 800915e:	e006      	b.n	800916e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <tcp_process+0x30a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6910      	ldr	r0, [r2, #16]
 8009182:	2200      	movs	r2, #0
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	76bb      	strb	r3, [r7, #26]
 800918c:	e001      	b.n	8009192 <tcp_process+0x30e>
 800918e:	2300      	movs	r3, #0
 8009190:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009192:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009196:	f113 0f0d 	cmn.w	r3, #13
 800919a:	d102      	bne.n	80091a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800919c:	f06f 030c 	mvn.w	r3, #12
 80091a0:	e250      	b.n	8009644 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8b5b      	ldrh	r3, [r3, #26]
 80091a6:	f043 0302 	orr.w	r3, r3, #2
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80091b0:	e23a      	b.n	8009628 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80091b2:	4b98      	ldr	r3, [pc, #608]	; (8009414 <tcp_process+0x590>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8234 	beq.w	8009628 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091c0:	4b95      	ldr	r3, [pc, #596]	; (8009418 <tcp_process+0x594>)
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	4b95      	ldr	r3, [pc, #596]	; (800941c <tcp_process+0x598>)
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	461a      	mov	r2, r3
 80091ca:	4b95      	ldr	r3, [pc, #596]	; (8009420 <tcp_process+0x59c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091d0:	4b94      	ldr	r3, [pc, #592]	; (8009424 <tcp_process+0x5a0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091d8:	4a92      	ldr	r2, [pc, #584]	; (8009424 <tcp_process+0x5a0>)
 80091da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	b292      	uxth	r2, r2
 80091e0:	9202      	str	r2, [sp, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	4b90      	ldr	r3, [pc, #576]	; (8009428 <tcp_process+0x5a4>)
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4b90      	ldr	r3, [pc, #576]	; (800942c <tcp_process+0x5a8>)
 80091ea:	4602      	mov	r2, r0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f003 f8dd 	bl	800c3ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	f200 8215 	bhi.w	8009628 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f002 fea9 	bl	800bf5c <tcp_rexmit_rto>
      break;
 800920a:	e20d      	b.n	8009628 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800920c:	4b81      	ldr	r3, [pc, #516]	; (8009414 <tcp_process+0x590>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80a1 	beq.w	800935c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800921a:	4b7f      	ldr	r3, [pc, #508]	; (8009418 <tcp_process+0x594>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	3b01      	subs	r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	db7e      	blt.n	8009328 <tcp_process+0x4a4>
 800922a:	4b7b      	ldr	r3, [pc, #492]	; (8009418 <tcp_process+0x594>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc77      	bgt.n	8009328 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2204      	movs	r2, #4
 800923c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009246:	23fa      	movs	r3, #250	; 0xfa
 8009248:	76bb      	strb	r3, [r7, #26]
 800924a:	e01d      	b.n	8009288 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <tcp_process+0x3e0>
 8009256:	4b76      	ldr	r3, [pc, #472]	; (8009430 <tcp_process+0x5ac>)
 8009258:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800925c:	4975      	ldr	r1, [pc, #468]	; (8009434 <tcp_process+0x5b0>)
 800925e:	4876      	ldr	r0, [pc, #472]	; (8009438 <tcp_process+0x5b4>)
 8009260:	f006 f930 	bl	800f4c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <tcp_process+0x400>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6910      	ldr	r0, [r2, #16]
 8009278:	2200      	movs	r2, #0
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4798      	blx	r3
 800927e:	4603      	mov	r3, r0
 8009280:	76bb      	strb	r3, [r7, #26]
 8009282:	e001      	b.n	8009288 <tcp_process+0x404>
 8009284:	23f0      	movs	r3, #240	; 0xf0
 8009286:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009288:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009290:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009294:	f113 0f0d 	cmn.w	r3, #13
 8009298:	d002      	beq.n	80092a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fd fd52 	bl	8006d44 <tcp_abort>
            }
            return ERR_ABRT;
 80092a0:	f06f 030c 	mvn.w	r3, #12
 80092a4:	e1ce      	b.n	8009644 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fae0 	bl	800986c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80092ac:	4b63      	ldr	r3, [pc, #396]	; (800943c <tcp_process+0x5b8>)
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <tcp_process+0x43c>
            recv_acked--;
 80092b4:	4b61      	ldr	r3, [pc, #388]	; (800943c <tcp_process+0x5b8>)
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	4b5f      	ldr	r3, [pc, #380]	; (800943c <tcp_process+0x5b8>)
 80092be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092c4:	009a      	lsls	r2, r3, #2
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80092d0:	428b      	cmp	r3, r1
 80092d2:	bf38      	it	cc
 80092d4:	460b      	movcc	r3, r1
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d204      	bcs.n	80092e4 <tcp_process+0x460>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	e00d      	b.n	8009300 <tcp_process+0x47c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d904      	bls.n	80092fc <tcp_process+0x478>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	e001      	b.n	8009300 <tcp_process+0x47c>
 80092fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009306:	4b4e      	ldr	r3, [pc, #312]	; (8009440 <tcp_process+0x5bc>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d037      	beq.n	8009382 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8b5b      	ldrh	r3, [r3, #26]
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2207      	movs	r2, #7
 8009324:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009326:	e02c      	b.n	8009382 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009328:	4b3b      	ldr	r3, [pc, #236]	; (8009418 <tcp_process+0x594>)
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	4b3b      	ldr	r3, [pc, #236]	; (800941c <tcp_process+0x598>)
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	4b3b      	ldr	r3, [pc, #236]	; (8009420 <tcp_process+0x59c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009338:	4b3a      	ldr	r3, [pc, #232]	; (8009424 <tcp_process+0x5a0>)
 800933a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009340:	4a38      	ldr	r2, [pc, #224]	; (8009424 <tcp_process+0x5a0>)
 8009342:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009344:	8812      	ldrh	r2, [r2, #0]
 8009346:	b292      	uxth	r2, r2
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	4b36      	ldr	r3, [pc, #216]	; (8009428 <tcp_process+0x5a4>)
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	4b36      	ldr	r3, [pc, #216]	; (800942c <tcp_process+0x5a8>)
 8009352:	4602      	mov	r2, r0
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f003 f829 	bl	800c3ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800935a:	e167      	b.n	800962c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800935c:	4b2d      	ldr	r3, [pc, #180]	; (8009414 <tcp_process+0x590>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8161 	beq.w	800962c <tcp_process+0x7a8>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	1e5a      	subs	r2, r3, #1
 8009370:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <tcp_process+0x59c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	f040 8159 	bne.w	800962c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 fe10 	bl	800bfa0 <tcp_rexmit>
      break;
 8009380:	e154      	b.n	800962c <tcp_process+0x7a8>
 8009382:	e153      	b.n	800962c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa71 	bl	800986c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800938a:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <tcp_process+0x5bc>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 814c 	beq.w	8009630 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8b5b      	ldrh	r3, [r3, #26]
 800939c:	f043 0302 	orr.w	r3, r3, #2
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2207      	movs	r2, #7
 80093aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80093ac:	e140      	b.n	8009630 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa5c 	bl	800986c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80093b4:	4b22      	ldr	r3, [pc, #136]	; (8009440 <tcp_process+0x5bc>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d071      	beq.n	80094a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093c0:	4b14      	ldr	r3, [pc, #80]	; (8009414 <tcp_process+0x590>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d060      	beq.n	800948e <tcp_process+0x60a>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <tcp_process+0x594>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d15a      	bne.n	800948e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d156      	bne.n	800948e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	8b5b      	ldrh	r3, [r3, #26]
 80093e4:	f043 0302 	orr.w	r3, r3, #2
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fe fdbc 	bl	8007f6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80093f4:	4b13      	ldr	r3, [pc, #76]	; (8009444 <tcp_process+0x5c0>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d105      	bne.n	800940a <tcp_process+0x586>
 80093fe:	4b11      	ldr	r3, [pc, #68]	; (8009444 <tcp_process+0x5c0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a0f      	ldr	r2, [pc, #60]	; (8009444 <tcp_process+0x5c0>)
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	e02e      	b.n	8009468 <tcp_process+0x5e4>
 800940a:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <tcp_process+0x5c0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e027      	b.n	8009462 <tcp_process+0x5de>
 8009412:	bf00      	nop
 8009414:	200082e0 	.word	0x200082e0
 8009418:	200082d8 	.word	0x200082d8
 800941c:	200082de 	.word	0x200082de
 8009420:	200082d4 	.word	0x200082d4
 8009424:	200082c4 	.word	0x200082c4
 8009428:	20004d3c 	.word	0x20004d3c
 800942c:	20004d40 	.word	0x20004d40
 8009430:	0801153c 	.word	0x0801153c
 8009434:	080117dc 	.word	0x080117dc
 8009438:	08011588 	.word	0x08011588
 800943c:	200082dc 	.word	0x200082dc
 8009440:	200082e1 	.word	0x200082e1
 8009444:	200082a8 	.word	0x200082a8
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	429a      	cmp	r2, r3
 8009450:	d104      	bne.n	800945c <tcp_process+0x5d8>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	60da      	str	r2, [r3, #12]
 800945a:	e005      	b.n	8009468 <tcp_process+0x5e4>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ef      	bne.n	8009448 <tcp_process+0x5c4>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	4b77      	ldr	r3, [pc, #476]	; (800964c <tcp_process+0x7c8>)
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	220a      	movs	r2, #10
 8009478:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800947a:	4b75      	ldr	r3, [pc, #468]	; (8009650 <tcp_process+0x7cc>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	4a73      	ldr	r2, [pc, #460]	; (8009650 <tcp_process+0x7cc>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f003 f952 	bl	800c730 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800948c:	e0d2      	b.n	8009634 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	8b5b      	ldrh	r3, [r3, #26]
 8009492:	f043 0302 	orr.w	r3, r3, #2
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2208      	movs	r2, #8
 80094a0:	751a      	strb	r2, [r3, #20]
      break;
 80094a2:	e0c7      	b.n	8009634 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094a4:	4b6b      	ldr	r3, [pc, #428]	; (8009654 <tcp_process+0x7d0>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80c1 	beq.w	8009634 <tcp_process+0x7b0>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094b6:	4b68      	ldr	r3, [pc, #416]	; (8009658 <tcp_process+0x7d4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	f040 80ba 	bne.w	8009634 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 80b5 	bne.w	8009634 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2206      	movs	r2, #6
 80094ce:	751a      	strb	r2, [r3, #20]
      break;
 80094d0:	e0b0      	b.n	8009634 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f9ca 	bl	800986c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80094d8:	4b60      	ldr	r3, [pc, #384]	; (800965c <tcp_process+0x7d8>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80a9 	beq.w	8009638 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8b5b      	ldrh	r3, [r3, #26]
 80094ea:	f043 0302 	orr.w	r3, r3, #2
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fe fd39 	bl	8007f6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80094fa:	4b59      	ldr	r3, [pc, #356]	; (8009660 <tcp_process+0x7dc>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d105      	bne.n	8009510 <tcp_process+0x68c>
 8009504:	4b56      	ldr	r3, [pc, #344]	; (8009660 <tcp_process+0x7dc>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	4a55      	ldr	r2, [pc, #340]	; (8009660 <tcp_process+0x7dc>)
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e013      	b.n	8009538 <tcp_process+0x6b4>
 8009510:	4b53      	ldr	r3, [pc, #332]	; (8009660 <tcp_process+0x7dc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e00c      	b.n	8009532 <tcp_process+0x6ae>
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d104      	bne.n	800952c <tcp_process+0x6a8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	60da      	str	r2, [r3, #12]
 800952a:	e005      	b.n	8009538 <tcp_process+0x6b4>
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1ef      	bne.n	8009518 <tcp_process+0x694>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	4b43      	ldr	r3, [pc, #268]	; (800964c <tcp_process+0x7c8>)
 8009540:	2201      	movs	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	220a      	movs	r2, #10
 8009548:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800954a:	4b41      	ldr	r3, [pc, #260]	; (8009650 <tcp_process+0x7cc>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]
 8009552:	4a3f      	ldr	r2, [pc, #252]	; (8009650 <tcp_process+0x7cc>)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	f003 f8ea 	bl	800c730 <tcp_timer_needed>
      }
      break;
 800955c:	e06c      	b.n	8009638 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f984 	bl	800986c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009564:	4b3b      	ldr	r3, [pc, #236]	; (8009654 <tcp_process+0x7d0>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d065      	beq.n	800963c <tcp_process+0x7b8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009574:	4b38      	ldr	r3, [pc, #224]	; (8009658 <tcp_process+0x7d4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d15f      	bne.n	800963c <tcp_process+0x7b8>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d15b      	bne.n	800963c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7fe fcf1 	bl	8007f6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800958a:	4b35      	ldr	r3, [pc, #212]	; (8009660 <tcp_process+0x7dc>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d105      	bne.n	80095a0 <tcp_process+0x71c>
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <tcp_process+0x7dc>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	4a31      	ldr	r2, [pc, #196]	; (8009660 <tcp_process+0x7dc>)
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	e013      	b.n	80095c8 <tcp_process+0x744>
 80095a0:	4b2f      	ldr	r3, [pc, #188]	; (8009660 <tcp_process+0x7dc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e00c      	b.n	80095c2 <tcp_process+0x73e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d104      	bne.n	80095bc <tcp_process+0x738>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	e005      	b.n	80095c8 <tcp_process+0x744>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1ef      	bne.n	80095a8 <tcp_process+0x724>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	60da      	str	r2, [r3, #12]
 80095ce:	4b1f      	ldr	r3, [pc, #124]	; (800964c <tcp_process+0x7c8>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	220a      	movs	r2, #10
 80095d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095da:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <tcp_process+0x7cc>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <tcp_process+0x7cc>)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	f003 f8a2 	bl	800c730 <tcp_timer_needed>
      }
      break;
 80095ec:	e026      	b.n	800963c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f93c 	bl	800986c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <tcp_process+0x7d0>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01f      	beq.n	8009640 <tcp_process+0x7bc>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009604:	4b14      	ldr	r3, [pc, #80]	; (8009658 <tcp_process+0x7d4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d119      	bne.n	8009640 <tcp_process+0x7bc>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009610:	2b00      	cmp	r3, #0
 8009612:	d115      	bne.n	8009640 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009614:	4b11      	ldr	r3, [pc, #68]	; (800965c <tcp_process+0x7d8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	b2da      	uxtb	r2, r3
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <tcp_process+0x7d8>)
 8009620:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009622:	e00d      	b.n	8009640 <tcp_process+0x7bc>
    default:
      break;
 8009624:	bf00      	nop
 8009626:	e00c      	b.n	8009642 <tcp_process+0x7be>
      break;
 8009628:	bf00      	nop
 800962a:	e00a      	b.n	8009642 <tcp_process+0x7be>
      break;
 800962c:	bf00      	nop
 800962e:	e008      	b.n	8009642 <tcp_process+0x7be>
      break;
 8009630:	bf00      	nop
 8009632:	e006      	b.n	8009642 <tcp_process+0x7be>
      break;
 8009634:	bf00      	nop
 8009636:	e004      	b.n	8009642 <tcp_process+0x7be>
      break;
 8009638:	bf00      	nop
 800963a:	e002      	b.n	8009642 <tcp_process+0x7be>
      break;
 800963c:	bf00      	nop
 800963e:	e000      	b.n	8009642 <tcp_process+0x7be>
      break;
 8009640:	bf00      	nop
  }
  return ERR_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3724      	adds	r7, #36	; 0x24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd90      	pop	{r4, r7, pc}
 800964c:	200082b0 	.word	0x200082b0
 8009650:	200082ac 	.word	0x200082ac
 8009654:	200082e0 	.word	0x200082e0
 8009658:	200082d8 	.word	0x200082d8
 800965c:	200082e1 	.word	0x200082e1
 8009660:	200082a8 	.word	0x200082a8

08009664 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <tcp_oos_insert_segment+0x1e>
 8009674:	4b3b      	ldr	r3, [pc, #236]	; (8009764 <tcp_oos_insert_segment+0x100>)
 8009676:	f240 421f 	movw	r2, #1055	; 0x41f
 800967a:	493b      	ldr	r1, [pc, #236]	; (8009768 <tcp_oos_insert_segment+0x104>)
 800967c:	483b      	ldr	r0, [pc, #236]	; (800976c <tcp_oos_insert_segment+0x108>)
 800967e:	f005 ff21 	bl	800f4c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	899b      	ldrh	r3, [r3, #12]
 8009688:	b29b      	uxth	r3, r3
 800968a:	4618      	mov	r0, r3
 800968c:	f7fb fa74 	bl	8004b78 <lwip_htons>
 8009690:	4603      	mov	r3, r0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d028      	beq.n	80096ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800969c:	6838      	ldr	r0, [r7, #0]
 800969e:	f7fe f9e1 	bl	8007a64 <tcp_segs_free>
    next = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	e056      	b.n	8009756 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	899b      	ldrh	r3, [r3, #12]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fb fa61 	bl	8004b78 <lwip_htons>
 80096b6:	4603      	mov	r3, r0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	899b      	ldrh	r3, [r3, #12]
 80096c8:	b29c      	uxth	r4, r3
 80096ca:	2001      	movs	r0, #1
 80096cc:	f7fb fa54 	bl	8004b78 <lwip_htons>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	4322      	orrs	r2, r4
 80096da:	b292      	uxth	r2, r2
 80096dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7fe f9d0 	bl	8007a8e <tcp_seg_free>
    while (next &&
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	891b      	ldrh	r3, [r3, #8]
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <tcp_oos_insert_segment+0x10c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	441a      	add	r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	8909      	ldrh	r1, [r1, #8]
 800970a:	440b      	add	r3, r1
 800970c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800970e:	2b00      	cmp	r3, #0
 8009710:	daca      	bge.n	80096a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01e      	beq.n	8009756 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	891b      	ldrh	r3, [r3, #8]
 800971c:	461a      	mov	r2, r3
 800971e:	4b14      	ldr	r3, [pc, #80]	; (8009770 <tcp_oos_insert_segment+0x10c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	441a      	add	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800972c:	2b00      	cmp	r3, #0
 800972e:	dd12      	ble.n	8009756 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b29a      	uxth	r2, r3
 8009738:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <tcp_oos_insert_segment+0x10c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	b29a      	uxth	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	891b      	ldrh	r3, [r3, #8]
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f7fc fbe9 	bl	8005f28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	601a      	str	r2, [r3, #0]
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	bd90      	pop	{r4, r7, pc}
 8009764:	0801153c 	.word	0x0801153c
 8009768:	080117fc 	.word	0x080117fc
 800976c:	08011588 	.word	0x08011588
 8009770:	200082d4 	.word	0x200082d4

08009774 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009774:	b5b0      	push	{r4, r5, r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009782:	e03e      	b.n	8009802 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	4618      	mov	r0, r3
 8009794:	f7fc fdd6 	bl	8006344 <pbuf_clen>
 8009798:	4603      	mov	r3, r0
 800979a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097a2:	8a7a      	ldrh	r2, [r7, #18]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d906      	bls.n	80097b6 <tcp_free_acked_segments+0x42>
 80097a8:	4b2a      	ldr	r3, [pc, #168]	; (8009854 <tcp_free_acked_segments+0xe0>)
 80097aa:	f240 4257 	movw	r2, #1111	; 0x457
 80097ae:	492a      	ldr	r1, [pc, #168]	; (8009858 <tcp_free_acked_segments+0xe4>)
 80097b0:	482a      	ldr	r0, [pc, #168]	; (800985c <tcp_free_acked_segments+0xe8>)
 80097b2:	f005 fe87 	bl	800f4c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80097bc:	8a7b      	ldrh	r3, [r7, #18]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	891a      	ldrh	r2, [r3, #8]
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <tcp_free_acked_segments+0xec>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	4b22      	ldr	r3, [pc, #136]	; (8009860 <tcp_free_acked_segments+0xec>)
 80097d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80097d8:	6978      	ldr	r0, [r7, #20]
 80097da:	f7fe f958 	bl	8007a8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00c      	beq.n	8009802 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <tcp_free_acked_segments+0x8e>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <tcp_free_acked_segments+0x8e>
 80097f4:	4b17      	ldr	r3, [pc, #92]	; (8009854 <tcp_free_acked_segments+0xe0>)
 80097f6:	f240 4261 	movw	r2, #1121	; 0x461
 80097fa:	491a      	ldr	r1, [pc, #104]	; (8009864 <tcp_free_acked_segments+0xf0>)
 80097fc:	4817      	ldr	r0, [pc, #92]	; (800985c <tcp_free_acked_segments+0xe8>)
 80097fe:	f005 fe61 	bl	800f4c4 <iprintf>
  while (seg_list != NULL &&
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d020      	beq.n	800984a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	4618      	mov	r0, r3
 8009810:	f7fb f9c7 	bl	8004ba2 <lwip_htonl>
 8009814:	4604      	mov	r4, r0
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	891b      	ldrh	r3, [r3, #8]
 800981a:	461d      	mov	r5, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	899b      	ldrh	r3, [r3, #12]
 8009822:	b29b      	uxth	r3, r3
 8009824:	4618      	mov	r0, r3
 8009826:	f7fb f9a7 	bl	8004b78 <lwip_htons>
 800982a:	4603      	mov	r3, r0
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <tcp_free_acked_segments+0xc6>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <tcp_free_acked_segments+0xc8>
 800983a:	2300      	movs	r3, #0
 800983c:	442b      	add	r3, r5
 800983e:	18e2      	adds	r2, r4, r3
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <tcp_free_acked_segments+0xf4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009846:	2b00      	cmp	r3, #0
 8009848:	dd9c      	ble.n	8009784 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800984a:	68bb      	ldr	r3, [r7, #8]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bdb0      	pop	{r4, r5, r7, pc}
 8009854:	0801153c 	.word	0x0801153c
 8009858:	08011824 	.word	0x08011824
 800985c:	08011588 	.word	0x08011588
 8009860:	200082dc 	.word	0x200082dc
 8009864:	0801184c 	.word	0x0801184c
 8009868:	200082d8 	.word	0x200082d8

0800986c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800986c:	b5b0      	push	{r4, r5, r7, lr}
 800986e:	b094      	sub	sp, #80	; 0x50
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d106      	bne.n	800988c <tcp_receive+0x20>
 800987e:	4b91      	ldr	r3, [pc, #580]	; (8009ac4 <tcp_receive+0x258>)
 8009880:	f240 427b 	movw	r2, #1147	; 0x47b
 8009884:	4990      	ldr	r1, [pc, #576]	; (8009ac8 <tcp_receive+0x25c>)
 8009886:	4891      	ldr	r0, [pc, #580]	; (8009acc <tcp_receive+0x260>)
 8009888:	f005 fe1c 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7d1b      	ldrb	r3, [r3, #20]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d806      	bhi.n	80098a2 <tcp_receive+0x36>
 8009894:	4b8b      	ldr	r3, [pc, #556]	; (8009ac4 <tcp_receive+0x258>)
 8009896:	f240 427c 	movw	r2, #1148	; 0x47c
 800989a:	498d      	ldr	r1, [pc, #564]	; (8009ad0 <tcp_receive+0x264>)
 800989c:	488b      	ldr	r0, [pc, #556]	; (8009acc <tcp_receive+0x260>)
 800989e:	f005 fe11 	bl	800f4c4 <iprintf>

  if (flags & TCP_ACK) {
 80098a2:	4b8c      	ldr	r3, [pc, #560]	; (8009ad4 <tcp_receive+0x268>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0310 	and.w	r3, r3, #16
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 8264 	beq.w	8009d78 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098b6:	461a      	mov	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098bc:	4413      	add	r3, r2
 80098be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098c4:	4b84      	ldr	r3, [pc, #528]	; (8009ad8 <tcp_receive+0x26c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	db1b      	blt.n	8009906 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098d2:	4b81      	ldr	r3, [pc, #516]	; (8009ad8 <tcp_receive+0x26c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d106      	bne.n	80098e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098de:	4b7f      	ldr	r3, [pc, #508]	; (8009adc <tcp_receive+0x270>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	db0e      	blt.n	8009906 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098ec:	4b7b      	ldr	r3, [pc, #492]	; (8009adc <tcp_receive+0x270>)
 80098ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d125      	bne.n	8009940 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098f4:	4b7a      	ldr	r3, [pc, #488]	; (8009ae0 <tcp_receive+0x274>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	89db      	ldrh	r3, [r3, #14]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009902:	429a      	cmp	r2, r3
 8009904:	d91c      	bls.n	8009940 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009906:	4b76      	ldr	r3, [pc, #472]	; (8009ae0 <tcp_receive+0x274>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	89db      	ldrh	r3, [r3, #14]
 800990c:	b29a      	uxth	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009920:	429a      	cmp	r2, r3
 8009922:	d205      	bcs.n	8009930 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009930:	4b69      	ldr	r3, [pc, #420]	; (8009ad8 <tcp_receive+0x26c>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009938:	4b68      	ldr	r3, [pc, #416]	; (8009adc <tcp_receive+0x270>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009940:	4b66      	ldr	r3, [pc, #408]	; (8009adc <tcp_receive+0x270>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	dc58      	bgt.n	8009a00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800994e:	4b65      	ldr	r3, [pc, #404]	; (8009ae4 <tcp_receive+0x278>)
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d14b      	bne.n	80099ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009960:	4413      	add	r3, r2
 8009962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009964:	429a      	cmp	r2, r3
 8009966:	d142      	bne.n	80099ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800996e:	2b00      	cmp	r3, #0
 8009970:	db3d      	blt.n	80099ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009976:	4b59      	ldr	r3, [pc, #356]	; (8009adc <tcp_receive+0x270>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d137      	bne.n	80099ee <tcp_receive+0x182>
              found_dupack = 1;
 800997e:	2301      	movs	r3, #1
 8009980:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009988:	2bff      	cmp	r3, #255	; 0xff
 800998a:	d007      	beq.n	800999c <tcp_receive+0x130>
                ++pcb->dupacks;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009992:	3301      	adds	r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d91b      	bls.n	80099de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b0:	4413      	add	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d30a      	bcc.n	80099d4 <tcp_receive+0x168>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c8:	4413      	add	r3, r2
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099d2:	e004      	b.n	80099de <tcp_receive+0x172>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d902      	bls.n	80099ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f002 fb45 	bl	800c078 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80099ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f040 8161 	bne.w	8009cb8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099fe:	e15b      	b.n	8009cb8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a00:	4b36      	ldr	r3, [pc, #216]	; (8009adc <tcp_receive+0x270>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f2c0 814e 	blt.w	8009cae <tcp_receive+0x442>
 8009a12:	4b32      	ldr	r3, [pc, #200]	; (8009adc <tcp_receive+0x270>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f300 8146 	bgt.w	8009cae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8b5b      	ldrh	r3, [r3, #26]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d010      	beq.n	8009a50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	8b5b      	ldrh	r3, [r3, #26]
 8009a32:	f023 0304 	bic.w	r3, r3, #4
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a5e:	10db      	asrs	r3, r3, #3
 8009a60:	b21b      	sxth	r3, r3
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	b21a      	sxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a78:	4b18      	ldr	r3, [pc, #96]	; (8009adc <tcp_receive+0x270>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <tcp_receive+0x270>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7d1b      	ldrb	r3, [r3, #20]
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	f240 8097 	bls.w	8009bd0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d245      	bcs.n	8009b3e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	8b5b      	ldrh	r3, [r3, #26]
 8009ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d014      	beq.n	8009ae8 <tcp_receive+0x27c>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e013      	b.n	8009aea <tcp_receive+0x27e>
 8009ac2:	bf00      	nop
 8009ac4:	0801153c 	.word	0x0801153c
 8009ac8:	0801186c 	.word	0x0801186c
 8009acc:	08011588 	.word	0x08011588
 8009ad0:	08011888 	.word	0x08011888
 8009ad4:	200082e0 	.word	0x200082e0
 8009ad8:	200082d4 	.word	0x200082d4
 8009adc:	200082d8 	.word	0x200082d8
 8009ae0:	200082c4 	.word	0x200082c4
 8009ae4:	200082de 	.word	0x200082de
 8009ae8:	2302      	movs	r3, #2
 8009aea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009aee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009af8:	fb12 f303 	smulbb	r3, r2, r3
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b00:	4293      	cmp	r3, r2
 8009b02:	bf28      	it	cs
 8009b04:	4613      	movcs	r3, r2
 8009b06:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b10:	4413      	add	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d309      	bcc.n	8009b32 <tcp_receive+0x2c6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b26:	4413      	add	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b30:	e04e      	b.n	8009bd0 <tcp_receive+0x364>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b3c:	e048      	b.n	8009bd0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b46:	4413      	add	r3, r2
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d309      	bcc.n	8009b68 <tcp_receive+0x2fc>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b66:	e004      	b.n	8009b72 <tcp_receive+0x306>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d326      	bcc.n	8009bd0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ba2:	4413      	add	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d30a      	bcc.n	8009bc6 <tcp_receive+0x35a>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bba:	4413      	add	r3, r2
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009bc4:	e004      	b.n	8009bd0 <tcp_receive+0x364>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd8:	4a98      	ldr	r2, [pc, #608]	; (8009e3c <tcp_receive+0x5d0>)
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fdca 	bl	8009774 <tcp_free_acked_segments>
 8009be0:	4602      	mov	r2, r0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bee:	4a94      	ldr	r2, [pc, #592]	; (8009e40 <tcp_receive+0x5d4>)
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fdbf 	bl	8009774 <tcp_free_acked_segments>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c0c:	e002      	b.n	8009c14 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009c30:	4b84      	ldr	r3, [pc, #528]	; (8009e44 <tcp_receive+0x5d8>)
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	4413      	add	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	8b5b      	ldrh	r3, [r3, #26]
 8009c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d035      	beq.n	8009cb6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d118      	bne.n	8009c84 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00c      	beq.n	8009c74 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fa ff9b 	bl	8004ba2 <lwip_htonl>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc20      	bgt.n	8009cb6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	8b5b      	ldrh	r3, [r3, #26]
 8009c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c82:	e018      	b.n	8009cb6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fa ff86 	bl	8004ba2 <lwip_htonl>
 8009c96:	4603      	mov	r3, r0
 8009c98:	1ae3      	subs	r3, r4, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dc0b      	bgt.n	8009cb6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	8b5b      	ldrh	r3, [r3, #26]
 8009ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cac:	e003      	b.n	8009cb6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f002 fbce 	bl	800c450 <tcp_send_empty_ack>
 8009cb4:	e000      	b.n	8009cb8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cb6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d05b      	beq.n	8009d78 <tcp_receive+0x50c>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc4:	4b60      	ldr	r3, [pc, #384]	; (8009e48 <tcp_receive+0x5dc>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da54      	bge.n	8009d78 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009cce:	4b5f      	ldr	r3, [pc, #380]	; (8009e4c <tcp_receive+0x5e0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009ce2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cec:	10db      	asrs	r3, r3, #3
 8009cee:	b21b      	sxth	r3, r3
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d06:	4413      	add	r3, r2
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	b21a      	sxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009d10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da05      	bge.n	8009d24 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009d18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d1c:	425b      	negs	r3, r3
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d2e:	109b      	asrs	r3, r3, #2
 8009d30:	b21b      	sxth	r3, r3
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d48:	4413      	add	r3, r2
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	b21a      	sxth	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d58:	10db      	asrs	r3, r3, #3
 8009d5a:	b21b      	sxth	r3, r3
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	b21a      	sxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009d78:	4b35      	ldr	r3, [pc, #212]	; (8009e50 <tcp_receive+0x5e4>)
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 84e2 	beq.w	800a746 <tcp_receive+0xeda>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	7d1b      	ldrb	r3, [r3, #20]
 8009d86:	2b06      	cmp	r3, #6
 8009d88:	f200 84dd 	bhi.w	800a746 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <tcp_receive+0x5e8>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	3b01      	subs	r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f2c0 808f 	blt.w	8009ebc <tcp_receive+0x650>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009da2:	4b2b      	ldr	r3, [pc, #172]	; (8009e50 <tcp_receive+0x5e4>)
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <tcp_receive+0x5e8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	440b      	add	r3, r1
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	3301      	adds	r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f300 8082 	bgt.w	8009ebc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009db8:	4b27      	ldr	r3, [pc, #156]	; (8009e58 <tcp_receive+0x5ec>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <tcp_receive+0x5e8>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009dca:	4b23      	ldr	r3, [pc, #140]	; (8009e58 <tcp_receive+0x5ec>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <tcp_receive+0x574>
 8009dd2:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <tcp_receive+0x5f0>)
 8009dd4:	f240 5294 	movw	r2, #1428	; 0x594
 8009dd8:	4921      	ldr	r1, [pc, #132]	; (8009e60 <tcp_receive+0x5f4>)
 8009dda:	4822      	ldr	r0, [pc, #136]	; (8009e64 <tcp_receive+0x5f8>)
 8009ddc:	f005 fb72 	bl	800f4c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d906      	bls.n	8009df8 <tcp_receive+0x58c>
 8009dea:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <tcp_receive+0x5f0>)
 8009dec:	f240 5295 	movw	r2, #1429	; 0x595
 8009df0:	491d      	ldr	r1, [pc, #116]	; (8009e68 <tcp_receive+0x5fc>)
 8009df2:	481c      	ldr	r0, [pc, #112]	; (8009e64 <tcp_receive+0x5f8>)
 8009df4:	f005 fb66 	bl	800f4c4 <iprintf>
      off = (u16_t)off32;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009dfe:	4b16      	ldr	r3, [pc, #88]	; (8009e58 <tcp_receive+0x5ec>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	891b      	ldrh	r3, [r3, #8]
 8009e04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d906      	bls.n	8009e1a <tcp_receive+0x5ae>
 8009e0c:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <tcp_receive+0x5f0>)
 8009e0e:	f240 5297 	movw	r2, #1431	; 0x597
 8009e12:	4916      	ldr	r1, [pc, #88]	; (8009e6c <tcp_receive+0x600>)
 8009e14:	4813      	ldr	r0, [pc, #76]	; (8009e64 <tcp_receive+0x5f8>)
 8009e16:	f005 fb55 	bl	800f4c4 <iprintf>
      inseg.len -= off;
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <tcp_receive+0x5ec>)
 8009e1c:	891a      	ldrh	r2, [r3, #8]
 8009e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <tcp_receive+0x5ec>)
 8009e28:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <tcp_receive+0x5ec>)
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	891a      	ldrh	r2, [r3, #8]
 8009e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009e38:	e02a      	b.n	8009e90 <tcp_receive+0x624>
 8009e3a:	bf00      	nop
 8009e3c:	080118a4 	.word	0x080118a4
 8009e40:	080118ac 	.word	0x080118ac
 8009e44:	200082dc 	.word	0x200082dc
 8009e48:	200082d8 	.word	0x200082d8
 8009e4c:	2000829c 	.word	0x2000829c
 8009e50:	200082de 	.word	0x200082de
 8009e54:	200082d4 	.word	0x200082d4
 8009e58:	200082b4 	.word	0x200082b4
 8009e5c:	0801153c 	.word	0x0801153c
 8009e60:	080118b4 	.word	0x080118b4
 8009e64:	08011588 	.word	0x08011588
 8009e68:	080118c4 	.word	0x080118c4
 8009e6c:	080118d4 	.word	0x080118d4
        off -= p->len;
 8009e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e72:	895b      	ldrh	r3, [r3, #10]
 8009e74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e82:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e86:	2200      	movs	r2, #0
 8009e88:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e92:	895b      	ldrh	r3, [r3, #10]
 8009e94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d8e9      	bhi.n	8009e70 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ea4:	f7fc f940 	bl	8006128 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	4a91      	ldr	r2, [pc, #580]	; (800a0f4 <tcp_receive+0x888>)
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	4b91      	ldr	r3, [pc, #580]	; (800a0f8 <tcp_receive+0x88c>)
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	4a8f      	ldr	r2, [pc, #572]	; (800a0f4 <tcp_receive+0x888>)
 8009eb6:	6812      	ldr	r2, [r2, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009eba:	e00d      	b.n	8009ed8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009ebc:	4b8d      	ldr	r3, [pc, #564]	; (800a0f4 <tcp_receive+0x888>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da06      	bge.n	8009ed8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8b5b      	ldrh	r3, [r3, #26]
 8009ece:	f043 0302 	orr.w	r3, r3, #2
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ed8:	4b86      	ldr	r3, [pc, #536]	; (800a0f4 <tcp_receive+0x888>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f2c0 842a 	blt.w	800a73c <tcp_receive+0xed0>
 8009ee8:	4b82      	ldr	r3, [pc, #520]	; (800a0f4 <tcp_receive+0x888>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ef4:	440b      	add	r3, r1
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	3301      	adds	r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f300 841e 	bgt.w	800a73c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f04:	4b7b      	ldr	r3, [pc, #492]	; (800a0f4 <tcp_receive+0x888>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	f040 829a 	bne.w	800a442 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009f0e:	4b7a      	ldr	r3, [pc, #488]	; (800a0f8 <tcp_receive+0x88c>)
 8009f10:	891c      	ldrh	r4, [r3, #8]
 8009f12:	4b79      	ldr	r3, [pc, #484]	; (800a0f8 <tcp_receive+0x88c>)
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	899b      	ldrh	r3, [r3, #12]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fa fe2c 	bl	8004b78 <lwip_htons>
 8009f20:	4603      	mov	r3, r0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <tcp_receive+0x6c4>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e000      	b.n	8009f32 <tcp_receive+0x6c6>
 8009f30:	2300      	movs	r3, #0
 8009f32:	4423      	add	r3, r4
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	4b71      	ldr	r3, [pc, #452]	; (800a0fc <tcp_receive+0x890>)
 8009f38:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f3e:	4b6f      	ldr	r3, [pc, #444]	; (800a0fc <tcp_receive+0x890>)
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d275      	bcs.n	800a032 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f46:	4b6c      	ldr	r3, [pc, #432]	; (800a0f8 <tcp_receive+0x88c>)
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	899b      	ldrh	r3, [r3, #12]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fa fe12 	bl	8004b78 <lwip_htons>
 8009f54:	4603      	mov	r3, r0
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01f      	beq.n	8009fa0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f60:	4b65      	ldr	r3, [pc, #404]	; (800a0f8 <tcp_receive+0x88c>)
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	899b      	ldrh	r3, [r3, #12]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	b21b      	sxth	r3, r3
 8009f6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f6e:	b21c      	sxth	r4, r3
 8009f70:	4b61      	ldr	r3, [pc, #388]	; (800a0f8 <tcp_receive+0x88c>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fa fdfd 	bl	8004b78 <lwip_htons>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fa fdf4 	bl	8004b78 <lwip_htons>
 8009f90:	4603      	mov	r3, r0
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	4323      	orrs	r3, r4
 8009f96:	b21a      	sxth	r2, r3
 8009f98:	4b57      	ldr	r3, [pc, #348]	; (800a0f8 <tcp_receive+0x88c>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fa4:	4b54      	ldr	r3, [pc, #336]	; (800a0f8 <tcp_receive+0x88c>)
 8009fa6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fa8:	4b53      	ldr	r3, [pc, #332]	; (800a0f8 <tcp_receive+0x88c>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fa fde1 	bl	8004b78 <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <tcp_receive+0x762>
            inseg.len -= 1;
 8009fc2:	4b4d      	ldr	r3, [pc, #308]	; (800a0f8 <tcp_receive+0x88c>)
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b4b      	ldr	r3, [pc, #300]	; (800a0f8 <tcp_receive+0x88c>)
 8009fcc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009fce:	4b4a      	ldr	r3, [pc, #296]	; (800a0f8 <tcp_receive+0x88c>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4a49      	ldr	r2, [pc, #292]	; (800a0f8 <tcp_receive+0x88c>)
 8009fd4:	8912      	ldrh	r2, [r2, #8]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fb ffa5 	bl	8005f28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009fde:	4b46      	ldr	r3, [pc, #280]	; (800a0f8 <tcp_receive+0x88c>)
 8009fe0:	891c      	ldrh	r4, [r3, #8]
 8009fe2:	4b45      	ldr	r3, [pc, #276]	; (800a0f8 <tcp_receive+0x88c>)
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	899b      	ldrh	r3, [r3, #12]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fa fdc4 	bl	8004b78 <lwip_htons>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <tcp_receive+0x794>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <tcp_receive+0x796>
 800a000:	2300      	movs	r3, #0
 800a002:	4423      	add	r3, r4
 800a004:	b29a      	uxth	r2, r3
 800a006:	4b3d      	ldr	r3, [pc, #244]	; (800a0fc <tcp_receive+0x890>)
 800a008:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a00a:	4b3c      	ldr	r3, [pc, #240]	; (800a0fc <tcp_receive+0x890>)
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	4b38      	ldr	r3, [pc, #224]	; (800a0f4 <tcp_receive+0x888>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	441a      	add	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a01e:	440b      	add	r3, r1
 800a020:	429a      	cmp	r2, r3
 800a022:	d006      	beq.n	800a032 <tcp_receive+0x7c6>
 800a024:	4b36      	ldr	r3, [pc, #216]	; (800a100 <tcp_receive+0x894>)
 800a026:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a02a:	4936      	ldr	r1, [pc, #216]	; (800a104 <tcp_receive+0x898>)
 800a02c:	4836      	ldr	r0, [pc, #216]	; (800a108 <tcp_receive+0x89c>)
 800a02e:	f005 fa49 	bl	800f4c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 80e7 	beq.w	800a20a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a03c:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <tcp_receive+0x88c>)
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	899b      	ldrh	r3, [r3, #12]
 800a042:	b29b      	uxth	r3, r3
 800a044:	4618      	mov	r0, r3
 800a046:	f7fa fd97 	bl	8004b78 <lwip_htons>
 800a04a:	4603      	mov	r3, r0
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d010      	beq.n	800a078 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a056:	e00a      	b.n	800a06e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7fd fd10 	bl	8007a8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f0      	bne.n	800a058 <tcp_receive+0x7ec>
 800a076:	e0c8      	b.n	800a20a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a07e:	e052      	b.n	800a126 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	899b      	ldrh	r3, [r3, #12]
 800a086:	b29b      	uxth	r3, r3
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fa fd75 	bl	8004b78 <lwip_htons>
 800a08e:	4603      	mov	r3, r0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d03d      	beq.n	800a116 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a09a:	4b17      	ldr	r3, [pc, #92]	; (800a0f8 <tcp_receive+0x88c>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	899b      	ldrh	r3, [r3, #12]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fa fd68 	bl	8004b78 <lwip_htons>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d130      	bne.n	800a116 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a0b4:	4b10      	ldr	r3, [pc, #64]	; (800a0f8 <tcp_receive+0x88c>)
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	b29c      	uxth	r4, r3
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7fa fd5b 	bl	8004b78 <lwip_htons>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <tcp_receive+0x88c>)
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	4322      	orrs	r2, r4
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <tcp_receive+0x88c>)
 800a0d2:	891c      	ldrh	r4, [r3, #8]
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <tcp_receive+0x88c>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	899b      	ldrh	r3, [r3, #12]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fa fd4b 	bl	8004b78 <lwip_htons>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	f003 0303 	and.w	r3, r3, #3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00e      	beq.n	800a10c <tcp_receive+0x8a0>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e00d      	b.n	800a10e <tcp_receive+0x8a2>
 800a0f2:	bf00      	nop
 800a0f4:	200082d4 	.word	0x200082d4
 800a0f8:	200082b4 	.word	0x200082b4
 800a0fc:	200082de 	.word	0x200082de
 800a100:	0801153c 	.word	0x0801153c
 800a104:	080118e4 	.word	0x080118e4
 800a108:	08011588 	.word	0x08011588
 800a10c:	2300      	movs	r3, #0
 800a10e:	4423      	add	r3, r4
 800a110:	b29a      	uxth	r2, r3
 800a112:	4b98      	ldr	r3, [pc, #608]	; (800a374 <tcp_receive+0xb08>)
 800a114:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a118:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a120:	6938      	ldr	r0, [r7, #16]
 800a122:	f7fd fcb4 	bl	8007a8e <tcp_seg_free>
            while (next &&
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00e      	beq.n	800a14a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a12c:	4b91      	ldr	r3, [pc, #580]	; (800a374 <tcp_receive+0xb08>)
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	4b91      	ldr	r3, [pc, #580]	; (800a378 <tcp_receive+0xb0c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	441a      	add	r2, r3
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a140:	8909      	ldrh	r1, [r1, #8]
 800a142:	440b      	add	r3, r1
 800a144:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a146:	2b00      	cmp	r3, #0
 800a148:	da9a      	bge.n	800a080 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d059      	beq.n	800a204 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a150:	4b88      	ldr	r3, [pc, #544]	; (800a374 <tcp_receive+0xb08>)
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	4b88      	ldr	r3, [pc, #544]	; (800a378 <tcp_receive+0xb0c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	441a      	add	r2, r3
 800a15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd4d      	ble.n	800a204 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	4b81      	ldr	r3, [pc, #516]	; (800a378 <tcp_receive+0xb0c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	b29a      	uxth	r2, r3
 800a17a:	4b80      	ldr	r3, [pc, #512]	; (800a37c <tcp_receive+0xb10>)
 800a17c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a17e:	4b7f      	ldr	r3, [pc, #508]	; (800a37c <tcp_receive+0xb10>)
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	899b      	ldrh	r3, [r3, #12]
 800a184:	b29b      	uxth	r3, r3
 800a186:	4618      	mov	r0, r3
 800a188:	f7fa fcf6 	bl	8004b78 <lwip_htons>
 800a18c:	4603      	mov	r3, r0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d005      	beq.n	800a1a4 <tcp_receive+0x938>
                inseg.len -= 1;
 800a198:	4b78      	ldr	r3, [pc, #480]	; (800a37c <tcp_receive+0xb10>)
 800a19a:	891b      	ldrh	r3, [r3, #8]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	4b76      	ldr	r3, [pc, #472]	; (800a37c <tcp_receive+0xb10>)
 800a1a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a1a4:	4b75      	ldr	r3, [pc, #468]	; (800a37c <tcp_receive+0xb10>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	4a74      	ldr	r2, [pc, #464]	; (800a37c <tcp_receive+0xb10>)
 800a1aa:	8912      	ldrh	r2, [r2, #8]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fb feba 	bl	8005f28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a1b4:	4b71      	ldr	r3, [pc, #452]	; (800a37c <tcp_receive+0xb10>)
 800a1b6:	891c      	ldrh	r4, [r3, #8]
 800a1b8:	4b70      	ldr	r3, [pc, #448]	; (800a37c <tcp_receive+0xb10>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	899b      	ldrh	r3, [r3, #12]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fa fcd9 	bl	8004b78 <lwip_htons>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <tcp_receive+0x96a>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <tcp_receive+0x96c>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4423      	add	r3, r4
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	4b65      	ldr	r3, [pc, #404]	; (800a374 <tcp_receive+0xb08>)
 800a1de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a1e0:	4b64      	ldr	r3, [pc, #400]	; (800a374 <tcp_receive+0xb08>)
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4b64      	ldr	r3, [pc, #400]	; (800a378 <tcp_receive+0xb0c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	441a      	add	r2, r3
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d006      	beq.n	800a204 <tcp_receive+0x998>
 800a1f6:	4b62      	ldr	r3, [pc, #392]	; (800a380 <tcp_receive+0xb14>)
 800a1f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a1fc:	4961      	ldr	r1, [pc, #388]	; (800a384 <tcp_receive+0xb18>)
 800a1fe:	4862      	ldr	r0, [pc, #392]	; (800a388 <tcp_receive+0xb1c>)
 800a200:	f005 f960 	bl	800f4c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a208:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a20a:	4b5a      	ldr	r3, [pc, #360]	; (800a374 <tcp_receive+0xb08>)
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	4b59      	ldr	r3, [pc, #356]	; (800a378 <tcp_receive+0xb0c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	441a      	add	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a21e:	4b55      	ldr	r3, [pc, #340]	; (800a374 <tcp_receive+0xb08>)
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d206      	bcs.n	800a234 <tcp_receive+0x9c8>
 800a226:	4b56      	ldr	r3, [pc, #344]	; (800a380 <tcp_receive+0xb14>)
 800a228:	f240 6207 	movw	r2, #1543	; 0x607
 800a22c:	4957      	ldr	r1, [pc, #348]	; (800a38c <tcp_receive+0xb20>)
 800a22e:	4856      	ldr	r0, [pc, #344]	; (800a388 <tcp_receive+0xb1c>)
 800a230:	f005 f948 	bl	800f4c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a238:	4b4e      	ldr	r3, [pc, #312]	; (800a374 <tcp_receive+0xb08>)
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7fc fefd 	bl	8007044 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a24a:	4b4c      	ldr	r3, [pc, #304]	; (800a37c <tcp_receive+0xb10>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a254:	4b49      	ldr	r3, [pc, #292]	; (800a37c <tcp_receive+0xb10>)
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4a4d      	ldr	r2, [pc, #308]	; (800a390 <tcp_receive+0xb24>)
 800a25a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a25c:	4b47      	ldr	r3, [pc, #284]	; (800a37c <tcp_receive+0xb10>)
 800a25e:	2200      	movs	r2, #0
 800a260:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a262:	4b46      	ldr	r3, [pc, #280]	; (800a37c <tcp_receive+0xb10>)
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	899b      	ldrh	r3, [r3, #12]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fa fc84 	bl	8004b78 <lwip_htons>
 800a270:	4603      	mov	r3, r0
 800a272:	b2db      	uxtb	r3, r3
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 80b8 	beq.w	800a3ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a27e:	4b45      	ldr	r3, [pc, #276]	; (800a394 <tcp_receive+0xb28>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	f043 0320 	orr.w	r3, r3, #32
 800a286:	b2da      	uxtb	r2, r3
 800a288:	4b42      	ldr	r3, [pc, #264]	; (800a394 <tcp_receive+0xb28>)
 800a28a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a28c:	e0af      	b.n	800a3ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a292:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	4a36      	ldr	r2, [pc, #216]	; (800a378 <tcp_receive+0xb0c>)
 800a29e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	891b      	ldrh	r3, [r3, #8]
 800a2a4:	461c      	mov	r4, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	899b      	ldrh	r3, [r3, #12]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fa fc62 	bl	8004b78 <lwip_htons>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <tcp_receive+0xa58>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <tcp_receive+0xa5a>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	191a      	adds	r2, r3, r4
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	441a      	add	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d6:	461c      	mov	r4, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	461d      	mov	r5, r3
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	899b      	ldrh	r3, [r3, #12]
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fa fc46 	bl	8004b78 <lwip_htons>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <tcp_receive+0xa90>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <tcp_receive+0xa92>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	442b      	add	r3, r5
 800a300:	429c      	cmp	r4, r3
 800a302:	d206      	bcs.n	800a312 <tcp_receive+0xaa6>
 800a304:	4b1e      	ldr	r3, [pc, #120]	; (800a380 <tcp_receive+0xb14>)
 800a306:	f240 622b 	movw	r2, #1579	; 0x62b
 800a30a:	4923      	ldr	r1, [pc, #140]	; (800a398 <tcp_receive+0xb2c>)
 800a30c:	481e      	ldr	r0, [pc, #120]	; (800a388 <tcp_receive+0xb1c>)
 800a30e:	f005 f8d9 	bl	800f4c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	891b      	ldrh	r3, [r3, #8]
 800a316:	461c      	mov	r4, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	4618      	mov	r0, r3
 800a322:	f7fa fc29 	bl	8004b78 <lwip_htons>
 800a326:	4603      	mov	r3, r0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <tcp_receive+0xaca>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <tcp_receive+0xacc>
 800a336:	2300      	movs	r3, #0
 800a338:	1919      	adds	r1, r3, r4
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a33e:	b28b      	uxth	r3, r1
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	b29a      	uxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fc fe7b 	bl	8007044 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	891b      	ldrh	r3, [r3, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d028      	beq.n	800a3aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a358:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <tcp_receive+0xb24>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01d      	beq.n	800a39c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <tcp_receive+0xb24>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fc f824 	bl	80063b8 <pbuf_cat>
 800a370:	e018      	b.n	800a3a4 <tcp_receive+0xb38>
 800a372:	bf00      	nop
 800a374:	200082de 	.word	0x200082de
 800a378:	200082d4 	.word	0x200082d4
 800a37c:	200082b4 	.word	0x200082b4
 800a380:	0801153c 	.word	0x0801153c
 800a384:	0801191c 	.word	0x0801191c
 800a388:	08011588 	.word	0x08011588
 800a38c:	08011958 	.word	0x08011958
 800a390:	200082e4 	.word	0x200082e4
 800a394:	200082e1 	.word	0x200082e1
 800a398:	08011978 	.word	0x08011978
            } else {
              recv_data = cseg->p;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	4a70      	ldr	r2, [pc, #448]	; (800a564 <tcp_receive+0xcf8>)
 800a3a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	899b      	ldrh	r3, [r3, #12]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fa fbe0 	bl	8004b78 <lwip_htons>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00d      	beq.n	800a3e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a3c4:	4b68      	ldr	r3, [pc, #416]	; (800a568 <tcp_receive+0xcfc>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f043 0320 	orr.w	r3, r3, #32
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	4b66      	ldr	r3, [pc, #408]	; (800a568 <tcp_receive+0xcfc>)
 800a3d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	7d1b      	ldrb	r3, [r3, #20]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d102      	bne.n	800a3e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2207      	movs	r2, #7
 800a3de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f7fd fb50 	bl	8007a8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a402:	429a      	cmp	r2, r3
 800a404:	f43f af43 	beq.w	800a28e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	8b5b      	ldrh	r3, [r3, #26]
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00e      	beq.n	800a432 <tcp_receive+0xbc6>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	8b5b      	ldrh	r3, [r3, #26]
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	835a      	strh	r2, [r3, #26]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8b5b      	ldrh	r3, [r3, #26]
 800a426:	f043 0302 	orr.w	r3, r3, #2
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a430:	e188      	b.n	800a744 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8b5b      	ldrh	r3, [r3, #26]
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a440:	e180      	b.n	800a744 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a44a:	4848      	ldr	r0, [pc, #288]	; (800a56c <tcp_receive+0xd00>)
 800a44c:	f7fd fb56 	bl	8007afc <tcp_seg_copy>
 800a450:	4602      	mov	r2, r0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	675a      	str	r2, [r3, #116]	; 0x74
 800a456:	e16d      	b.n	800a734 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a460:	63bb      	str	r3, [r7, #56]	; 0x38
 800a462:	e157      	b.n	800a714 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	4b41      	ldr	r3, [pc, #260]	; (800a570 <tcp_receive+0xd04>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d11d      	bne.n	800a4ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a472:	4b3e      	ldr	r3, [pc, #248]	; (800a56c <tcp_receive+0xd00>)
 800a474:	891a      	ldrh	r2, [r3, #8]
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	891b      	ldrh	r3, [r3, #8]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	f240 814f 	bls.w	800a71e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a480:	483a      	ldr	r0, [pc, #232]	; (800a56c <tcp_receive+0xd00>)
 800a482:	f7fd fb3b 	bl	8007afc <tcp_seg_copy>
 800a486:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8149 	beq.w	800a722 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <tcp_receive+0xc32>
                    prev->next = cseg;
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e002      	b.n	800a4a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a4a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4a6:	6978      	ldr	r0, [r7, #20]
 800a4a8:	f7ff f8dc 	bl	8009664 <tcp_oos_insert_segment>
                }
                break;
 800a4ac:	e139      	b.n	800a722 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d117      	bne.n	800a4e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a4b4:	4b2e      	ldr	r3, [pc, #184]	; (800a570 <tcp_receive+0xd04>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	da57      	bge.n	800a574 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4c4:	4829      	ldr	r0, [pc, #164]	; (800a56c <tcp_receive+0xd00>)
 800a4c6:	f7fd fb19 	bl	8007afc <tcp_seg_copy>
 800a4ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 8129 	beq.w	800a726 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a4da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4dc:	69b8      	ldr	r0, [r7, #24]
 800a4de:	f7ff f8c1 	bl	8009664 <tcp_oos_insert_segment>
                  }
                  break;
 800a4e2:	e120      	b.n	800a726 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a4e4:	4b22      	ldr	r3, [pc, #136]	; (800a570 <tcp_receive+0xd04>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	db3e      	blt.n	800a574 <tcp_receive+0xd08>
 800a4f6:	4b1e      	ldr	r3, [pc, #120]	; (800a570 <tcp_receive+0xd04>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	3301      	adds	r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	dc35      	bgt.n	800a574 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a508:	4818      	ldr	r0, [pc, #96]	; (800a56c <tcp_receive+0xd00>)
 800a50a:	f7fd faf7 	bl	8007afc <tcp_seg_copy>
 800a50e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8109 	beq.w	800a72a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a520:	8912      	ldrh	r2, [r2, #8]
 800a522:	441a      	add	r2, r3
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <tcp_receive+0xd04>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd12      	ble.n	800a554 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a52e:	4b10      	ldr	r3, [pc, #64]	; (800a570 <tcp_receive+0xd04>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	b29a      	uxth	r2, r3
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	b29a      	uxth	r2, r3
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54a:	891b      	ldrh	r3, [r3, #8]
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7fb fcea 	bl	8005f28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a55a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a55c:	69f8      	ldr	r0, [r7, #28]
 800a55e:	f7ff f881 	bl	8009664 <tcp_oos_insert_segment>
                  }
                  break;
 800a562:	e0e2      	b.n	800a72a <tcp_receive+0xebe>
 800a564:	200082e4 	.word	0x200082e4
 800a568:	200082e1 	.word	0x200082e1
 800a56c:	200082b4 	.word	0x200082b4
 800a570:	200082d4 	.word	0x200082d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f040 80c6 	bne.w	800a70e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a582:	4b80      	ldr	r3, [pc, #512]	; (800a784 <tcp_receive+0xf18>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f340 80bd 	ble.w	800a70e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	899b      	ldrh	r3, [r3, #12]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fa faeb 	bl	8004b78 <lwip_htons>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f040 80bf 	bne.w	800a72e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a5b0:	4875      	ldr	r0, [pc, #468]	; (800a788 <tcp_receive+0xf1c>)
 800a5b2:	f7fd faa3 	bl	8007afc <tcp_seg_copy>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 80b6 	beq.w	800a732 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ce:	8912      	ldrh	r2, [r2, #8]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	4b6c      	ldr	r3, [pc, #432]	; (800a784 <tcp_receive+0xf18>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dd12      	ble.n	800a602 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a5dc:	4b69      	ldr	r3, [pc, #420]	; (800a784 <tcp_receive+0xf18>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	891b      	ldrh	r3, [r3, #8]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f7fb fc93 	bl	8005f28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a602:	4b62      	ldr	r3, [pc, #392]	; (800a78c <tcp_receive+0xf20>)
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	4b5e      	ldr	r3, [pc, #376]	; (800a784 <tcp_receive+0xf18>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	441a      	add	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a616:	440b      	add	r3, r1
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f340 8089 	ble.w	800a732 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	899b      	ldrh	r3, [r3, #12]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fa faa4 	bl	8004b78 <lwip_htons>
 800a630:	4603      	mov	r3, r0
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d022      	beq.n	800a682 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	899b      	ldrh	r3, [r3, #12]
 800a644:	b29b      	uxth	r3, r3
 800a646:	b21b      	sxth	r3, r3
 800a648:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a64c:	b21c      	sxth	r4, r3
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	b29b      	uxth	r3, r3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fa fa8d 	bl	8004b78 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	b29b      	uxth	r3, r3
 800a664:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fa fa84 	bl	8004b78 <lwip_htons>
 800a670:	4603      	mov	r3, r0
 800a672:	b21b      	sxth	r3, r3
 800a674:	4323      	orrs	r3, r4
 800a676:	b21a      	sxth	r2, r3
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	b292      	uxth	r2, r2
 800a680:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a68c:	4413      	add	r3, r2
 800a68e:	b299      	uxth	r1, r3
 800a690:	4b3c      	ldr	r3, [pc, #240]	; (800a784 <tcp_receive+0xf18>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	b29a      	uxth	r2, r3
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	1a8a      	subs	r2, r1, r2
 800a69c:	b292      	uxth	r2, r2
 800a69e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	891b      	ldrh	r3, [r3, #8]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fb fc3a 	bl	8005f28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	891c      	ldrh	r4, [r3, #8]
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	899b      	ldrh	r3, [r3, #12]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fa fa57 	bl	8004b78 <lwip_htons>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <tcp_receive+0xe6e>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <tcp_receive+0xe70>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4423      	add	r3, r4
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b2a      	ldr	r3, [pc, #168]	; (800a78c <tcp_receive+0xf20>)
 800a6e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6e4:	4b29      	ldr	r3, [pc, #164]	; (800a78c <tcp_receive+0xf20>)
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	4b26      	ldr	r3, [pc, #152]	; (800a784 <tcp_receive+0xf18>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	441a      	add	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6f8:	440b      	add	r3, r1
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d019      	beq.n	800a732 <tcp_receive+0xec6>
 800a6fe:	4b24      	ldr	r3, [pc, #144]	; (800a790 <tcp_receive+0xf24>)
 800a700:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a704:	4923      	ldr	r1, [pc, #140]	; (800a794 <tcp_receive+0xf28>)
 800a706:	4824      	ldr	r0, [pc, #144]	; (800a798 <tcp_receive+0xf2c>)
 800a708:	f004 fedc 	bl	800f4c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a70c:	e011      	b.n	800a732 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	63bb      	str	r3, [r7, #56]	; 0x38
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	2b00      	cmp	r3, #0
 800a718:	f47f aea4 	bne.w	800a464 <tcp_receive+0xbf8>
 800a71c:	e00a      	b.n	800a734 <tcp_receive+0xec8>
                break;
 800a71e:	bf00      	nop
 800a720:	e008      	b.n	800a734 <tcp_receive+0xec8>
                break;
 800a722:	bf00      	nop
 800a724:	e006      	b.n	800a734 <tcp_receive+0xec8>
                  break;
 800a726:	bf00      	nop
 800a728:	e004      	b.n	800a734 <tcp_receive+0xec8>
                  break;
 800a72a:	bf00      	nop
 800a72c:	e002      	b.n	800a734 <tcp_receive+0xec8>
                  break;
 800a72e:	bf00      	nop
 800a730:	e000      	b.n	800a734 <tcp_receive+0xec8>
                break;
 800a732:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 fe8b 	bl	800c450 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a73a:	e003      	b.n	800a744 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 fe87 	bl	800c450 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a742:	e01a      	b.n	800a77a <tcp_receive+0xf0e>
 800a744:	e019      	b.n	800a77a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a746:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <tcp_receive+0xf18>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	db0a      	blt.n	800a76a <tcp_receive+0xefe>
 800a754:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <tcp_receive+0xf18>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a760:	440b      	add	r3, r1
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	3301      	adds	r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd07      	ble.n	800a77a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	8b5b      	ldrh	r3, [r3, #26]
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a778:	e7ff      	b.n	800a77a <tcp_receive+0xf0e>
 800a77a:	bf00      	nop
 800a77c:	3750      	adds	r7, #80	; 0x50
 800a77e:	46bd      	mov	sp, r7
 800a780:	bdb0      	pop	{r4, r5, r7, pc}
 800a782:	bf00      	nop
 800a784:	200082d4 	.word	0x200082d4
 800a788:	200082b4 	.word	0x200082b4
 800a78c:	200082de 	.word	0x200082de
 800a790:	0801153c 	.word	0x0801153c
 800a794:	080118e4 	.word	0x080118e4
 800a798:	08011588 	.word	0x08011588

0800a79c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <tcp_get_next_optbyte+0x5c>)
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	b291      	uxth	r1, r2
 800a7aa:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <tcp_get_next_optbyte+0x5c>)
 800a7ac:	8011      	strh	r1, [r2, #0]
 800a7ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a7b0:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <tcp_get_next_optbyte+0x60>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <tcp_get_next_optbyte+0x26>
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <tcp_get_next_optbyte+0x64>)
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	88fa      	ldrh	r2, [r7, #6]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d208      	bcs.n	800a7d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <tcp_get_next_optbyte+0x68>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3314      	adds	r3, #20
 800a7c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a7ca:	88fb      	ldrh	r3, [r7, #6]
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	e00b      	b.n	800a7ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a7d4:	88fb      	ldrh	r3, [r7, #6]
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <tcp_get_next_optbyte+0x64>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a7e2:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <tcp_get_next_optbyte+0x60>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	797b      	ldrb	r3, [r7, #5]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	200082d0 	.word	0x200082d0
 800a7fc:	200082cc 	.word	0x200082cc
 800a800:	200082ca 	.word	0x200082ca
 800a804:	200082c4 	.word	0x200082c4

0800a808 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <tcp_parseopt+0x1c>
 800a816:	4b32      	ldr	r3, [pc, #200]	; (800a8e0 <tcp_parseopt+0xd8>)
 800a818:	f240 727d 	movw	r2, #1917	; 0x77d
 800a81c:	4931      	ldr	r1, [pc, #196]	; (800a8e4 <tcp_parseopt+0xdc>)
 800a81e:	4832      	ldr	r0, [pc, #200]	; (800a8e8 <tcp_parseopt+0xe0>)
 800a820:	f004 fe50 	bl	800f4c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a824:	4b31      	ldr	r3, [pc, #196]	; (800a8ec <tcp_parseopt+0xe4>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d055      	beq.n	800a8d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a82c:	4b30      	ldr	r3, [pc, #192]	; (800a8f0 <tcp_parseopt+0xe8>)
 800a82e:	2200      	movs	r2, #0
 800a830:	801a      	strh	r2, [r3, #0]
 800a832:	e045      	b.n	800a8c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a834:	f7ff ffb2 	bl	800a79c <tcp_get_next_optbyte>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d006      	beq.n	800a850 <tcp_parseopt+0x48>
 800a842:	2b02      	cmp	r3, #2
 800a844:	dc2b      	bgt.n	800a89e <tcp_parseopt+0x96>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d041      	beq.n	800a8ce <tcp_parseopt+0xc6>
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d127      	bne.n	800a89e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a84e:	e037      	b.n	800a8c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a850:	f7ff ffa4 	bl	800a79c <tcp_get_next_optbyte>
 800a854:	4603      	mov	r3, r0
 800a856:	2b04      	cmp	r3, #4
 800a858:	d13b      	bne.n	800a8d2 <tcp_parseopt+0xca>
 800a85a:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <tcp_parseopt+0xe8>)
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	3301      	adds	r3, #1
 800a860:	4a22      	ldr	r2, [pc, #136]	; (800a8ec <tcp_parseopt+0xe4>)
 800a862:	8812      	ldrh	r2, [r2, #0]
 800a864:	4293      	cmp	r3, r2
 800a866:	da34      	bge.n	800a8d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a868:	f7ff ff98 	bl	800a79c <tcp_get_next_optbyte>
 800a86c:	4603      	mov	r3, r0
 800a86e:	b29b      	uxth	r3, r3
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a874:	f7ff ff92 	bl	800a79c <tcp_get_next_optbyte>
 800a878:	4603      	mov	r3, r0
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	89bb      	ldrh	r3, [r7, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a882:	89bb      	ldrh	r3, [r7, #12]
 800a884:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a888:	d804      	bhi.n	800a894 <tcp_parseopt+0x8c>
 800a88a:	89bb      	ldrh	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <tcp_parseopt+0x8c>
 800a890:	89ba      	ldrh	r2, [r7, #12]
 800a892:	e001      	b.n	800a898 <tcp_parseopt+0x90>
 800a894:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a89c:	e010      	b.n	800a8c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a89e:	f7ff ff7d 	bl	800a79c <tcp_get_next_optbyte>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d914      	bls.n	800a8d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <tcp_parseopt+0xe8>)
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	3b02      	subs	r3, #2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <tcp_parseopt+0xe8>)
 800a8be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <tcp_parseopt+0xe8>)
 800a8c2:	881a      	ldrh	r2, [r3, #0]
 800a8c4:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <tcp_parseopt+0xe4>)
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d3b3      	bcc.n	800a834 <tcp_parseopt+0x2c>
 800a8cc:	e004      	b.n	800a8d8 <tcp_parseopt+0xd0>
          return;
 800a8ce:	bf00      	nop
 800a8d0:	e002      	b.n	800a8d8 <tcp_parseopt+0xd0>
            return;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <tcp_parseopt+0xd0>
            return;
 800a8d6:	bf00      	nop
      }
    }
  }
}
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	0801153c 	.word	0x0801153c
 800a8e4:	080119a0 	.word	0x080119a0
 800a8e8:	08011588 	.word	0x08011588
 800a8ec:	200082c8 	.word	0x200082c8
 800a8f0:	200082d0 	.word	0x200082d0

0800a8f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <tcp_trigger_input_pcb_close+0x1c>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f043 0310 	orr.w	r3, r3, #16
 800a900:	b2da      	uxtb	r2, r3
 800a902:	4b03      	ldr	r3, [pc, #12]	; (800a910 <tcp_trigger_input_pcb_close+0x1c>)
 800a904:	701a      	strb	r2, [r3, #0]
}
 800a906:	bf00      	nop
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	200082e1 	.word	0x200082e1

0800a914 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00a      	beq.n	800a93c <tcp_route+0x28>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	7a1b      	ldrb	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	7a1b      	ldrb	r3, [r3, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f7fb f91e 	bl	8005b74 <netif_get_by_index>
 800a938:	4603      	mov	r3, r0
 800a93a:	e003      	b.n	800a944 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f003 fad5 	bl	800deec <ip4_route>
 800a942:	4603      	mov	r3, r0
  }
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a94c:	b590      	push	{r4, r7, lr}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d105      	bne.n	800a96e <tcp_create_segment+0x22>
 800a962:	4b44      	ldr	r3, [pc, #272]	; (800aa74 <tcp_create_segment+0x128>)
 800a964:	22a3      	movs	r2, #163	; 0xa3
 800a966:	4944      	ldr	r1, [pc, #272]	; (800aa78 <tcp_create_segment+0x12c>)
 800a968:	4844      	ldr	r0, [pc, #272]	; (800aa7c <tcp_create_segment+0x130>)
 800a96a:	f004 fdab 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <tcp_create_segment+0x34>
 800a974:	4b3f      	ldr	r3, [pc, #252]	; (800aa74 <tcp_create_segment+0x128>)
 800a976:	22a4      	movs	r2, #164	; 0xa4
 800a978:	4941      	ldr	r1, [pc, #260]	; (800aa80 <tcp_create_segment+0x134>)
 800a97a:	4840      	ldr	r0, [pc, #256]	; (800aa7c <tcp_create_segment+0x130>)
 800a97c:	f004 fda2 	bl	800f4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a98e:	2003      	movs	r0, #3
 800a990:	f7fa fd6a 	bl	8005468 <memp_malloc>
 800a994:	6138      	str	r0, [r7, #16]
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a99c:	68b8      	ldr	r0, [r7, #8]
 800a99e:	f7fb fc49 	bl	8006234 <pbuf_free>
    return NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e061      	b.n	800aa6a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a9ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	891a      	ldrh	r2, [r3, #8]
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d205      	bcs.n	800a9d2 <tcp_create_segment+0x86>
 800a9c6:	4b2b      	ldr	r3, [pc, #172]	; (800aa74 <tcp_create_segment+0x128>)
 800a9c8:	22b0      	movs	r2, #176	; 0xb0
 800a9ca:	492e      	ldr	r1, [pc, #184]	; (800aa84 <tcp_create_segment+0x138>)
 800a9cc:	482b      	ldr	r0, [pc, #172]	; (800aa7c <tcp_create_segment+0x130>)
 800a9ce:	f004 fd79 	bl	800f4c4 <iprintf>
  seg->len = p->tot_len - optlen;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	891a      	ldrh	r2, [r3, #8]
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a9e2:	2114      	movs	r1, #20
 800a9e4:	68b8      	ldr	r0, [r7, #8]
 800a9e6:	f7fb fb8f 	bl	8006108 <pbuf_add_header>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a9f0:	6938      	ldr	r0, [r7, #16]
 800a9f2:	f7fd f84c 	bl	8007a8e <tcp_seg_free>
    return NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e037      	b.n	800aa6a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8ada      	ldrh	r2, [r3, #22]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	68dc      	ldr	r4, [r3, #12]
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	f7fa f8b3 	bl	8004b78 <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8b1a      	ldrh	r2, [r3, #24]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	68dc      	ldr	r4, [r3, #12]
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fa f8aa 	bl	8004b78 <lwip_htons>
 800aa24:	4603      	mov	r3, r0
 800aa26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	68dc      	ldr	r4, [r3, #12]
 800aa2c:	6838      	ldr	r0, [r7, #0]
 800aa2e:	f7fa f8b8 	bl	8004ba2 <lwip_htonl>
 800aa32:	4603      	mov	r3, r0
 800aa34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	089b      	lsrs	r3, r3, #2
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3305      	adds	r3, #5
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	031b      	lsls	r3, r3, #12
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	68dc      	ldr	r4, [r3, #12]
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7fa f890 	bl	8004b78 <lwip_htons>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	749a      	strb	r2, [r3, #18]
 800aa64:	2200      	movs	r2, #0
 800aa66:	74da      	strb	r2, [r3, #19]
  return seg;
 800aa68:	693b      	ldr	r3, [r7, #16]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd90      	pop	{r4, r7, pc}
 800aa72:	bf00      	nop
 800aa74:	080119bc 	.word	0x080119bc
 800aa78:	080119f0 	.word	0x080119f0
 800aa7c:	08011a10 	.word	0x08011a10
 800aa80:	08011a38 	.word	0x08011a38
 800aa84:	08011a5c 	.word	0x08011a5c

0800aa88 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	460b      	mov	r3, r1
 800aa96:	81bb      	strh	r3, [r7, #12]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800aa9c:	89bb      	ldrh	r3, [r7, #12]
 800aa9e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d105      	bne.n	800aab2 <tcp_pbuf_prealloc+0x2a>
 800aaa6:	4b30      	ldr	r3, [pc, #192]	; (800ab68 <tcp_pbuf_prealloc+0xe0>)
 800aaa8:	22e8      	movs	r2, #232	; 0xe8
 800aaaa:	4930      	ldr	r1, [pc, #192]	; (800ab6c <tcp_pbuf_prealloc+0xe4>)
 800aaac:	4830      	ldr	r0, [pc, #192]	; (800ab70 <tcp_pbuf_prealloc+0xe8>)
 800aaae:	f004 fd09 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <tcp_pbuf_prealloc+0x3c>
 800aab8:	4b2b      	ldr	r3, [pc, #172]	; (800ab68 <tcp_pbuf_prealloc+0xe0>)
 800aaba:	22e9      	movs	r2, #233	; 0xe9
 800aabc:	492d      	ldr	r1, [pc, #180]	; (800ab74 <tcp_pbuf_prealloc+0xec>)
 800aabe:	482c      	ldr	r0, [pc, #176]	; (800ab70 <tcp_pbuf_prealloc+0xe8>)
 800aac0:	f004 fd00 	bl	800f4c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aac4:	89ba      	ldrh	r2, [r7, #12]
 800aac6:	897b      	ldrh	r3, [r7, #10]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d221      	bcs.n	800ab10 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aacc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d111      	bne.n	800aafc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	8b5b      	ldrh	r3, [r3, #26]
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d115      	bne.n	800ab10 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800aae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aafc:	89bb      	ldrh	r3, [r7, #12]
 800aafe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ab02:	f023 0203 	bic.w	r2, r3, #3
 800ab06:	897b      	ldrh	r3, [r7, #10]
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	bf28      	it	cs
 800ab0c:	4613      	movcs	r3, r2
 800ab0e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ab10:	8af9      	ldrh	r1, [r7, #22]
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fb f8a7 	bl	8005c6c <pbuf_alloc>
 800ab1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	e019      	b.n	800ab5e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d006      	beq.n	800ab40 <tcp_pbuf_prealloc+0xb8>
 800ab32:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <tcp_pbuf_prealloc+0xe0>)
 800ab34:	f240 120b 	movw	r2, #267	; 0x10b
 800ab38:	490f      	ldr	r1, [pc, #60]	; (800ab78 <tcp_pbuf_prealloc+0xf0>)
 800ab3a:	480d      	ldr	r0, [pc, #52]	; (800ab70 <tcp_pbuf_prealloc+0xe8>)
 800ab3c:	f004 fcc2 	bl	800f4c4 <iprintf>
  *oversize = p->len - length;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	895a      	ldrh	r2, [r3, #10]
 800ab44:	89bb      	ldrh	r3, [r7, #12]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	89ba      	ldrh	r2, [r7, #12]
 800ab52:	811a      	strh	r2, [r3, #8]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	891a      	ldrh	r2, [r3, #8]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	815a      	strh	r2, [r3, #10]
  return p;
 800ab5c:	693b      	ldr	r3, [r7, #16]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	080119bc 	.word	0x080119bc
 800ab6c:	08011a74 	.word	0x08011a74
 800ab70:	08011a10 	.word	0x08011a10
 800ab74:	08011a98 	.word	0x08011a98
 800ab78:	08011ab8 	.word	0x08011ab8

0800ab7c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <tcp_write_checks+0x20>
 800ab8e:	4b33      	ldr	r3, [pc, #204]	; (800ac5c <tcp_write_checks+0xe0>)
 800ab90:	f240 1233 	movw	r2, #307	; 0x133
 800ab94:	4932      	ldr	r1, [pc, #200]	; (800ac60 <tcp_write_checks+0xe4>)
 800ab96:	4833      	ldr	r0, [pc, #204]	; (800ac64 <tcp_write_checks+0xe8>)
 800ab98:	f004 fc94 	bl	800f4c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d00e      	beq.n	800abc2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	d00a      	beq.n	800abc2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d006      	beq.n	800abc2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d002      	beq.n	800abc2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800abbc:	f06f 030a 	mvn.w	r3, #10
 800abc0:	e048      	b.n	800ac54 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800abc2:	887b      	ldrh	r3, [r7, #2]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <tcp_write_checks+0x50>
    return ERR_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	e043      	b.n	800ac54 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abd2:	887a      	ldrh	r2, [r7, #2]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d909      	bls.n	800abec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8b5b      	ldrh	r3, [r3, #26]
 800abdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800abe6:	f04f 33ff 	mov.w	r3, #4294967295
 800abea:	e033      	b.n	800ac54 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abf2:	2b08      	cmp	r3, #8
 800abf4:	d909      	bls.n	800ac0a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	8b5b      	ldrh	r3, [r3, #26]
 800abfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ac04:	f04f 33ff 	mov.w	r3, #4294967295
 800ac08:	e024      	b.n	800ac54 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00f      	beq.n	800ac34 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d11a      	bne.n	800ac52 <tcp_write_checks+0xd6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d116      	bne.n	800ac52 <tcp_write_checks+0xd6>
 800ac24:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <tcp_write_checks+0xe0>)
 800ac26:	f240 1255 	movw	r2, #341	; 0x155
 800ac2a:	490f      	ldr	r1, [pc, #60]	; (800ac68 <tcp_write_checks+0xec>)
 800ac2c:	480d      	ldr	r0, [pc, #52]	; (800ac64 <tcp_write_checks+0xe8>)
 800ac2e:	f004 fc49 	bl	800f4c4 <iprintf>
 800ac32:	e00e      	b.n	800ac52 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d103      	bne.n	800ac44 <tcp_write_checks+0xc8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d006      	beq.n	800ac52 <tcp_write_checks+0xd6>
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <tcp_write_checks+0xe0>)
 800ac46:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ac4a:	4908      	ldr	r1, [pc, #32]	; (800ac6c <tcp_write_checks+0xf0>)
 800ac4c:	4805      	ldr	r0, [pc, #20]	; (800ac64 <tcp_write_checks+0xe8>)
 800ac4e:	f004 fc39 	bl	800f4c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	080119bc 	.word	0x080119bc
 800ac60:	08011acc 	.word	0x08011acc
 800ac64:	08011a10 	.word	0x08011a10
 800ac68:	08011aec 	.word	0x08011aec
 800ac6c:	08011b28 	.word	0x08011b28

0800ac70 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b09b      	sub	sp, #108	; 0x6c
 800ac74:	af04      	add	r7, sp, #16
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	460b      	mov	r3, r1
 800ac80:	80fb      	strh	r3, [r7, #6]
 800ac82:	4613      	mov	r3, r2
 800ac84:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac8e:	2300      	movs	r3, #0
 800ac90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac92:	2300      	movs	r3, #0
 800ac94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac96:	2300      	movs	r3, #0
 800ac98:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d109      	bne.n	800accc <tcp_write+0x5c>
 800acb8:	4ba4      	ldr	r3, [pc, #656]	; (800af4c <tcp_write+0x2dc>)
 800acba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800acbe:	49a4      	ldr	r1, [pc, #656]	; (800af50 <tcp_write+0x2e0>)
 800acc0:	48a4      	ldr	r0, [pc, #656]	; (800af54 <tcp_write+0x2e4>)
 800acc2:	f004 fbff 	bl	800f4c4 <iprintf>
 800acc6:	f06f 030f 	mvn.w	r3, #15
 800acca:	e32a      	b.n	800b322 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acd2:	085b      	lsrs	r3, r3, #1
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acda:	4293      	cmp	r3, r2
 800acdc:	bf28      	it	cs
 800acde:	4613      	movcs	r3, r2
 800ace0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ace2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <tcp_write+0x7e>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acec:	e000      	b.n	800acf0 <tcp_write+0x80>
 800acee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d109      	bne.n	800ad0c <tcp_write+0x9c>
 800acf8:	4b94      	ldr	r3, [pc, #592]	; (800af4c <tcp_write+0x2dc>)
 800acfa:	f240 12ad 	movw	r2, #429	; 0x1ad
 800acfe:	4996      	ldr	r1, [pc, #600]	; (800af58 <tcp_write+0x2e8>)
 800ad00:	4894      	ldr	r0, [pc, #592]	; (800af54 <tcp_write+0x2e4>)
 800ad02:	f004 fbdf 	bl	800f4c4 <iprintf>
 800ad06:	f06f 030f 	mvn.w	r3, #15
 800ad0a:	e30a      	b.n	800b322 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ad0c:	88fb      	ldrh	r3, [r7, #6]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff ff33 	bl	800ab7c <tcp_write_checks>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ad1c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <tcp_write+0xba>
    return err;
 800ad24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad28:	e2fb      	b.n	800b322 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad34:	2300      	movs	r3, #0
 800ad36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80f6 	beq.w	800af30 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad48:	653b      	str	r3, [r7, #80]	; 0x50
 800ad4a:	e002      	b.n	800ad52 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ad4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f8      	bne.n	800ad4c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad5c:	7a9b      	ldrb	r3, [r3, #10]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad6c:	891b      	ldrh	r3, [r3, #8]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	8c3b      	ldrh	r3, [r7, #32]
 800ad72:	440b      	add	r3, r1
 800ad74:	429a      	cmp	r2, r3
 800ad76:	da06      	bge.n	800ad86 <tcp_write+0x116>
 800ad78:	4b74      	ldr	r3, [pc, #464]	; (800af4c <tcp_write+0x2dc>)
 800ad7a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ad7e:	4977      	ldr	r1, [pc, #476]	; (800af5c <tcp_write+0x2ec>)
 800ad80:	4874      	ldr	r0, [pc, #464]	; (800af54 <tcp_write+0x2e4>)
 800ad82:	f004 fb9f 	bl	800f4c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ad86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad88:	891a      	ldrh	r2, [r3, #8]
 800ad8a:	8c3b      	ldrh	r3, [r7, #32]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad9c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ad9e:	8a7b      	ldrh	r3, [r7, #18]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d026      	beq.n	800adf2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ada4:	8a7b      	ldrh	r3, [r7, #18]
 800ada6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d206      	bcs.n	800adba <tcp_write+0x14a>
 800adac:	4b67      	ldr	r3, [pc, #412]	; (800af4c <tcp_write+0x2dc>)
 800adae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800adb2:	496b      	ldr	r1, [pc, #428]	; (800af60 <tcp_write+0x2f0>)
 800adb4:	4867      	ldr	r0, [pc, #412]	; (800af54 <tcp_write+0x2e4>)
 800adb6:	f004 fb85 	bl	800f4c4 <iprintf>
      seg = last_unsent;
 800adba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adbc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800adbe:	8a7b      	ldrh	r3, [r7, #18]
 800adc0:	88fa      	ldrh	r2, [r7, #6]
 800adc2:	4293      	cmp	r3, r2
 800adc4:	bf28      	it	cs
 800adc6:	4613      	movcs	r3, r2
 800adc8:	b29b      	uxth	r3, r3
 800adca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800adcc:	4293      	cmp	r3, r2
 800adce:	bf28      	it	cs
 800add0:	4613      	movcs	r3, r2
 800add2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800add4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800add8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adda:	4413      	add	r3, r2
 800addc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ade0:	8a7a      	ldrh	r2, [r7, #18]
 800ade2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800adea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800adec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800adf2:	8a7b      	ldrh	r3, [r7, #18]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <tcp_write+0x1a0>
 800adf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800adfc:	88fb      	ldrh	r3, [r7, #6]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d006      	beq.n	800ae10 <tcp_write+0x1a0>
 800ae02:	4b52      	ldr	r3, [pc, #328]	; (800af4c <tcp_write+0x2dc>)
 800ae04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae08:	4956      	ldr	r1, [pc, #344]	; (800af64 <tcp_write+0x2f4>)
 800ae0a:	4852      	ldr	r0, [pc, #328]	; (800af54 <tcp_write+0x2e4>)
 800ae0c:	f004 fb5a 	bl	800f4c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ae10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	f080 8167 	bcs.w	800b0ea <tcp_write+0x47a>
 800ae1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 8163 	beq.w	800b0ea <tcp_write+0x47a>
 800ae24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae26:	891b      	ldrh	r3, [r3, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 815e 	beq.w	800b0ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae34:	1ad2      	subs	r2, r2, r3
 800ae36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	bfa8      	it	ge
 800ae3c:	4613      	movge	r3, r2
 800ae3e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ae40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae42:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae44:	797b      	ldrb	r3, [r7, #5]
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d027      	beq.n	800ae9e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ae4e:	f107 0012 	add.w	r0, r7, #18
 800ae52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae54:	8bf9      	ldrh	r1, [r7, #30]
 800ae56:	2301      	movs	r3, #1
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	797b      	ldrb	r3, [r7, #5]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4603      	mov	r3, r0
 800ae64:	2000      	movs	r0, #0
 800ae66:	f7ff fe0f 	bl	800aa88 <tcp_pbuf_prealloc>
 800ae6a:	6578      	str	r0, [r7, #84]	; 0x54
 800ae6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 8225 	beq.w	800b2be <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ae74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae76:	6858      	ldr	r0, [r3, #4]
 800ae78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	4413      	add	r3, r2
 800ae80:	8bfa      	ldrh	r2, [r7, #30]
 800ae82:	4619      	mov	r1, r3
 800ae84:	f004 fbf9 	bl	800f67a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ae88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae8a:	f7fb fa5b 	bl	8006344 <pbuf_clen>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	461a      	mov	r2, r3
 800ae92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae96:	4413      	add	r3, r2
 800ae98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ae9c:	e041      	b.n	800af22 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
 800aea4:	e002      	b.n	800aeac <tcp_write+0x23c>
 800aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34
 800aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f8      	bne.n	800aea6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb6:	7b1b      	ldrb	r3, [r3, #12]
 800aeb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d115      	bne.n	800aeec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800aec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec6:	8952      	ldrh	r2, [r2, #10]
 800aec8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d10d      	bne.n	800aeec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <tcp_write+0x276>
 800aed8:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <tcp_write+0x2dc>)
 800aeda:	f240 2231 	movw	r2, #561	; 0x231
 800aede:	4922      	ldr	r1, [pc, #136]	; (800af68 <tcp_write+0x2f8>)
 800aee0:	481c      	ldr	r0, [pc, #112]	; (800af54 <tcp_write+0x2e4>)
 800aee2:	f004 faef 	bl	800f4c4 <iprintf>
          extendlen = seglen;
 800aee6:	8bfb      	ldrh	r3, [r7, #30]
 800aee8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aeea:	e01a      	b.n	800af22 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
 800aeee:	2201      	movs	r2, #1
 800aef0:	4619      	mov	r1, r3
 800aef2:	2000      	movs	r0, #0
 800aef4:	f7fa feba 	bl	8005c6c <pbuf_alloc>
 800aef8:	6578      	str	r0, [r7, #84]	; 0x54
 800aefa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 81e0 	beq.w	800b2c2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800af02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	441a      	add	r2, r3
 800af0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af0c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800af0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800af10:	f7fb fa18 	bl	8006344 <pbuf_clen>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af1c:	4413      	add	r3, r2
 800af1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800af22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af26:	8bfb      	ldrh	r3, [r7, #30]
 800af28:	4413      	add	r3, r2
 800af2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af2e:	e0dc      	b.n	800b0ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 80d7 	beq.w	800b0ea <tcp_write+0x47a>
 800af3c:	4b03      	ldr	r3, [pc, #12]	; (800af4c <tcp_write+0x2dc>)
 800af3e:	f240 224a 	movw	r2, #586	; 0x24a
 800af42:	490a      	ldr	r1, [pc, #40]	; (800af6c <tcp_write+0x2fc>)
 800af44:	4803      	ldr	r0, [pc, #12]	; (800af54 <tcp_write+0x2e4>)
 800af46:	f004 fabd 	bl	800f4c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800af4a:	e0ce      	b.n	800b0ea <tcp_write+0x47a>
 800af4c:	080119bc 	.word	0x080119bc
 800af50:	08011b5c 	.word	0x08011b5c
 800af54:	08011a10 	.word	0x08011a10
 800af58:	08011b74 	.word	0x08011b74
 800af5c:	08011ba8 	.word	0x08011ba8
 800af60:	08011bc0 	.word	0x08011bc0
 800af64:	08011be0 	.word	0x08011be0
 800af68:	08011c00 	.word	0x08011c00
 800af6c:	08011c2c 	.word	0x08011c2c
    struct pbuf *p;
    u16_t left = len - pos;
 800af70:	88fa      	ldrh	r2, [r7, #6]
 800af72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800af7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af7e:	b29b      	uxth	r3, r3
 800af80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800af86:	8b7a      	ldrh	r2, [r7, #26]
 800af88:	8bbb      	ldrh	r3, [r7, #28]
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bf28      	it	cs
 800af8e:	4613      	movcs	r3, r2
 800af90:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af92:	797b      	ldrb	r3, [r7, #5]
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d036      	beq.n	800b00a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800af9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	8b3b      	ldrh	r3, [r7, #24]
 800afa4:	4413      	add	r3, r2
 800afa6:	b299      	uxth	r1, r3
 800afa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bf0c      	ite	eq
 800afae:	2301      	moveq	r3, #1
 800afb0:	2300      	movne	r3, #0
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f107 0012 	add.w	r0, r7, #18
 800afb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800afba:	9302      	str	r3, [sp, #8]
 800afbc:	797b      	ldrb	r3, [r7, #5]
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	4603      	mov	r3, r0
 800afc6:	2036      	movs	r0, #54	; 0x36
 800afc8:	f7ff fd5e 	bl	800aa88 <tcp_pbuf_prealloc>
 800afcc:	6338      	str	r0, [r7, #48]	; 0x30
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 8178 	beq.w	800b2c6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	895b      	ldrh	r3, [r3, #10]
 800afda:	8b3a      	ldrh	r2, [r7, #24]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d906      	bls.n	800afee <tcp_write+0x37e>
 800afe0:	4b8c      	ldr	r3, [pc, #560]	; (800b214 <tcp_write+0x5a4>)
 800afe2:	f240 2266 	movw	r2, #614	; 0x266
 800afe6:	498c      	ldr	r1, [pc, #560]	; (800b218 <tcp_write+0x5a8>)
 800afe8:	488c      	ldr	r0, [pc, #560]	; (800b21c <tcp_write+0x5ac>)
 800afea:	f004 fa6b 	bl	800f4c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aff6:	18d0      	adds	r0, r2, r3
 800aff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	4413      	add	r3, r2
 800b000:	8b3a      	ldrh	r2, [r7, #24]
 800b002:	4619      	mov	r1, r3
 800b004:	f004 fb39 	bl	800f67a <memcpy>
 800b008:	e02f      	b.n	800b06a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b00a:	8a7b      	ldrh	r3, [r7, #18]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d006      	beq.n	800b01e <tcp_write+0x3ae>
 800b010:	4b80      	ldr	r3, [pc, #512]	; (800b214 <tcp_write+0x5a4>)
 800b012:	f240 2271 	movw	r2, #625	; 0x271
 800b016:	4982      	ldr	r1, [pc, #520]	; (800b220 <tcp_write+0x5b0>)
 800b018:	4880      	ldr	r0, [pc, #512]	; (800b21c <tcp_write+0x5ac>)
 800b01a:	f004 fa53 	bl	800f4c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b01e:	8b3b      	ldrh	r3, [r7, #24]
 800b020:	2201      	movs	r2, #1
 800b022:	4619      	mov	r1, r3
 800b024:	2036      	movs	r0, #54	; 0x36
 800b026:	f7fa fe21 	bl	8005c6c <pbuf_alloc>
 800b02a:	6178      	str	r0, [r7, #20]
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 814b 	beq.w	800b2ca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b034:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	441a      	add	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b044:	b29b      	uxth	r3, r3
 800b046:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b04a:	4619      	mov	r1, r3
 800b04c:	2036      	movs	r0, #54	; 0x36
 800b04e:	f7fa fe0d 	bl	8005c6c <pbuf_alloc>
 800b052:	6338      	str	r0, [r7, #48]	; 0x30
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f7fb f8ea 	bl	8006234 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b060:	e136      	b.n	800b2d0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b062:	6979      	ldr	r1, [r7, #20]
 800b064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b066:	f7fb f9a7 	bl	80063b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b06a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b06c:	f7fb f96a 	bl	8006344 <pbuf_clen>
 800b070:	4603      	mov	r3, r0
 800b072:	461a      	mov	r2, r3
 800b074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b078:	4413      	add	r3, r2
 800b07a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b07e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b082:	2b09      	cmp	r3, #9
 800b084:	d903      	bls.n	800b08e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b088:	f7fb f8d4 	bl	8006234 <pbuf_free>
      goto memerr;
 800b08c:	e120      	b.n	800b2d0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b096:	441a      	add	r2, r3
 800b098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7ff fc51 	bl	800a94c <tcp_create_segment>
 800b0aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 810d 	beq.w	800b2ce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <tcp_write+0x450>
      queue = seg;
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b0be:	e00c      	b.n	800b0da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b0c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <tcp_write+0x464>
 800b0c6:	4b53      	ldr	r3, [pc, #332]	; (800b214 <tcp_write+0x5a4>)
 800b0c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b0cc:	4955      	ldr	r1, [pc, #340]	; (800b224 <tcp_write+0x5b4>)
 800b0ce:	4853      	ldr	r0, [pc, #332]	; (800b21c <tcp_write+0x5ac>)
 800b0d0:	f004 f9f8 	bl	800f4c4 <iprintf>
      prev_seg->next = seg;
 800b0d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b0de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0e2:	8b3b      	ldrh	r3, [r7, #24]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b0ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	f4ff af3d 	bcc.w	800af70 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b0f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d02c      	beq.n	800b156 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b102:	e01e      	b.n	800b142 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	891a      	ldrh	r2, [r3, #8]
 800b108:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b10a:	4413      	add	r3, r2
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d110      	bne.n	800b13c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b120:	8952      	ldrh	r2, [r2, #10]
 800b122:	4413      	add	r3, r2
 800b124:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	4618      	mov	r0, r3
 800b12a:	f004 faa6 	bl	800f67a <memcpy>
        p->len += oversize_used;
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	895a      	ldrh	r2, [r3, #10]
 800b132:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b134:	4413      	add	r3, r2
 800b136:	b29a      	uxth	r2, r3
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1dd      	bne.n	800b104 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b14a:	891a      	ldrh	r2, [r3, #8]
 800b14c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b14e:	4413      	add	r3, r2
 800b150:	b29a      	uxth	r2, r3
 800b152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b154:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b156:	8a7a      	ldrh	r2, [r7, #18]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b160:	2b00      	cmp	r3, #0
 800b162:	d018      	beq.n	800b196 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b166:	2b00      	cmp	r3, #0
 800b168:	d106      	bne.n	800b178 <tcp_write+0x508>
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <tcp_write+0x5a4>)
 800b16c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b170:	492d      	ldr	r1, [pc, #180]	; (800b228 <tcp_write+0x5b8>)
 800b172:	482a      	ldr	r0, [pc, #168]	; (800b21c <tcp_write+0x5ac>)
 800b174:	f004 f9a6 	bl	800f4c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb f91a 	bl	80063b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b186:	891a      	ldrh	r2, [r3, #8]
 800b188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b18a:	891b      	ldrh	r3, [r3, #8]
 800b18c:	4413      	add	r3, r2
 800b18e:	b29a      	uxth	r2, r3
 800b190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b192:	811a      	strh	r2, [r3, #8]
 800b194:	e037      	b.n	800b206 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b196:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d034      	beq.n	800b206 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <tcp_write+0x53a>
 800b1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <tcp_write+0x548>
 800b1aa:	4b1a      	ldr	r3, [pc, #104]	; (800b214 <tcp_write+0x5a4>)
 800b1ac:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b1b0:	491e      	ldr	r1, [pc, #120]	; (800b22c <tcp_write+0x5bc>)
 800b1b2:	481a      	ldr	r0, [pc, #104]	; (800b21c <tcp_write+0x5ac>)
 800b1b4:	f004 f986 	bl	800f4c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1be:	e009      	b.n	800b1d4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	891a      	ldrh	r2, [r3, #8]
 800b1c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1c6:	4413      	add	r3, r2
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	891a      	ldrh	r2, [r3, #8]
 800b1e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1e2:	4413      	add	r3, r2
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	895a      	ldrh	r2, [r3, #10]
 800b1ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1f0:	4413      	add	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1fa:	891a      	ldrh	r2, [r3, #8]
 800b1fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1fe:	4413      	add	r3, r2
 800b200:	b29a      	uxth	r2, r3
 800b202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b204:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d111      	bne.n	800b230 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b210:	66da      	str	r2, [r3, #108]	; 0x6c
 800b212:	e010      	b.n	800b236 <tcp_write+0x5c6>
 800b214:	080119bc 	.word	0x080119bc
 800b218:	08011c5c 	.word	0x08011c5c
 800b21c:	08011a10 	.word	0x08011a10
 800b220:	08011c9c 	.word	0x08011c9c
 800b224:	08011cac 	.word	0x08011cac
 800b228:	08011cc0 	.word	0x08011cc0
 800b22c:	08011cf8 	.word	0x08011cf8
  } else {
    last_unsent->next = queue;
 800b230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b234:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b23a:	88fb      	ldrh	r3, [r7, #6]
 800b23c:	441a      	add	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b248:	88fb      	ldrh	r3, [r7, #6]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b25a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00e      	beq.n	800b286 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <tcp_write+0x616>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b274:	2b00      	cmp	r3, #0
 800b276:	d106      	bne.n	800b286 <tcp_write+0x616>
 800b278:	4b2c      	ldr	r3, [pc, #176]	; (800b32c <tcp_write+0x6bc>)
 800b27a:	f240 3212 	movw	r2, #786	; 0x312
 800b27e:	492c      	ldr	r1, [pc, #176]	; (800b330 <tcp_write+0x6c0>)
 800b280:	482c      	ldr	r0, [pc, #176]	; (800b334 <tcp_write+0x6c4>)
 800b282:	f004 f91f 	bl	800f4c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d016      	beq.n	800b2ba <tcp_write+0x64a>
 800b28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d012      	beq.n	800b2ba <tcp_write+0x64a>
 800b294:	797b      	ldrb	r3, [r7, #5]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10d      	bne.n	800b2ba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	899b      	ldrh	r3, [r3, #12]
 800b2a4:	b29c      	uxth	r4, r3
 800b2a6:	2008      	movs	r0, #8
 800b2a8:	f7f9 fc66 	bl	8004b78 <lwip_htons>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	4322      	orrs	r2, r4
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e031      	b.n	800b322 <tcp_write+0x6b2>
          goto memerr;
 800b2be:	bf00      	nop
 800b2c0:	e006      	b.n	800b2d0 <tcp_write+0x660>
            goto memerr;
 800b2c2:	bf00      	nop
 800b2c4:	e004      	b.n	800b2d0 <tcp_write+0x660>
        goto memerr;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <tcp_write+0x660>
        goto memerr;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <tcp_write+0x660>
      goto memerr;
 800b2ce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	8b5b      	ldrh	r3, [r3, #26]
 800b2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b2e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b2e6:	f7fa ffa5 	bl	8006234 <pbuf_free>
  }
  if (queue != NULL) {
 800b2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b2f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b2f2:	f7fc fbb7 	bl	8007a64 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00e      	beq.n	800b31e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <tcp_write+0x6ae>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <tcp_write+0x6ae>
 800b310:	4b06      	ldr	r3, [pc, #24]	; (800b32c <tcp_write+0x6bc>)
 800b312:	f240 3227 	movw	r2, #807	; 0x327
 800b316:	4906      	ldr	r1, [pc, #24]	; (800b330 <tcp_write+0x6c0>)
 800b318:	4806      	ldr	r0, [pc, #24]	; (800b334 <tcp_write+0x6c4>)
 800b31a:	f004 f8d3 	bl	800f4c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b31e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b322:	4618      	mov	r0, r3
 800b324:	375c      	adds	r7, #92	; 0x5c
 800b326:	46bd      	mov	sp, r7
 800b328:	bd90      	pop	{r4, r7, pc}
 800b32a:	bf00      	nop
 800b32c:	080119bc 	.word	0x080119bc
 800b330:	08011d30 	.word	0x08011d30
 800b334:	08011a10 	.word	0x08011a10

0800b338 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b338:	b590      	push	{r4, r7, lr}
 800b33a:	b08b      	sub	sp, #44	; 0x2c
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	61fb      	str	r3, [r7, #28]
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <tcp_split_unsent_seg+0x2c>
 800b356:	4b95      	ldr	r3, [pc, #596]	; (800b5ac <tcp_split_unsent_seg+0x274>)
 800b358:	f240 324b 	movw	r2, #843	; 0x34b
 800b35c:	4994      	ldr	r1, [pc, #592]	; (800b5b0 <tcp_split_unsent_seg+0x278>)
 800b35e:	4895      	ldr	r0, [pc, #596]	; (800b5b4 <tcp_split_unsent_seg+0x27c>)
 800b360:	f004 f8b0 	bl	800f4c4 <iprintf>

  useg = pcb->unsent;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b368:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b370:	f04f 33ff 	mov.w	r3, #4294967295
 800b374:	e116      	b.n	800b5a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b376:	887b      	ldrh	r3, [r7, #2]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d109      	bne.n	800b390 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b37c:	4b8b      	ldr	r3, [pc, #556]	; (800b5ac <tcp_split_unsent_seg+0x274>)
 800b37e:	f240 3253 	movw	r2, #851	; 0x353
 800b382:	498d      	ldr	r1, [pc, #564]	; (800b5b8 <tcp_split_unsent_seg+0x280>)
 800b384:	488b      	ldr	r0, [pc, #556]	; (800b5b4 <tcp_split_unsent_seg+0x27c>)
 800b386:	f004 f89d 	bl	800f4c4 <iprintf>
    return ERR_VAL;
 800b38a:	f06f 0305 	mvn.w	r3, #5
 800b38e:	e109      	b.n	800b5a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	891b      	ldrh	r3, [r3, #8]
 800b394:	887a      	ldrh	r2, [r7, #2]
 800b396:	429a      	cmp	r2, r3
 800b398:	d301      	bcc.n	800b39e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	e102      	b.n	800b5a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3a2:	887a      	ldrh	r2, [r7, #2]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d906      	bls.n	800b3b6 <tcp_split_unsent_seg+0x7e>
 800b3a8:	4b80      	ldr	r3, [pc, #512]	; (800b5ac <tcp_split_unsent_seg+0x274>)
 800b3aa:	f240 325b 	movw	r2, #859	; 0x35b
 800b3ae:	4983      	ldr	r1, [pc, #524]	; (800b5bc <tcp_split_unsent_seg+0x284>)
 800b3b0:	4880      	ldr	r0, [pc, #512]	; (800b5b4 <tcp_split_unsent_seg+0x27c>)
 800b3b2:	f004 f887 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	891b      	ldrh	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <tcp_split_unsent_seg+0x94>
 800b3be:	4b7b      	ldr	r3, [pc, #492]	; (800b5ac <tcp_split_unsent_seg+0x274>)
 800b3c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b3c4:	497e      	ldr	r1, [pc, #504]	; (800b5c0 <tcp_split_unsent_seg+0x288>)
 800b3c6:	487b      	ldr	r0, [pc, #492]	; (800b5b4 <tcp_split_unsent_seg+0x27c>)
 800b3c8:	f004 f87c 	bl	800f4c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	7a9b      	ldrb	r3, [r3, #10]
 800b3d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	891a      	ldrh	r2, [r3, #8]
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	89bb      	ldrh	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	2036      	movs	r0, #54	; 0x36
 800b3fa:	f7fa fc37 	bl	8005c6c <pbuf_alloc>
 800b3fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 80b7 	beq.w	800b576 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	891a      	ldrh	r2, [r3, #8]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	891b      	ldrh	r3, [r3, #8]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	b29a      	uxth	r2, r3
 800b416:	887b      	ldrh	r3, [r7, #2]
 800b418:	4413      	add	r3, r2
 800b41a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6858      	ldr	r0, [r3, #4]
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	18d1      	adds	r1, r2, r3
 800b428:	897b      	ldrh	r3, [r7, #10]
 800b42a:	89ba      	ldrh	r2, [r7, #12]
 800b42c:	f7fb f8ec 	bl	8006608 <pbuf_copy_partial>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	89bb      	ldrh	r3, [r7, #12]
 800b436:	4293      	cmp	r3, r2
 800b438:	f040 809f 	bne.w	800b57a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	899b      	ldrh	r3, [r3, #12]
 800b442:	b29b      	uxth	r3, r3
 800b444:	4618      	mov	r0, r3
 800b446:	f7f9 fb97 	bl	8004b78 <lwip_htons>
 800b44a:	4603      	mov	r3, r0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b452:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b454:	2300      	movs	r3, #0
 800b456:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b458:	7efb      	ldrb	r3, [r7, #27]
 800b45a:	f003 0308 	and.w	r3, r3, #8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d007      	beq.n	800b472 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b462:	7efb      	ldrb	r3, [r7, #27]
 800b464:	f023 0308 	bic.w	r3, r3, #8
 800b468:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b46a:	7ebb      	ldrb	r3, [r7, #26]
 800b46c:	f043 0308 	orr.w	r3, r3, #8
 800b470:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b472:	7efb      	ldrb	r3, [r7, #27]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d007      	beq.n	800b48c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b47c:	7efb      	ldrb	r3, [r7, #27]
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b484:	7ebb      	ldrb	r3, [r7, #26]
 800b486:	f043 0301 	orr.w	r3, r3, #1
 800b48a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4618      	mov	r0, r3
 800b494:	f7f9 fb85 	bl	8004ba2 <lwip_htonl>
 800b498:	4602      	mov	r2, r0
 800b49a:	887b      	ldrh	r3, [r7, #2]
 800b49c:	18d1      	adds	r1, r2, r3
 800b49e:	7eba      	ldrb	r2, [r7, #26]
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	6939      	ldr	r1, [r7, #16]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff fa4f 	bl	800a94c <tcp_create_segment>
 800b4ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d063      	beq.n	800b57e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fa ff42 	bl	8006344 <pbuf_clen>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4ca:	1a9b      	subs	r3, r3, r2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	6858      	ldr	r0, [r3, #4]
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	891a      	ldrh	r2, [r3, #8]
 800b4de:	89bb      	ldrh	r3, [r7, #12]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	f7fa fd1f 	bl	8005f28 <pbuf_realloc>
  useg->len -= remainder;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	891a      	ldrh	r2, [r3, #8]
 800b4ee:	89bb      	ldrh	r3, [r7, #12]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	899b      	ldrh	r3, [r3, #12]
 800b4fe:	b29c      	uxth	r4, r3
 800b500:	7efb      	ldrb	r3, [r7, #27]
 800b502:	b29b      	uxth	r3, r3
 800b504:	4618      	mov	r0, r3
 800b506:	f7f9 fb37 	bl	8004b78 <lwip_htons>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	4322      	orrs	r2, r4
 800b514:	b292      	uxth	r2, r2
 800b516:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fa ff11 	bl	8006344 <pbuf_clen>
 800b522:	4603      	mov	r3, r0
 800b524:	461a      	mov	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b52c:	4413      	add	r3, r2
 800b52e:	b29a      	uxth	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fa ff02 	bl	8006344 <pbuf_clen>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b54a:	4413      	add	r3, r2
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	69fa      	ldr	r2, [r7, #28]
 800b560:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d103      	bne.n	800b572 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	e016      	b.n	800b5a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b576:	bf00      	nop
 800b578:	e002      	b.n	800b580 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b57e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d006      	beq.n	800b594 <tcp_split_unsent_seg+0x25c>
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <tcp_split_unsent_seg+0x274>)
 800b588:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b58c:	490d      	ldr	r1, [pc, #52]	; (800b5c4 <tcp_split_unsent_seg+0x28c>)
 800b58e:	4809      	ldr	r0, [pc, #36]	; (800b5b4 <tcp_split_unsent_seg+0x27c>)
 800b590:	f003 ff98 	bl	800f4c4 <iprintf>
  if (p != NULL) {
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b59a:	6938      	ldr	r0, [r7, #16]
 800b59c:	f7fa fe4a 	bl	8006234 <pbuf_free>
  }

  return ERR_MEM;
 800b5a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3724      	adds	r7, #36	; 0x24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}
 800b5ac:	080119bc 	.word	0x080119bc
 800b5b0:	08011d50 	.word	0x08011d50
 800b5b4:	08011a10 	.word	0x08011a10
 800b5b8:	08011d74 	.word	0x08011d74
 800b5bc:	08011d98 	.word	0x08011d98
 800b5c0:	08011da8 	.word	0x08011da8
 800b5c4:	08011db8 	.word	0x08011db8

0800b5c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <tcp_send_fin+0x1c>
 800b5d6:	4b21      	ldr	r3, [pc, #132]	; (800b65c <tcp_send_fin+0x94>)
 800b5d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5dc:	4920      	ldr	r1, [pc, #128]	; (800b660 <tcp_send_fin+0x98>)
 800b5de:	4821      	ldr	r0, [pc, #132]	; (800b664 <tcp_send_fin+0x9c>)
 800b5e0:	f003 ff70 	bl	800f4c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d02e      	beq.n	800b64a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	e002      	b.n	800b5fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f8      	bne.n	800b5f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	899b      	ldrh	r3, [r3, #12]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f9 fab4 	bl	8004b78 <lwip_htons>
 800b610:	4603      	mov	r3, r0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 0307 	and.w	r3, r3, #7
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d116      	bne.n	800b64a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	899b      	ldrh	r3, [r3, #12]
 800b622:	b29c      	uxth	r4, r3
 800b624:	2001      	movs	r0, #1
 800b626:	f7f9 faa7 	bl	8004b78 <lwip_htons>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4322      	orrs	r2, r4
 800b634:	b292      	uxth	r2, r2
 800b636:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	8b5b      	ldrh	r3, [r3, #26]
 800b63c:	f043 0320 	orr.w	r3, r3, #32
 800b640:	b29a      	uxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	e004      	b.n	800b654 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b64a:	2101      	movs	r1, #1
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f80b 	bl	800b668 <tcp_enqueue_flags>
 800b652:	4603      	mov	r3, r0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}
 800b65c:	080119bc 	.word	0x080119bc
 800b660:	08011dc4 	.word	0x08011dc4
 800b664:	08011a10 	.word	0x08011a10

0800b668 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08a      	sub	sp, #40	; 0x28
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <tcp_enqueue_flags+0x2c>
 800b686:	4b67      	ldr	r3, [pc, #412]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b688:	f240 4211 	movw	r2, #1041	; 0x411
 800b68c:	4966      	ldr	r1, [pc, #408]	; (800b828 <tcp_enqueue_flags+0x1c0>)
 800b68e:	4867      	ldr	r0, [pc, #412]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b690:	f003 ff18 	bl	800f4c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <tcp_enqueue_flags+0x40>
 800b69a:	4b62      	ldr	r3, [pc, #392]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b69c:	f240 4213 	movw	r2, #1043	; 0x413
 800b6a0:	4963      	ldr	r1, [pc, #396]	; (800b830 <tcp_enqueue_flags+0x1c8>)
 800b6a2:	4862      	ldr	r0, [pc, #392]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b6a4:	f003 ff0e 	bl	800f4c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	f003 0302 	and.w	r3, r3, #2
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b6b6:	7ffb      	ldrb	r3, [r7, #31]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	2036      	movs	r0, #54	; 0x36
 800b6ce:	f7fa facd 	bl	8005c6c <pbuf_alloc>
 800b6d2:	6138      	str	r0, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d109      	bne.n	800b6ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8b5b      	ldrh	r3, [r3, #26]
 800b6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	e095      	b.n	800b81a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	895a      	ldrh	r2, [r3, #10]
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d206      	bcs.n	800b708 <tcp_enqueue_flags+0xa0>
 800b6fa:	4b4a      	ldr	r3, [pc, #296]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b6fc:	f240 4239 	movw	r2, #1081	; 0x439
 800b700:	494c      	ldr	r1, [pc, #304]	; (800b834 <tcp_enqueue_flags+0x1cc>)
 800b702:	484a      	ldr	r0, [pc, #296]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b704:	f003 fede 	bl	800f4c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	7ffb      	ldrb	r3, [r7, #31]
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	460b      	mov	r3, r1
 800b714:	6939      	ldr	r1, [r7, #16]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff f918 	bl	800a94c <tcp_create_segment>
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	8b5b      	ldrh	r3, [r3, #26]
 800b728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b732:	f04f 33ff 	mov.w	r3, #4294967295
 800b736:	e070      	b.n	800b81a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f003 0303 	and.w	r3, r3, #3
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <tcp_enqueue_flags+0xea>
 800b744:	4b37      	ldr	r3, [pc, #220]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b746:	f240 4242 	movw	r2, #1090	; 0x442
 800b74a:	493b      	ldr	r1, [pc, #236]	; (800b838 <tcp_enqueue_flags+0x1d0>)
 800b74c:	4837      	ldr	r0, [pc, #220]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b74e:	f003 feb9 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d006      	beq.n	800b768 <tcp_enqueue_flags+0x100>
 800b75a:	4b32      	ldr	r3, [pc, #200]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b75c:	f240 4243 	movw	r2, #1091	; 0x443
 800b760:	4936      	ldr	r1, [pc, #216]	; (800b83c <tcp_enqueue_flags+0x1d4>)
 800b762:	4832      	ldr	r0, [pc, #200]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b764:	f003 feae 	bl	800f4c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d103      	bne.n	800b778 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	66da      	str	r2, [r3, #108]	; 0x6c
 800b776:	e00d      	b.n	800b794 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	e002      	b.n	800b786 <tcp_enqueue_flags+0x11e>
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	61bb      	str	r3, [r7, #24]
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f8      	bne.n	800b780 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <tcp_enqueue_flags+0x148>
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b7ba:	78fb      	ldrb	r3, [r7, #3]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	8b5b      	ldrh	r3, [r3, #26]
 800b7c8:	f043 0320 	orr.w	r3, r3, #32
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fa fdb4 	bl	8006344 <pbuf_clen>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461a      	mov	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7e6:	4413      	add	r3, r2
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00e      	beq.n	800b818 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <tcp_enqueue_flags+0x1b0>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <tcp_enqueue_flags+0x1b0>
 800b80a:	4b06      	ldr	r3, [pc, #24]	; (800b824 <tcp_enqueue_flags+0x1bc>)
 800b80c:	f240 4265 	movw	r2, #1125	; 0x465
 800b810:	490b      	ldr	r1, [pc, #44]	; (800b840 <tcp_enqueue_flags+0x1d8>)
 800b812:	4806      	ldr	r0, [pc, #24]	; (800b82c <tcp_enqueue_flags+0x1c4>)
 800b814:	f003 fe56 	bl	800f4c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	080119bc 	.word	0x080119bc
 800b828:	08011de0 	.word	0x08011de0
 800b82c:	08011a10 	.word	0x08011a10
 800b830:	08011e38 	.word	0x08011e38
 800b834:	08011e58 	.word	0x08011e58
 800b838:	08011e94 	.word	0x08011e94
 800b83c:	08011eac 	.word	0x08011eac
 800b840:	08011ed8 	.word	0x08011ed8

0800b844 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b844:	b5b0      	push	{r4, r5, r7, lr}
 800b846:	b08a      	sub	sp, #40	; 0x28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_output+0x1c>
 800b852:	4b8a      	ldr	r3, [pc, #552]	; (800ba7c <tcp_output+0x238>)
 800b854:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b858:	4989      	ldr	r1, [pc, #548]	; (800ba80 <tcp_output+0x23c>)
 800b85a:	488a      	ldr	r0, [pc, #552]	; (800ba84 <tcp_output+0x240>)
 800b85c:	f003 fe32 	bl	800f4c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	7d1b      	ldrb	r3, [r3, #20]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d106      	bne.n	800b876 <tcp_output+0x32>
 800b868:	4b84      	ldr	r3, [pc, #528]	; (800ba7c <tcp_output+0x238>)
 800b86a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b86e:	4986      	ldr	r1, [pc, #536]	; (800ba88 <tcp_output+0x244>)
 800b870:	4884      	ldr	r0, [pc, #528]	; (800ba84 <tcp_output+0x240>)
 800b872:	f003 fe27 	bl	800f4c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b876:	4b85      	ldr	r3, [pc, #532]	; (800ba8c <tcp_output+0x248>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d101      	bne.n	800b884 <tcp_output+0x40>
    return ERR_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	e1ce      	b.n	800bc22 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b890:	4293      	cmp	r3, r2
 800b892:	bf28      	it	cs
 800b894:	4613      	movcs	r3, r2
 800b896:	b29b      	uxth	r3, r3
 800b898:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10b      	bne.n	800b8be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8b5b      	ldrh	r3, [r3, #26]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 81aa 	beq.w	800bc08 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fdcb 	bl	800c450 <tcp_send_empty_ack>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	e1b1      	b.n	800bc22 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff f824 	bl	800a914 <tcp_route>
 800b8cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <tcp_output+0x96>
    return ERR_RTE;
 800b8d4:	f06f 0303 	mvn.w	r3, #3
 800b8d8:	e1a3      	b.n	800bc22 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d003      	beq.n	800b8e8 <tcp_output+0xa4>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d111      	bne.n	800b90c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <tcp_output+0xb0>
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	e000      	b.n	800b8f6 <tcp_output+0xb2>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <tcp_output+0xc0>
      return ERR_RTE;
 800b8fe:	f06f 0303 	mvn.w	r3, #3
 800b902:	e18e      	b.n	800bc22 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	f7f9 f945 	bl	8004ba2 <lwip_htonl>
 800b918:	4602      	mov	r2, r0
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	8912      	ldrh	r2, [r2, #8]
 800b924:	4413      	add	r3, r2
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d227      	bcs.n	800b97c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b932:	461a      	mov	r2, r3
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	4293      	cmp	r3, r2
 800b938:	d114      	bne.n	800b964 <tcp_output+0x120>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d110      	bne.n	800b964 <tcp_output+0x120>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10b      	bne.n	800b964 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8b5b      	ldrh	r3, [r3, #26]
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 814d 	beq.w	800bc0c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fd6c 	bl	800c450 <tcp_send_empty_ack>
 800b978:	4603      	mov	r3, r0
 800b97a:	e152      	b.n	800bc22 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b988:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 811c 	beq.w	800bbca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b992:	e002      	b.n	800b99a <tcp_output+0x156>
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	623b      	str	r3, [r7, #32]
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1f8      	bne.n	800b994 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b9a2:	e112      	b.n	800bbca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	899b      	ldrh	r3, [r3, #12]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f9 f8e3 	bl	8004b78 <lwip_htons>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	f003 0304 	and.w	r3, r3, #4
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d006      	beq.n	800b9cc <tcp_output+0x188>
 800b9be:	4b2f      	ldr	r3, [pc, #188]	; (800ba7c <tcp_output+0x238>)
 800b9c0:	f240 5236 	movw	r2, #1334	; 0x536
 800b9c4:	4932      	ldr	r1, [pc, #200]	; (800ba90 <tcp_output+0x24c>)
 800b9c6:	482f      	ldr	r0, [pc, #188]	; (800ba84 <tcp_output+0x240>)
 800b9c8:	f003 fd7c 	bl	800f4c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01f      	beq.n	800ba14 <tcp_output+0x1d0>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	8b5b      	ldrh	r3, [r3, #26]
 800b9d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d119      	bne.n	800ba14 <tcp_output+0x1d0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00b      	beq.n	800ba00 <tcp_output+0x1bc>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d110      	bne.n	800ba14 <tcp_output+0x1d0>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f6:	891a      	ldrh	r2, [r3, #8]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d209      	bcs.n	800ba14 <tcp_output+0x1d0>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d004      	beq.n	800ba14 <tcp_output+0x1d0>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d901      	bls.n	800ba18 <tcp_output+0x1d4>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e000      	b.n	800ba1a <tcp_output+0x1d6>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	8b5b      	ldrh	r3, [r3, #26]
 800ba22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80e4 	beq.w	800bbf4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	7d1b      	ldrb	r3, [r3, #20]
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d00d      	beq.n	800ba50 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	899b      	ldrh	r3, [r3, #12]
 800ba3a:	b29c      	uxth	r4, r3
 800ba3c:	2010      	movs	r0, #16
 800ba3e:	f7f9 f89b 	bl	8004b78 <lwip_htons>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	4322      	orrs	r2, r4
 800ba4c:	b292      	uxth	r2, r2
 800ba4e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba56:	f000 f909 	bl	800bc6c <tcp_output_segment>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d016      	beq.n	800ba94 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8b5b      	ldrh	r3, [r3, #26]
 800ba6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	835a      	strh	r2, [r3, #26]
      return err;
 800ba74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba78:	e0d3      	b.n	800bc22 <tcp_output+0x3de>
 800ba7a:	bf00      	nop
 800ba7c:	080119bc 	.word	0x080119bc
 800ba80:	08011f00 	.word	0x08011f00
 800ba84:	08011a10 	.word	0x08011a10
 800ba88:	08011f18 	.word	0x08011f18
 800ba8c:	200082e8 	.word	0x200082e8
 800ba90:	08011f40 	.word	0x08011f40
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7d1b      	ldrb	r3, [r3, #20]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d006      	beq.n	800bab2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	8b5b      	ldrh	r3, [r3, #26]
 800baa8:	f023 0303 	bic.w	r3, r3, #3
 800baac:	b29a      	uxth	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7f9 f872 	bl	8004ba2 <lwip_htonl>
 800babe:	4604      	mov	r4, r0
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	891b      	ldrh	r3, [r3, #8]
 800bac4:	461d      	mov	r5, r3
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	899b      	ldrh	r3, [r3, #12]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f9 f852 	bl	8004b78 <lwip_htons>
 800bad4:	4603      	mov	r3, r0
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <tcp_output+0x2a0>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e000      	b.n	800bae6 <tcp_output+0x2a2>
 800bae4:	2300      	movs	r3, #0
 800bae6:	442b      	add	r3, r5
 800bae8:	4423      	add	r3, r4
 800baea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	da02      	bge.n	800bafe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	891b      	ldrh	r3, [r3, #8]
 800bb02:	461c      	mov	r4, r3
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	899b      	ldrh	r3, [r3, #12]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7f9 f833 	bl	8004b78 <lwip_htons>
 800bb12:	4603      	mov	r3, r0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <tcp_output+0x2de>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <tcp_output+0x2e0>
 800bb22:	2300      	movs	r3, #0
 800bb24:	4423      	add	r3, r4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d049      	beq.n	800bbbe <tcp_output+0x37a>
      seg->next = NULL;
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d105      	bne.n	800bb44 <tcp_output+0x300>
        pcb->unacked = seg;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	623b      	str	r3, [r7, #32]
 800bb42:	e03f      	b.n	800bbc4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f9 f829 	bl	8004ba2 <lwip_htonl>
 800bb50:	4604      	mov	r4, r0
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7f9 f822 	bl	8004ba2 <lwip_htonl>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	1ae3      	subs	r3, r4, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	da24      	bge.n	800bbb0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	3370      	adds	r3, #112	; 0x70
 800bb6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb6c:	e002      	b.n	800bb74 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d011      	beq.n	800bba0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7f9 f80c 	bl	8004ba2 <lwip_htonl>
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f9 f805 	bl	8004ba2 <lwip_htonl>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	dbe6      	blt.n	800bb6e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	e009      	b.n	800bbc4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbb4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	623b      	str	r3, [r7, #32]
 800bbbc:	e002      	b.n	800bbc4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bbbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbc0:	f7fb ff65 	bl	8007a8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d012      	beq.n	800bbf6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7f8 ffe3 	bl	8004ba2 <lwip_htonl>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	8912      	ldrh	r2, [r2, #8]
 800bbe8:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	f4bf aed9 	bcs.w	800b9a4 <tcp_output+0x160>
 800bbf2:	e000      	b.n	800bbf6 <tcp_output+0x3b2>
      break;
 800bbf4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d108      	bne.n	800bc10 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bc06:	e004      	b.n	800bc12 <tcp_output+0x3ce>
    goto output_done;
 800bc08:	bf00      	nop
 800bc0a:	e002      	b.n	800bc12 <tcp_output+0x3ce>
    goto output_done;
 800bc0c:	bf00      	nop
 800bc0e:	e000      	b.n	800bc12 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc10:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	8b5b      	ldrh	r3, [r3, #26]
 800bc16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3728      	adds	r7, #40	; 0x28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bdb0      	pop	{r4, r5, r7, pc}
 800bc2a:	bf00      	nop

0800bc2c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <tcp_output_segment_busy+0x1c>
 800bc3a:	4b09      	ldr	r3, [pc, #36]	; (800bc60 <tcp_output_segment_busy+0x34>)
 800bc3c:	f240 529a 	movw	r2, #1434	; 0x59a
 800bc40:	4908      	ldr	r1, [pc, #32]	; (800bc64 <tcp_output_segment_busy+0x38>)
 800bc42:	4809      	ldr	r0, [pc, #36]	; (800bc68 <tcp_output_segment_busy+0x3c>)
 800bc44:	f003 fc3e 	bl	800f4c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	7b9b      	ldrb	r3, [r3, #14]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d001      	beq.n	800bc56 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e000      	b.n	800bc58 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	080119bc 	.word	0x080119bc
 800bc64:	08011f58 	.word	0x08011f58
 800bc68:	08011a10 	.word	0x08011a10

0800bc6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc6c:	b5b0      	push	{r4, r5, r7, lr}
 800bc6e:	b08c      	sub	sp, #48	; 0x30
 800bc70:	af04      	add	r7, sp, #16
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <tcp_output_segment+0x20>
 800bc7e:	4b64      	ldr	r3, [pc, #400]	; (800be10 <tcp_output_segment+0x1a4>)
 800bc80:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bc84:	4963      	ldr	r1, [pc, #396]	; (800be14 <tcp_output_segment+0x1a8>)
 800bc86:	4864      	ldr	r0, [pc, #400]	; (800be18 <tcp_output_segment+0x1ac>)
 800bc88:	f003 fc1c 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <tcp_output_segment+0x34>
 800bc92:	4b5f      	ldr	r3, [pc, #380]	; (800be10 <tcp_output_segment+0x1a4>)
 800bc94:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc98:	4960      	ldr	r1, [pc, #384]	; (800be1c <tcp_output_segment+0x1b0>)
 800bc9a:	485f      	ldr	r0, [pc, #380]	; (800be18 <tcp_output_segment+0x1ac>)
 800bc9c:	f003 fc12 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <tcp_output_segment+0x48>
 800bca6:	4b5a      	ldr	r3, [pc, #360]	; (800be10 <tcp_output_segment+0x1a4>)
 800bca8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bcac:	495c      	ldr	r1, [pc, #368]	; (800be20 <tcp_output_segment+0x1b4>)
 800bcae:	485a      	ldr	r0, [pc, #360]	; (800be18 <tcp_output_segment+0x1ac>)
 800bcb0:	f003 fc08 	bl	800f4c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff ffb9 	bl	800bc2c <tcp_output_segment_busy>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e0a1      	b.n	800be08 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	68dc      	ldr	r4, [r3, #12]
 800bccc:	4610      	mov	r0, r2
 800bcce:	f7f8 ff68 	bl	8004ba2 <lwip_htonl>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68dc      	ldr	r4, [r3, #12]
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7f8 ff4a 	bl	8004b78 <lwip_htons>
 800bce4:	4603      	mov	r3, r0
 800bce6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bcf0:	441a      	add	r2, r3
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	3314      	adds	r3, #20
 800bcfc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	7a9b      	ldrb	r3, [r3, #10]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d015      	beq.n	800bd36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bd16:	f7fc fa33 	bl	8008180 <tcp_eff_send_mss_netif>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bd1e:	8b7b      	ldrh	r3, [r7, #26]
 800bd20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7f8 ff3c 	bl	8004ba2 <lwip_htonl>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	3304      	adds	r3, #4
 800bd34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	da02      	bge.n	800bd46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10c      	bne.n	800bd68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd4e:	4b35      	ldr	r3, [pc, #212]	; (800be24 <tcp_output_segment+0x1b8>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7f8 ff20 	bl	8004ba2 <lwip_htonl>
 800bd62:	4602      	mov	r2, r0
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	8959      	ldrh	r1, [r3, #10]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	8b3a      	ldrh	r2, [r7, #24]
 800bd82:	1a8a      	subs	r2, r1, r2
 800bd84:	b292      	uxth	r2, r2
 800bd86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	8919      	ldrh	r1, [r3, #8]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	8b3a      	ldrh	r2, [r7, #24]
 800bd94:	1a8a      	subs	r2, r1, r2
 800bd96:	b292      	uxth	r2, r2
 800bd98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	68d2      	ldr	r2, [r2, #12]
 800bda2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	741a      	strb	r2, [r3, #16]
 800bdac:	2200      	movs	r2, #0
 800bdae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	7a9b      	ldrb	r3, [r3, #10]
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <tcp_output_segment+0x158>
 800bdc0:	2318      	movs	r3, #24
 800bdc2:	e000      	b.n	800bdc6 <tcp_output_segment+0x15a>
 800bdc4:	2314      	movs	r3, #20
 800bdc6:	4413      	add	r3, r2
 800bdc8:	69fa      	ldr	r2, [r7, #28]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d006      	beq.n	800bddc <tcp_output_segment+0x170>
 800bdce:	4b10      	ldr	r3, [pc, #64]	; (800be10 <tcp_output_segment+0x1a4>)
 800bdd0:	f240 621c 	movw	r2, #1564	; 0x61c
 800bdd4:	4914      	ldr	r1, [pc, #80]	; (800be28 <tcp_output_segment+0x1bc>)
 800bdd6:	4810      	ldr	r0, [pc, #64]	; (800be18 <tcp_output_segment+0x1ac>)
 800bdd8:	f003 fb74 	bl	800f4c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6858      	ldr	r0, [r3, #4]
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	1d1c      	adds	r4, r3, #4
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	7add      	ldrb	r5, [r3, #11]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	7a9b      	ldrb	r3, [r3, #10]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	2206      	movs	r2, #6
 800bdf4:	9201      	str	r2, [sp, #4]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	4622      	mov	r2, r4
 800bdfc:	f002 fa34 	bl	800e268 <ip4_output_if>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800be04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3720      	adds	r7, #32
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bdb0      	pop	{r4, r5, r7, pc}
 800be10:	080119bc 	.word	0x080119bc
 800be14:	08011f80 	.word	0x08011f80
 800be18:	08011a10 	.word	0x08011a10
 800be1c:	08011fa0 	.word	0x08011fa0
 800be20:	08011fc0 	.word	0x08011fc0
 800be24:	2000829c 	.word	0x2000829c
 800be28:	08011fe4 	.word	0x08011fe4

0800be2c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be2c:	b5b0      	push	{r4, r5, r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d106      	bne.n	800be48 <tcp_rexmit_rto_prepare+0x1c>
 800be3a:	4b31      	ldr	r3, [pc, #196]	; (800bf00 <tcp_rexmit_rto_prepare+0xd4>)
 800be3c:	f240 6263 	movw	r2, #1635	; 0x663
 800be40:	4930      	ldr	r1, [pc, #192]	; (800bf04 <tcp_rexmit_rto_prepare+0xd8>)
 800be42:	4831      	ldr	r0, [pc, #196]	; (800bf08 <tcp_rexmit_rto_prepare+0xdc>)
 800be44:	f003 fb3e 	bl	800f4c4 <iprintf>

  if (pcb->unacked == NULL) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be50:	f06f 0305 	mvn.w	r3, #5
 800be54:	e050      	b.n	800bef8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e00b      	b.n	800be76 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff fee4 	bl	800bc2c <tcp_output_segment_busy>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be6a:	f06f 0305 	mvn.w	r3, #5
 800be6e:	e043      	b.n	800bef8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1ef      	bne.n	800be5e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff fed4 	bl	800bc2c <tcp_output_segment_busy>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d002      	beq.n	800be90 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be8a:	f06f 0305 	mvn.w	r3, #5
 800be8e:	e033      	b.n	800bef8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	8b5b      	ldrh	r3, [r3, #26]
 800beaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800beae:	b29a      	uxth	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f8 fe71 	bl	8004ba2 <lwip_htonl>
 800bec0:	4604      	mov	r4, r0
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	891b      	ldrh	r3, [r3, #8]
 800bec6:	461d      	mov	r5, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	899b      	ldrh	r3, [r3, #12]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 fe51 	bl	8004b78 <lwip_htons>
 800bed6:	4603      	mov	r3, r0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <tcp_rexmit_rto_prepare+0xba>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <tcp_rexmit_rto_prepare+0xbc>
 800bee6:	2300      	movs	r3, #0
 800bee8:	442b      	add	r3, r5
 800beea:	18e2      	adds	r2, r4, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bdb0      	pop	{r4, r5, r7, pc}
 800bf00:	080119bc 	.word	0x080119bc
 800bf04:	08011ff8 	.word	0x08011ff8
 800bf08:	08011a10 	.word	0x08011a10

0800bf0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <tcp_rexmit_rto_commit+0x1c>
 800bf1a:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <tcp_rexmit_rto_commit+0x44>)
 800bf1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf20:	490c      	ldr	r1, [pc, #48]	; (800bf54 <tcp_rexmit_rto_commit+0x48>)
 800bf22:	480d      	ldr	r0, [pc, #52]	; (800bf58 <tcp_rexmit_rto_commit+0x4c>)
 800bf24:	f003 face 	bl	800f4c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf2e:	2bff      	cmp	r3, #255	; 0xff
 800bf30:	d007      	beq.n	800bf42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf38:	3301      	adds	r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff fc7e 	bl	800b844 <tcp_output>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	080119bc 	.word	0x080119bc
 800bf54:	0801201c 	.word	0x0801201c
 800bf58:	08011a10 	.word	0x08011a10

0800bf5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <tcp_rexmit_rto+0x1c>
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <tcp_rexmit_rto+0x38>)
 800bf6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bf70:	4909      	ldr	r1, [pc, #36]	; (800bf98 <tcp_rexmit_rto+0x3c>)
 800bf72:	480a      	ldr	r0, [pc, #40]	; (800bf9c <tcp_rexmit_rto+0x40>)
 800bf74:	f003 faa6 	bl	800f4c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ff57 	bl	800be2c <tcp_rexmit_rto_prepare>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff ffc1 	bl	800bf0c <tcp_rexmit_rto_commit>
  }
}
 800bf8a:	bf00      	nop
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	080119bc 	.word	0x080119bc
 800bf98:	08012040 	.word	0x08012040
 800bf9c:	08011a10 	.word	0x08011a10

0800bfa0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <tcp_rexmit+0x1c>
 800bfae:	4b2f      	ldr	r3, [pc, #188]	; (800c06c <tcp_rexmit+0xcc>)
 800bfb0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bfb4:	492e      	ldr	r1, [pc, #184]	; (800c070 <tcp_rexmit+0xd0>)
 800bfb6:	482f      	ldr	r0, [pc, #188]	; (800c074 <tcp_rexmit+0xd4>)
 800bfb8:	f003 fa84 	bl	800f4c4 <iprintf>

  if (pcb->unacked == NULL) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bfc4:	f06f 0305 	mvn.w	r3, #5
 800bfc8:	e04c      	b.n	800c064 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bfd0:	68b8      	ldr	r0, [r7, #8]
 800bfd2:	f7ff fe2b 	bl	800bc2c <tcp_output_segment_busy>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfdc:	f06f 0305 	mvn.w	r3, #5
 800bfe0:	e040      	b.n	800c064 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	336c      	adds	r3, #108	; 0x6c
 800bfee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bff0:	e002      	b.n	800bff8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d011      	beq.n	800c024 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	4618      	mov	r0, r3
 800c00a:	f7f8 fdca 	bl	8004ba2 <lwip_htonl>
 800c00e:	4604      	mov	r4, r0
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	f7f8 fdc3 	bl	8004ba2 <lwip_htonl>
 800c01c:	4603      	mov	r3, r0
 800c01e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c020:	2b00      	cmp	r3, #0
 800c022:	dbe6      	blt.n	800bff2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d103      	bne.n	800c042 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c048:	2bff      	cmp	r3, #255	; 0xff
 800c04a:	d007      	beq.n	800c05c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c052:	3301      	adds	r3, #1
 800c054:	b2da      	uxtb	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd90      	pop	{r4, r7, pc}
 800c06c:	080119bc 	.word	0x080119bc
 800c070:	0801205c 	.word	0x0801205c
 800c074:	08011a10 	.word	0x08011a10

0800c078 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <tcp_rexmit_fast+0x1c>
 800c086:	4b2a      	ldr	r3, [pc, #168]	; (800c130 <tcp_rexmit_fast+0xb8>)
 800c088:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c08c:	4929      	ldr	r1, [pc, #164]	; (800c134 <tcp_rexmit_fast+0xbc>)
 800c08e:	482a      	ldr	r0, [pc, #168]	; (800c138 <tcp_rexmit_fast+0xc0>)
 800c090:	f003 fa18 	bl	800f4c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d044      	beq.n	800c126 <tcp_rexmit_fast+0xae>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	8b5b      	ldrh	r3, [r3, #26]
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d13e      	bne.n	800c126 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff ff79 	bl	800bfa0 <tcp_rexmit>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d138      	bne.n	800c126 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	bf28      	it	cs
 800c0c4:	4613      	movcs	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	0fda      	lsrs	r2, r3, #31
 800c0ca:	4413      	add	r3, r2
 800c0cc:	105b      	asrs	r3, r3, #1
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0dc:	461a      	mov	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d206      	bcs.n	800c0f6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c100:	4619      	mov	r1, r3
 800c102:	0049      	lsls	r1, r1, #1
 800c104:	440b      	add	r3, r1
 800c106:	b29b      	uxth	r3, r3
 800c108:	4413      	add	r3, r2
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8b5b      	ldrh	r3, [r3, #26]
 800c116:	f043 0304 	orr.w	r3, r3, #4
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	080119bc 	.word	0x080119bc
 800c134:	08012074 	.word	0x08012074
 800c138:	08011a10 	.word	0x08011a10

0800c13c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	460b      	mov	r3, r1
 800c148:	817b      	strh	r3, [r7, #10]
 800c14a:	4613      	mov	r3, r2
 800c14c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c14e:	897a      	ldrh	r2, [r7, #10]
 800c150:	893b      	ldrh	r3, [r7, #8]
 800c152:	4413      	add	r3, r2
 800c154:	b29b      	uxth	r3, r3
 800c156:	3314      	adds	r3, #20
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c15e:	4619      	mov	r1, r3
 800c160:	2022      	movs	r0, #34	; 0x22
 800c162:	f7f9 fd83 	bl	8005c6c <pbuf_alloc>
 800c166:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d04d      	beq.n	800c20a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c16e:	897b      	ldrh	r3, [r7, #10]
 800c170:	3313      	adds	r3, #19
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	8952      	ldrh	r2, [r2, #10]
 800c176:	4293      	cmp	r3, r2
 800c178:	db06      	blt.n	800c188 <tcp_output_alloc_header_common+0x4c>
 800c17a:	4b26      	ldr	r3, [pc, #152]	; (800c214 <tcp_output_alloc_header_common+0xd8>)
 800c17c:	f240 7223 	movw	r2, #1827	; 0x723
 800c180:	4925      	ldr	r1, [pc, #148]	; (800c218 <tcp_output_alloc_header_common+0xdc>)
 800c182:	4826      	ldr	r0, [pc, #152]	; (800c21c <tcp_output_alloc_header_common+0xe0>)
 800c184:	f003 f99e 	bl	800f4c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c18e:	8c3b      	ldrh	r3, [r7, #32]
 800c190:	4618      	mov	r0, r3
 800c192:	f7f8 fcf1 	bl	8004b78 <lwip_htons>
 800c196:	4603      	mov	r3, r0
 800c198:	461a      	mov	r2, r3
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c19e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f8 fce9 	bl	8004b78 <lwip_htons>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f7f8 fcf4 	bl	8004ba2 <lwip_htonl>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c1c0:	897b      	ldrh	r3, [r7, #10]
 800c1c2:	089b      	lsrs	r3, r3, #2
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3305      	adds	r3, #5
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	031b      	lsls	r3, r3, #12
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7f8 fccd 	bl	8004b78 <lwip_htons>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7f8 fcc5 	bl	8004b78 <lwip_htons>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	741a      	strb	r2, [r3, #16]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2200      	movs	r2, #0
 800c204:	749a      	strb	r2, [r3, #18]
 800c206:	2200      	movs	r2, #0
 800c208:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c20a:	697b      	ldr	r3, [r7, #20]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	080119bc 	.word	0x080119bc
 800c218:	08012094 	.word	0x08012094
 800c21c:	08011a10 	.word	0x08011a10

0800c220 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c220:	b5b0      	push	{r4, r5, r7, lr}
 800c222:	b08a      	sub	sp, #40	; 0x28
 800c224:	af04      	add	r7, sp, #16
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	607b      	str	r3, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	817b      	strh	r3, [r7, #10]
 800c22e:	4613      	mov	r3, r2
 800c230:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <tcp_output_alloc_header+0x26>
 800c238:	4b15      	ldr	r3, [pc, #84]	; (800c290 <tcp_output_alloc_header+0x70>)
 800c23a:	f240 7242 	movw	r2, #1858	; 0x742
 800c23e:	4915      	ldr	r1, [pc, #84]	; (800c294 <tcp_output_alloc_header+0x74>)
 800c240:	4815      	ldr	r0, [pc, #84]	; (800c298 <tcp_output_alloc_header+0x78>)
 800c242:	f003 f93f 	bl	800f4c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	8adb      	ldrh	r3, [r3, #22]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	8b12      	ldrh	r2, [r2, #24]
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c256:	893d      	ldrh	r5, [r7, #8]
 800c258:	897c      	ldrh	r4, [r7, #10]
 800c25a:	9103      	str	r1, [sp, #12]
 800c25c:	2110      	movs	r1, #16
 800c25e:	9102      	str	r1, [sp, #8]
 800c260:	9201      	str	r2, [sp, #4]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	462a      	mov	r2, r5
 800c268:	4621      	mov	r1, r4
 800c26a:	f7ff ff67 	bl	800c13c <tcp_output_alloc_header_common>
 800c26e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d006      	beq.n	800c284 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c27e:	441a      	add	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c284:	697b      	ldr	r3, [r7, #20]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bdb0      	pop	{r4, r5, r7, pc}
 800c28e:	bf00      	nop
 800c290:	080119bc 	.word	0x080119bc
 800c294:	080120c4 	.word	0x080120c4
 800c298:	08011a10 	.word	0x08011a10

0800c29c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	71fb      	strb	r3, [r7, #7]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d106      	bne.n	800c2ca <tcp_output_fill_options+0x2e>
 800c2bc:	4b12      	ldr	r3, [pc, #72]	; (800c308 <tcp_output_fill_options+0x6c>)
 800c2be:	f240 7256 	movw	r2, #1878	; 0x756
 800c2c2:	4912      	ldr	r1, [pc, #72]	; (800c30c <tcp_output_fill_options+0x70>)
 800c2c4:	4812      	ldr	r0, [pc, #72]	; (800c310 <tcp_output_fill_options+0x74>)
 800c2c6:	f003 f8fd 	bl	800f4c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	3314      	adds	r3, #20
 800c2d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c2d6:	8bfb      	ldrh	r3, [r7, #30]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	461a      	mov	r2, r3
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	f003 0304 	and.w	r3, r3, #4
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3314      	adds	r3, #20
 800c2e8:	69ba      	ldr	r2, [r7, #24]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d006      	beq.n	800c300 <tcp_output_fill_options+0x64>
 800c2f2:	4b05      	ldr	r3, [pc, #20]	; (800c308 <tcp_output_fill_options+0x6c>)
 800c2f4:	f240 7275 	movw	r2, #1909	; 0x775
 800c2f8:	4906      	ldr	r1, [pc, #24]	; (800c314 <tcp_output_fill_options+0x78>)
 800c2fa:	4805      	ldr	r0, [pc, #20]	; (800c310 <tcp_output_fill_options+0x74>)
 800c2fc:	f003 f8e2 	bl	800f4c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c300:	bf00      	nop
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	080119bc 	.word	0x080119bc
 800c30c:	080120ec 	.word	0x080120ec
 800c310:	08011a10 	.word	0x08011a10
 800c314:	08011fe4 	.word	0x08011fe4

0800c318 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af04      	add	r7, sp, #16
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <tcp_output_control_segment+0x22>
 800c32c:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <tcp_output_control_segment+0x88>)
 800c32e:	f240 7287 	movw	r2, #1927	; 0x787
 800c332:	491c      	ldr	r1, [pc, #112]	; (800c3a4 <tcp_output_control_segment+0x8c>)
 800c334:	481c      	ldr	r0, [pc, #112]	; (800c3a8 <tcp_output_control_segment+0x90>)
 800c336:	f003 f8c5 	bl	800f4c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7fe fae8 	bl	800a914 <tcp_route>
 800c344:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c34c:	23fc      	movs	r3, #252	; 0xfc
 800c34e:	75fb      	strb	r3, [r7, #23]
 800c350:	e01c      	b.n	800c38c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	7adb      	ldrb	r3, [r3, #11]
 800c35c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	7a9b      	ldrb	r3, [r3, #10]
 800c362:	757b      	strb	r3, [r7, #21]
 800c364:	e003      	b.n	800c36e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c366:	23ff      	movs	r3, #255	; 0xff
 800c368:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c36e:	7dba      	ldrb	r2, [r7, #22]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	2306      	movs	r3, #6
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	7d7b      	ldrb	r3, [r7, #21]
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	68b8      	ldr	r0, [r7, #8]
 800c384:	f001 ff70 	bl	800e268 <ip4_output_if>
 800c388:	4603      	mov	r3, r0
 800c38a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c38c:	68b8      	ldr	r0, [r7, #8]
 800c38e:	f7f9 ff51 	bl	8006234 <pbuf_free>
  return err;
 800c392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	080119bc 	.word	0x080119bc
 800c3a4:	08012114 	.word	0x08012114
 800c3a8:	08011a10 	.word	0x08011a10

0800c3ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c3ac:	b590      	push	{r4, r7, lr}
 800c3ae:	b08b      	sub	sp, #44	; 0x2c
 800c3b0:	af04      	add	r7, sp, #16
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d106      	bne.n	800c3ce <tcp_rst+0x22>
 800c3c0:	4b1f      	ldr	r3, [pc, #124]	; (800c440 <tcp_rst+0x94>)
 800c3c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c3c6:	491f      	ldr	r1, [pc, #124]	; (800c444 <tcp_rst+0x98>)
 800c3c8:	481f      	ldr	r0, [pc, #124]	; (800c448 <tcp_rst+0x9c>)
 800c3ca:	f003 f87b 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <tcp_rst+0x36>
 800c3d4:	4b1a      	ldr	r3, [pc, #104]	; (800c440 <tcp_rst+0x94>)
 800c3d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c3da:	491c      	ldr	r1, [pc, #112]	; (800c44c <tcp_rst+0xa0>)
 800c3dc:	481a      	ldr	r0, [pc, #104]	; (800c448 <tcp_rst+0x9c>)
 800c3de:	f003 f871 	bl	800f4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3e6:	f246 0308 	movw	r3, #24584	; 0x6008
 800c3ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	b29c      	uxth	r4, r3
 800c3f0:	68b8      	ldr	r0, [r7, #8]
 800c3f2:	f7f8 fbd6 	bl	8004ba2 <lwip_htonl>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	8abb      	ldrh	r3, [r7, #20]
 800c3fa:	9303      	str	r3, [sp, #12]
 800c3fc:	2314      	movs	r3, #20
 800c3fe:	9302      	str	r3, [sp, #8]
 800c400:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	2200      	movs	r2, #0
 800c40c:	4621      	mov	r1, r4
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff fe94 	bl	800c13c <tcp_output_alloc_header_common>
 800c414:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00c      	beq.n	800c436 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	2200      	movs	r2, #0
 800c420:	6939      	ldr	r1, [r7, #16]
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff ff3a 	bl	800c29c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	6939      	ldr	r1, [r7, #16]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff ff72 	bl	800c318 <tcp_output_control_segment>
 800c434:	e000      	b.n	800c438 <tcp_rst+0x8c>
    return;
 800c436:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd90      	pop	{r4, r7, pc}
 800c43e:	bf00      	nop
 800c440:	080119bc 	.word	0x080119bc
 800c444:	08012140 	.word	0x08012140
 800c448:	08011a10 	.word	0x08011a10
 800c44c:	0801215c 	.word	0x0801215c

0800c450 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c450:	b590      	push	{r4, r7, lr}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_send_empty_ack+0x24>
 800c466:	4b28      	ldr	r3, [pc, #160]	; (800c508 <tcp_send_empty_ack+0xb8>)
 800c468:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c46c:	4927      	ldr	r1, [pc, #156]	; (800c50c <tcp_send_empty_ack+0xbc>)
 800c46e:	4828      	ldr	r0, [pc, #160]	; (800c510 <tcp_send_empty_ack+0xc0>)
 800c470:	f003 f828 	bl	800f4c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f003 0304 	and.w	r3, r3, #4
 800c47e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c480:	7d7b      	ldrb	r3, [r7, #21]
 800c482:	b29c      	uxth	r4, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f8 fb8a 	bl	8004ba2 <lwip_htonl>
 800c48e:	4603      	mov	r3, r0
 800c490:	2200      	movs	r2, #0
 800c492:	4621      	mov	r1, r4
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff fec3 	bl	800c220 <tcp_output_alloc_header>
 800c49a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	8b5b      	ldrh	r3, [r3, #26]
 800c4a6:	f043 0303 	orr.w	r3, r3, #3
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c4b0:	f06f 0301 	mvn.w	r3, #1
 800c4b4:	e023      	b.n	800c4fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c4b6:	7dbb      	ldrb	r3, [r7, #22]
 800c4b8:	7dfa      	ldrb	r2, [r7, #23]
 800c4ba:	6939      	ldr	r1, [r7, #16]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff feed 	bl	800c29c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	6939      	ldr	r1, [r7, #16]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff ff24 	bl	800c318 <tcp_output_control_segment>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	8b5b      	ldrh	r3, [r3, #26]
 800c4e0:	f043 0303 	orr.w	r3, r3, #3
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	835a      	strh	r2, [r3, #26]
 800c4ea:	e006      	b.n	800c4fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f023 0303 	bic.w	r3, r3, #3
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd90      	pop	{r4, r7, pc}
 800c506:	bf00      	nop
 800c508:	080119bc 	.word	0x080119bc
 800c50c:	08012178 	.word	0x08012178
 800c510:	08011a10 	.word	0x08011a10

0800c514 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c514:	b590      	push	{r4, r7, lr}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c51c:	2300      	movs	r3, #0
 800c51e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <tcp_keepalive+0x20>
 800c526:	4b18      	ldr	r3, [pc, #96]	; (800c588 <tcp_keepalive+0x74>)
 800c528:	f640 0224 	movw	r2, #2084	; 0x824
 800c52c:	4917      	ldr	r1, [pc, #92]	; (800c58c <tcp_keepalive+0x78>)
 800c52e:	4818      	ldr	r0, [pc, #96]	; (800c590 <tcp_keepalive+0x7c>)
 800c530:	f002 ffc8 	bl	800f4c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	b29c      	uxth	r4, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53c:	3b01      	subs	r3, #1
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f8 fb2f 	bl	8004ba2 <lwip_htonl>
 800c544:	4603      	mov	r3, r0
 800c546:	2200      	movs	r2, #0
 800c548:	4621      	mov	r1, r4
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff fe68 	bl	800c220 <tcp_output_alloc_header>
 800c550:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c558:	f04f 33ff 	mov.w	r3, #4294967295
 800c55c:	e010      	b.n	800c580 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2200      	movs	r2, #0
 800c562:	6939      	ldr	r1, [r7, #16]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff fe99 	bl	800c29c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3304      	adds	r3, #4
 800c570:	6939      	ldr	r1, [r7, #16]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff fed0 	bl	800c318 <tcp_output_control_segment>
 800c578:	4603      	mov	r3, r0
 800c57a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	371c      	adds	r7, #28
 800c584:	46bd      	mov	sp, r7
 800c586:	bd90      	pop	{r4, r7, pc}
 800c588:	080119bc 	.word	0x080119bc
 800c58c:	08012198 	.word	0x08012198
 800c590:	08011a10 	.word	0x08011a10

0800c594 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c594:	b590      	push	{r4, r7, lr}
 800c596:	b08b      	sub	sp, #44	; 0x2c
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d106      	bne.n	800c5b6 <tcp_zero_window_probe+0x22>
 800c5a8:	4b4c      	ldr	r3, [pc, #304]	; (800c6dc <tcp_zero_window_probe+0x148>)
 800c5aa:	f640 024f 	movw	r2, #2127	; 0x84f
 800c5ae:	494c      	ldr	r1, [pc, #304]	; (800c6e0 <tcp_zero_window_probe+0x14c>)
 800c5b0:	484c      	ldr	r0, [pc, #304]	; (800c6e4 <tcp_zero_window_probe+0x150>)
 800c5b2:	f002 ff87 	bl	800f4c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c5bc:	6a3b      	ldr	r3, [r7, #32]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e086      	b.n	800c6d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5cc:	2bff      	cmp	r3, #255	; 0xff
 800c5ce:	d007      	beq.n	800c5e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	899b      	ldrh	r3, [r3, #12]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7f8 fac5 	bl	8004b78 <lwip_htons>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <tcp_zero_window_probe+0x72>
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	891b      	ldrh	r3, [r3, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <tcp_zero_window_probe+0x72>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <tcp_zero_window_probe+0x74>
 800c606:	2300      	movs	r3, #0
 800c608:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c60a:	7ffb      	ldrb	r3, [r7, #31]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bf0c      	ite	eq
 800c610:	2301      	moveq	r3, #1
 800c612:	2300      	movne	r3, #0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c61c:	b299      	uxth	r1, r3
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	8bba      	ldrh	r2, [r7, #28]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fdfa 	bl	800c220 <tcp_output_alloc_header>
 800c62c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d102      	bne.n	800c63a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c634:	f04f 33ff 	mov.w	r3, #4294967295
 800c638:	e04c      	b.n	800c6d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c640:	7ffb      	ldrb	r3, [r7, #31]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d011      	beq.n	800c66a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	899b      	ldrh	r3, [r3, #12]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c652:	b21c      	sxth	r4, r3
 800c654:	2011      	movs	r0, #17
 800c656:	f7f8 fa8f 	bl	8004b78 <lwip_htons>
 800c65a:	4603      	mov	r3, r0
 800c65c:	b21b      	sxth	r3, r3
 800c65e:	4323      	orrs	r3, r4
 800c660:	b21b      	sxth	r3, r3
 800c662:	b29a      	uxth	r2, r3
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	819a      	strh	r2, [r3, #12]
 800c668:	e010      	b.n	800c68c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	3314      	adds	r3, #20
 800c670:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c672:	6a3b      	ldr	r3, [r7, #32]
 800c674:	6858      	ldr	r0, [r3, #4]
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	891a      	ldrh	r2, [r3, #8]
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	891b      	ldrh	r3, [r3, #8]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	b29b      	uxth	r3, r3
 800c684:	2201      	movs	r2, #1
 800c686:	6939      	ldr	r1, [r7, #16]
 800c688:	f7f9 ffbe 	bl	8006608 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f7f8 fa85 	bl	8004ba2 <lwip_htonl>
 800c698:	4603      	mov	r3, r0
 800c69a:	3301      	adds	r3, #1
 800c69c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	da02      	bge.n	800c6b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	69b9      	ldr	r1, [r7, #24]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fdef 	bl	800c29c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	69b9      	ldr	r1, [r7, #24]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff fe26 	bl	800c318 <tcp_output_control_segment>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c6d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	372c      	adds	r7, #44	; 0x2c
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd90      	pop	{r4, r7, pc}
 800c6dc:	080119bc 	.word	0x080119bc
 800c6e0:	080121b4 	.word	0x080121b4
 800c6e4:	08011a10 	.word	0x08011a10

0800c6e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6f0:	f7fa f878 	bl	80067e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6f4:	4b0a      	ldr	r3, [pc, #40]	; (800c720 <tcpip_tcp_timer+0x38>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d103      	bne.n	800c704 <tcpip_tcp_timer+0x1c>
 800c6fc:	4b09      	ldr	r3, [pc, #36]	; (800c724 <tcpip_tcp_timer+0x3c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d005      	beq.n	800c710 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c704:	2200      	movs	r2, #0
 800c706:	4908      	ldr	r1, [pc, #32]	; (800c728 <tcpip_tcp_timer+0x40>)
 800c708:	20fa      	movs	r0, #250	; 0xfa
 800c70a:	f000 f8f3 	bl	800c8f4 <sys_timeout>
 800c70e:	e003      	b.n	800c718 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c710:	4b06      	ldr	r3, [pc, #24]	; (800c72c <tcpip_tcp_timer+0x44>)
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
  }
}
 800c716:	bf00      	nop
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200082a8 	.word	0x200082a8
 800c724:	200082ac 	.word	0x200082ac
 800c728:	0800c6e9 	.word	0x0800c6e9
 800c72c:	200082f4 	.word	0x200082f4

0800c730 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c734:	4b0a      	ldr	r3, [pc, #40]	; (800c760 <tcp_timer_needed+0x30>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10f      	bne.n	800c75c <tcp_timer_needed+0x2c>
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <tcp_timer_needed+0x34>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d103      	bne.n	800c74c <tcp_timer_needed+0x1c>
 800c744:	4b08      	ldr	r3, [pc, #32]	; (800c768 <tcp_timer_needed+0x38>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d007      	beq.n	800c75c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c74c:	4b04      	ldr	r3, [pc, #16]	; (800c760 <tcp_timer_needed+0x30>)
 800c74e:	2201      	movs	r2, #1
 800c750:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c752:	2200      	movs	r2, #0
 800c754:	4905      	ldr	r1, [pc, #20]	; (800c76c <tcp_timer_needed+0x3c>)
 800c756:	20fa      	movs	r0, #250	; 0xfa
 800c758:	f000 f8cc 	bl	800c8f4 <sys_timeout>
  }
}
 800c75c:	bf00      	nop
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	200082f4 	.word	0x200082f4
 800c764:	200082a8 	.word	0x200082a8
 800c768:	200082ac 	.word	0x200082ac
 800c76c:	0800c6e9 	.word	0x0800c6e9

0800c770 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c77c:	2006      	movs	r0, #6
 800c77e:	f7f8 fe73 	bl	8005468 <memp_malloc>
 800c782:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d151      	bne.n	800c834 <sys_timeout_abs+0xc4>
 800c790:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <sys_timeout_abs+0xcc>)
 800c792:	22be      	movs	r2, #190	; 0xbe
 800c794:	492a      	ldr	r1, [pc, #168]	; (800c840 <sys_timeout_abs+0xd0>)
 800c796:	482b      	ldr	r0, [pc, #172]	; (800c844 <sys_timeout_abs+0xd4>)
 800c798:	f002 fe94 	bl	800f4c4 <iprintf>
    return;
 800c79c:	e04a      	b.n	800c834 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c7b6:	4b24      	ldr	r3, [pc, #144]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d103      	bne.n	800c7c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c7be:	4a22      	ldr	r2, [pc, #136]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6013      	str	r3, [r2, #0]
    return;
 800c7c4:	e037      	b.n	800c836 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	4b1f      	ldr	r3, [pc, #124]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	0fdb      	lsrs	r3, r3, #31
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d007      	beq.n	800c7ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7de:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7e6:	4a18      	ldr	r2, [pc, #96]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	e023      	b.n	800c836 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7ee:	4b16      	ldr	r3, [pc, #88]	; (800c848 <sys_timeout_abs+0xd8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	e01a      	b.n	800c82c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00b      	beq.n	800c816 <sys_timeout_abs+0xa6>
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	0fdb      	lsrs	r3, r3, #31
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d007      	beq.n	800c826 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	601a      	str	r2, [r3, #0]
        break;
 800c824:	e007      	b.n	800c836 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	617b      	str	r3, [r7, #20]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e1      	bne.n	800c7f6 <sys_timeout_abs+0x86>
 800c832:	e000      	b.n	800c836 <sys_timeout_abs+0xc6>
    return;
 800c834:	bf00      	nop
      }
    }
  }
}
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	080121d8 	.word	0x080121d8
 800c840:	0801220c 	.word	0x0801220c
 800c844:	0801224c 	.word	0x0801224c
 800c848:	200082ec 	.word	0x200082ec

0800c84c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	4798      	blx	r3

  now = sys_now();
 800c85e:	f7f7 ff93 	bl	8004788 <sys_now>
 800c862:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <lwip_cyclic_timer+0x5c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4413      	add	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	0fdb      	lsrs	r3, r3, #31
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d009      	beq.n	800c896 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	4413      	add	r3, r2
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	4907      	ldr	r1, [pc, #28]	; (800c8ac <lwip_cyclic_timer+0x60>)
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff ff6e 	bl	800c770 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c894:	e004      	b.n	800c8a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4904      	ldr	r1, [pc, #16]	; (800c8ac <lwip_cyclic_timer+0x60>)
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff ff68 	bl	800c770 <sys_timeout_abs>
}
 800c8a0:	bf00      	nop
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	200082f0 	.word	0x200082f0
 800c8ac:	0800c84d 	.word	0x0800c84d

0800c8b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	e00e      	b.n	800c8da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c8bc:	4a0b      	ldr	r2, [pc, #44]	; (800c8ec <sys_timeouts_init+0x3c>)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4a08      	ldr	r2, [pc, #32]	; (800c8ec <sys_timeouts_init+0x3c>)
 800c8ca:	4413      	add	r3, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4908      	ldr	r1, [pc, #32]	; (800c8f0 <sys_timeouts_init+0x40>)
 800c8d0:	f000 f810 	bl	800c8f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	607b      	str	r3, [r7, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d9ed      	bls.n	800c8bc <sys_timeouts_init+0xc>
  }
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	08012dc4 	.word	0x08012dc4
 800c8f0:	0800c84d 	.word	0x0800c84d

0800c8f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c906:	d306      	bcc.n	800c916 <sys_timeout+0x22>
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <sys_timeout+0x40>)
 800c90a:	f240 1229 	movw	r2, #297	; 0x129
 800c90e:	490a      	ldr	r1, [pc, #40]	; (800c938 <sys_timeout+0x44>)
 800c910:	480a      	ldr	r0, [pc, #40]	; (800c93c <sys_timeout+0x48>)
 800c912:	f002 fdd7 	bl	800f4c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c916:	f7f7 ff37 	bl	8004788 <sys_now>
 800c91a:	4602      	mov	r2, r0
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	68b9      	ldr	r1, [r7, #8]
 800c926:	6978      	ldr	r0, [r7, #20]
 800c928:	f7ff ff22 	bl	800c770 <sys_timeout_abs>
#endif
}
 800c92c:	bf00      	nop
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	080121d8 	.word	0x080121d8
 800c938:	08012274 	.word	0x08012274
 800c93c:	0801224c 	.word	0x0801224c

0800c940 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c946:	f7f7 ff1f 	bl	8004788 <sys_now>
 800c94a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c94c:	4b1a      	ldr	r3, [pc, #104]	; (800c9b8 <sys_check_timeouts+0x78>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <sys_check_timeouts+0x1a>
 800c956:	f7f9 f933 	bl	8005bc0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c95a:	4b18      	ldr	r3, [pc, #96]	; (800c9bc <sys_check_timeouts+0x7c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d022      	beq.n	800c9ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	0fdb      	lsrs	r3, r3, #31
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d11a      	bne.n	800c9b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a0f      	ldr	r2, [pc, #60]	; (800c9bc <sys_check_timeouts+0x7c>)
 800c980:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	4a0b      	ldr	r2, [pc, #44]	; (800c9c0 <sys_check_timeouts+0x80>)
 800c994:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	2006      	movs	r0, #6
 800c99a:	f7f8 fdd5 	bl	8005548 <memp_free>
    if (handler != NULL) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0d3      	beq.n	800c94c <sys_check_timeouts+0xc>
      handler(arg);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6838      	ldr	r0, [r7, #0]
 800c9a8:	4798      	blx	r3
  do {
 800c9aa:	e7cf      	b.n	800c94c <sys_check_timeouts+0xc>
      return;
 800c9ac:	bf00      	nop
 800c9ae:	e000      	b.n	800c9b2 <sys_check_timeouts+0x72>
      return;
 800c9b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20008299 	.word	0x20008299
 800c9bc:	200082ec 	.word	0x200082ec
 800c9c0:	200082f0 	.word	0x200082f0

0800c9c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c9c8:	f002 fc7c 	bl	800f2c4 <rand>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <udp_init+0x20>)
 800c9de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9e0:	bf00      	nop
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20000028 	.word	0x20000028

0800c9e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d105      	bne.n	800ca08 <udp_input_local_match+0x20>
 800c9fc:	4b27      	ldr	r3, [pc, #156]	; (800ca9c <udp_input_local_match+0xb4>)
 800c9fe:	2287      	movs	r2, #135	; 0x87
 800ca00:	4927      	ldr	r1, [pc, #156]	; (800caa0 <udp_input_local_match+0xb8>)
 800ca02:	4828      	ldr	r0, [pc, #160]	; (800caa4 <udp_input_local_match+0xbc>)
 800ca04:	f002 fd5e 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d105      	bne.n	800ca1a <udp_input_local_match+0x32>
 800ca0e:	4b23      	ldr	r3, [pc, #140]	; (800ca9c <udp_input_local_match+0xb4>)
 800ca10:	2288      	movs	r2, #136	; 0x88
 800ca12:	4925      	ldr	r1, [pc, #148]	; (800caa8 <udp_input_local_match+0xc0>)
 800ca14:	4823      	ldr	r0, [pc, #140]	; (800caa4 <udp_input_local_match+0xbc>)
 800ca16:	f002 fd55 	bl	800f4c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	7a1b      	ldrb	r3, [r3, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00b      	beq.n	800ca3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	7a1a      	ldrb	r2, [r3, #8]
 800ca26:	4b21      	ldr	r3, [pc, #132]	; (800caac <udp_input_local_match+0xc4>)
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca2e:	3301      	adds	r3, #1
 800ca30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d001      	beq.n	800ca3a <udp_input_local_match+0x52>
    return 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	e02b      	b.n	800ca92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d018      	beq.n	800ca72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d013      	beq.n	800ca6e <udp_input_local_match+0x86>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00f      	beq.n	800ca6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca4e:	4b17      	ldr	r3, [pc, #92]	; (800caac <udp_input_local_match+0xc4>)
 800ca50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca56:	d00a      	beq.n	800ca6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <udp_input_local_match+0xc4>)
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	405a      	eors	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	3308      	adds	r3, #8
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d110      	bne.n	800ca90 <udp_input_local_match+0xa8>
          return 1;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e00f      	b.n	800ca92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d009      	beq.n	800ca8c <udp_input_local_match+0xa4>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <udp_input_local_match+0xa4>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <udp_input_local_match+0xc4>)
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d101      	bne.n	800ca90 <udp_input_local_match+0xa8>
        return 1;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e000      	b.n	800ca92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	080122c0 	.word	0x080122c0
 800caa0:	080122f0 	.word	0x080122f0
 800caa4:	08012314 	.word	0x08012314
 800caa8:	0801233c 	.word	0x0801233c
 800caac:	20004d2c 	.word	0x20004d2c

0800cab0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b08d      	sub	sp, #52	; 0x34
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d105      	bne.n	800cad0 <udp_input+0x20>
 800cac4:	4b7c      	ldr	r3, [pc, #496]	; (800ccb8 <udp_input+0x208>)
 800cac6:	22cf      	movs	r2, #207	; 0xcf
 800cac8:	497c      	ldr	r1, [pc, #496]	; (800ccbc <udp_input+0x20c>)
 800caca:	487d      	ldr	r0, [pc, #500]	; (800ccc0 <udp_input+0x210>)
 800cacc:	f002 fcfa 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d105      	bne.n	800cae2 <udp_input+0x32>
 800cad6:	4b78      	ldr	r3, [pc, #480]	; (800ccb8 <udp_input+0x208>)
 800cad8:	22d0      	movs	r2, #208	; 0xd0
 800cada:	497a      	ldr	r1, [pc, #488]	; (800ccc4 <udp_input+0x214>)
 800cadc:	4878      	ldr	r0, [pc, #480]	; (800ccc0 <udp_input+0x210>)
 800cade:	f002 fcf1 	bl	800f4c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	895b      	ldrh	r3, [r3, #10]
 800cae6:	2b07      	cmp	r3, #7
 800cae8:	d803      	bhi.n	800caf2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f9 fba2 	bl	8006234 <pbuf_free>
    goto end;
 800caf0:	e0de      	b.n	800ccb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800caf8:	4b73      	ldr	r3, [pc, #460]	; (800ccc8 <udp_input+0x218>)
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	4a72      	ldr	r2, [pc, #456]	; (800ccc8 <udp_input+0x218>)
 800cafe:	6812      	ldr	r2, [r2, #0]
 800cb00:	4611      	mov	r1, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f001 fc88 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f8 f830 	bl	8004b78 <lwip_htons>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	885b      	ldrh	r3, [r3, #2]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f8 f828 	bl	8004b78 <lwip_htons>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb38:	4b64      	ldr	r3, [pc, #400]	; (800cccc <udp_input+0x21c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb3e:	e054      	b.n	800cbea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	8a5b      	ldrh	r3, [r3, #18]
 800cb44:	89fa      	ldrh	r2, [r7, #14]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d14a      	bne.n	800cbe0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cb4a:	7cfb      	ldrb	r3, [r7, #19]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb52:	f7ff ff49 	bl	800c9e8 <udp_input_local_match>
 800cb56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d041      	beq.n	800cbe0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	7c1b      	ldrb	r3, [r3, #16]
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11d      	bne.n	800cba4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	e017      	b.n	800cba4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cb74:	7cfb      	ldrb	r3, [r7, #19]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d014      	beq.n	800cba4 <udp_input+0xf4>
 800cb7a:	4b53      	ldr	r3, [pc, #332]	; (800ccc8 <udp_input+0x218>)
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb82:	d10f      	bne.n	800cba4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d008      	beq.n	800cba4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d101      	bne.n	800cba4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	8a9b      	ldrh	r3, [r3, #20]
 800cba8:	8a3a      	ldrh	r2, [r7, #16]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	4b43      	ldr	r3, [pc, #268]	; (800ccc8 <udp_input+0x218>)
 800cbbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d10e      	bne.n	800cbe0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d014      	beq.n	800cbf2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	68da      	ldr	r2, [r3, #12]
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cbd0:	4b3e      	ldr	r3, [pc, #248]	; (800cccc <udp_input+0x21c>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cbd8:	4a3c      	ldr	r2, [pc, #240]	; (800cccc <udp_input+0x21c>)
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cbde:	e008      	b.n	800cbf2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1a7      	bne.n	800cb40 <udp_input+0x90>
 800cbf0:	e000      	b.n	800cbf4 <udp_input+0x144>
        break;
 800cbf2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <udp_input+0x14e>
    pcb = uncon_pcb;
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <udp_input+0x15a>
    for_us = 1;
 800cc04:	2301      	movs	r3, #1
 800cc06:	76fb      	strb	r3, [r7, #27]
 800cc08:	e00a      	b.n	800cc20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	4b2d      	ldr	r3, [pc, #180]	; (800ccc8 <udp_input+0x218>)
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bf0c      	ite	eq
 800cc18:	2301      	moveq	r3, #1
 800cc1a:	2300      	movne	r3, #0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cc20:	7efb      	ldrb	r3, [r7, #27]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d041      	beq.n	800ccaa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cc26:	2108      	movs	r1, #8
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7f9 fa7d 	bl	8006128 <pbuf_remove_header>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00a      	beq.n	800cc4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cc34:	4b20      	ldr	r3, [pc, #128]	; (800ccb8 <udp_input+0x208>)
 800cc36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cc3a:	4925      	ldr	r1, [pc, #148]	; (800ccd0 <udp_input+0x220>)
 800cc3c:	4820      	ldr	r0, [pc, #128]	; (800ccc0 <udp_input+0x210>)
 800cc3e:	f002 fc41 	bl	800f4c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7f9 faf6 	bl	8006234 <pbuf_free>
      goto end;
 800cc48:	e032      	b.n	800ccb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d012      	beq.n	800cc76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00a      	beq.n	800cc6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	699c      	ldr	r4, [r3, #24]
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	69d8      	ldr	r0, [r3, #28]
 800cc60:	8a3b      	ldrh	r3, [r7, #16]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	4b1b      	ldr	r3, [pc, #108]	; (800ccd4 <udp_input+0x224>)
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cc6c:	e021      	b.n	800ccb2 <udp_input+0x202>
        pbuf_free(p);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7f9 fae0 	bl	8006234 <pbuf_free>
        goto end;
 800cc74:	e01c      	b.n	800ccb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cc76:	7cfb      	ldrb	r3, [r7, #19]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d112      	bne.n	800cca2 <udp_input+0x1f2>
 800cc7c:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <udp_input+0x218>)
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc84:	2be0      	cmp	r3, #224	; 0xe0
 800cc86:	d00c      	beq.n	800cca2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <udp_input+0x218>)
 800cc8a:	899b      	ldrh	r3, [r3, #12]
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21b      	sxth	r3, r3
 800cc92:	4619      	mov	r1, r3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7f9 faba 	bl	800620e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc9a:	2103      	movs	r1, #3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f001 f89b 	bl	800ddd8 <icmp_dest_unreach>
      pbuf_free(p);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f9 fac6 	bl	8006234 <pbuf_free>
  return;
 800cca8:	e003      	b.n	800ccb2 <udp_input+0x202>
    pbuf_free(p);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f9 fac2 	bl	8006234 <pbuf_free>
  return;
 800ccb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ccb2:	372c      	adds	r7, #44	; 0x2c
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd90      	pop	{r4, r7, pc}
 800ccb8:	080122c0 	.word	0x080122c0
 800ccbc:	08012364 	.word	0x08012364
 800ccc0:	08012314 	.word	0x08012314
 800ccc4:	0801237c 	.word	0x0801237c
 800ccc8:	20004d2c 	.word	0x20004d2c
 800cccc:	200082f8 	.word	0x200082f8
 800ccd0:	08012398 	.word	0x08012398
 800ccd4:	20004d3c 	.word	0x20004d3c

0800ccd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01e      	beq.n	800cd26 <udp_netif_ip_addr_changed+0x4e>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d01a      	beq.n	800cd26 <udp_netif_ip_addr_changed+0x4e>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d017      	beq.n	800cd26 <udp_netif_ip_addr_changed+0x4e>
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d013      	beq.n	800cd26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	; (800cd34 <udp_netif_ip_addr_changed+0x5c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	e00c      	b.n	800cd20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d103      	bne.n	800cd1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1ef      	bne.n	800cd06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	200082f8 	.word	0x200082f8

0800cd38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cd40:	4915      	ldr	r1, [pc, #84]	; (800cd98 <etharp_free_entry+0x60>)
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	4613      	mov	r3, r2
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	4413      	add	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	440b      	add	r3, r1
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d013      	beq.n	800cd7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cd54:	4910      	ldr	r1, [pc, #64]	; (800cd98 <etharp_free_entry+0x60>)
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	4413      	add	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	440b      	add	r3, r1
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7f9 fa65 	bl	8006234 <pbuf_free>
    arp_table[i].q = NULL;
 800cd6a:	490b      	ldr	r1, [pc, #44]	; (800cd98 <etharp_free_entry+0x60>)
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	4413      	add	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	440b      	add	r3, r1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cd7c:	4906      	ldr	r1, [pc, #24]	; (800cd98 <etharp_free_entry+0x60>)
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	4613      	mov	r3, r2
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	3314      	adds	r3, #20
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	200082fc 	.word	0x200082fc

0800cd9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cda2:	2300      	movs	r3, #0
 800cda4:	607b      	str	r3, [r7, #4]
 800cda6:	e096      	b.n	800ced6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cda8:	494f      	ldr	r1, [pc, #316]	; (800cee8 <etharp_tmr+0x14c>)
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	4613      	mov	r3, r2
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	4413      	add	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	440b      	add	r3, r1
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 8086 	beq.w	800ced0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cdc4:	4948      	ldr	r1, [pc, #288]	; (800cee8 <etharp_tmr+0x14c>)
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	440b      	add	r3, r1
 800cdd2:	3312      	adds	r3, #18
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	b298      	uxth	r0, r3
 800cdda:	4943      	ldr	r1, [pc, #268]	; (800cee8 <etharp_tmr+0x14c>)
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	3312      	adds	r3, #18
 800cdea:	4602      	mov	r2, r0
 800cdec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cdee:	493e      	ldr	r1, [pc, #248]	; (800cee8 <etharp_tmr+0x14c>)
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4413      	add	r3, r2
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3312      	adds	r3, #18
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ce04:	d215      	bcs.n	800ce32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce06:	4938      	ldr	r1, [pc, #224]	; (800cee8 <etharp_tmr+0x14c>)
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4413      	add	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	440b      	add	r3, r1
 800ce14:	3314      	adds	r3, #20
 800ce16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d10e      	bne.n	800ce3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ce1c:	4932      	ldr	r1, [pc, #200]	; (800cee8 <etharp_tmr+0x14c>)
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4613      	mov	r3, r2
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	4413      	add	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	440b      	add	r3, r1
 800ce2a:	3312      	adds	r3, #18
 800ce2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d903      	bls.n	800ce3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff ff80 	bl	800cd38 <etharp_free_entry>
 800ce38:	e04a      	b.n	800ced0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ce3a:	492b      	ldr	r1, [pc, #172]	; (800cee8 <etharp_tmr+0x14c>)
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	440b      	add	r3, r1
 800ce48:	3314      	adds	r3, #20
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d10a      	bne.n	800ce66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ce50:	4925      	ldr	r1, [pc, #148]	; (800cee8 <etharp_tmr+0x14c>)
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	4613      	mov	r3, r2
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4413      	add	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	440b      	add	r3, r1
 800ce5e:	3314      	adds	r3, #20
 800ce60:	2204      	movs	r2, #4
 800ce62:	701a      	strb	r2, [r3, #0]
 800ce64:	e034      	b.n	800ced0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ce66:	4920      	ldr	r1, [pc, #128]	; (800cee8 <etharp_tmr+0x14c>)
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	3314      	adds	r3, #20
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d10a      	bne.n	800ce92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ce7c:	491a      	ldr	r1, [pc, #104]	; (800cee8 <etharp_tmr+0x14c>)
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	3314      	adds	r3, #20
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	e01e      	b.n	800ced0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce92:	4915      	ldr	r1, [pc, #84]	; (800cee8 <etharp_tmr+0x14c>)
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	440b      	add	r3, r1
 800cea0:	3314      	adds	r3, #20
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d113      	bne.n	800ced0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cea8:	490f      	ldr	r1, [pc, #60]	; (800cee8 <etharp_tmr+0x14c>)
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	4613      	mov	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	440b      	add	r3, r1
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	4613      	mov	r3, r2
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	4413      	add	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	4a08      	ldr	r2, [pc, #32]	; (800cee8 <etharp_tmr+0x14c>)
 800cec6:	4413      	add	r3, r2
 800cec8:	3304      	adds	r3, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	f000 fe6e 	bl	800dbac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b09      	cmp	r3, #9
 800ceda:	f77f af65 	ble.w	800cda8 <etharp_tmr+0xc>
      }
    }
  }
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	200082fc 	.word	0x200082fc

0800ceec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	460b      	mov	r3, r1
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cefa:	230a      	movs	r3, #10
 800cefc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cefe:	230a      	movs	r3, #10
 800cf00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cf02:	230a      	movs	r3, #10
 800cf04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cf0a:	230a      	movs	r3, #10
 800cf0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	83bb      	strh	r3, [r7, #28]
 800cf12:	2300      	movs	r3, #0
 800cf14:	837b      	strh	r3, [r7, #26]
 800cf16:	2300      	movs	r3, #0
 800cf18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	843b      	strh	r3, [r7, #32]
 800cf1e:	e0ae      	b.n	800d07e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cf20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf24:	49a6      	ldr	r1, [pc, #664]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cf26:	4613      	mov	r3, r2
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	4413      	add	r3, r2
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	440b      	add	r3, r1
 800cf30:	3314      	adds	r3, #20
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cf36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf3a:	2b0a      	cmp	r3, #10
 800cf3c:	d105      	bne.n	800cf4a <etharp_find_entry+0x5e>
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cf44:	8c3b      	ldrh	r3, [r7, #32]
 800cf46:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf48:	e095      	b.n	800d076 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 8092 	beq.w	800d076 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d009      	beq.n	800cf6c <etharp_find_entry+0x80>
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d806      	bhi.n	800cf6c <etharp_find_entry+0x80>
 800cf5e:	4b99      	ldr	r3, [pc, #612]	; (800d1c4 <etharp_find_entry+0x2d8>)
 800cf60:	f240 1223 	movw	r2, #291	; 0x123
 800cf64:	4998      	ldr	r1, [pc, #608]	; (800d1c8 <etharp_find_entry+0x2dc>)
 800cf66:	4899      	ldr	r0, [pc, #612]	; (800d1cc <etharp_find_entry+0x2e0>)
 800cf68:	f002 faac 	bl	800f4c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d020      	beq.n	800cfb4 <etharp_find_entry+0xc8>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf7a:	4891      	ldr	r0, [pc, #580]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	4413      	add	r3, r2
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	4403      	add	r3, r0
 800cf86:	3304      	adds	r3, #4
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d112      	bne.n	800cfb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00c      	beq.n	800cfae <etharp_find_entry+0xc2>
 800cf94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf98:	4989      	ldr	r1, [pc, #548]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	440b      	add	r3, r1
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d102      	bne.n	800cfb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cfae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfb2:	e100      	b.n	800d1b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d140      	bne.n	800d03c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cfba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfbe:	4980      	ldr	r1, [pc, #512]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01a      	beq.n	800d006 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cfd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfd4:	497a      	ldr	r1, [pc, #488]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4413      	add	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	440b      	add	r3, r1
 800cfe0:	3312      	adds	r3, #18
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	8bba      	ldrh	r2, [r7, #28]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d845      	bhi.n	800d076 <etharp_find_entry+0x18a>
            old_queue = i;
 800cfea:	8c3b      	ldrh	r3, [r7, #32]
 800cfec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cfee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cff2:	4973      	ldr	r1, [pc, #460]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	440b      	add	r3, r1
 800cffe:	3312      	adds	r3, #18
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	83bb      	strh	r3, [r7, #28]
 800d004:	e037      	b.n	800d076 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d00a:	496d      	ldr	r1, [pc, #436]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d00c:	4613      	mov	r3, r2
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	4413      	add	r3, r2
 800d012:	00db      	lsls	r3, r3, #3
 800d014:	440b      	add	r3, r1
 800d016:	3312      	adds	r3, #18
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	8b7a      	ldrh	r2, [r7, #26]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d82a      	bhi.n	800d076 <etharp_find_entry+0x18a>
            old_pending = i;
 800d020:	8c3b      	ldrh	r3, [r7, #32]
 800d022:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d028:	4965      	ldr	r1, [pc, #404]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d02a:	4613      	mov	r3, r2
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	4413      	add	r3, r2
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	440b      	add	r3, r1
 800d034:	3312      	adds	r3, #18
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	837b      	strh	r3, [r7, #26]
 800d03a:	e01c      	b.n	800d076 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d919      	bls.n	800d076 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d046:	495e      	ldr	r1, [pc, #376]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d048:	4613      	mov	r3, r2
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	4413      	add	r3, r2
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	440b      	add	r3, r1
 800d052:	3312      	adds	r3, #18
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	8b3a      	ldrh	r2, [r7, #24]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d80c      	bhi.n	800d076 <etharp_find_entry+0x18a>
            old_stable = i;
 800d05c:	8c3b      	ldrh	r3, [r7, #32]
 800d05e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d064:	4956      	ldr	r1, [pc, #344]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d066:	4613      	mov	r3, r2
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	4413      	add	r3, r2
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	440b      	add	r3, r1
 800d070:	3312      	adds	r3, #18
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d076:	8c3b      	ldrh	r3, [r7, #32]
 800d078:	3301      	adds	r3, #1
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	843b      	strh	r3, [r7, #32]
 800d07e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d082:	2b09      	cmp	r3, #9
 800d084:	f77f af4c 	ble.w	800cf20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d108      	bne.n	800d0a4 <etharp_find_entry+0x1b8>
 800d092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d096:	2b0a      	cmp	r3, #10
 800d098:	d107      	bne.n	800d0aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d09a:	7afb      	ldrb	r3, [r7, #11]
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a8:	e085      	b.n	800d1b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d0aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d0ae:	2b09      	cmp	r3, #9
 800d0b0:	dc02      	bgt.n	800d0b8 <etharp_find_entry+0x1cc>
    i = empty;
 800d0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0b4:	843b      	strh	r3, [r7, #32]
 800d0b6:	e039      	b.n	800d12c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d0b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d0bc:	2b09      	cmp	r3, #9
 800d0be:	dc14      	bgt.n	800d0ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0c8:	493d      	ldr	r1, [pc, #244]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4413      	add	r3, r2
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	440b      	add	r3, r1
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d018      	beq.n	800d10c <etharp_find_entry+0x220>
 800d0da:	4b3a      	ldr	r3, [pc, #232]	; (800d1c4 <etharp_find_entry+0x2d8>)
 800d0dc:	f240 126d 	movw	r2, #365	; 0x16d
 800d0e0:	493b      	ldr	r1, [pc, #236]	; (800d1d0 <etharp_find_entry+0x2e4>)
 800d0e2:	483a      	ldr	r0, [pc, #232]	; (800d1cc <etharp_find_entry+0x2e0>)
 800d0e4:	f002 f9ee 	bl	800f4c4 <iprintf>
 800d0e8:	e010      	b.n	800d10c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d0ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d0ee:	2b09      	cmp	r3, #9
 800d0f0:	dc02      	bgt.n	800d0f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d0f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f4:	843b      	strh	r3, [r7, #32]
 800d0f6:	e009      	b.n	800d10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d0f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	dc02      	bgt.n	800d106 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d100:	8bfb      	ldrh	r3, [r7, #30]
 800d102:	843b      	strh	r3, [r7, #32]
 800d104:	e002      	b.n	800d10c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d106:	f04f 33ff 	mov.w	r3, #4294967295
 800d10a:	e054      	b.n	800d1b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d10c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d110:	2b09      	cmp	r3, #9
 800d112:	dd06      	ble.n	800d122 <etharp_find_entry+0x236>
 800d114:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <etharp_find_entry+0x2d8>)
 800d116:	f240 127f 	movw	r2, #383	; 0x17f
 800d11a:	492e      	ldr	r1, [pc, #184]	; (800d1d4 <etharp_find_entry+0x2e8>)
 800d11c:	482b      	ldr	r0, [pc, #172]	; (800d1cc <etharp_find_entry+0x2e0>)
 800d11e:	f002 f9d1 	bl	800f4c4 <iprintf>
    etharp_free_entry(i);
 800d122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff fe06 	bl	800cd38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d12c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d130:	2b09      	cmp	r3, #9
 800d132:	dd06      	ble.n	800d142 <etharp_find_entry+0x256>
 800d134:	4b23      	ldr	r3, [pc, #140]	; (800d1c4 <etharp_find_entry+0x2d8>)
 800d136:	f240 1283 	movw	r2, #387	; 0x183
 800d13a:	4926      	ldr	r1, [pc, #152]	; (800d1d4 <etharp_find_entry+0x2e8>)
 800d13c:	4823      	ldr	r0, [pc, #140]	; (800d1cc <etharp_find_entry+0x2e0>)
 800d13e:	f002 f9c1 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d146:	491e      	ldr	r1, [pc, #120]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d148:	4613      	mov	r3, r2
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	4413      	add	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	440b      	add	r3, r1
 800d152:	3314      	adds	r3, #20
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d006      	beq.n	800d168 <etharp_find_entry+0x27c>
 800d15a:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <etharp_find_entry+0x2d8>)
 800d15c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d160:	491d      	ldr	r1, [pc, #116]	; (800d1d8 <etharp_find_entry+0x2ec>)
 800d162:	481a      	ldr	r0, [pc, #104]	; (800d1cc <etharp_find_entry+0x2e0>)
 800d164:	f002 f9ae 	bl	800f4c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d16e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6819      	ldr	r1, [r3, #0]
 800d176:	4812      	ldr	r0, [pc, #72]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d178:	4613      	mov	r3, r2
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	4413      	add	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	4403      	add	r3, r0
 800d182:	3304      	adds	r3, #4
 800d184:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d18a:	490d      	ldr	r1, [pc, #52]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d18c:	4613      	mov	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	4413      	add	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	440b      	add	r3, r1
 800d196:	3312      	adds	r3, #18
 800d198:	2200      	movs	r2, #0
 800d19a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d19c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1a0:	4907      	ldr	r1, [pc, #28]	; (800d1c0 <etharp_find_entry+0x2d4>)
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	4413      	add	r3, r2
 800d1a8:	00db      	lsls	r3, r3, #3
 800d1aa:	440b      	add	r3, r1
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d1b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3728      	adds	r7, #40	; 0x28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200082fc 	.word	0x200082fc
 800d1c4:	08012624 	.word	0x08012624
 800d1c8:	0801265c 	.word	0x0801265c
 800d1cc:	0801269c 	.word	0x0801269c
 800d1d0:	080126c4 	.word	0x080126c4
 800d1d4:	080126dc 	.word	0x080126dc
 800d1d8:	080126f0 	.word	0x080126f0

0800d1dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b088      	sub	sp, #32
 800d1e0:	af02      	add	r7, sp, #8
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1f0:	2b06      	cmp	r3, #6
 800d1f2:	d006      	beq.n	800d202 <etharp_update_arp_entry+0x26>
 800d1f4:	4b48      	ldr	r3, [pc, #288]	; (800d318 <etharp_update_arp_entry+0x13c>)
 800d1f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d1fa:	4948      	ldr	r1, [pc, #288]	; (800d31c <etharp_update_arp_entry+0x140>)
 800d1fc:	4848      	ldr	r0, [pc, #288]	; (800d320 <etharp_update_arp_entry+0x144>)
 800d1fe:	f002 f961 	bl	800f4c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d012      	beq.n	800d22e <etharp_update_arp_entry+0x52>
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00e      	beq.n	800d22e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68f9      	ldr	r1, [r7, #12]
 800d216:	4618      	mov	r0, r3
 800d218:	f001 f8fe 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800d21c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d105      	bne.n	800d22e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d22a:	2be0      	cmp	r3, #224	; 0xe0
 800d22c:	d102      	bne.n	800d234 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d22e:	f06f 030f 	mvn.w	r3, #15
 800d232:	e06c      	b.n	800d30e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	4619      	mov	r1, r3
 800d23a:	68b8      	ldr	r0, [r7, #8]
 800d23c:	f7ff fe56 	bl	800ceec <etharp_find_entry>
 800d240:	4603      	mov	r3, r0
 800d242:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	da02      	bge.n	800d252 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d24c:	8afb      	ldrh	r3, [r7, #22]
 800d24e:	b25b      	sxtb	r3, r3
 800d250:	e05d      	b.n	800d30e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d256:	4933      	ldr	r1, [pc, #204]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d258:	4613      	mov	r3, r2
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	4413      	add	r3, r2
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	440b      	add	r3, r1
 800d262:	3314      	adds	r3, #20
 800d264:	2202      	movs	r2, #2
 800d266:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d26c:	492d      	ldr	r1, [pc, #180]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	440b      	add	r3, r1
 800d278:	3308      	adds	r3, #8
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d27e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d282:	4613      	mov	r3, r2
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	4413      	add	r3, r2
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	3308      	adds	r3, #8
 800d28c:	4a25      	ldr	r2, [pc, #148]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d28e:	4413      	add	r3, r2
 800d290:	3304      	adds	r3, #4
 800d292:	2206      	movs	r2, #6
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	f002 f9ef 	bl	800f67a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d29c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2a0:	4920      	ldr	r1, [pc, #128]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	4413      	add	r3, r2
 800d2a8:	00db      	lsls	r3, r3, #3
 800d2aa:	440b      	add	r3, r1
 800d2ac:	3312      	adds	r3, #18
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d2b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2b6:	491b      	ldr	r1, [pc, #108]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	4413      	add	r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	440b      	add	r3, r1
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d021      	beq.n	800d30c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d2c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2cc:	4915      	ldr	r1, [pc, #84]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	4413      	add	r3, r2
 800d2d4:	00db      	lsls	r3, r3, #3
 800d2d6:	440b      	add	r3, r1
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d2dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2e0:	4910      	ldr	r1, [pc, #64]	; (800d324 <etharp_update_arp_entry+0x148>)
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4413      	add	r3, r2
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	440b      	add	r3, r1
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d2f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6939      	ldr	r1, [r7, #16]
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f001 ff97 	bl	800f234 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d306:	6938      	ldr	r0, [r7, #16]
 800d308:	f7f8 ff94 	bl	8006234 <pbuf_free>
  }
  return ERR_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	08012624 	.word	0x08012624
 800d31c:	0801271c 	.word	0x0801271c
 800d320:	0801269c 	.word	0x0801269c
 800d324:	200082fc 	.word	0x200082fc

0800d328 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d330:	2300      	movs	r3, #0
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	e01e      	b.n	800d374 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d336:	4913      	ldr	r1, [pc, #76]	; (800d384 <etharp_cleanup_netif+0x5c>)
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	4613      	mov	r3, r2
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	440b      	add	r3, r1
 800d344:	3314      	adds	r3, #20
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d34a:	7afb      	ldrb	r3, [r7, #11]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00e      	beq.n	800d36e <etharp_cleanup_netif+0x46>
 800d350:	490c      	ldr	r1, [pc, #48]	; (800d384 <etharp_cleanup_netif+0x5c>)
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	440b      	add	r3, r1
 800d35e:	3308      	adds	r3, #8
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d102      	bne.n	800d36e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7ff fce5 	bl	800cd38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3301      	adds	r3, #1
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b09      	cmp	r3, #9
 800d378:	dddd      	ble.n	800d336 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d37a:	bf00      	nop
 800d37c:	bf00      	nop
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200082fc 	.word	0x200082fc

0800d388 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d388:	b5b0      	push	{r4, r5, r7, lr}
 800d38a:	b08a      	sub	sp, #40	; 0x28
 800d38c:	af04      	add	r7, sp, #16
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d107      	bne.n	800d3a8 <etharp_input+0x20>
 800d398:	4b3d      	ldr	r3, [pc, #244]	; (800d490 <etharp_input+0x108>)
 800d39a:	f240 228a 	movw	r2, #650	; 0x28a
 800d39e:	493d      	ldr	r1, [pc, #244]	; (800d494 <etharp_input+0x10c>)
 800d3a0:	483d      	ldr	r0, [pc, #244]	; (800d498 <etharp_input+0x110>)
 800d3a2:	f002 f88f 	bl	800f4c4 <iprintf>
 800d3a6:	e06f      	b.n	800d488 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3b8:	d10c      	bne.n	800d3d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d3be:	2b06      	cmp	r3, #6
 800d3c0:	d108      	bne.n	800d3d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d104      	bne.n	800d3d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	885b      	ldrh	r3, [r3, #2]
 800d3ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d3d0:	2b08      	cmp	r3, #8
 800d3d2:	d003      	beq.n	800d3dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7f8 ff2d 	bl	8006234 <pbuf_free>
    return;
 800d3da:	e055      	b.n	800d488 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	330e      	adds	r3, #14
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	3318      	adds	r3, #24
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <etharp_input+0x74>
    for_us = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]
 800d3fa:	e009      	b.n	800d410 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	3304      	adds	r3, #4
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	bf0c      	ite	eq
 800d408:	2301      	moveq	r3, #1
 800d40a:	2300      	movne	r3, #0
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f103 0208 	add.w	r2, r3, #8
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <etharp_input+0x98>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <etharp_input+0x9a>
 800d420:	2302      	movs	r3, #2
 800d422:	f107 010c 	add.w	r1, r7, #12
 800d426:	6838      	ldr	r0, [r7, #0]
 800d428:	f7ff fed8 	bl	800d1dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	88db      	ldrh	r3, [r3, #6]
 800d430:	b29b      	uxth	r3, r3
 800d432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d436:	d003      	beq.n	800d440 <etharp_input+0xb8>
 800d438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d43c:	d01e      	beq.n	800d47c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d43e:	e020      	b.n	800d482 <etharp_input+0xfa>
      if (for_us) {
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d01c      	beq.n	800d480 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d460:	2102      	movs	r1, #2
 800d462:	9103      	str	r1, [sp, #12]
 800d464:	f107 010c 	add.w	r1, r7, #12
 800d468:	9102      	str	r1, [sp, #8]
 800d46a:	9201      	str	r2, [sp, #4]
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	462b      	mov	r3, r5
 800d470:	4622      	mov	r2, r4
 800d472:	4601      	mov	r1, r0
 800d474:	6838      	ldr	r0, [r7, #0]
 800d476:	f000 faeb 	bl	800da50 <etharp_raw>
      break;
 800d47a:	e001      	b.n	800d480 <etharp_input+0xf8>
      break;
 800d47c:	bf00      	nop
 800d47e:	e000      	b.n	800d482 <etharp_input+0xfa>
      break;
 800d480:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7f8 fed6 	bl	8006234 <pbuf_free>
}
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bdb0      	pop	{r4, r5, r7, pc}
 800d48e:	bf00      	nop
 800d490:	08012624 	.word	0x08012624
 800d494:	08012774 	.word	0x08012774
 800d498:	0801269c 	.word	0x0801269c

0800d49c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d4aa:	79fa      	ldrb	r2, [r7, #7]
 800d4ac:	4944      	ldr	r1, [pc, #272]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	005b      	lsls	r3, r3, #1
 800d4b2:	4413      	add	r3, r2
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	440b      	add	r3, r1
 800d4b8:	3314      	adds	r3, #20
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d806      	bhi.n	800d4ce <etharp_output_to_arp_index+0x32>
 800d4c0:	4b40      	ldr	r3, [pc, #256]	; (800d5c4 <etharp_output_to_arp_index+0x128>)
 800d4c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d4c6:	4940      	ldr	r1, [pc, #256]	; (800d5c8 <etharp_output_to_arp_index+0x12c>)
 800d4c8:	4840      	ldr	r0, [pc, #256]	; (800d5cc <etharp_output_to_arp_index+0x130>)
 800d4ca:	f001 fffb 	bl	800f4c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d4ce:	79fa      	ldrb	r2, [r7, #7]
 800d4d0:	493b      	ldr	r1, [pc, #236]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4413      	add	r3, r2
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	440b      	add	r3, r1
 800d4dc:	3314      	adds	r3, #20
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d153      	bne.n	800d58c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d4e4:	79fa      	ldrb	r2, [r7, #7]
 800d4e6:	4936      	ldr	r1, [pc, #216]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	440b      	add	r3, r1
 800d4f2:	3312      	adds	r3, #18
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d4fa:	d919      	bls.n	800d530 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d4fc:	79fa      	ldrb	r2, [r7, #7]
 800d4fe:	4613      	mov	r3, r2
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	4413      	add	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	4a2e      	ldr	r2, [pc, #184]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d508:	4413      	add	r3, r2
 800d50a:	3304      	adds	r3, #4
 800d50c:	4619      	mov	r1, r3
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f000 fb4c 	bl	800dbac <etharp_request>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d138      	bne.n	800d58c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d51a:	79fa      	ldrb	r2, [r7, #7]
 800d51c:	4928      	ldr	r1, [pc, #160]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d51e:	4613      	mov	r3, r2
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4413      	add	r3, r2
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	440b      	add	r3, r1
 800d528:	3314      	adds	r3, #20
 800d52a:	2203      	movs	r2, #3
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	e02d      	b.n	800d58c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d530:	79fa      	ldrb	r2, [r7, #7]
 800d532:	4923      	ldr	r1, [pc, #140]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d534:	4613      	mov	r3, r2
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	4413      	add	r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	440b      	add	r3, r1
 800d53e:	3312      	adds	r3, #18
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d546:	d321      	bcc.n	800d58c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d548:	79fa      	ldrb	r2, [r7, #7]
 800d54a:	4613      	mov	r3, r2
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	4413      	add	r3, r2
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	4a1b      	ldr	r2, [pc, #108]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d554:	4413      	add	r3, r2
 800d556:	1d19      	adds	r1, r3, #4
 800d558:	79fa      	ldrb	r2, [r7, #7]
 800d55a:	4613      	mov	r3, r2
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	4413      	add	r3, r2
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	3308      	adds	r3, #8
 800d564:	4a16      	ldr	r2, [pc, #88]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d566:	4413      	add	r3, r2
 800d568:	3304      	adds	r3, #4
 800d56a:	461a      	mov	r2, r3
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f000 fafb 	bl	800db68 <etharp_request_dst>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d109      	bne.n	800d58c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d578:	79fa      	ldrb	r2, [r7, #7]
 800d57a:	4911      	ldr	r1, [pc, #68]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d57c:	4613      	mov	r3, r2
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	4413      	add	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	440b      	add	r3, r1
 800d586:	3314      	adds	r3, #20
 800d588:	2203      	movs	r2, #3
 800d58a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d592:	79fa      	ldrb	r2, [r7, #7]
 800d594:	4613      	mov	r3, r2
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	4413      	add	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	3308      	adds	r3, #8
 800d59e:	4a08      	ldr	r2, [pc, #32]	; (800d5c0 <etharp_output_to_arp_index+0x124>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5a8:	9200      	str	r2, [sp, #0]
 800d5aa:	460a      	mov	r2, r1
 800d5ac:	68b9      	ldr	r1, [r7, #8]
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f001 fe40 	bl	800f234 <ethernet_output>
 800d5b4:	4603      	mov	r3, r0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	200082fc 	.word	0x200082fc
 800d5c4:	08012624 	.word	0x08012624
 800d5c8:	08012794 	.word	0x08012794
 800d5cc:	0801269c 	.word	0x0801269c

0800d5d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08a      	sub	sp, #40	; 0x28
 800d5d4:	af02      	add	r7, sp, #8
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <etharp_output+0x24>
 800d5e6:	4b73      	ldr	r3, [pc, #460]	; (800d7b4 <etharp_output+0x1e4>)
 800d5e8:	f240 321e 	movw	r2, #798	; 0x31e
 800d5ec:	4972      	ldr	r1, [pc, #456]	; (800d7b8 <etharp_output+0x1e8>)
 800d5ee:	4873      	ldr	r0, [pc, #460]	; (800d7bc <etharp_output+0x1ec>)
 800d5f0:	f001 ff68 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <etharp_output+0x38>
 800d5fa:	4b6e      	ldr	r3, [pc, #440]	; (800d7b4 <etharp_output+0x1e4>)
 800d5fc:	f240 321f 	movw	r2, #799	; 0x31f
 800d600:	496f      	ldr	r1, [pc, #444]	; (800d7c0 <etharp_output+0x1f0>)
 800d602:	486e      	ldr	r0, [pc, #440]	; (800d7bc <etharp_output+0x1ec>)
 800d604:	f001 ff5e 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d106      	bne.n	800d61c <etharp_output+0x4c>
 800d60e:	4b69      	ldr	r3, [pc, #420]	; (800d7b4 <etharp_output+0x1e4>)
 800d610:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d614:	496b      	ldr	r1, [pc, #428]	; (800d7c4 <etharp_output+0x1f4>)
 800d616:	4869      	ldr	r0, [pc, #420]	; (800d7bc <etharp_output+0x1ec>)
 800d618:	f001 ff54 	bl	800f4c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68f9      	ldr	r1, [r7, #12]
 800d622:	4618      	mov	r0, r3
 800d624:	f000 fef8 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d62e:	4b66      	ldr	r3, [pc, #408]	; (800d7c8 <etharp_output+0x1f8>)
 800d630:	61fb      	str	r3, [r7, #28]
 800d632:	e0af      	b.n	800d794 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d63c:	2be0      	cmp	r3, #224	; 0xe0
 800d63e:	d118      	bne.n	800d672 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d640:	2301      	movs	r3, #1
 800d642:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d644:	2300      	movs	r3, #0
 800d646:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d648:	235e      	movs	r3, #94	; 0x5e
 800d64a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3301      	adds	r3, #1
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d656:	b2db      	uxtb	r3, r3
 800d658:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	3302      	adds	r3, #2
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3303      	adds	r3, #3
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d66a:	f107 0310 	add.w	r3, r7, #16
 800d66e:	61fb      	str	r3, [r7, #28]
 800d670:	e090      	b.n	800d794 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3304      	adds	r3, #4
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	405a      	eors	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3308      	adds	r3, #8
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4013      	ands	r3, r2
 800d686:	2b00      	cmp	r3, #0
 800d688:	d012      	beq.n	800d6b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d690:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d694:	4293      	cmp	r3, r2
 800d696:	d00b      	beq.n	800d6b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	330c      	adds	r3, #12
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	330c      	adds	r3, #12
 800d6a6:	61bb      	str	r3, [r7, #24]
 800d6a8:	e002      	b.n	800d6b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d6aa:	f06f 0303 	mvn.w	r3, #3
 800d6ae:	e07d      	b.n	800d7ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6b0:	4b46      	ldr	r3, [pc, #280]	; (800d7cc <etharp_output+0x1fc>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4a46      	ldr	r2, [pc, #280]	; (800d7d0 <etharp_output+0x200>)
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	440b      	add	r3, r1
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	4413      	add	r3, r2
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d925      	bls.n	800d716 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d6ca:	4b40      	ldr	r3, [pc, #256]	; (800d7cc <etharp_output+0x1fc>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4a3f      	ldr	r2, [pc, #252]	; (800d7d0 <etharp_output+0x200>)
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	440b      	add	r3, r1
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	4413      	add	r3, r2
 800d6dc:	3308      	adds	r3, #8
 800d6de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d117      	bne.n	800d716 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	4b38      	ldr	r3, [pc, #224]	; (800d7cc <etharp_output+0x1fc>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	4937      	ldr	r1, [pc, #220]	; (800d7d0 <etharp_output+0x200>)
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4403      	add	r3, r0
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d700:	429a      	cmp	r2, r3
 800d702:	d108      	bne.n	800d716 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d704:	4b31      	ldr	r3, [pc, #196]	; (800d7cc <etharp_output+0x1fc>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
 800d70a:	68b9      	ldr	r1, [r7, #8]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff fec5 	bl	800d49c <etharp_output_to_arp_index>
 800d712:	4603      	mov	r3, r0
 800d714:	e04a      	b.n	800d7ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
 800d71a:	e031      	b.n	800d780 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d71c:	7dfa      	ldrb	r2, [r7, #23]
 800d71e:	492c      	ldr	r1, [pc, #176]	; (800d7d0 <etharp_output+0x200>)
 800d720:	4613      	mov	r3, r2
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	4413      	add	r3, r2
 800d726:	00db      	lsls	r3, r3, #3
 800d728:	440b      	add	r3, r1
 800d72a:	3314      	adds	r3, #20
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d923      	bls.n	800d77a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d732:	7dfa      	ldrb	r2, [r7, #23]
 800d734:	4926      	ldr	r1, [pc, #152]	; (800d7d0 <etharp_output+0x200>)
 800d736:	4613      	mov	r3, r2
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	4413      	add	r3, r2
 800d73c:	00db      	lsls	r3, r3, #3
 800d73e:	440b      	add	r3, r1
 800d740:	3308      	adds	r3, #8
 800d742:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	429a      	cmp	r2, r3
 800d748:	d117      	bne.n	800d77a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	7dfa      	ldrb	r2, [r7, #23]
 800d750:	481f      	ldr	r0, [pc, #124]	; (800d7d0 <etharp_output+0x200>)
 800d752:	4613      	mov	r3, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	4403      	add	r3, r0
 800d75c:	3304      	adds	r3, #4
 800d75e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d760:	4299      	cmp	r1, r3
 800d762:	d10a      	bne.n	800d77a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d764:	4a19      	ldr	r2, [pc, #100]	; (800d7cc <etharp_output+0x1fc>)
 800d766:	7dfb      	ldrb	r3, [r7, #23]
 800d768:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d76a:	7dfb      	ldrb	r3, [r7, #23]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f7ff fe93 	bl	800d49c <etharp_output_to_arp_index>
 800d776:	4603      	mov	r3, r0
 800d778:	e018      	b.n	800d7ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d77a:	7dfb      	ldrb	r3, [r7, #23]
 800d77c:	3301      	adds	r3, #1
 800d77e:	75fb      	strb	r3, [r7, #23]
 800d780:	7dfb      	ldrb	r3, [r7, #23]
 800d782:	2b09      	cmp	r3, #9
 800d784:	d9ca      	bls.n	800d71c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d786:	68ba      	ldr	r2, [r7, #8]
 800d788:	69b9      	ldr	r1, [r7, #24]
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f000 f822 	bl	800d7d4 <etharp_query>
 800d790:	4603      	mov	r3, r0
 800d792:	e00b      	b.n	800d7ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d79a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f001 fd45 	bl	800f234 <ethernet_output>
 800d7aa:	4603      	mov	r3, r0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3720      	adds	r7, #32
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	08012624 	.word	0x08012624
 800d7b8:	08012774 	.word	0x08012774
 800d7bc:	0801269c 	.word	0x0801269c
 800d7c0:	080127c4 	.word	0x080127c4
 800d7c4:	08012764 	.word	0x08012764
 800d7c8:	08012de0 	.word	0x08012de0
 800d7cc:	200083ec 	.word	0x200083ec
 800d7d0:	200082fc 	.word	0x200082fc

0800d7d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08c      	sub	sp, #48	; 0x30
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3326      	adds	r3, #38	; 0x26
 800d7e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d7e6:	23ff      	movs	r3, #255	; 0xff
 800d7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68f9      	ldr	r1, [r7, #12]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 fe0e 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10c      	bne.n	800d81c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d80a:	2be0      	cmp	r3, #224	; 0xe0
 800d80c:	d006      	beq.n	800d81c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d81c:	f06f 030f 	mvn.w	r3, #15
 800d820:	e101      	b.n	800da26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	2101      	movs	r1, #1
 800d826:	68b8      	ldr	r0, [r7, #8]
 800d828:	f7ff fb60 	bl	800ceec <etharp_find_entry>
 800d82c:	4603      	mov	r3, r0
 800d82e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d834:	2b00      	cmp	r3, #0
 800d836:	da02      	bge.n	800d83e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d838:	8a7b      	ldrh	r3, [r7, #18]
 800d83a:	b25b      	sxtb	r3, r3
 800d83c:	e0f3      	b.n	800da26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d83e:	8a7b      	ldrh	r3, [r7, #18]
 800d840:	2b7e      	cmp	r3, #126	; 0x7e
 800d842:	d906      	bls.n	800d852 <etharp_query+0x7e>
 800d844:	4b7a      	ldr	r3, [pc, #488]	; (800da30 <etharp_query+0x25c>)
 800d846:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d84a:	497a      	ldr	r1, [pc, #488]	; (800da34 <etharp_query+0x260>)
 800d84c:	487a      	ldr	r0, [pc, #488]	; (800da38 <etharp_query+0x264>)
 800d84e:	f001 fe39 	bl	800f4c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d852:	8a7b      	ldrh	r3, [r7, #18]
 800d854:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d856:	7c7a      	ldrb	r2, [r7, #17]
 800d858:	4978      	ldr	r1, [pc, #480]	; (800da3c <etharp_query+0x268>)
 800d85a:	4613      	mov	r3, r2
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	4413      	add	r3, r2
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	440b      	add	r3, r1
 800d864:	3314      	adds	r3, #20
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d115      	bne.n	800d898 <etharp_query+0xc4>
    is_new_entry = 1;
 800d86c:	2301      	movs	r3, #1
 800d86e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d870:	7c7a      	ldrb	r2, [r7, #17]
 800d872:	4972      	ldr	r1, [pc, #456]	; (800da3c <etharp_query+0x268>)
 800d874:	4613      	mov	r3, r2
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	440b      	add	r3, r1
 800d87e:	3314      	adds	r3, #20
 800d880:	2201      	movs	r2, #1
 800d882:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d884:	7c7a      	ldrb	r2, [r7, #17]
 800d886:	496d      	ldr	r1, [pc, #436]	; (800da3c <etharp_query+0x268>)
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	3308      	adds	r3, #8
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d898:	7c7a      	ldrb	r2, [r7, #17]
 800d89a:	4968      	ldr	r1, [pc, #416]	; (800da3c <etharp_query+0x268>)
 800d89c:	4613      	mov	r3, r2
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	4413      	add	r3, r2
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	440b      	add	r3, r1
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d011      	beq.n	800d8d2 <etharp_query+0xfe>
 800d8ae:	7c7a      	ldrb	r2, [r7, #17]
 800d8b0:	4962      	ldr	r1, [pc, #392]	; (800da3c <etharp_query+0x268>)
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3314      	adds	r3, #20
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d806      	bhi.n	800d8d2 <etharp_query+0xfe>
 800d8c4:	4b5a      	ldr	r3, [pc, #360]	; (800da30 <etharp_query+0x25c>)
 800d8c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d8ca:	495d      	ldr	r1, [pc, #372]	; (800da40 <etharp_query+0x26c>)
 800d8cc:	485a      	ldr	r0, [pc, #360]	; (800da38 <etharp_query+0x264>)
 800d8ce:	f001 fdf9 	bl	800f4c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <etharp_query+0x10a>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10c      	bne.n	800d8f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d8de:	68b9      	ldr	r1, [r7, #8]
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 f963 	bl	800dbac <etharp_request>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d102      	bne.n	800d8f8 <etharp_query+0x124>
      return result;
 800d8f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8f6:	e096      	b.n	800da26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <etharp_query+0x138>
 800d8fe:	4b4c      	ldr	r3, [pc, #304]	; (800da30 <etharp_query+0x25c>)
 800d900:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d904:	494f      	ldr	r1, [pc, #316]	; (800da44 <etharp_query+0x270>)
 800d906:	484c      	ldr	r0, [pc, #304]	; (800da38 <etharp_query+0x264>)
 800d908:	f001 fddc 	bl	800f4c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d90c:	7c7a      	ldrb	r2, [r7, #17]
 800d90e:	494b      	ldr	r1, [pc, #300]	; (800da3c <etharp_query+0x268>)
 800d910:	4613      	mov	r3, r2
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	4413      	add	r3, r2
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	440b      	add	r3, r1
 800d91a:	3314      	adds	r3, #20
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d917      	bls.n	800d952 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d922:	4a49      	ldr	r2, [pc, #292]	; (800da48 <etharp_query+0x274>)
 800d924:	7c7b      	ldrb	r3, [r7, #17]
 800d926:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d928:	7c7a      	ldrb	r2, [r7, #17]
 800d92a:	4613      	mov	r3, r2
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	4413      	add	r3, r2
 800d930:	00db      	lsls	r3, r3, #3
 800d932:	3308      	adds	r3, #8
 800d934:	4a41      	ldr	r2, [pc, #260]	; (800da3c <etharp_query+0x268>)
 800d936:	4413      	add	r3, r2
 800d938:	3304      	adds	r3, #4
 800d93a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d93e:	9200      	str	r2, [sp, #0]
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f001 fc75 	bl	800f234 <ethernet_output>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d950:	e067      	b.n	800da22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d952:	7c7a      	ldrb	r2, [r7, #17]
 800d954:	4939      	ldr	r1, [pc, #228]	; (800da3c <etharp_query+0x268>)
 800d956:	4613      	mov	r3, r2
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	4413      	add	r3, r2
 800d95c:	00db      	lsls	r3, r3, #3
 800d95e:	440b      	add	r3, r1
 800d960:	3314      	adds	r3, #20
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d15c      	bne.n	800da22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d970:	e01c      	b.n	800d9ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	895a      	ldrh	r2, [r3, #10]
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	891b      	ldrh	r3, [r3, #8]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d10a      	bne.n	800d994 <etharp_query+0x1c0>
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d006      	beq.n	800d994 <etharp_query+0x1c0>
 800d986:	4b2a      	ldr	r3, [pc, #168]	; (800da30 <etharp_query+0x25c>)
 800d988:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d98c:	492f      	ldr	r1, [pc, #188]	; (800da4c <etharp_query+0x278>)
 800d98e:	482a      	ldr	r0, [pc, #168]	; (800da38 <etharp_query+0x264>)
 800d990:	f001 fd98 	bl	800f4c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	7b1b      	ldrb	r3, [r3, #12]
 800d998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	61bb      	str	r3, [r7, #24]
        break;
 800d9a4:	e005      	b.n	800d9b2 <etharp_query+0x1de>
      }
      p = p->next;
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1df      	bne.n	800d972 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d007      	beq.n	800d9c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d9be:	200e      	movs	r0, #14
 800d9c0:	f7f8 fe94 	bl	80066ec <pbuf_clone>
 800d9c4:	61f8      	str	r0, [r7, #28]
 800d9c6:	e004      	b.n	800d9d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d9cc:	69f8      	ldr	r0, [r7, #28]
 800d9ce:	f7f8 fcd1 	bl	8006374 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d021      	beq.n	800da1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d9d8:	7c7a      	ldrb	r2, [r7, #17]
 800d9da:	4918      	ldr	r1, [pc, #96]	; (800da3c <etharp_query+0x268>)
 800d9dc:	4613      	mov	r3, r2
 800d9de:	005b      	lsls	r3, r3, #1
 800d9e0:	4413      	add	r3, r2
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	440b      	add	r3, r1
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d9ec:	7c7a      	ldrb	r2, [r7, #17]
 800d9ee:	4913      	ldr	r1, [pc, #76]	; (800da3c <etharp_query+0x268>)
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	4413      	add	r3, r2
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	440b      	add	r3, r1
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7f8 fc19 	bl	8006234 <pbuf_free>
      }
      arp_table[i].q = p;
 800da02:	7c7a      	ldrb	r2, [r7, #17]
 800da04:	490d      	ldr	r1, [pc, #52]	; (800da3c <etharp_query+0x268>)
 800da06:	4613      	mov	r3, r2
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	4413      	add	r3, r2
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	440b      	add	r3, r1
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da1a:	e002      	b.n	800da22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800da1c:	23ff      	movs	r3, #255	; 0xff
 800da1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800da22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800da26:	4618      	mov	r0, r3
 800da28:	3728      	adds	r7, #40	; 0x28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	08012624 	.word	0x08012624
 800da34:	080127d0 	.word	0x080127d0
 800da38:	0801269c 	.word	0x0801269c
 800da3c:	200082fc 	.word	0x200082fc
 800da40:	080127e0 	.word	0x080127e0
 800da44:	080127c4 	.word	0x080127c4
 800da48:	200083ec 	.word	0x200083ec
 800da4c:	08012808 	.word	0x08012808

0800da50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08a      	sub	sp, #40	; 0x28
 800da54:	af02      	add	r7, sp, #8
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d106      	bne.n	800da76 <etharp_raw+0x26>
 800da68:	4b3a      	ldr	r3, [pc, #232]	; (800db54 <etharp_raw+0x104>)
 800da6a:	f240 4257 	movw	r2, #1111	; 0x457
 800da6e:	493a      	ldr	r1, [pc, #232]	; (800db58 <etharp_raw+0x108>)
 800da70:	483a      	ldr	r0, [pc, #232]	; (800db5c <etharp_raw+0x10c>)
 800da72:	f001 fd27 	bl	800f4c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800da76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da7a:	211c      	movs	r1, #28
 800da7c:	200e      	movs	r0, #14
 800da7e:	f7f8 f8f5 	bl	8005c6c <pbuf_alloc>
 800da82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800da8a:	f04f 33ff 	mov.w	r3, #4294967295
 800da8e:	e05d      	b.n	800db4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	895b      	ldrh	r3, [r3, #10]
 800da94:	2b1b      	cmp	r3, #27
 800da96:	d806      	bhi.n	800daa6 <etharp_raw+0x56>
 800da98:	4b2e      	ldr	r3, [pc, #184]	; (800db54 <etharp_raw+0x104>)
 800da9a:	f240 4262 	movw	r2, #1122	; 0x462
 800da9e:	4930      	ldr	r1, [pc, #192]	; (800db60 <etharp_raw+0x110>)
 800daa0:	482e      	ldr	r0, [pc, #184]	; (800db5c <etharp_raw+0x10c>)
 800daa2:	f001 fd0f 	bl	800f4c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800daac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800daae:	4618      	mov	r0, r3
 800dab0:	f7f7 f862 	bl	8004b78 <lwip_htons>
 800dab4:	4603      	mov	r3, r0
 800dab6:	461a      	mov	r2, r3
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dac2:	2b06      	cmp	r3, #6
 800dac4:	d006      	beq.n	800dad4 <etharp_raw+0x84>
 800dac6:	4b23      	ldr	r3, [pc, #140]	; (800db54 <etharp_raw+0x104>)
 800dac8:	f240 4269 	movw	r2, #1129	; 0x469
 800dacc:	4925      	ldr	r1, [pc, #148]	; (800db64 <etharp_raw+0x114>)
 800dace:	4823      	ldr	r0, [pc, #140]	; (800db5c <etharp_raw+0x10c>)
 800dad0:	f001 fcf8 	bl	800f4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	3308      	adds	r3, #8
 800dad8:	2206      	movs	r2, #6
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f001 fdcc 	bl	800f67a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	3312      	adds	r3, #18
 800dae6:	2206      	movs	r2, #6
 800dae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daea:	4618      	mov	r0, r3
 800daec:	f001 fdc5 	bl	800f67a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	330e      	adds	r3, #14
 800daf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	3318      	adds	r3, #24
 800dafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db00:	6812      	ldr	r2, [r2, #0]
 800db02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f042 0201 	orr.w	r2, r2, #1
 800db10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2200      	movs	r2, #0
 800db16:	f042 0208 	orr.w	r2, r2, #8
 800db1a:	709a      	strb	r2, [r3, #2]
 800db1c:	2200      	movs	r2, #0
 800db1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2206      	movs	r2, #6
 800db24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2204      	movs	r2, #4
 800db2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800db2c:	f640 0306 	movw	r3, #2054	; 0x806
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	69b9      	ldr	r1, [r7, #24]
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f001 fb7b 	bl	800f234 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800db3e:	69b8      	ldr	r0, [r7, #24]
 800db40:	f7f8 fb78 	bl	8006234 <pbuf_free>
  p = NULL;
 800db44:	2300      	movs	r3, #0
 800db46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800db48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3720      	adds	r7, #32
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	08012624 	.word	0x08012624
 800db58:	08012774 	.word	0x08012774
 800db5c:	0801269c 	.word	0x0801269c
 800db60:	08012824 	.word	0x08012824
 800db64:	08012858 	.word	0x08012858

0800db68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af04      	add	r7, sp, #16
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db84:	2201      	movs	r2, #1
 800db86:	9203      	str	r2, [sp, #12]
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	9202      	str	r2, [sp, #8]
 800db8c:	4a06      	ldr	r2, [pc, #24]	; (800dba8 <etharp_request_dst+0x40>)
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	4603      	mov	r3, r0
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff ff5a 	bl	800da50 <etharp_raw>
 800db9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08012de8 	.word	0x08012de8

0800dbac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dbb6:	4a05      	ldr	r2, [pc, #20]	; (800dbcc <etharp_request+0x20>)
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ffd4 	bl	800db68 <etharp_request_dst>
 800dbc0:	4603      	mov	r3, r0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	08012de0 	.word	0x08012de0

0800dbd0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08e      	sub	sp, #56	; 0x38
 800dbd4:	af04      	add	r7, sp, #16
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dbda:	4b79      	ldr	r3, [pc, #484]	; (800ddc0 <icmp_input+0x1f0>)
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 030f 	and.w	r3, r3, #15
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800dbf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbf2:	2b13      	cmp	r3, #19
 800dbf4:	f240 80cd 	bls.w	800dd92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	895b      	ldrh	r3, [r3, #10]
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	f240 80ca 	bls.w	800dd96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dc0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 80b7 	beq.w	800dd84 <icmp_input+0x1b4>
 800dc16:	2b08      	cmp	r3, #8
 800dc18:	f040 80b7 	bne.w	800dd8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dc1c:	4b69      	ldr	r3, [pc, #420]	; (800ddc4 <icmp_input+0x1f4>)
 800dc1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc20:	4b67      	ldr	r3, [pc, #412]	; (800ddc0 <icmp_input+0x1f0>)
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc28:	2be0      	cmp	r3, #224	; 0xe0
 800dc2a:	f000 80bb 	beq.w	800dda4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dc2e:	4b64      	ldr	r3, [pc, #400]	; (800ddc0 <icmp_input+0x1f0>)
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	4a63      	ldr	r2, [pc, #396]	; (800ddc0 <icmp_input+0x1f0>)
 800dc34:	6812      	ldr	r2, [r2, #0]
 800dc36:	4611      	mov	r1, r2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 fbed 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f040 80b1 	bne.w	800dda8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	891b      	ldrh	r3, [r3, #8]
 800dc4a:	2b07      	cmp	r3, #7
 800dc4c:	f240 80a5 	bls.w	800dd9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc52:	330e      	adds	r3, #14
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7f8 fa56 	bl	8006108 <pbuf_add_header>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d04b      	beq.n	800dcfa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	891a      	ldrh	r2, [r3, #8]
 800dc66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc68:	4413      	add	r3, r2
 800dc6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	891b      	ldrh	r3, [r3, #8]
 800dc70:	8b7a      	ldrh	r2, [r7, #26]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	f0c0 809a 	bcc.w	800ddac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dc78:	8b7b      	ldrh	r3, [r7, #26]
 800dc7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc7e:	4619      	mov	r1, r3
 800dc80:	200e      	movs	r0, #14
 800dc82:	f7f7 fff3 	bl	8005c6c <pbuf_alloc>
 800dc86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 8090 	beq.w	800ddb0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	461a      	mov	r2, r3
 800dc96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc98:	3308      	adds	r3, #8
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d203      	bcs.n	800dca6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc9e:	6978      	ldr	r0, [r7, #20]
 800dca0:	f7f8 fac8 	bl	8006234 <pbuf_free>
          goto icmperr;
 800dca4:	e085      	b.n	800ddb2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dcac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f001 fce3 	bl	800f67a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dcb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6978      	ldr	r0, [r7, #20]
 800dcba:	f7f8 fa35 	bl	8006128 <pbuf_remove_header>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d009      	beq.n	800dcd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dcc4:	4b40      	ldr	r3, [pc, #256]	; (800ddc8 <icmp_input+0x1f8>)
 800dcc6:	22b6      	movs	r2, #182	; 0xb6
 800dcc8:	4940      	ldr	r1, [pc, #256]	; (800ddcc <icmp_input+0x1fc>)
 800dcca:	4841      	ldr	r0, [pc, #260]	; (800ddd0 <icmp_input+0x200>)
 800dccc:	f001 fbfa 	bl	800f4c4 <iprintf>
          pbuf_free(r);
 800dcd0:	6978      	ldr	r0, [r7, #20]
 800dcd2:	f7f8 faaf 	bl	8006234 <pbuf_free>
          goto icmperr;
 800dcd6:	e06c      	b.n	800ddb2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dcd8:	6879      	ldr	r1, [r7, #4]
 800dcda:	6978      	ldr	r0, [r7, #20]
 800dcdc:	f7f8 fbc2 	bl	8006464 <pbuf_copy>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dce6:	6978      	ldr	r0, [r7, #20]
 800dce8:	f7f8 faa4 	bl	8006234 <pbuf_free>
          goto icmperr;
 800dcec:	e061      	b.n	800ddb2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7f8 faa0 	bl	8006234 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	607b      	str	r3, [r7, #4]
 800dcf8:	e00f      	b.n	800dd1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dcfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcfc:	330e      	adds	r3, #14
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7f8 fa11 	bl	8006128 <pbuf_remove_header>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d006      	beq.n	800dd1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dd0c:	4b2e      	ldr	r3, [pc, #184]	; (800ddc8 <icmp_input+0x1f8>)
 800dd0e:	22c7      	movs	r2, #199	; 0xc7
 800dd10:	4930      	ldr	r1, [pc, #192]	; (800ddd4 <icmp_input+0x204>)
 800dd12:	482f      	ldr	r0, [pc, #188]	; (800ddd0 <icmp_input+0x200>)
 800dd14:	f001 fbd6 	bl	800f4c4 <iprintf>
          goto icmperr;
 800dd18:	e04b      	b.n	800ddb2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dd20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7f8 f9ef 	bl	8006108 <pbuf_add_header>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d12b      	bne.n	800dd88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd3e:	4b20      	ldr	r3, [pc, #128]	; (800ddc0 <icmp_input+0x1f0>)
 800dd40:	691a      	ldr	r2, [r3, #16]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	709a      	strb	r2, [r3, #2]
 800dd52:	2200      	movs	r2, #0
 800dd54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	22ff      	movs	r2, #255	; 0xff
 800dd5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	729a      	strb	r2, [r3, #10]
 800dd62:	2200      	movs	r2, #0
 800dd64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	9302      	str	r3, [sp, #8]
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	23ff      	movs	r3, #255	; 0xff
 800dd74:	2200      	movs	r2, #0
 800dd76:	69f9      	ldr	r1, [r7, #28]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fa75 	bl	800e268 <ip4_output_if>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dd82:	e001      	b.n	800dd88 <icmp_input+0x1b8>
      break;
 800dd84:	bf00      	nop
 800dd86:	e000      	b.n	800dd8a <icmp_input+0x1ba>
      break;
 800dd88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7f8 fa52 	bl	8006234 <pbuf_free>
  return;
 800dd90:	e013      	b.n	800ddba <icmp_input+0x1ea>
    goto lenerr;
 800dd92:	bf00      	nop
 800dd94:	e002      	b.n	800dd9c <icmp_input+0x1cc>
    goto lenerr;
 800dd96:	bf00      	nop
 800dd98:	e000      	b.n	800dd9c <icmp_input+0x1cc>
        goto lenerr;
 800dd9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7f8 fa49 	bl	8006234 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dda2:	e00a      	b.n	800ddba <icmp_input+0x1ea>
        goto icmperr;
 800dda4:	bf00      	nop
 800dda6:	e004      	b.n	800ddb2 <icmp_input+0x1e2>
        goto icmperr;
 800dda8:	bf00      	nop
 800ddaa:	e002      	b.n	800ddb2 <icmp_input+0x1e2>
          goto icmperr;
 800ddac:	bf00      	nop
 800ddae:	e000      	b.n	800ddb2 <icmp_input+0x1e2>
          goto icmperr;
 800ddb0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7f8 fa3e 	bl	8006234 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ddb8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ddba:	3728      	adds	r7, #40	; 0x28
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20004d2c 	.word	0x20004d2c
 800ddc4:	20004d40 	.word	0x20004d40
 800ddc8:	0801289c 	.word	0x0801289c
 800ddcc:	080128d4 	.word	0x080128d4
 800ddd0:	0801290c 	.word	0x0801290c
 800ddd4:	08012934 	.word	0x08012934

0800ddd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dde4:	78fb      	ldrb	r3, [r7, #3]
 800dde6:	461a      	mov	r2, r3
 800dde8:	2103      	movs	r1, #3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f814 	bl	800de18 <icmp_send_response>
}
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800de04:	78fb      	ldrb	r3, [r7, #3]
 800de06:	461a      	mov	r2, r3
 800de08:	210b      	movs	r1, #11
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 f804 	bl	800de18 <icmp_send_response>
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b08c      	sub	sp, #48	; 0x30
 800de1c:	af04      	add	r7, sp, #16
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
 800de24:	4613      	mov	r3, r2
 800de26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800de28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de2c:	2124      	movs	r1, #36	; 0x24
 800de2e:	2022      	movs	r0, #34	; 0x22
 800de30:	f7f7 ff1c 	bl	8005c6c <pbuf_alloc>
 800de34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d04c      	beq.n	800ded6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	895b      	ldrh	r3, [r3, #10]
 800de40:	2b23      	cmp	r3, #35	; 0x23
 800de42:	d806      	bhi.n	800de52 <icmp_send_response+0x3a>
 800de44:	4b26      	ldr	r3, [pc, #152]	; (800dee0 <icmp_send_response+0xc8>)
 800de46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800de4a:	4926      	ldr	r1, [pc, #152]	; (800dee4 <icmp_send_response+0xcc>)
 800de4c:	4826      	ldr	r0, [pc, #152]	; (800dee8 <icmp_send_response+0xd0>)
 800de4e:	f001 fb39 	bl	800f4c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	78fa      	ldrb	r2, [r7, #3]
 800de62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	78ba      	ldrb	r2, [r7, #2]
 800de68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2200      	movs	r2, #0
 800de6e:	711a      	strb	r2, [r3, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2200      	movs	r2, #0
 800de78:	719a      	strb	r2, [r3, #6]
 800de7a:	2200      	movs	r2, #0
 800de7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f103 0008 	add.w	r0, r3, #8
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	221c      	movs	r2, #28
 800de8c:	4619      	mov	r1, r3
 800de8e:	f001 fbf4 	bl	800f67a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de98:	f107 030c 	add.w	r3, r7, #12
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 f825 	bl	800deec <ip4_route>
 800dea2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d011      	beq.n	800dece <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	2200      	movs	r2, #0
 800deae:	709a      	strb	r2, [r3, #2]
 800deb0:	2200      	movs	r2, #0
 800deb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800deb4:	f107 020c 	add.w	r2, r7, #12
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	9302      	str	r3, [sp, #8]
 800debc:	2301      	movs	r3, #1
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	2300      	movs	r3, #0
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	23ff      	movs	r3, #255	; 0xff
 800dec6:	2100      	movs	r1, #0
 800dec8:	69f8      	ldr	r0, [r7, #28]
 800deca:	f000 f9cd 	bl	800e268 <ip4_output_if>
  }
  pbuf_free(q);
 800dece:	69f8      	ldr	r0, [r7, #28]
 800ded0:	f7f8 f9b0 	bl	8006234 <pbuf_free>
 800ded4:	e000      	b.n	800ded8 <icmp_send_response+0xc0>
    return;
 800ded6:	bf00      	nop
}
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	0801289c 	.word	0x0801289c
 800dee4:	08012968 	.word	0x08012968
 800dee8:	0801290c 	.word	0x0801290c

0800deec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800def4:	4b33      	ldr	r3, [pc, #204]	; (800dfc4 <ip4_route+0xd8>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	e036      	b.n	800df6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	b2db      	uxtb	r3, r3
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d02b      	beq.n	800df64 <ip4_route+0x78>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df12:	089b      	lsrs	r3, r3, #2
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d022      	beq.n	800df64 <ip4_route+0x78>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3304      	adds	r3, #4
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01d      	beq.n	800df64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	3304      	adds	r3, #4
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	405a      	eors	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3308      	adds	r3, #8
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	e038      	b.n	800dfb6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df4a:	f003 0302 	and.w	r3, r3, #2
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d108      	bne.n	800df64 <ip4_route+0x78>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	330c      	adds	r3, #12
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d101      	bne.n	800df64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	e028      	b.n	800dfb6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1c5      	bne.n	800defc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df70:	4b15      	ldr	r3, [pc, #84]	; (800dfc8 <ip4_route+0xdc>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01a      	beq.n	800dfae <ip4_route+0xc2>
 800df78:	4b13      	ldr	r3, [pc, #76]	; (800dfc8 <ip4_route+0xdc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df80:	f003 0301 	and.w	r3, r3, #1
 800df84:	2b00      	cmp	r3, #0
 800df86:	d012      	beq.n	800dfae <ip4_route+0xc2>
 800df88:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <ip4_route+0xdc>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df90:	f003 0304 	and.w	r3, r3, #4
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00a      	beq.n	800dfae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df98:	4b0b      	ldr	r3, [pc, #44]	; (800dfc8 <ip4_route+0xdc>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3304      	adds	r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d004      	beq.n	800dfae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b7f      	cmp	r3, #127	; 0x7f
 800dfac:	d101      	bne.n	800dfb2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e001      	b.n	800dfb6 <ip4_route+0xca>
  }

  return netif_default;
 800dfb2:	4b05      	ldr	r3, [pc, #20]	; (800dfc8 <ip4_route+0xdc>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	20008290 	.word	0x20008290
 800dfc8:	20008294 	.word	0x20008294

0800dfcc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d016      	beq.n	800e012 <ip4_input_accept+0x46>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d011      	beq.n	800e012 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfee:	4b0b      	ldr	r3, [pc, #44]	; (800e01c <ip4_input_accept+0x50>)
 800dff0:	695a      	ldr	r2, [r3, #20]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3304      	adds	r3, #4
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d008      	beq.n	800e00e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dffc:	4b07      	ldr	r3, [pc, #28]	; (800e01c <ip4_input_accept+0x50>)
 800dffe:	695b      	ldr	r3, [r3, #20]
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	4618      	mov	r0, r3
 800e004:	f000 fa08 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800e008:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e00e:	2301      	movs	r3, #1
 800e010:	e000      	b.n	800e014 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20004d2c 	.word	0x20004d2c

0800e020 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	091b      	lsrs	r3, r3, #4
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d004      	beq.n	800e046 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7f8 f8f9 	bl	8006234 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	e107      	b.n	800e256 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	f003 030f 	and.w	r3, r3, #15
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	b2db      	uxtb	r3, r3
 800e054:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	885b      	ldrh	r3, [r3, #2]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f6 fd8b 	bl	8004b78 <lwip_htons>
 800e062:	4603      	mov	r3, r0
 800e064:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	891b      	ldrh	r3, [r3, #8]
 800e06a:	89ba      	ldrh	r2, [r7, #12]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d204      	bcs.n	800e07a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e070:	89bb      	ldrh	r3, [r7, #12]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7f7 ff57 	bl	8005f28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	895b      	ldrh	r3, [r3, #10]
 800e07e:	89fa      	ldrh	r2, [r7, #14]
 800e080:	429a      	cmp	r2, r3
 800e082:	d807      	bhi.n	800e094 <ip4_input+0x74>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	891b      	ldrh	r3, [r3, #8]
 800e088:	89ba      	ldrh	r2, [r7, #12]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d802      	bhi.n	800e094 <ip4_input+0x74>
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	2b13      	cmp	r3, #19
 800e092:	d804      	bhi.n	800e09e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7f8 f8cd 	bl	8006234 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	e0db      	b.n	800e256 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	4a6f      	ldr	r2, [pc, #444]	; (800e260 <ip4_input+0x240>)
 800e0a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	4a6d      	ldr	r2, [pc, #436]	; (800e260 <ip4_input+0x240>)
 800e0ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0ae:	4b6c      	ldr	r3, [pc, #432]	; (800e260 <ip4_input+0x240>)
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0b6:	2be0      	cmp	r3, #224	; 0xe0
 800e0b8:	d112      	bne.n	800e0e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <ip4_input+0xba>
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <ip4_input+0xba>
      netif = inp;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	613b      	str	r3, [r7, #16]
 800e0d8:	e02a      	b.n	800e130 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	613b      	str	r3, [r7, #16]
 800e0de:	e027      	b.n	800e130 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e0e0:	6838      	ldr	r0, [r7, #0]
 800e0e2:	f7ff ff73 	bl	800dfcc <ip4_input_accept>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <ip4_input+0xd2>
      netif = inp;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	613b      	str	r3, [r7, #16]
 800e0f0:	e01e      	b.n	800e130 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e0f6:	4b5a      	ldr	r3, [pc, #360]	; (800e260 <ip4_input+0x240>)
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	2b7f      	cmp	r3, #127	; 0x7f
 800e0fe:	d017      	beq.n	800e130 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e100:	4b58      	ldr	r3, [pc, #352]	; (800e264 <ip4_input+0x244>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	613b      	str	r3, [r7, #16]
 800e106:	e00e      	b.n	800e126 <ip4_input+0x106>
          if (netif == inp) {
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d006      	beq.n	800e11e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e110:	6938      	ldr	r0, [r7, #16]
 800e112:	f7ff ff5b 	bl	800dfcc <ip4_input_accept>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d108      	bne.n	800e12e <ip4_input+0x10e>
 800e11c:	e000      	b.n	800e120 <ip4_input+0x100>
            continue;
 800e11e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	613b      	str	r3, [r7, #16]
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1ed      	bne.n	800e108 <ip4_input+0xe8>
 800e12c:	e000      	b.n	800e130 <ip4_input+0x110>
            break;
 800e12e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e130:	4b4b      	ldr	r3, [pc, #300]	; (800e260 <ip4_input+0x240>)
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	4618      	mov	r0, r3
 800e138:	f000 f96e 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d105      	bne.n	800e14e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e142:	4b47      	ldr	r3, [pc, #284]	; (800e260 <ip4_input+0x240>)
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e14a:	2be0      	cmp	r3, #224	; 0xe0
 800e14c:	d104      	bne.n	800e158 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7f8 f870 	bl	8006234 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e154:	2300      	movs	r3, #0
 800e156:	e07e      	b.n	800e256 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d104      	bne.n	800e168 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f8 f868 	bl	8006234 <pbuf_free>
    return ERR_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	e076      	b.n	800e256 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	88db      	ldrh	r3, [r3, #6]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	461a      	mov	r2, r3
 800e170:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e174:	4013      	ands	r3, r2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00b      	beq.n	800e192 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fc92 	bl	800eaa4 <ip4_reass>
 800e180:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <ip4_input+0x16c>
      return ERR_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	e064      	b.n	800e256 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e192:	4a33      	ldr	r2, [pc, #204]	; (800e260 <ip4_input+0x240>)
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e198:	4a31      	ldr	r2, [pc, #196]	; (800e260 <ip4_input+0x240>)
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e19e:	4a30      	ldr	r2, [pc, #192]	; (800e260 <ip4_input+0x240>)
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	4b2a      	ldr	r3, [pc, #168]	; (800e260 <ip4_input+0x240>)
 800e1b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e1b8:	89fb      	ldrh	r3, [r7, #14]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7f7 ffb3 	bl	8006128 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	7a5b      	ldrb	r3, [r3, #9]
 800e1c6:	2b11      	cmp	r3, #17
 800e1c8:	d006      	beq.n	800e1d8 <ip4_input+0x1b8>
 800e1ca:	2b11      	cmp	r3, #17
 800e1cc:	dc13      	bgt.n	800e1f6 <ip4_input+0x1d6>
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d00c      	beq.n	800e1ec <ip4_input+0x1cc>
 800e1d2:	2b06      	cmp	r3, #6
 800e1d4:	d005      	beq.n	800e1e2 <ip4_input+0x1c2>
 800e1d6:	e00e      	b.n	800e1f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7fe fc68 	bl	800cab0 <udp_input>
        break;
 800e1e0:	e026      	b.n	800e230 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7fa f889 	bl	80082fc <tcp_input>
        break;
 800e1ea:	e021      	b.n	800e230 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff fcee 	bl	800dbd0 <icmp_input>
        break;
 800e1f4:	e01c      	b.n	800e230 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1f6:	4b1a      	ldr	r3, [pc, #104]	; (800e260 <ip4_input+0x240>)
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	6939      	ldr	r1, [r7, #16]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 f90b 	bl	800e418 <ip4_addr_isbroadcast_u32>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10f      	bne.n	800e228 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e208:	4b15      	ldr	r3, [pc, #84]	; (800e260 <ip4_input+0x240>)
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e210:	2be0      	cmp	r3, #224	; 0xe0
 800e212:	d009      	beq.n	800e228 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7f7 fff7 	bl	800620e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e220:	2102      	movs	r1, #2
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff fdd8 	bl	800ddd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7f8 f803 	bl	8006234 <pbuf_free>
        break;
 800e22e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e230:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <ip4_input+0x240>)
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <ip4_input+0x240>)
 800e238:	2200      	movs	r2, #0
 800e23a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e23c:	4b08      	ldr	r3, [pc, #32]	; (800e260 <ip4_input+0x240>)
 800e23e:	2200      	movs	r2, #0
 800e240:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e242:	4b07      	ldr	r3, [pc, #28]	; (800e260 <ip4_input+0x240>)
 800e244:	2200      	movs	r2, #0
 800e246:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e248:	4b05      	ldr	r3, [pc, #20]	; (800e260 <ip4_input+0x240>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e24e:	4b04      	ldr	r3, [pc, #16]	; (800e260 <ip4_input+0x240>)
 800e250:	2200      	movs	r2, #0
 800e252:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20004d2c 	.word	0x20004d2c
 800e264:	20008290 	.word	0x20008290

0800e268 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	af04      	add	r7, sp, #16
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d009      	beq.n	800e294 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <ip4_output_if+0x26>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	3304      	adds	r3, #4
 800e292:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e294:	78fa      	ldrb	r2, [r7, #3]
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e29e:	9301      	str	r3, [sp, #4]
 800e2a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	6979      	ldr	r1, [r7, #20]
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 f805 	bl	800e2bc <ip4_output_if_src>
 800e2b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	7b9b      	ldrb	r3, [r3, #14]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d006      	beq.n	800e2e0 <ip4_output_if_src+0x24>
 800e2d2:	4b4b      	ldr	r3, [pc, #300]	; (800e400 <ip4_output_if_src+0x144>)
 800e2d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e2d8:	494a      	ldr	r1, [pc, #296]	; (800e404 <ip4_output_if_src+0x148>)
 800e2da:	484b      	ldr	r0, [pc, #300]	; (800e408 <ip4_output_if_src+0x14c>)
 800e2dc:	f001 f8f2 	bl	800f4c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d060      	beq.n	800e3a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e2e6:	2314      	movs	r3, #20
 800e2e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e2ea:	2114      	movs	r1, #20
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7f7 ff0b 	bl	8006108 <pbuf_add_header>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e2f8:	f06f 0301 	mvn.w	r3, #1
 800e2fc:	e07c      	b.n	800e3f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	895b      	ldrh	r3, [r3, #10]
 800e308:	2b13      	cmp	r3, #19
 800e30a:	d806      	bhi.n	800e31a <ip4_output_if_src+0x5e>
 800e30c:	4b3c      	ldr	r3, [pc, #240]	; (800e400 <ip4_output_if_src+0x144>)
 800e30e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e312:	493e      	ldr	r1, [pc, #248]	; (800e40c <ip4_output_if_src+0x150>)
 800e314:	483c      	ldr	r0, [pc, #240]	; (800e408 <ip4_output_if_src+0x14c>)
 800e316:	f001 f8d5 	bl	800f4c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	78fa      	ldrb	r2, [r7, #3]
 800e31e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e326:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e330:	8b7b      	ldrh	r3, [r7, #26]
 800e332:	089b      	lsrs	r3, r3, #2
 800e334:	b29b      	uxth	r3, r3
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e348:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	891b      	ldrh	r3, [r3, #8]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f6 fc12 	bl	8004b78 <lwip_htons>
 800e354:	4603      	mov	r3, r0
 800e356:	461a      	mov	r2, r3
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	2200      	movs	r2, #0
 800e360:	719a      	strb	r2, [r3, #6]
 800e362:	2200      	movs	r2, #0
 800e364:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e366:	4b2a      	ldr	r3, [pc, #168]	; (800e410 <ip4_output_if_src+0x154>)
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7f6 fc04 	bl	8004b78 <lwip_htons>
 800e370:	4603      	mov	r3, r0
 800e372:	461a      	mov	r2, r3
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e378:	4b25      	ldr	r3, [pc, #148]	; (800e410 <ip4_output_if_src+0x154>)
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	3301      	adds	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	4b23      	ldr	r3, [pc, #140]	; (800e410 <ip4_output_if_src+0x154>)
 800e382:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e38a:	4b22      	ldr	r3, [pc, #136]	; (800e414 <ip4_output_if_src+0x158>)
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	e003      	b.n	800e39c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	729a      	strb	r2, [r3, #10]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	72da      	strb	r2, [r3, #11]
 800e3a6:	e00f      	b.n	800e3c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	895b      	ldrh	r3, [r3, #10]
 800e3ac:	2b13      	cmp	r3, #19
 800e3ae:	d802      	bhi.n	800e3b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e3b0:	f06f 0301 	mvn.w	r3, #1
 800e3b4:	e020      	b.n	800e3f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e3c2:	f107 0314 	add.w	r3, r7, #20
 800e3c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00c      	beq.n	800e3ea <ip4_output_if_src+0x12e>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	891a      	ldrh	r2, [r3, #8]
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d906      	bls.n	800e3ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f000 fd53 	bl	800ee8c <ip4_frag>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	e006      	b.n	800e3f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	68f9      	ldr	r1, [r7, #12]
 800e3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3f4:	4798      	blx	r3
 800e3f6:	4603      	mov	r3, r0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3720      	adds	r7, #32
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	08012994 	.word	0x08012994
 800e404:	080129c8 	.word	0x080129c8
 800e408:	080129d4 	.word	0x080129d4
 800e40c:	080129fc 	.word	0x080129fc
 800e410:	200083ee 	.word	0x200083ee
 800e414:	08012ddc 	.word	0x08012ddc

0800e418 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42c:	d002      	beq.n	800e434 <ip4_addr_isbroadcast_u32+0x1c>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d101      	bne.n	800e438 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e434:	2301      	movs	r3, #1
 800e436:	e02a      	b.n	800e48e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e43e:	f003 0302 	and.w	r3, r3, #2
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e446:	2300      	movs	r3, #0
 800e448:	e021      	b.n	800e48e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	3304      	adds	r3, #4
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d101      	bne.n	800e45a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e456:	2300      	movs	r3, #0
 800e458:	e019      	b.n	800e48e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	3304      	adds	r3, #4
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	405a      	eors	r2, r3
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	3308      	adds	r3, #8
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4013      	ands	r3, r2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10d      	bne.n	800e48c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	3308      	adds	r3, #8
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	43da      	mvns	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e484:	429a      	cmp	r2, r3
 800e486:	d101      	bne.n	800e48c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e48c:	2300      	movs	r3, #0
  }
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
	...

0800e49c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e4a6:	4b12      	ldr	r3, [pc, #72]	; (800e4f0 <ip_reass_tmr+0x54>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e4ac:	e018      	b.n	800e4e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	7fdb      	ldrb	r3, [r3, #31]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00b      	beq.n	800e4ce <ip_reass_tmr+0x32>
      r->timer--;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	7fdb      	ldrb	r3, [r3, #31]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	e008      	b.n	800e4e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f80a 	bl	800e4f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e3      	bne.n	800e4ae <ip_reass_tmr+0x12>
    }
  }
}
 800e4e6:	bf00      	nop
 800e4e8:	bf00      	nop
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	200083f0 	.word	0x200083f0

0800e4f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b088      	sub	sp, #32
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e4fe:	2300      	movs	r3, #0
 800e500:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	429a      	cmp	r2, r3
 800e508:	d105      	bne.n	800e516 <ip_reass_free_complete_datagram+0x22>
 800e50a:	4b45      	ldr	r3, [pc, #276]	; (800e620 <ip_reass_free_complete_datagram+0x12c>)
 800e50c:	22ab      	movs	r2, #171	; 0xab
 800e50e:	4945      	ldr	r1, [pc, #276]	; (800e624 <ip_reass_free_complete_datagram+0x130>)
 800e510:	4845      	ldr	r0, [pc, #276]	; (800e628 <ip_reass_free_complete_datagram+0x134>)
 800e512:	f000 ffd7 	bl	800f4c4 <iprintf>
  if (prev != NULL) {
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	429a      	cmp	r2, r3
 800e524:	d005      	beq.n	800e532 <ip_reass_free_complete_datagram+0x3e>
 800e526:	4b3e      	ldr	r3, [pc, #248]	; (800e620 <ip_reass_free_complete_datagram+0x12c>)
 800e528:	22ad      	movs	r2, #173	; 0xad
 800e52a:	4940      	ldr	r1, [pc, #256]	; (800e62c <ip_reass_free_complete_datagram+0x138>)
 800e52c:	483e      	ldr	r0, [pc, #248]	; (800e628 <ip_reass_free_complete_datagram+0x134>)
 800e52e:	f000 ffc9 	bl	800f4c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	889b      	ldrh	r3, [r3, #4]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d12a      	bne.n	800e59a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	6858      	ldr	r0, [r3, #4]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3308      	adds	r3, #8
 800e55a:	2214      	movs	r2, #20
 800e55c:	4619      	mov	r1, r3
 800e55e:	f001 f88c 	bl	800f67a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e562:	2101      	movs	r1, #1
 800e564:	69b8      	ldr	r0, [r7, #24]
 800e566:	f7ff fc47 	bl	800ddf8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e56a:	69b8      	ldr	r0, [r7, #24]
 800e56c:	f7f7 feea 	bl	8006344 <pbuf_clen>
 800e570:	4603      	mov	r3, r0
 800e572:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e574:	8bfa      	ldrh	r2, [r7, #30]
 800e576:	8a7b      	ldrh	r3, [r7, #18]
 800e578:	4413      	add	r3, r2
 800e57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e57e:	db05      	blt.n	800e58c <ip_reass_free_complete_datagram+0x98>
 800e580:	4b27      	ldr	r3, [pc, #156]	; (800e620 <ip_reass_free_complete_datagram+0x12c>)
 800e582:	22bc      	movs	r2, #188	; 0xbc
 800e584:	492a      	ldr	r1, [pc, #168]	; (800e630 <ip_reass_free_complete_datagram+0x13c>)
 800e586:	4828      	ldr	r0, [pc, #160]	; (800e628 <ip_reass_free_complete_datagram+0x134>)
 800e588:	f000 ff9c 	bl	800f4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e58c:	8bfa      	ldrh	r2, [r7, #30]
 800e58e:	8a7b      	ldrh	r3, [r7, #18]
 800e590:	4413      	add	r3, r2
 800e592:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e594:	69b8      	ldr	r0, [r7, #24]
 800e596:	f7f7 fe4d 	bl	8006234 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e5a0:	e01f      	b.n	800e5e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f7f7 fec6 	bl	8006344 <pbuf_clen>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e5bc:	8bfa      	ldrh	r2, [r7, #30]
 800e5be:	8a7b      	ldrh	r3, [r7, #18]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5c6:	db05      	blt.n	800e5d4 <ip_reass_free_complete_datagram+0xe0>
 800e5c8:	4b15      	ldr	r3, [pc, #84]	; (800e620 <ip_reass_free_complete_datagram+0x12c>)
 800e5ca:	22cc      	movs	r2, #204	; 0xcc
 800e5cc:	4918      	ldr	r1, [pc, #96]	; (800e630 <ip_reass_free_complete_datagram+0x13c>)
 800e5ce:	4816      	ldr	r0, [pc, #88]	; (800e628 <ip_reass_free_complete_datagram+0x134>)
 800e5d0:	f000 ff78 	bl	800f4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e5d4:	8bfa      	ldrh	r2, [r7, #30]
 800e5d6:	8a7b      	ldrh	r3, [r7, #18]
 800e5d8:	4413      	add	r3, r2
 800e5da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7f7 fe29 	bl	8006234 <pbuf_free>
  while (p != NULL) {
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1dc      	bne.n	800e5a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f8c2 	bl	800e774 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e5f0:	4b10      	ldr	r3, [pc, #64]	; (800e634 <ip_reass_free_complete_datagram+0x140>)
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	8bfa      	ldrh	r2, [r7, #30]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d905      	bls.n	800e606 <ip_reass_free_complete_datagram+0x112>
 800e5fa:	4b09      	ldr	r3, [pc, #36]	; (800e620 <ip_reass_free_complete_datagram+0x12c>)
 800e5fc:	22d2      	movs	r2, #210	; 0xd2
 800e5fe:	490e      	ldr	r1, [pc, #56]	; (800e638 <ip_reass_free_complete_datagram+0x144>)
 800e600:	4809      	ldr	r0, [pc, #36]	; (800e628 <ip_reass_free_complete_datagram+0x134>)
 800e602:	f000 ff5f 	bl	800f4c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <ip_reass_free_complete_datagram+0x140>)
 800e608:	881a      	ldrh	r2, [r3, #0]
 800e60a:	8bfb      	ldrh	r3, [r7, #30]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	b29a      	uxth	r2, r3
 800e610:	4b08      	ldr	r3, [pc, #32]	; (800e634 <ip_reass_free_complete_datagram+0x140>)
 800e612:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e614:	8bfb      	ldrh	r3, [r7, #30]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	08012a2c 	.word	0x08012a2c
 800e624:	08012a68 	.word	0x08012a68
 800e628:	08012a74 	.word	0x08012a74
 800e62c:	08012a9c 	.word	0x08012a9c
 800e630:	08012ab0 	.word	0x08012ab0
 800e634:	200083f4 	.word	0x200083f4
 800e638:	08012ad0 	.word	0x08012ad0

0800e63c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08a      	sub	sp, #40	; 0x28
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e65a:	4b28      	ldr	r3, [pc, #160]	; (800e6fc <ip_reass_remove_oldest_datagram+0xc0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e660:	e030      	b.n	800e6c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	695a      	ldr	r2, [r3, #20]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d10c      	bne.n	800e688 <ip_reass_remove_oldest_datagram+0x4c>
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	429a      	cmp	r2, r3
 800e678:	d106      	bne.n	800e688 <ip_reass_remove_oldest_datagram+0x4c>
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	899a      	ldrh	r2, [r3, #12]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	889b      	ldrh	r3, [r3, #4]
 800e682:	b29b      	uxth	r3, r3
 800e684:	429a      	cmp	r2, r3
 800e686:	d014      	beq.n	800e6b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	3301      	adds	r3, #1
 800e68c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d104      	bne.n	800e69e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	61bb      	str	r3, [r7, #24]
 800e69c:	e009      	b.n	800e6b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	7fda      	ldrb	r2, [r3, #31]
 800e6a2:	6a3b      	ldr	r3, [r7, #32]
 800e6a4:	7fdb      	ldrb	r3, [r3, #31]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d803      	bhi.n	800e6b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1cb      	bne.n	800e662 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d008      	beq.n	800e6e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e6d0:	69b9      	ldr	r1, [r7, #24]
 800e6d2:	6a38      	ldr	r0, [r7, #32]
 800e6d4:	f7ff ff0e 	bl	800e4f4 <ip_reass_free_complete_datagram>
 800e6d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	4413      	add	r3, r2
 800e6e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	da02      	bge.n	800e6f0 <ip_reass_remove_oldest_datagram+0xb4>
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	dcac      	bgt.n	800e64a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e6f0:	697b      	ldr	r3, [r7, #20]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3728      	adds	r7, #40	; 0x28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	200083f0 	.word	0x200083f0

0800e700 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e70a:	2004      	movs	r0, #4
 800e70c:	f7f6 feac 	bl	8005468 <memp_malloc>
 800e710:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d110      	bne.n	800e73a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff ff8e 	bl	800e63c <ip_reass_remove_oldest_datagram>
 800e720:	4602      	mov	r2, r0
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	4293      	cmp	r3, r2
 800e726:	dc03      	bgt.n	800e730 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e728:	2004      	movs	r0, #4
 800e72a:	f7f6 fe9d 	bl	8005468 <memp_malloc>
 800e72e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e736:	2300      	movs	r3, #0
 800e738:	e016      	b.n	800e768 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e73a:	2220      	movs	r2, #32
 800e73c:	2100      	movs	r1, #0
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f000 ff25 	bl	800f58e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	220f      	movs	r2, #15
 800e748:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e74a:	4b09      	ldr	r3, [pc, #36]	; (800e770 <ip_reass_enqueue_new_datagram+0x70>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e752:	4a07      	ldr	r2, [pc, #28]	; (800e770 <ip_reass_enqueue_new_datagram+0x70>)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3308      	adds	r3, #8
 800e75c:	2214      	movs	r2, #20
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	4618      	mov	r0, r3
 800e762:	f000 ff8a 	bl	800f67a <memcpy>
  return ipr;
 800e766:	68fb      	ldr	r3, [r7, #12]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200083f0 	.word	0x200083f0

0800e774 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e77e:	4b10      	ldr	r3, [pc, #64]	; (800e7c0 <ip_reass_dequeue_datagram+0x4c>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d104      	bne.n	800e792 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <ip_reass_dequeue_datagram+0x4c>)
 800e78e:	6013      	str	r3, [r2, #0]
 800e790:	e00d      	b.n	800e7ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <ip_reass_dequeue_datagram+0x32>
 800e798:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <ip_reass_dequeue_datagram+0x50>)
 800e79a:	f240 1245 	movw	r2, #325	; 0x145
 800e79e:	490a      	ldr	r1, [pc, #40]	; (800e7c8 <ip_reass_dequeue_datagram+0x54>)
 800e7a0:	480a      	ldr	r0, [pc, #40]	; (800e7cc <ip_reass_dequeue_datagram+0x58>)
 800e7a2:	f000 fe8f 	bl	800f4c4 <iprintf>
    prev->next = ipr->next;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	2004      	movs	r0, #4
 800e7b2:	f7f6 fec9 	bl	8005548 <memp_free>
}
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	200083f0 	.word	0x200083f0
 800e7c4:	08012a2c 	.word	0x08012a2c
 800e7c8:	08012af4 	.word	0x08012af4
 800e7cc:	08012a74 	.word	0x08012a74

0800e7d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08c      	sub	sp, #48	; 0x30
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	885b      	ldrh	r3, [r3, #2]
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7f6 f9c1 	bl	8004b78 <lwip_htons>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	f003 030f 	and.w	r3, r3, #15
 800e802:	b2db      	uxtb	r3, r3
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e808:	7e7b      	ldrb	r3, [r7, #25]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	8b7a      	ldrh	r2, [r7, #26]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d202      	bcs.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e812:	f04f 33ff 	mov.w	r3, #4294967295
 800e816:	e135      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e818:	7e7b      	ldrb	r3, [r7, #25]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	8b7a      	ldrh	r2, [r7, #26]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	88db      	ldrh	r3, [r3, #6]
 800e826:	b29b      	uxth	r3, r3
 800e828:	4618      	mov	r0, r3
 800e82a:	f7f6 f9a5 	bl	8004b78 <lwip_htons>
 800e82e:	4603      	mov	r3, r0
 800e830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e834:	b29b      	uxth	r3, r3
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	2200      	movs	r2, #0
 800e844:	701a      	strb	r2, [r3, #0]
 800e846:	2200      	movs	r2, #0
 800e848:	705a      	strb	r2, [r3, #1]
 800e84a:	2200      	movs	r2, #0
 800e84c:	709a      	strb	r2, [r3, #2]
 800e84e:	2200      	movs	r2, #0
 800e850:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	8afa      	ldrh	r2, [r7, #22]
 800e856:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e858:	8afa      	ldrh	r2, [r7, #22]
 800e85a:	8b7b      	ldrh	r3, [r7, #26]
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	88db      	ldrh	r3, [r3, #6]
 800e868:	b29b      	uxth	r3, r3
 800e86a:	8afa      	ldrh	r2, [r7, #22]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d902      	bls.n	800e876 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e870:	f04f 33ff 	mov.w	r3, #4294967295
 800e874:	e106      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	627b      	str	r3, [r7, #36]	; 0x24
 800e87c:	e068      	b.n	800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	889b      	ldrh	r3, [r3, #4]
 800e888:	b29a      	uxth	r2, r3
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	889b      	ldrh	r3, [r3, #4]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	429a      	cmp	r2, r3
 800e892:	d235      	bcs.n	800e900 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e898:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d020      	beq.n	800e8e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	889b      	ldrh	r3, [r3, #4]
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	88db      	ldrh	r3, [r3, #6]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d307      	bcc.n	800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	88db      	ldrh	r3, [r3, #6]
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	889b      	ldrh	r3, [r3, #4]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d902      	bls.n	800e8c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c4:	e0de      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	88db      	ldrh	r3, [r3, #6]
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d4:	889b      	ldrh	r3, [r3, #4]
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d03d      	beq.n	800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e8e0:	e03a      	b.n	800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	88db      	ldrh	r3, [r3, #6]
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	889b      	ldrh	r3, [r3, #4]
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d902      	bls.n	800e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	e0c5      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	605a      	str	r2, [r3, #4]
      break;
 800e8fe:	e02b      	b.n	800e958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	889b      	ldrh	r3, [r3, #4]
 800e904:	b29a      	uxth	r2, r3
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	889b      	ldrh	r3, [r3, #4]
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d102      	bne.n	800e916 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e910:	f04f 33ff 	mov.w	r3, #4294967295
 800e914:	e0b6      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	889b      	ldrh	r3, [r3, #4]
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	88db      	ldrh	r3, [r3, #6]
 800e920:	b29b      	uxth	r3, r3
 800e922:	429a      	cmp	r2, r3
 800e924:	d202      	bcs.n	800e92c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e926:	f04f 33ff 	mov.w	r3, #4294967295
 800e92a:	e0ab      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e934:	88db      	ldrh	r3, [r3, #6]
 800e936:	b29a      	uxth	r2, r3
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	889b      	ldrh	r3, [r3, #4]
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	429a      	cmp	r2, r3
 800e940:	d001      	beq.n	800e946 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e942:	2300      	movs	r3, #0
 800e944:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	2b00      	cmp	r3, #0
 800e954:	d193      	bne.n	800e87e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e956:	e000      	b.n	800e95a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e958:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d12d      	bne.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	2b00      	cmp	r3, #0
 800e964:	d01c      	beq.n	800e9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	88db      	ldrh	r3, [r3, #6]
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	889b      	ldrh	r3, [r3, #4]
 800e970:	b29b      	uxth	r3, r3
 800e972:	429a      	cmp	r2, r3
 800e974:	d906      	bls.n	800e984 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e976:	4b45      	ldr	r3, [pc, #276]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e978:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e97c:	4944      	ldr	r1, [pc, #272]	; (800ea90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e97e:	4845      	ldr	r0, [pc, #276]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e980:	f000 fda0 	bl	800f4c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	88db      	ldrh	r3, [r3, #6]
 800e98e:	b29a      	uxth	r2, r3
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	889b      	ldrh	r3, [r3, #4]
 800e994:	b29b      	uxth	r3, r3
 800e996:	429a      	cmp	r2, r3
 800e998:	d010      	beq.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	623b      	str	r3, [r7, #32]
 800e99e:	e00d      	b.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d006      	beq.n	800e9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e9a8:	4b38      	ldr	r3, [pc, #224]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e9ae:	493a      	ldr	r1, [pc, #232]	; (800ea98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e9b0:	4838      	ldr	r0, [pc, #224]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9b2:	f000 fd87 	bl	800f4c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d105      	bne.n	800e9ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	7f9b      	ldrb	r3, [r3, #30]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d059      	beq.n	800ea82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d04f      	beq.n	800ea74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d006      	beq.n	800e9ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	889b      	ldrh	r3, [r3, #4]
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d002      	beq.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	623b      	str	r3, [r7, #32]
 800e9ee:	e041      	b.n	800ea74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e9fa:	e012      	b.n	800ea22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	88db      	ldrh	r3, [r3, #6]
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	889b      	ldrh	r3, [r3, #4]
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d002      	beq.n	800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	623b      	str	r3, [r7, #32]
            break;
 800ea16:	e007      	b.n	800ea28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e9      	bne.n	800e9fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d022      	beq.n	800ea74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ea36:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea38:	f240 12df 	movw	r2, #479	; 0x1df
 800ea3c:	4917      	ldr	r1, [pc, #92]	; (800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea3e:	4815      	ldr	r0, [pc, #84]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea40:	f000 fd40 	bl	800f4c4 <iprintf>
          LWIP_ASSERT("sanity check",
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d106      	bne.n	800ea5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ea50:	4b0e      	ldr	r3, [pc, #56]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ea56:	4911      	ldr	r1, [pc, #68]	; (800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea58:	480e      	ldr	r0, [pc, #56]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea5a:	f000 fd33 	bl	800f4c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d006      	beq.n	800ea74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ea66:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea68:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ea6c:	490c      	ldr	r1, [pc, #48]	; (800eaa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ea6e:	4809      	ldr	r0, [pc, #36]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea70:	f000 fd28 	bl	800f4c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	bf14      	ite	ne
 800ea7a:	2301      	movne	r3, #1
 800ea7c:	2300      	moveq	r3, #0
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	e000      	b.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ea82:	2300      	movs	r3, #0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3730      	adds	r7, #48	; 0x30
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	08012a2c 	.word	0x08012a2c
 800ea90:	08012b10 	.word	0x08012b10
 800ea94:	08012a74 	.word	0x08012a74
 800ea98:	08012b30 	.word	0x08012b30
 800ea9c:	08012b68 	.word	0x08012b68
 800eaa0:	08012b78 	.word	0x08012b78

0800eaa4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08e      	sub	sp, #56	; 0x38
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	f003 030f 	and.w	r3, r3, #15
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b14      	cmp	r3, #20
 800eac2:	f040 8171 	bne.w	800eda8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	88db      	ldrh	r3, [r3, #6]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4618      	mov	r0, r3
 800eace:	f7f6 f853 	bl	8004b78 <lwip_htons>
 800ead2:	4603      	mov	r3, r0
 800ead4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ead8:	b29b      	uxth	r3, r3
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	885b      	ldrh	r3, [r3, #2]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7f6 f847 	bl	8004b78 <lwip_htons>
 800eaea:	4603      	mov	r3, r0
 800eaec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	f003 030f 	and.w	r3, r3, #15
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eafe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb06:	429a      	cmp	r2, r3
 800eb08:	f0c0 8150 	bcc.w	800edac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eb0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7f7 fc13 	bl	8006344 <pbuf_clen>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eb22:	4b8c      	ldr	r3, [pc, #560]	; (800ed54 <ip4_reass+0x2b0>)
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	8c3b      	ldrh	r3, [r7, #32]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	2b0a      	cmp	r3, #10
 800eb2e:	dd10      	ble.n	800eb52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb30:	8c3b      	ldrh	r3, [r7, #32]
 800eb32:	4619      	mov	r1, r3
 800eb34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb36:	f7ff fd81 	bl	800e63c <ip_reass_remove_oldest_datagram>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 8137 	beq.w	800edb0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eb42:	4b84      	ldr	r3, [pc, #528]	; (800ed54 <ip4_reass+0x2b0>)
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	8c3b      	ldrh	r3, [r7, #32]
 800eb4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb4c:	2b0a      	cmp	r3, #10
 800eb4e:	f300 812f 	bgt.w	800edb0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb52:	4b81      	ldr	r3, [pc, #516]	; (800ed58 <ip4_reass+0x2b4>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	633b      	str	r3, [r7, #48]	; 0x30
 800eb58:	e015      	b.n	800eb86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	695a      	ldr	r2, [r3, #20]
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d10c      	bne.n	800eb80 <ip4_reass+0xdc>
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	699a      	ldr	r2, [r3, #24]
 800eb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d106      	bne.n	800eb80 <ip4_reass+0xdc>
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	899a      	ldrh	r2, [r3, #12]
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	889b      	ldrh	r3, [r3, #4]
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d006      	beq.n	800eb8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	633b      	str	r3, [r7, #48]	; 0x30
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1e6      	bne.n	800eb5a <ip4_reass+0xb6>
 800eb8c:	e000      	b.n	800eb90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eb8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d109      	bne.n	800ebaa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb96:	8c3b      	ldrh	r3, [r7, #32]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb9c:	f7ff fdb0 	bl	800e700 <ip_reass_enqueue_new_datagram>
 800eba0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d11c      	bne.n	800ebe2 <ip4_reass+0x13e>
      goto nullreturn;
 800eba8:	e105      	b.n	800edb6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	88db      	ldrh	r3, [r3, #6]
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7f5 ffe1 	bl	8004b78 <lwip_htons>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d110      	bne.n	800ebe2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	89db      	ldrh	r3, [r3, #14]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7f5 ffd7 	bl	8004b78 <lwip_htons>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d006      	beq.n	800ebe2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ebd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	2214      	movs	r2, #20
 800ebda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fd4c 	bl	800f67a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	88db      	ldrh	r3, [r3, #6]
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	f003 0320 	and.w	r3, r3, #32
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	bf0c      	ite	eq
 800ebf0:	2301      	moveq	r3, #1
 800ebf2:	2300      	movne	r3, #0
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00e      	beq.n	800ec1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ebfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec02:	4413      	add	r3, r2
 800ec04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ec06:	8b7a      	ldrh	r2, [r7, #26]
 800ec08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	f0c0 80a0 	bcc.w	800ed50 <ip4_reass+0x2ac>
 800ec10:	8b7b      	ldrh	r3, [r7, #26]
 800ec12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ec16:	4293      	cmp	r3, r2
 800ec18:	f200 809a 	bhi.w	800ed50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ec1c:	69fa      	ldr	r2, [r7, #28]
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec22:	f7ff fdd5 	bl	800e7d0 <ip_reass_chain_frag_into_datagram_and_validate>
 800ec26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2e:	f000 809b 	beq.w	800ed68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ec32:	4b48      	ldr	r3, [pc, #288]	; (800ed54 <ip4_reass+0x2b0>)
 800ec34:	881a      	ldrh	r2, [r3, #0]
 800ec36:	8c3b      	ldrh	r3, [r7, #32]
 800ec38:	4413      	add	r3, r2
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	4b45      	ldr	r3, [pc, #276]	; (800ed54 <ip4_reass+0x2b0>)
 800ec3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00d      	beq.n	800ec62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec4a:	4413      	add	r3, r2
 800ec4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	8a7a      	ldrh	r2, [r7, #18]
 800ec52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec56:	7f9b      	ldrb	r3, [r3, #30]
 800ec58:	f043 0301 	orr.w	r3, r3, #1
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d171      	bne.n	800ed4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	8b9b      	ldrh	r3, [r3, #28]
 800ec6c:	3314      	adds	r3, #20
 800ec6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	3308      	adds	r3, #8
 800ec86:	2214      	movs	r2, #20
 800ec88:	4619      	mov	r1, r3
 800ec8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec8c:	f000 fcf5 	bl	800f67a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec90:	8a3b      	ldrh	r3, [r7, #16]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7f5 ff70 	bl	8004b78 <lwip_htons>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	2200      	movs	r2, #0
 800eca4:	719a      	strb	r2, [r3, #6]
 800eca6:	2200      	movs	r2, #0
 800eca8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	2200      	movs	r2, #0
 800ecae:	729a      	strb	r2, [r3, #10]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ecba:	e00d      	b.n	800ecd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ecbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ecc2:	2114      	movs	r1, #20
 800ecc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecc6:	f7f7 fa2f 	bl	8006128 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ecca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7f7 fb73 	bl	80063b8 <pbuf_cat>
      r = iprh->next_pbuf;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1ee      	bne.n	800ecbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ecde:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <ip4_reass+0x2b4>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d102      	bne.n	800ecee <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecec:	e010      	b.n	800ed10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ecee:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <ip4_reass+0x2b4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecf4:	e007      	b.n	800ed06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d006      	beq.n	800ed0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1f4      	bne.n	800ecf6 <ip4_reass+0x252>
 800ed0c:	e000      	b.n	800ed10 <ip4_reass+0x26c>
          break;
 800ed0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed14:	f7ff fd2e 	bl	800e774 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7f7 fb13 	bl	8006344 <pbuf_clen>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ed22:	4b0c      	ldr	r3, [pc, #48]	; (800ed54 <ip4_reass+0x2b0>)
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	8c3a      	ldrh	r2, [r7, #32]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d906      	bls.n	800ed3a <ip4_reass+0x296>
 800ed2c:	4b0b      	ldr	r3, [pc, #44]	; (800ed5c <ip4_reass+0x2b8>)
 800ed2e:	f240 229b 	movw	r2, #667	; 0x29b
 800ed32:	490b      	ldr	r1, [pc, #44]	; (800ed60 <ip4_reass+0x2bc>)
 800ed34:	480b      	ldr	r0, [pc, #44]	; (800ed64 <ip4_reass+0x2c0>)
 800ed36:	f000 fbc5 	bl	800f4c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ed3a:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <ip4_reass+0x2b0>)
 800ed3c:	881a      	ldrh	r2, [r3, #0]
 800ed3e:	8c3b      	ldrh	r3, [r7, #32]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	4b03      	ldr	r3, [pc, #12]	; (800ed54 <ip4_reass+0x2b0>)
 800ed46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	e038      	b.n	800edbe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e036      	b.n	800edbe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ed50:	bf00      	nop
 800ed52:	e00a      	b.n	800ed6a <ip4_reass+0x2c6>
 800ed54:	200083f4 	.word	0x200083f4
 800ed58:	200083f0 	.word	0x200083f0
 800ed5c:	08012a2c 	.word	0x08012a2c
 800ed60:	08012b9c 	.word	0x08012b9c
 800ed64:	08012a74 	.word	0x08012a74
    goto nullreturn_ipr;
 800ed68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d106      	bne.n	800ed7e <ip4_reass+0x2da>
 800ed70:	4b15      	ldr	r3, [pc, #84]	; (800edc8 <ip4_reass+0x324>)
 800ed72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ed76:	4915      	ldr	r1, [pc, #84]	; (800edcc <ip4_reass+0x328>)
 800ed78:	4815      	ldr	r0, [pc, #84]	; (800edd0 <ip4_reass+0x32c>)
 800ed7a:	f000 fba3 	bl	800f4c4 <iprintf>
  if (ipr->p == NULL) {
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d116      	bne.n	800edb4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ed86:	4b13      	ldr	r3, [pc, #76]	; (800edd4 <ip4_reass+0x330>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d006      	beq.n	800ed9e <ip4_reass+0x2fa>
 800ed90:	4b0d      	ldr	r3, [pc, #52]	; (800edc8 <ip4_reass+0x324>)
 800ed92:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed96:	4910      	ldr	r1, [pc, #64]	; (800edd8 <ip4_reass+0x334>)
 800ed98:	480d      	ldr	r0, [pc, #52]	; (800edd0 <ip4_reass+0x32c>)
 800ed9a:	f000 fb93 	bl	800f4c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ed9e:	2100      	movs	r1, #0
 800eda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eda2:	f7ff fce7 	bl	800e774 <ip_reass_dequeue_datagram>
 800eda6:	e006      	b.n	800edb6 <ip4_reass+0x312>
    goto nullreturn;
 800eda8:	bf00      	nop
 800edaa:	e004      	b.n	800edb6 <ip4_reass+0x312>
    goto nullreturn;
 800edac:	bf00      	nop
 800edae:	e002      	b.n	800edb6 <ip4_reass+0x312>
      goto nullreturn;
 800edb0:	bf00      	nop
 800edb2:	e000      	b.n	800edb6 <ip4_reass+0x312>
  }

nullreturn:
 800edb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7f7 fa3c 	bl	8006234 <pbuf_free>
  return NULL;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3738      	adds	r7, #56	; 0x38
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	08012a2c 	.word	0x08012a2c
 800edcc:	08012bb8 	.word	0x08012bb8
 800edd0:	08012a74 	.word	0x08012a74
 800edd4:	200083f0 	.word	0x200083f0
 800edd8:	08012bc4 	.word	0x08012bc4

0800eddc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ede0:	2005      	movs	r0, #5
 800ede2:	f7f6 fb41 	bl	8005468 <memp_malloc>
 800ede6:	4603      	mov	r3, r0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	bd80      	pop	{r7, pc}

0800edec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d106      	bne.n	800ee08 <ip_frag_free_pbuf_custom_ref+0x1c>
 800edfa:	4b07      	ldr	r3, [pc, #28]	; (800ee18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800edfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ee00:	4906      	ldr	r1, [pc, #24]	; (800ee1c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ee02:	4807      	ldr	r0, [pc, #28]	; (800ee20 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ee04:	f000 fb5e 	bl	800f4c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	2005      	movs	r0, #5
 800ee0c:	f7f6 fb9c 	bl	8005548 <memp_free>
}
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	08012a2c 	.word	0x08012a2c
 800ee1c:	08012be4 	.word	0x08012be4
 800ee20:	08012a74 	.word	0x08012a74

0800ee24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d106      	bne.n	800ee44 <ipfrag_free_pbuf_custom+0x20>
 800ee36:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <ipfrag_free_pbuf_custom+0x58>)
 800ee38:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ee3c:	4910      	ldr	r1, [pc, #64]	; (800ee80 <ipfrag_free_pbuf_custom+0x5c>)
 800ee3e:	4811      	ldr	r0, [pc, #68]	; (800ee84 <ipfrag_free_pbuf_custom+0x60>)
 800ee40:	f000 fb40 	bl	800f4c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d006      	beq.n	800ee5a <ipfrag_free_pbuf_custom+0x36>
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <ipfrag_free_pbuf_custom+0x58>)
 800ee4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ee52:	490d      	ldr	r1, [pc, #52]	; (800ee88 <ipfrag_free_pbuf_custom+0x64>)
 800ee54:	480b      	ldr	r0, [pc, #44]	; (800ee84 <ipfrag_free_pbuf_custom+0x60>)
 800ee56:	f000 fb35 	bl	800f4c4 <iprintf>
  if (pcr->original != NULL) {
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d004      	beq.n	800ee6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f7 f9e4 	bl	8006234 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff ffbd 	bl	800edec <ip_frag_free_pbuf_custom_ref>
}
 800ee72:	bf00      	nop
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	08012a2c 	.word	0x08012a2c
 800ee80:	08012bf0 	.word	0x08012bf0
 800ee84:	08012a74 	.word	0x08012a74
 800ee88:	08012bfc 	.word	0x08012bfc

0800ee8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b094      	sub	sp, #80	; 0x50
 800ee90:	af02      	add	r7, sp, #8
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eea2:	3b14      	subs	r3, #20
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da00      	bge.n	800eeaa <ip4_frag+0x1e>
 800eea8:	3307      	adds	r3, #7
 800eeaa:	10db      	asrs	r3, r3, #3
 800eeac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eeae:	2314      	movs	r3, #20
 800eeb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800eeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f003 030f 	and.w	r3, r3, #15
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b14      	cmp	r3, #20
 800eecc:	d002      	beq.n	800eed4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800eece:	f06f 0305 	mvn.w	r3, #5
 800eed2:	e110      	b.n	800f0f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	895b      	ldrh	r3, [r3, #10]
 800eed8:	2b13      	cmp	r3, #19
 800eeda:	d809      	bhi.n	800eef0 <ip4_frag+0x64>
 800eedc:	4b88      	ldr	r3, [pc, #544]	; (800f100 <ip4_frag+0x274>)
 800eede:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800eee2:	4988      	ldr	r1, [pc, #544]	; (800f104 <ip4_frag+0x278>)
 800eee4:	4888      	ldr	r0, [pc, #544]	; (800f108 <ip4_frag+0x27c>)
 800eee6:	f000 faed 	bl	800f4c4 <iprintf>
 800eeea:	f06f 0305 	mvn.w	r3, #5
 800eeee:	e102      	b.n	800f0f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	88db      	ldrh	r3, [r3, #6]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f5 fe3e 	bl	8004b78 <lwip_htons>
 800eefc:	4603      	mov	r3, r0
 800eefe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ef00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	891b      	ldrh	r3, [r3, #8]
 800ef16:	3b14      	subs	r3, #20
 800ef18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ef1c:	e0e1      	b.n	800f0e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ef1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	bf28      	it	cs
 800ef2c:	4613      	movcs	r3, r2
 800ef2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ef30:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef34:	2114      	movs	r1, #20
 800ef36:	200e      	movs	r0, #14
 800ef38:	f7f6 fe98 	bl	8005c6c <pbuf_alloc>
 800ef3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f000 80d5 	beq.w	800f0f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	895b      	ldrh	r3, [r3, #10]
 800ef4a:	2b13      	cmp	r3, #19
 800ef4c:	d806      	bhi.n	800ef5c <ip4_frag+0xd0>
 800ef4e:	4b6c      	ldr	r3, [pc, #432]	; (800f100 <ip4_frag+0x274>)
 800ef50:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ef54:	496d      	ldr	r1, [pc, #436]	; (800f10c <ip4_frag+0x280>)
 800ef56:	486c      	ldr	r0, [pc, #432]	; (800f108 <ip4_frag+0x27c>)
 800ef58:	f000 fab4 	bl	800f4c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	2214      	movs	r2, #20
 800ef62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef64:	4618      	mov	r0, r3
 800ef66:	f000 fb88 	bl	800f67a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ef70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ef76:	e064      	b.n	800f042 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	895a      	ldrh	r2, [r3, #10]
 800ef7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	895b      	ldrh	r3, [r3, #10]
 800ef86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d906      	bls.n	800ef9a <ip4_frag+0x10e>
 800ef8c:	4b5c      	ldr	r3, [pc, #368]	; (800f100 <ip4_frag+0x274>)
 800ef8e:	f240 322d 	movw	r2, #813	; 0x32d
 800ef92:	495f      	ldr	r1, [pc, #380]	; (800f110 <ip4_frag+0x284>)
 800ef94:	485c      	ldr	r0, [pc, #368]	; (800f108 <ip4_frag+0x27c>)
 800ef96:	f000 fa95 	bl	800f4c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ef9a:	8bfa      	ldrh	r2, [r7, #30]
 800ef9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bf28      	it	cs
 800efa4:	4613      	movcs	r3, r2
 800efa6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800efaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d105      	bne.n	800efbe <ip4_frag+0x132>
        poff = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60fb      	str	r3, [r7, #12]
        continue;
 800efbc:	e041      	b.n	800f042 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800efbe:	f7ff ff0d 	bl	800eddc <ip_frag_alloc_pbuf_custom_ref>
 800efc2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d103      	bne.n	800efd2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800efca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efcc:	f7f7 f932 	bl	8006234 <pbuf_free>
        goto memerr;
 800efd0:	e08f      	b.n	800f0f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efd2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efda:	4413      	add	r3, r2
 800efdc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800efe0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800efe4:	9201      	str	r2, [sp, #4]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	4603      	mov	r3, r0
 800efea:	2241      	movs	r2, #65	; 0x41
 800efec:	2000      	movs	r0, #0
 800efee:	f7f6 ff67 	bl	8005ec0 <pbuf_alloced_custom>
 800eff2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800effa:	69b8      	ldr	r0, [r7, #24]
 800effc:	f7ff fef6 	bl	800edec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f002:	f7f7 f917 	bl	8006234 <pbuf_free>
        goto memerr;
 800f006:	e074      	b.n	800f0f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7f7 f9b3 	bl	8006374 <pbuf_ref>
      pcr->original = p;
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	4a3f      	ldr	r2, [pc, #252]	; (800f114 <ip4_frag+0x288>)
 800f018:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f01a:	6979      	ldr	r1, [r7, #20]
 800f01c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f01e:	f7f7 f9cb 	bl	80063b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f022:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f034:	2b00      	cmp	r3, #0
 800f036:	d004      	beq.n	800f042 <ip4_frag+0x1b6>
        poff = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f046:	2b00      	cmp	r3, #0
 800f048:	d196      	bne.n	800ef78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f04a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f04c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f050:	4413      	add	r3, r2
 800f052:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f058:	f1a3 0213 	sub.w	r2, r3, #19
 800f05c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f060:	429a      	cmp	r2, r3
 800f062:	bfcc      	ite	gt
 800f064:	2301      	movgt	r3, #1
 800f066:	2300      	movle	r3, #0
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f06c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f074:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d002      	beq.n	800f082 <ip4_frag+0x1f6>
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d003      	beq.n	800f08a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f088:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f08a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f5 fd73 	bl	8004b78 <lwip_htons>
 800f092:	4603      	mov	r3, r0
 800f094:	461a      	mov	r2, r3
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f09a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f09c:	3314      	adds	r3, #20
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7f5 fd69 	bl	8004b78 <lwip_htons>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	729a      	strb	r2, [r3, #10]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0c0:	68b8      	ldr	r0, [r7, #8]
 800f0c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f0c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0c6:	f7f7 f8b5 	bl	8006234 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f0ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f0d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f0da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f0dc:	4413      	add	r3, r2
 800f0de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f0e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f47f af19 	bne.w	800ef1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	e002      	b.n	800f0f6 <ip4_frag+0x26a>
      goto memerr;
 800f0f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3748      	adds	r7, #72	; 0x48
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	08012a2c 	.word	0x08012a2c
 800f104:	08012c08 	.word	0x08012c08
 800f108:	08012a74 	.word	0x08012a74
 800f10c:	08012c24 	.word	0x08012c24
 800f110:	08012c44 	.word	0x08012c44
 800f114:	0800ee25 	.word	0x0800ee25

0800f118 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f122:	230e      	movs	r3, #14
 800f124:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	895b      	ldrh	r3, [r3, #10]
 800f12a:	2b0e      	cmp	r3, #14
 800f12c:	d96e      	bls.n	800f20c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7bdb      	ldrb	r3, [r3, #15]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d106      	bne.n	800f144 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f13c:	3301      	adds	r3, #1
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	7b1a      	ldrb	r2, [r3, #12]
 800f14e:	7b5b      	ldrb	r3, [r3, #13]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	4313      	orrs	r3, r2
 800f154:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d023      	beq.n	800f1aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d10f      	bne.n	800f18a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	785b      	ldrb	r3, [r3, #1]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d11b      	bne.n	800f1aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f176:	2b5e      	cmp	r3, #94	; 0x5e
 800f178:	d117      	bne.n	800f1aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7b5b      	ldrb	r3, [r3, #13]
 800f17e:	f043 0310 	orr.w	r3, r3, #16
 800f182:	b2da      	uxtb	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	735a      	strb	r2, [r3, #13]
 800f188:	e00f      	b.n	800f1aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	2206      	movs	r2, #6
 800f18e:	4928      	ldr	r1, [pc, #160]	; (800f230 <ethernet_input+0x118>)
 800f190:	4618      	mov	r0, r3
 800f192:	f000 f9ec 	bl	800f56e <memcmp>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d106      	bne.n	800f1aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	7b5b      	ldrb	r3, [r3, #13]
 800f1a0:	f043 0308 	orr.w	r3, r3, #8
 800f1a4:	b2da      	uxtb	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f1aa:	89fb      	ldrh	r3, [r7, #14]
 800f1ac:	2b08      	cmp	r3, #8
 800f1ae:	d003      	beq.n	800f1b8 <ethernet_input+0xa0>
 800f1b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f1b4:	d014      	beq.n	800f1e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f1b6:	e032      	b.n	800f21e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1be:	f003 0308 	and.w	r3, r3, #8
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d024      	beq.n	800f210 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f1c6:	8afb      	ldrh	r3, [r7, #22]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7f6 ffac 	bl	8006128 <pbuf_remove_header>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d11e      	bne.n	800f214 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f1d6:	6839      	ldr	r1, [r7, #0]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7fe ff21 	bl	800e020 <ip4_input>
      break;
 800f1de:	e013      	b.n	800f208 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1e6:	f003 0308 	and.w	r3, r3, #8
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d014      	beq.n	800f218 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f1ee:	8afb      	ldrh	r3, [r7, #22]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7f6 ff98 	bl	8006128 <pbuf_remove_header>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10e      	bne.n	800f21c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7fe f8c1 	bl	800d388 <etharp_input>
      break;
 800f206:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	e00c      	b.n	800f226 <ethernet_input+0x10e>
    goto free_and_return;
 800f20c:	bf00      	nop
 800f20e:	e006      	b.n	800f21e <ethernet_input+0x106>
        goto free_and_return;
 800f210:	bf00      	nop
 800f212:	e004      	b.n	800f21e <ethernet_input+0x106>
        goto free_and_return;
 800f214:	bf00      	nop
 800f216:	e002      	b.n	800f21e <ethernet_input+0x106>
        goto free_and_return;
 800f218:	bf00      	nop
 800f21a:	e000      	b.n	800f21e <ethernet_input+0x106>
        goto free_and_return;
 800f21c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7f7 f808 	bl	8006234 <pbuf_free>
  return ERR_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	08012de0 	.word	0x08012de0

0800f234 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f234:	b580      	push	{r7, lr}
 800f236:	b086      	sub	sp, #24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
 800f240:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f242:	8c3b      	ldrh	r3, [r7, #32]
 800f244:	4618      	mov	r0, r3
 800f246:	f7f5 fc97 	bl	8004b78 <lwip_htons>
 800f24a:	4603      	mov	r3, r0
 800f24c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f24e:	210e      	movs	r1, #14
 800f250:	68b8      	ldr	r0, [r7, #8]
 800f252:	f7f6 ff59 	bl	8006108 <pbuf_add_header>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d125      	bne.n	800f2a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	8afa      	ldrh	r2, [r7, #22]
 800f266:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	2206      	movs	r2, #6
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fa03 	bl	800f67a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	3306      	adds	r3, #6
 800f278:	2206      	movs	r2, #6
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 f9fc 	bl	800f67a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f288:	2b06      	cmp	r3, #6
 800f28a:	d006      	beq.n	800f29a <ethernet_output+0x66>
 800f28c:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <ethernet_output+0x84>)
 800f28e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f292:	490a      	ldr	r1, [pc, #40]	; (800f2bc <ethernet_output+0x88>)
 800f294:	480a      	ldr	r0, [pc, #40]	; (800f2c0 <ethernet_output+0x8c>)
 800f296:	f000 f915 	bl	800f4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	699b      	ldr	r3, [r3, #24]
 800f29e:	68b9      	ldr	r1, [r7, #8]
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	4798      	blx	r3
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	e002      	b.n	800f2ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f2a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f2aa:	f06f 0301 	mvn.w	r3, #1
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	08012c54 	.word	0x08012c54
 800f2bc:	08012c8c 	.word	0x08012c8c
 800f2c0:	08012cc0 	.word	0x08012cc0

0800f2c4 <rand>:
 800f2c4:	4b16      	ldr	r3, [pc, #88]	; (800f320 <rand+0x5c>)
 800f2c6:	b510      	push	{r4, lr}
 800f2c8:	681c      	ldr	r4, [r3, #0]
 800f2ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2cc:	b9b3      	cbnz	r3, 800f2fc <rand+0x38>
 800f2ce:	2018      	movs	r0, #24
 800f2d0:	f000 fa4c 	bl	800f76c <malloc>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	6320      	str	r0, [r4, #48]	; 0x30
 800f2d8:	b920      	cbnz	r0, 800f2e4 <rand+0x20>
 800f2da:	4b12      	ldr	r3, [pc, #72]	; (800f324 <rand+0x60>)
 800f2dc:	4812      	ldr	r0, [pc, #72]	; (800f328 <rand+0x64>)
 800f2de:	2152      	movs	r1, #82	; 0x52
 800f2e0:	f000 f9da 	bl	800f698 <__assert_func>
 800f2e4:	4911      	ldr	r1, [pc, #68]	; (800f32c <rand+0x68>)
 800f2e6:	4b12      	ldr	r3, [pc, #72]	; (800f330 <rand+0x6c>)
 800f2e8:	e9c0 1300 	strd	r1, r3, [r0]
 800f2ec:	4b11      	ldr	r3, [pc, #68]	; (800f334 <rand+0x70>)
 800f2ee:	6083      	str	r3, [r0, #8]
 800f2f0:	230b      	movs	r3, #11
 800f2f2:	8183      	strh	r3, [r0, #12]
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	2001      	movs	r0, #1
 800f2f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f2fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f2fe:	480e      	ldr	r0, [pc, #56]	; (800f338 <rand+0x74>)
 800f300:	690b      	ldr	r3, [r1, #16]
 800f302:	694c      	ldr	r4, [r1, #20]
 800f304:	4a0d      	ldr	r2, [pc, #52]	; (800f33c <rand+0x78>)
 800f306:	4358      	muls	r0, r3
 800f308:	fb02 0004 	mla	r0, r2, r4, r0
 800f30c:	fba3 3202 	umull	r3, r2, r3, r2
 800f310:	3301      	adds	r3, #1
 800f312:	eb40 0002 	adc.w	r0, r0, r2
 800f316:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f31a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f31e:	bd10      	pop	{r4, pc}
 800f320:	20000084 	.word	0x20000084
 800f324:	08012dee 	.word	0x08012dee
 800f328:	08012e05 	.word	0x08012e05
 800f32c:	abcd330e 	.word	0xabcd330e
 800f330:	e66d1234 	.word	0xe66d1234
 800f334:	0005deec 	.word	0x0005deec
 800f338:	5851f42d 	.word	0x5851f42d
 800f33c:	4c957f2d 	.word	0x4c957f2d

0800f340 <std>:
 800f340:	2300      	movs	r3, #0
 800f342:	b510      	push	{r4, lr}
 800f344:	4604      	mov	r4, r0
 800f346:	e9c0 3300 	strd	r3, r3, [r0]
 800f34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f34e:	6083      	str	r3, [r0, #8]
 800f350:	8181      	strh	r1, [r0, #12]
 800f352:	6643      	str	r3, [r0, #100]	; 0x64
 800f354:	81c2      	strh	r2, [r0, #14]
 800f356:	6183      	str	r3, [r0, #24]
 800f358:	4619      	mov	r1, r3
 800f35a:	2208      	movs	r2, #8
 800f35c:	305c      	adds	r0, #92	; 0x5c
 800f35e:	f000 f916 	bl	800f58e <memset>
 800f362:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <std+0x58>)
 800f364:	6263      	str	r3, [r4, #36]	; 0x24
 800f366:	4b0d      	ldr	r3, [pc, #52]	; (800f39c <std+0x5c>)
 800f368:	62a3      	str	r3, [r4, #40]	; 0x28
 800f36a:	4b0d      	ldr	r3, [pc, #52]	; (800f3a0 <std+0x60>)
 800f36c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f36e:	4b0d      	ldr	r3, [pc, #52]	; (800f3a4 <std+0x64>)
 800f370:	6323      	str	r3, [r4, #48]	; 0x30
 800f372:	4b0d      	ldr	r3, [pc, #52]	; (800f3a8 <std+0x68>)
 800f374:	6224      	str	r4, [r4, #32]
 800f376:	429c      	cmp	r4, r3
 800f378:	d006      	beq.n	800f388 <std+0x48>
 800f37a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f37e:	4294      	cmp	r4, r2
 800f380:	d002      	beq.n	800f388 <std+0x48>
 800f382:	33d0      	adds	r3, #208	; 0xd0
 800f384:	429c      	cmp	r4, r3
 800f386:	d105      	bne.n	800f394 <std+0x54>
 800f388:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f390:	f000 b970 	b.w	800f674 <__retarget_lock_init_recursive>
 800f394:	bd10      	pop	{r4, pc}
 800f396:	bf00      	nop
 800f398:	0800f4e9 	.word	0x0800f4e9
 800f39c:	0800f50b 	.word	0x0800f50b
 800f3a0:	0800f543 	.word	0x0800f543
 800f3a4:	0800f567 	.word	0x0800f567
 800f3a8:	200083f8 	.word	0x200083f8

0800f3ac <stdio_exit_handler>:
 800f3ac:	4a02      	ldr	r2, [pc, #8]	; (800f3b8 <stdio_exit_handler+0xc>)
 800f3ae:	4903      	ldr	r1, [pc, #12]	; (800f3bc <stdio_exit_handler+0x10>)
 800f3b0:	4803      	ldr	r0, [pc, #12]	; (800f3c0 <stdio_exit_handler+0x14>)
 800f3b2:	f000 b869 	b.w	800f488 <_fwalk_sglue>
 800f3b6:	bf00      	nop
 800f3b8:	2000002c 	.word	0x2000002c
 800f3bc:	0800ff89 	.word	0x0800ff89
 800f3c0:	20000038 	.word	0x20000038

0800f3c4 <cleanup_stdio>:
 800f3c4:	6841      	ldr	r1, [r0, #4]
 800f3c6:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <cleanup_stdio+0x34>)
 800f3c8:	4299      	cmp	r1, r3
 800f3ca:	b510      	push	{r4, lr}
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	d001      	beq.n	800f3d4 <cleanup_stdio+0x10>
 800f3d0:	f000 fdda 	bl	800ff88 <_fflush_r>
 800f3d4:	68a1      	ldr	r1, [r4, #8]
 800f3d6:	4b09      	ldr	r3, [pc, #36]	; (800f3fc <cleanup_stdio+0x38>)
 800f3d8:	4299      	cmp	r1, r3
 800f3da:	d002      	beq.n	800f3e2 <cleanup_stdio+0x1e>
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f000 fdd3 	bl	800ff88 <_fflush_r>
 800f3e2:	68e1      	ldr	r1, [r4, #12]
 800f3e4:	4b06      	ldr	r3, [pc, #24]	; (800f400 <cleanup_stdio+0x3c>)
 800f3e6:	4299      	cmp	r1, r3
 800f3e8:	d004      	beq.n	800f3f4 <cleanup_stdio+0x30>
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3f0:	f000 bdca 	b.w	800ff88 <_fflush_r>
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	bf00      	nop
 800f3f8:	200083f8 	.word	0x200083f8
 800f3fc:	20008460 	.word	0x20008460
 800f400:	200084c8 	.word	0x200084c8

0800f404 <global_stdio_init.part.0>:
 800f404:	b510      	push	{r4, lr}
 800f406:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <global_stdio_init.part.0+0x30>)
 800f408:	4c0b      	ldr	r4, [pc, #44]	; (800f438 <global_stdio_init.part.0+0x34>)
 800f40a:	4a0c      	ldr	r2, [pc, #48]	; (800f43c <global_stdio_init.part.0+0x38>)
 800f40c:	601a      	str	r2, [r3, #0]
 800f40e:	4620      	mov	r0, r4
 800f410:	2200      	movs	r2, #0
 800f412:	2104      	movs	r1, #4
 800f414:	f7ff ff94 	bl	800f340 <std>
 800f418:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f41c:	2201      	movs	r2, #1
 800f41e:	2109      	movs	r1, #9
 800f420:	f7ff ff8e 	bl	800f340 <std>
 800f424:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f428:	2202      	movs	r2, #2
 800f42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f42e:	2112      	movs	r1, #18
 800f430:	f7ff bf86 	b.w	800f340 <std>
 800f434:	20008530 	.word	0x20008530
 800f438:	200083f8 	.word	0x200083f8
 800f43c:	0800f3ad 	.word	0x0800f3ad

0800f440 <__sfp_lock_acquire>:
 800f440:	4801      	ldr	r0, [pc, #4]	; (800f448 <__sfp_lock_acquire+0x8>)
 800f442:	f000 b918 	b.w	800f676 <__retarget_lock_acquire_recursive>
 800f446:	bf00      	nop
 800f448:	20008539 	.word	0x20008539

0800f44c <__sfp_lock_release>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__sfp_lock_release+0x8>)
 800f44e:	f000 b913 	b.w	800f678 <__retarget_lock_release_recursive>
 800f452:	bf00      	nop
 800f454:	20008539 	.word	0x20008539

0800f458 <__sinit>:
 800f458:	b510      	push	{r4, lr}
 800f45a:	4604      	mov	r4, r0
 800f45c:	f7ff fff0 	bl	800f440 <__sfp_lock_acquire>
 800f460:	6a23      	ldr	r3, [r4, #32]
 800f462:	b11b      	cbz	r3, 800f46c <__sinit+0x14>
 800f464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f468:	f7ff bff0 	b.w	800f44c <__sfp_lock_release>
 800f46c:	4b04      	ldr	r3, [pc, #16]	; (800f480 <__sinit+0x28>)
 800f46e:	6223      	str	r3, [r4, #32]
 800f470:	4b04      	ldr	r3, [pc, #16]	; (800f484 <__sinit+0x2c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1f5      	bne.n	800f464 <__sinit+0xc>
 800f478:	f7ff ffc4 	bl	800f404 <global_stdio_init.part.0>
 800f47c:	e7f2      	b.n	800f464 <__sinit+0xc>
 800f47e:	bf00      	nop
 800f480:	0800f3c5 	.word	0x0800f3c5
 800f484:	20008530 	.word	0x20008530

0800f488 <_fwalk_sglue>:
 800f488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f48c:	4607      	mov	r7, r0
 800f48e:	4688      	mov	r8, r1
 800f490:	4614      	mov	r4, r2
 800f492:	2600      	movs	r6, #0
 800f494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f498:	f1b9 0901 	subs.w	r9, r9, #1
 800f49c:	d505      	bpl.n	800f4aa <_fwalk_sglue+0x22>
 800f49e:	6824      	ldr	r4, [r4, #0]
 800f4a0:	2c00      	cmp	r4, #0
 800f4a2:	d1f7      	bne.n	800f494 <_fwalk_sglue+0xc>
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4aa:	89ab      	ldrh	r3, [r5, #12]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d907      	bls.n	800f4c0 <_fwalk_sglue+0x38>
 800f4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	d003      	beq.n	800f4c0 <_fwalk_sglue+0x38>
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	47c0      	blx	r8
 800f4be:	4306      	orrs	r6, r0
 800f4c0:	3568      	adds	r5, #104	; 0x68
 800f4c2:	e7e9      	b.n	800f498 <_fwalk_sglue+0x10>

0800f4c4 <iprintf>:
 800f4c4:	b40f      	push	{r0, r1, r2, r3}
 800f4c6:	b507      	push	{r0, r1, r2, lr}
 800f4c8:	4906      	ldr	r1, [pc, #24]	; (800f4e4 <iprintf+0x20>)
 800f4ca:	ab04      	add	r3, sp, #16
 800f4cc:	6808      	ldr	r0, [r1, #0]
 800f4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d2:	6881      	ldr	r1, [r0, #8]
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	f000 fa27 	bl	800f928 <_vfiprintf_r>
 800f4da:	b003      	add	sp, #12
 800f4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e0:	b004      	add	sp, #16
 800f4e2:	4770      	bx	lr
 800f4e4:	20000084 	.word	0x20000084

0800f4e8 <__sread>:
 800f4e8:	b510      	push	{r4, lr}
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f0:	f000 f878 	bl	800f5e4 <_read_r>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	bfab      	itete	ge
 800f4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f4fc:	181b      	addge	r3, r3, r0
 800f4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f502:	bfac      	ite	ge
 800f504:	6563      	strge	r3, [r4, #84]	; 0x54
 800f506:	81a3      	strhlt	r3, [r4, #12]
 800f508:	bd10      	pop	{r4, pc}

0800f50a <__swrite>:
 800f50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50e:	461f      	mov	r7, r3
 800f510:	898b      	ldrh	r3, [r1, #12]
 800f512:	05db      	lsls	r3, r3, #23
 800f514:	4605      	mov	r5, r0
 800f516:	460c      	mov	r4, r1
 800f518:	4616      	mov	r6, r2
 800f51a:	d505      	bpl.n	800f528 <__swrite+0x1e>
 800f51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f520:	2302      	movs	r3, #2
 800f522:	2200      	movs	r2, #0
 800f524:	f000 f84c 	bl	800f5c0 <_lseek_r>
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	4632      	mov	r2, r6
 800f536:	463b      	mov	r3, r7
 800f538:	4628      	mov	r0, r5
 800f53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f53e:	f000 b863 	b.w	800f608 <_write_r>

0800f542 <__sseek>:
 800f542:	b510      	push	{r4, lr}
 800f544:	460c      	mov	r4, r1
 800f546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54a:	f000 f839 	bl	800f5c0 <_lseek_r>
 800f54e:	1c43      	adds	r3, r0, #1
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	bf15      	itete	ne
 800f554:	6560      	strne	r0, [r4, #84]	; 0x54
 800f556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f55a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f55e:	81a3      	strheq	r3, [r4, #12]
 800f560:	bf18      	it	ne
 800f562:	81a3      	strhne	r3, [r4, #12]
 800f564:	bd10      	pop	{r4, pc}

0800f566 <__sclose>:
 800f566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f56a:	f000 b819 	b.w	800f5a0 <_close_r>

0800f56e <memcmp>:
 800f56e:	b510      	push	{r4, lr}
 800f570:	3901      	subs	r1, #1
 800f572:	4402      	add	r2, r0
 800f574:	4290      	cmp	r0, r2
 800f576:	d101      	bne.n	800f57c <memcmp+0xe>
 800f578:	2000      	movs	r0, #0
 800f57a:	e005      	b.n	800f588 <memcmp+0x1a>
 800f57c:	7803      	ldrb	r3, [r0, #0]
 800f57e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f582:	42a3      	cmp	r3, r4
 800f584:	d001      	beq.n	800f58a <memcmp+0x1c>
 800f586:	1b18      	subs	r0, r3, r4
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	3001      	adds	r0, #1
 800f58c:	e7f2      	b.n	800f574 <memcmp+0x6>

0800f58e <memset>:
 800f58e:	4402      	add	r2, r0
 800f590:	4603      	mov	r3, r0
 800f592:	4293      	cmp	r3, r2
 800f594:	d100      	bne.n	800f598 <memset+0xa>
 800f596:	4770      	bx	lr
 800f598:	f803 1b01 	strb.w	r1, [r3], #1
 800f59c:	e7f9      	b.n	800f592 <memset+0x4>
	...

0800f5a0 <_close_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d06      	ldr	r5, [pc, #24]	; (800f5bc <_close_r+0x1c>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	602b      	str	r3, [r5, #0]
 800f5ac:	f7f1 fa75 	bl	8000a9a <_close>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_close_r+0x1a>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_close_r+0x1a>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	20008534 	.word	0x20008534

0800f5c0 <_lseek_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d07      	ldr	r5, [pc, #28]	; (800f5e0 <_lseek_r+0x20>)
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	602a      	str	r2, [r5, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	f7f1 fa8a 	bl	8000ae8 <_lseek>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_lseek_r+0x1e>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_lseek_r+0x1e>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	20008534 	.word	0x20008534

0800f5e4 <_read_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d07      	ldr	r5, [pc, #28]	; (800f604 <_read_r+0x20>)
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	602a      	str	r2, [r5, #0]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	f7f1 fa18 	bl	8000a28 <_read>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d102      	bne.n	800f602 <_read_r+0x1e>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b103      	cbz	r3, 800f602 <_read_r+0x1e>
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	20008534 	.word	0x20008534

0800f608 <_write_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d07      	ldr	r5, [pc, #28]	; (800f628 <_write_r+0x20>)
 800f60c:	4604      	mov	r4, r0
 800f60e:	4608      	mov	r0, r1
 800f610:	4611      	mov	r1, r2
 800f612:	2200      	movs	r2, #0
 800f614:	602a      	str	r2, [r5, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	f7f1 fa23 	bl	8000a62 <_write>
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	d102      	bne.n	800f626 <_write_r+0x1e>
 800f620:	682b      	ldr	r3, [r5, #0]
 800f622:	b103      	cbz	r3, 800f626 <_write_r+0x1e>
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	20008534 	.word	0x20008534

0800f62c <__libc_init_array>:
 800f62c:	b570      	push	{r4, r5, r6, lr}
 800f62e:	4d0d      	ldr	r5, [pc, #52]	; (800f664 <__libc_init_array+0x38>)
 800f630:	4c0d      	ldr	r4, [pc, #52]	; (800f668 <__libc_init_array+0x3c>)
 800f632:	1b64      	subs	r4, r4, r5
 800f634:	10a4      	asrs	r4, r4, #2
 800f636:	2600      	movs	r6, #0
 800f638:	42a6      	cmp	r6, r4
 800f63a:	d109      	bne.n	800f650 <__libc_init_array+0x24>
 800f63c:	4d0b      	ldr	r5, [pc, #44]	; (800f66c <__libc_init_array+0x40>)
 800f63e:	4c0c      	ldr	r4, [pc, #48]	; (800f670 <__libc_init_array+0x44>)
 800f640:	f000 fe52 	bl	80102e8 <_init>
 800f644:	1b64      	subs	r4, r4, r5
 800f646:	10a4      	asrs	r4, r4, #2
 800f648:	2600      	movs	r6, #0
 800f64a:	42a6      	cmp	r6, r4
 800f64c:	d105      	bne.n	800f65a <__libc_init_array+0x2e>
 800f64e:	bd70      	pop	{r4, r5, r6, pc}
 800f650:	f855 3b04 	ldr.w	r3, [r5], #4
 800f654:	4798      	blx	r3
 800f656:	3601      	adds	r6, #1
 800f658:	e7ee      	b.n	800f638 <__libc_init_array+0xc>
 800f65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65e:	4798      	blx	r3
 800f660:	3601      	adds	r6, #1
 800f662:	e7f2      	b.n	800f64a <__libc_init_array+0x1e>
 800f664:	08012ed4 	.word	0x08012ed4
 800f668:	08012ed4 	.word	0x08012ed4
 800f66c:	08012ed4 	.word	0x08012ed4
 800f670:	08012ed8 	.word	0x08012ed8

0800f674 <__retarget_lock_init_recursive>:
 800f674:	4770      	bx	lr

0800f676 <__retarget_lock_acquire_recursive>:
 800f676:	4770      	bx	lr

0800f678 <__retarget_lock_release_recursive>:
 800f678:	4770      	bx	lr

0800f67a <memcpy>:
 800f67a:	440a      	add	r2, r1
 800f67c:	4291      	cmp	r1, r2
 800f67e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f682:	d100      	bne.n	800f686 <memcpy+0xc>
 800f684:	4770      	bx	lr
 800f686:	b510      	push	{r4, lr}
 800f688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f68c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f690:	4291      	cmp	r1, r2
 800f692:	d1f9      	bne.n	800f688 <memcpy+0xe>
 800f694:	bd10      	pop	{r4, pc}
	...

0800f698 <__assert_func>:
 800f698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f69a:	4614      	mov	r4, r2
 800f69c:	461a      	mov	r2, r3
 800f69e:	4b09      	ldr	r3, [pc, #36]	; (800f6c4 <__assert_func+0x2c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	68d8      	ldr	r0, [r3, #12]
 800f6a6:	b14c      	cbz	r4, 800f6bc <__assert_func+0x24>
 800f6a8:	4b07      	ldr	r3, [pc, #28]	; (800f6c8 <__assert_func+0x30>)
 800f6aa:	9100      	str	r1, [sp, #0]
 800f6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6b0:	4906      	ldr	r1, [pc, #24]	; (800f6cc <__assert_func+0x34>)
 800f6b2:	462b      	mov	r3, r5
 800f6b4:	f000 fc90 	bl	800ffd8 <fiprintf>
 800f6b8:	f000 fd46 	bl	8010148 <abort>
 800f6bc:	4b04      	ldr	r3, [pc, #16]	; (800f6d0 <__assert_func+0x38>)
 800f6be:	461c      	mov	r4, r3
 800f6c0:	e7f3      	b.n	800f6aa <__assert_func+0x12>
 800f6c2:	bf00      	nop
 800f6c4:	20000084 	.word	0x20000084
 800f6c8:	08012e5d 	.word	0x08012e5d
 800f6cc:	08012e6a 	.word	0x08012e6a
 800f6d0:	08012e98 	.word	0x08012e98

0800f6d4 <_free_r>:
 800f6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	d044      	beq.n	800f764 <_free_r+0x90>
 800f6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6de:	9001      	str	r0, [sp, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800f6e6:	bfb8      	it	lt
 800f6e8:	18e4      	addlt	r4, r4, r3
 800f6ea:	f000 f8e7 	bl	800f8bc <__malloc_lock>
 800f6ee:	4a1e      	ldr	r2, [pc, #120]	; (800f768 <_free_r+0x94>)
 800f6f0:	9801      	ldr	r0, [sp, #4]
 800f6f2:	6813      	ldr	r3, [r2, #0]
 800f6f4:	b933      	cbnz	r3, 800f704 <_free_r+0x30>
 800f6f6:	6063      	str	r3, [r4, #4]
 800f6f8:	6014      	str	r4, [r2, #0]
 800f6fa:	b003      	add	sp, #12
 800f6fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f700:	f000 b8e2 	b.w	800f8c8 <__malloc_unlock>
 800f704:	42a3      	cmp	r3, r4
 800f706:	d908      	bls.n	800f71a <_free_r+0x46>
 800f708:	6825      	ldr	r5, [r4, #0]
 800f70a:	1961      	adds	r1, r4, r5
 800f70c:	428b      	cmp	r3, r1
 800f70e:	bf01      	itttt	eq
 800f710:	6819      	ldreq	r1, [r3, #0]
 800f712:	685b      	ldreq	r3, [r3, #4]
 800f714:	1949      	addeq	r1, r1, r5
 800f716:	6021      	streq	r1, [r4, #0]
 800f718:	e7ed      	b.n	800f6f6 <_free_r+0x22>
 800f71a:	461a      	mov	r2, r3
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	b10b      	cbz	r3, 800f724 <_free_r+0x50>
 800f720:	42a3      	cmp	r3, r4
 800f722:	d9fa      	bls.n	800f71a <_free_r+0x46>
 800f724:	6811      	ldr	r1, [r2, #0]
 800f726:	1855      	adds	r5, r2, r1
 800f728:	42a5      	cmp	r5, r4
 800f72a:	d10b      	bne.n	800f744 <_free_r+0x70>
 800f72c:	6824      	ldr	r4, [r4, #0]
 800f72e:	4421      	add	r1, r4
 800f730:	1854      	adds	r4, r2, r1
 800f732:	42a3      	cmp	r3, r4
 800f734:	6011      	str	r1, [r2, #0]
 800f736:	d1e0      	bne.n	800f6fa <_free_r+0x26>
 800f738:	681c      	ldr	r4, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	6053      	str	r3, [r2, #4]
 800f73e:	440c      	add	r4, r1
 800f740:	6014      	str	r4, [r2, #0]
 800f742:	e7da      	b.n	800f6fa <_free_r+0x26>
 800f744:	d902      	bls.n	800f74c <_free_r+0x78>
 800f746:	230c      	movs	r3, #12
 800f748:	6003      	str	r3, [r0, #0]
 800f74a:	e7d6      	b.n	800f6fa <_free_r+0x26>
 800f74c:	6825      	ldr	r5, [r4, #0]
 800f74e:	1961      	adds	r1, r4, r5
 800f750:	428b      	cmp	r3, r1
 800f752:	bf04      	itt	eq
 800f754:	6819      	ldreq	r1, [r3, #0]
 800f756:	685b      	ldreq	r3, [r3, #4]
 800f758:	6063      	str	r3, [r4, #4]
 800f75a:	bf04      	itt	eq
 800f75c:	1949      	addeq	r1, r1, r5
 800f75e:	6021      	streq	r1, [r4, #0]
 800f760:	6054      	str	r4, [r2, #4]
 800f762:	e7ca      	b.n	800f6fa <_free_r+0x26>
 800f764:	b003      	add	sp, #12
 800f766:	bd30      	pop	{r4, r5, pc}
 800f768:	2000853c 	.word	0x2000853c

0800f76c <malloc>:
 800f76c:	4b02      	ldr	r3, [pc, #8]	; (800f778 <malloc+0xc>)
 800f76e:	4601      	mov	r1, r0
 800f770:	6818      	ldr	r0, [r3, #0]
 800f772:	f000 b823 	b.w	800f7bc <_malloc_r>
 800f776:	bf00      	nop
 800f778:	20000084 	.word	0x20000084

0800f77c <sbrk_aligned>:
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	4e0e      	ldr	r6, [pc, #56]	; (800f7b8 <sbrk_aligned+0x3c>)
 800f780:	460c      	mov	r4, r1
 800f782:	6831      	ldr	r1, [r6, #0]
 800f784:	4605      	mov	r5, r0
 800f786:	b911      	cbnz	r1, 800f78e <sbrk_aligned+0x12>
 800f788:	f000 fcce 	bl	8010128 <_sbrk_r>
 800f78c:	6030      	str	r0, [r6, #0]
 800f78e:	4621      	mov	r1, r4
 800f790:	4628      	mov	r0, r5
 800f792:	f000 fcc9 	bl	8010128 <_sbrk_r>
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	d00a      	beq.n	800f7b0 <sbrk_aligned+0x34>
 800f79a:	1cc4      	adds	r4, r0, #3
 800f79c:	f024 0403 	bic.w	r4, r4, #3
 800f7a0:	42a0      	cmp	r0, r4
 800f7a2:	d007      	beq.n	800f7b4 <sbrk_aligned+0x38>
 800f7a4:	1a21      	subs	r1, r4, r0
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f000 fcbe 	bl	8010128 <_sbrk_r>
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	d101      	bne.n	800f7b4 <sbrk_aligned+0x38>
 800f7b0:	f04f 34ff 	mov.w	r4, #4294967295
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	20008540 	.word	0x20008540

0800f7bc <_malloc_r>:
 800f7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c0:	1ccd      	adds	r5, r1, #3
 800f7c2:	f025 0503 	bic.w	r5, r5, #3
 800f7c6:	3508      	adds	r5, #8
 800f7c8:	2d0c      	cmp	r5, #12
 800f7ca:	bf38      	it	cc
 800f7cc:	250c      	movcc	r5, #12
 800f7ce:	2d00      	cmp	r5, #0
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	db01      	blt.n	800f7d8 <_malloc_r+0x1c>
 800f7d4:	42a9      	cmp	r1, r5
 800f7d6:	d905      	bls.n	800f7e4 <_malloc_r+0x28>
 800f7d8:	230c      	movs	r3, #12
 800f7da:	603b      	str	r3, [r7, #0]
 800f7dc:	2600      	movs	r6, #0
 800f7de:	4630      	mov	r0, r6
 800f7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f8b8 <_malloc_r+0xfc>
 800f7e8:	f000 f868 	bl	800f8bc <__malloc_lock>
 800f7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f7f0:	461c      	mov	r4, r3
 800f7f2:	bb5c      	cbnz	r4, 800f84c <_malloc_r+0x90>
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	f7ff ffc0 	bl	800f77c <sbrk_aligned>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	4604      	mov	r4, r0
 800f800:	d155      	bne.n	800f8ae <_malloc_r+0xf2>
 800f802:	f8d8 4000 	ldr.w	r4, [r8]
 800f806:	4626      	mov	r6, r4
 800f808:	2e00      	cmp	r6, #0
 800f80a:	d145      	bne.n	800f898 <_malloc_r+0xdc>
 800f80c:	2c00      	cmp	r4, #0
 800f80e:	d048      	beq.n	800f8a2 <_malloc_r+0xe6>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	4631      	mov	r1, r6
 800f814:	4638      	mov	r0, r7
 800f816:	eb04 0903 	add.w	r9, r4, r3
 800f81a:	f000 fc85 	bl	8010128 <_sbrk_r>
 800f81e:	4581      	cmp	r9, r0
 800f820:	d13f      	bne.n	800f8a2 <_malloc_r+0xe6>
 800f822:	6821      	ldr	r1, [r4, #0]
 800f824:	1a6d      	subs	r5, r5, r1
 800f826:	4629      	mov	r1, r5
 800f828:	4638      	mov	r0, r7
 800f82a:	f7ff ffa7 	bl	800f77c <sbrk_aligned>
 800f82e:	3001      	adds	r0, #1
 800f830:	d037      	beq.n	800f8a2 <_malloc_r+0xe6>
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	442b      	add	r3, r5
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	f8d8 3000 	ldr.w	r3, [r8]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d038      	beq.n	800f8b2 <_malloc_r+0xf6>
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	42a2      	cmp	r2, r4
 800f844:	d12b      	bne.n	800f89e <_malloc_r+0xe2>
 800f846:	2200      	movs	r2, #0
 800f848:	605a      	str	r2, [r3, #4]
 800f84a:	e00f      	b.n	800f86c <_malloc_r+0xb0>
 800f84c:	6822      	ldr	r2, [r4, #0]
 800f84e:	1b52      	subs	r2, r2, r5
 800f850:	d41f      	bmi.n	800f892 <_malloc_r+0xd6>
 800f852:	2a0b      	cmp	r2, #11
 800f854:	d917      	bls.n	800f886 <_malloc_r+0xca>
 800f856:	1961      	adds	r1, r4, r5
 800f858:	42a3      	cmp	r3, r4
 800f85a:	6025      	str	r5, [r4, #0]
 800f85c:	bf18      	it	ne
 800f85e:	6059      	strne	r1, [r3, #4]
 800f860:	6863      	ldr	r3, [r4, #4]
 800f862:	bf08      	it	eq
 800f864:	f8c8 1000 	streq.w	r1, [r8]
 800f868:	5162      	str	r2, [r4, r5]
 800f86a:	604b      	str	r3, [r1, #4]
 800f86c:	4638      	mov	r0, r7
 800f86e:	f104 060b 	add.w	r6, r4, #11
 800f872:	f000 f829 	bl	800f8c8 <__malloc_unlock>
 800f876:	f026 0607 	bic.w	r6, r6, #7
 800f87a:	1d23      	adds	r3, r4, #4
 800f87c:	1af2      	subs	r2, r6, r3
 800f87e:	d0ae      	beq.n	800f7de <_malloc_r+0x22>
 800f880:	1b9b      	subs	r3, r3, r6
 800f882:	50a3      	str	r3, [r4, r2]
 800f884:	e7ab      	b.n	800f7de <_malloc_r+0x22>
 800f886:	42a3      	cmp	r3, r4
 800f888:	6862      	ldr	r2, [r4, #4]
 800f88a:	d1dd      	bne.n	800f848 <_malloc_r+0x8c>
 800f88c:	f8c8 2000 	str.w	r2, [r8]
 800f890:	e7ec      	b.n	800f86c <_malloc_r+0xb0>
 800f892:	4623      	mov	r3, r4
 800f894:	6864      	ldr	r4, [r4, #4]
 800f896:	e7ac      	b.n	800f7f2 <_malloc_r+0x36>
 800f898:	4634      	mov	r4, r6
 800f89a:	6876      	ldr	r6, [r6, #4]
 800f89c:	e7b4      	b.n	800f808 <_malloc_r+0x4c>
 800f89e:	4613      	mov	r3, r2
 800f8a0:	e7cc      	b.n	800f83c <_malloc_r+0x80>
 800f8a2:	230c      	movs	r3, #12
 800f8a4:	603b      	str	r3, [r7, #0]
 800f8a6:	4638      	mov	r0, r7
 800f8a8:	f000 f80e 	bl	800f8c8 <__malloc_unlock>
 800f8ac:	e797      	b.n	800f7de <_malloc_r+0x22>
 800f8ae:	6025      	str	r5, [r4, #0]
 800f8b0:	e7dc      	b.n	800f86c <_malloc_r+0xb0>
 800f8b2:	605b      	str	r3, [r3, #4]
 800f8b4:	deff      	udf	#255	; 0xff
 800f8b6:	bf00      	nop
 800f8b8:	2000853c 	.word	0x2000853c

0800f8bc <__malloc_lock>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	; (800f8c4 <__malloc_lock+0x8>)
 800f8be:	f7ff beda 	b.w	800f676 <__retarget_lock_acquire_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	20008538 	.word	0x20008538

0800f8c8 <__malloc_unlock>:
 800f8c8:	4801      	ldr	r0, [pc, #4]	; (800f8d0 <__malloc_unlock+0x8>)
 800f8ca:	f7ff bed5 	b.w	800f678 <__retarget_lock_release_recursive>
 800f8ce:	bf00      	nop
 800f8d0:	20008538 	.word	0x20008538

0800f8d4 <__sfputc_r>:
 800f8d4:	6893      	ldr	r3, [r2, #8]
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	b410      	push	{r4}
 800f8dc:	6093      	str	r3, [r2, #8]
 800f8de:	da08      	bge.n	800f8f2 <__sfputc_r+0x1e>
 800f8e0:	6994      	ldr	r4, [r2, #24]
 800f8e2:	42a3      	cmp	r3, r4
 800f8e4:	db01      	blt.n	800f8ea <__sfputc_r+0x16>
 800f8e6:	290a      	cmp	r1, #10
 800f8e8:	d103      	bne.n	800f8f2 <__sfputc_r+0x1e>
 800f8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8ee:	f000 bb85 	b.w	800fffc <__swbuf_r>
 800f8f2:	6813      	ldr	r3, [r2, #0]
 800f8f4:	1c58      	adds	r0, r3, #1
 800f8f6:	6010      	str	r0, [r2, #0]
 800f8f8:	7019      	strb	r1, [r3, #0]
 800f8fa:	4608      	mov	r0, r1
 800f8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <__sfputs_r>:
 800f902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f904:	4606      	mov	r6, r0
 800f906:	460f      	mov	r7, r1
 800f908:	4614      	mov	r4, r2
 800f90a:	18d5      	adds	r5, r2, r3
 800f90c:	42ac      	cmp	r4, r5
 800f90e:	d101      	bne.n	800f914 <__sfputs_r+0x12>
 800f910:	2000      	movs	r0, #0
 800f912:	e007      	b.n	800f924 <__sfputs_r+0x22>
 800f914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f918:	463a      	mov	r2, r7
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7ff ffda 	bl	800f8d4 <__sfputc_r>
 800f920:	1c43      	adds	r3, r0, #1
 800f922:	d1f3      	bne.n	800f90c <__sfputs_r+0xa>
 800f924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f928 <_vfiprintf_r>:
 800f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	460d      	mov	r5, r1
 800f92e:	b09d      	sub	sp, #116	; 0x74
 800f930:	4614      	mov	r4, r2
 800f932:	4698      	mov	r8, r3
 800f934:	4606      	mov	r6, r0
 800f936:	b118      	cbz	r0, 800f940 <_vfiprintf_r+0x18>
 800f938:	6a03      	ldr	r3, [r0, #32]
 800f93a:	b90b      	cbnz	r3, 800f940 <_vfiprintf_r+0x18>
 800f93c:	f7ff fd8c 	bl	800f458 <__sinit>
 800f940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f942:	07d9      	lsls	r1, r3, #31
 800f944:	d405      	bmi.n	800f952 <_vfiprintf_r+0x2a>
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	059a      	lsls	r2, r3, #22
 800f94a:	d402      	bmi.n	800f952 <_vfiprintf_r+0x2a>
 800f94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f94e:	f7ff fe92 	bl	800f676 <__retarget_lock_acquire_recursive>
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	071b      	lsls	r3, r3, #28
 800f956:	d501      	bpl.n	800f95c <_vfiprintf_r+0x34>
 800f958:	692b      	ldr	r3, [r5, #16]
 800f95a:	b99b      	cbnz	r3, 800f984 <_vfiprintf_r+0x5c>
 800f95c:	4629      	mov	r1, r5
 800f95e:	4630      	mov	r0, r6
 800f960:	f000 fb8a 	bl	8010078 <__swsetup_r>
 800f964:	b170      	cbz	r0, 800f984 <_vfiprintf_r+0x5c>
 800f966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f968:	07dc      	lsls	r4, r3, #31
 800f96a:	d504      	bpl.n	800f976 <_vfiprintf_r+0x4e>
 800f96c:	f04f 30ff 	mov.w	r0, #4294967295
 800f970:	b01d      	add	sp, #116	; 0x74
 800f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f976:	89ab      	ldrh	r3, [r5, #12]
 800f978:	0598      	lsls	r0, r3, #22
 800f97a:	d4f7      	bmi.n	800f96c <_vfiprintf_r+0x44>
 800f97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f97e:	f7ff fe7b 	bl	800f678 <__retarget_lock_release_recursive>
 800f982:	e7f3      	b.n	800f96c <_vfiprintf_r+0x44>
 800f984:	2300      	movs	r3, #0
 800f986:	9309      	str	r3, [sp, #36]	; 0x24
 800f988:	2320      	movs	r3, #32
 800f98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f992:	2330      	movs	r3, #48	; 0x30
 800f994:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fb48 <_vfiprintf_r+0x220>
 800f998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f99c:	f04f 0901 	mov.w	r9, #1
 800f9a0:	4623      	mov	r3, r4
 800f9a2:	469a      	mov	sl, r3
 800f9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9a8:	b10a      	cbz	r2, 800f9ae <_vfiprintf_r+0x86>
 800f9aa:	2a25      	cmp	r2, #37	; 0x25
 800f9ac:	d1f9      	bne.n	800f9a2 <_vfiprintf_r+0x7a>
 800f9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f9b2:	d00b      	beq.n	800f9cc <_vfiprintf_r+0xa4>
 800f9b4:	465b      	mov	r3, fp
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f7ff ffa1 	bl	800f902 <__sfputs_r>
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	f000 80a9 	beq.w	800fb18 <_vfiprintf_r+0x1f0>
 800f9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9c8:	445a      	add	r2, fp
 800f9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 80a1 	beq.w	800fb18 <_vfiprintf_r+0x1f0>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9e0:	f10a 0a01 	add.w	sl, sl, #1
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	9307      	str	r3, [sp, #28]
 800f9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9ec:	931a      	str	r3, [sp, #104]	; 0x68
 800f9ee:	4654      	mov	r4, sl
 800f9f0:	2205      	movs	r2, #5
 800f9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9f6:	4854      	ldr	r0, [pc, #336]	; (800fb48 <_vfiprintf_r+0x220>)
 800f9f8:	f7f0 fbf2 	bl	80001e0 <memchr>
 800f9fc:	9a04      	ldr	r2, [sp, #16]
 800f9fe:	b9d8      	cbnz	r0, 800fa38 <_vfiprintf_r+0x110>
 800fa00:	06d1      	lsls	r1, r2, #27
 800fa02:	bf44      	itt	mi
 800fa04:	2320      	movmi	r3, #32
 800fa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa0a:	0713      	lsls	r3, r2, #28
 800fa0c:	bf44      	itt	mi
 800fa0e:	232b      	movmi	r3, #43	; 0x2b
 800fa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa14:	f89a 3000 	ldrb.w	r3, [sl]
 800fa18:	2b2a      	cmp	r3, #42	; 0x2a
 800fa1a:	d015      	beq.n	800fa48 <_vfiprintf_r+0x120>
 800fa1c:	9a07      	ldr	r2, [sp, #28]
 800fa1e:	4654      	mov	r4, sl
 800fa20:	2000      	movs	r0, #0
 800fa22:	f04f 0c0a 	mov.w	ip, #10
 800fa26:	4621      	mov	r1, r4
 800fa28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa2c:	3b30      	subs	r3, #48	; 0x30
 800fa2e:	2b09      	cmp	r3, #9
 800fa30:	d94d      	bls.n	800face <_vfiprintf_r+0x1a6>
 800fa32:	b1b0      	cbz	r0, 800fa62 <_vfiprintf_r+0x13a>
 800fa34:	9207      	str	r2, [sp, #28]
 800fa36:	e014      	b.n	800fa62 <_vfiprintf_r+0x13a>
 800fa38:	eba0 0308 	sub.w	r3, r0, r8
 800fa3c:	fa09 f303 	lsl.w	r3, r9, r3
 800fa40:	4313      	orrs	r3, r2
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	46a2      	mov	sl, r4
 800fa46:	e7d2      	b.n	800f9ee <_vfiprintf_r+0xc6>
 800fa48:	9b03      	ldr	r3, [sp, #12]
 800fa4a:	1d19      	adds	r1, r3, #4
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	9103      	str	r1, [sp, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	bfbb      	ittet	lt
 800fa54:	425b      	neglt	r3, r3
 800fa56:	f042 0202 	orrlt.w	r2, r2, #2
 800fa5a:	9307      	strge	r3, [sp, #28]
 800fa5c:	9307      	strlt	r3, [sp, #28]
 800fa5e:	bfb8      	it	lt
 800fa60:	9204      	strlt	r2, [sp, #16]
 800fa62:	7823      	ldrb	r3, [r4, #0]
 800fa64:	2b2e      	cmp	r3, #46	; 0x2e
 800fa66:	d10c      	bne.n	800fa82 <_vfiprintf_r+0x15a>
 800fa68:	7863      	ldrb	r3, [r4, #1]
 800fa6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa6c:	d134      	bne.n	800fad8 <_vfiprintf_r+0x1b0>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	1d1a      	adds	r2, r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	9203      	str	r2, [sp, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfb8      	it	lt
 800fa7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa7e:	3402      	adds	r4, #2
 800fa80:	9305      	str	r3, [sp, #20]
 800fa82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fb58 <_vfiprintf_r+0x230>
 800fa86:	7821      	ldrb	r1, [r4, #0]
 800fa88:	2203      	movs	r2, #3
 800fa8a:	4650      	mov	r0, sl
 800fa8c:	f7f0 fba8 	bl	80001e0 <memchr>
 800fa90:	b138      	cbz	r0, 800faa2 <_vfiprintf_r+0x17a>
 800fa92:	9b04      	ldr	r3, [sp, #16]
 800fa94:	eba0 000a 	sub.w	r0, r0, sl
 800fa98:	2240      	movs	r2, #64	; 0x40
 800fa9a:	4082      	lsls	r2, r0
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	3401      	adds	r4, #1
 800faa0:	9304      	str	r3, [sp, #16]
 800faa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faa6:	4829      	ldr	r0, [pc, #164]	; (800fb4c <_vfiprintf_r+0x224>)
 800faa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faac:	2206      	movs	r2, #6
 800faae:	f7f0 fb97 	bl	80001e0 <memchr>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d03f      	beq.n	800fb36 <_vfiprintf_r+0x20e>
 800fab6:	4b26      	ldr	r3, [pc, #152]	; (800fb50 <_vfiprintf_r+0x228>)
 800fab8:	bb1b      	cbnz	r3, 800fb02 <_vfiprintf_r+0x1da>
 800faba:	9b03      	ldr	r3, [sp, #12]
 800fabc:	3307      	adds	r3, #7
 800fabe:	f023 0307 	bic.w	r3, r3, #7
 800fac2:	3308      	adds	r3, #8
 800fac4:	9303      	str	r3, [sp, #12]
 800fac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac8:	443b      	add	r3, r7
 800faca:	9309      	str	r3, [sp, #36]	; 0x24
 800facc:	e768      	b.n	800f9a0 <_vfiprintf_r+0x78>
 800face:	fb0c 3202 	mla	r2, ip, r2, r3
 800fad2:	460c      	mov	r4, r1
 800fad4:	2001      	movs	r0, #1
 800fad6:	e7a6      	b.n	800fa26 <_vfiprintf_r+0xfe>
 800fad8:	2300      	movs	r3, #0
 800fada:	3401      	adds	r4, #1
 800fadc:	9305      	str	r3, [sp, #20]
 800fade:	4619      	mov	r1, r3
 800fae0:	f04f 0c0a 	mov.w	ip, #10
 800fae4:	4620      	mov	r0, r4
 800fae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faea:	3a30      	subs	r2, #48	; 0x30
 800faec:	2a09      	cmp	r2, #9
 800faee:	d903      	bls.n	800faf8 <_vfiprintf_r+0x1d0>
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d0c6      	beq.n	800fa82 <_vfiprintf_r+0x15a>
 800faf4:	9105      	str	r1, [sp, #20]
 800faf6:	e7c4      	b.n	800fa82 <_vfiprintf_r+0x15a>
 800faf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fafc:	4604      	mov	r4, r0
 800fafe:	2301      	movs	r3, #1
 800fb00:	e7f0      	b.n	800fae4 <_vfiprintf_r+0x1bc>
 800fb02:	ab03      	add	r3, sp, #12
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	462a      	mov	r2, r5
 800fb08:	4b12      	ldr	r3, [pc, #72]	; (800fb54 <_vfiprintf_r+0x22c>)
 800fb0a:	a904      	add	r1, sp, #16
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f3af 8000 	nop.w
 800fb12:	4607      	mov	r7, r0
 800fb14:	1c78      	adds	r0, r7, #1
 800fb16:	d1d6      	bne.n	800fac6 <_vfiprintf_r+0x19e>
 800fb18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb1a:	07d9      	lsls	r1, r3, #31
 800fb1c:	d405      	bmi.n	800fb2a <_vfiprintf_r+0x202>
 800fb1e:	89ab      	ldrh	r3, [r5, #12]
 800fb20:	059a      	lsls	r2, r3, #22
 800fb22:	d402      	bmi.n	800fb2a <_vfiprintf_r+0x202>
 800fb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb26:	f7ff fda7 	bl	800f678 <__retarget_lock_release_recursive>
 800fb2a:	89ab      	ldrh	r3, [r5, #12]
 800fb2c:	065b      	lsls	r3, r3, #25
 800fb2e:	f53f af1d 	bmi.w	800f96c <_vfiprintf_r+0x44>
 800fb32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb34:	e71c      	b.n	800f970 <_vfiprintf_r+0x48>
 800fb36:	ab03      	add	r3, sp, #12
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	462a      	mov	r2, r5
 800fb3c:	4b05      	ldr	r3, [pc, #20]	; (800fb54 <_vfiprintf_r+0x22c>)
 800fb3e:	a904      	add	r1, sp, #16
 800fb40:	4630      	mov	r0, r6
 800fb42:	f000 f879 	bl	800fc38 <_printf_i>
 800fb46:	e7e4      	b.n	800fb12 <_vfiprintf_r+0x1ea>
 800fb48:	08012e99 	.word	0x08012e99
 800fb4c:	08012ea3 	.word	0x08012ea3
 800fb50:	00000000 	.word	0x00000000
 800fb54:	0800f903 	.word	0x0800f903
 800fb58:	08012e9f 	.word	0x08012e9f

0800fb5c <_printf_common>:
 800fb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb60:	4616      	mov	r6, r2
 800fb62:	4699      	mov	r9, r3
 800fb64:	688a      	ldr	r2, [r1, #8]
 800fb66:	690b      	ldr	r3, [r1, #16]
 800fb68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	bfb8      	it	lt
 800fb70:	4613      	movlt	r3, r2
 800fb72:	6033      	str	r3, [r6, #0]
 800fb74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb78:	4607      	mov	r7, r0
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	b10a      	cbz	r2, 800fb82 <_printf_common+0x26>
 800fb7e:	3301      	adds	r3, #1
 800fb80:	6033      	str	r3, [r6, #0]
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	0699      	lsls	r1, r3, #26
 800fb86:	bf42      	ittt	mi
 800fb88:	6833      	ldrmi	r3, [r6, #0]
 800fb8a:	3302      	addmi	r3, #2
 800fb8c:	6033      	strmi	r3, [r6, #0]
 800fb8e:	6825      	ldr	r5, [r4, #0]
 800fb90:	f015 0506 	ands.w	r5, r5, #6
 800fb94:	d106      	bne.n	800fba4 <_printf_common+0x48>
 800fb96:	f104 0a19 	add.w	sl, r4, #25
 800fb9a:	68e3      	ldr	r3, [r4, #12]
 800fb9c:	6832      	ldr	r2, [r6, #0]
 800fb9e:	1a9b      	subs	r3, r3, r2
 800fba0:	42ab      	cmp	r3, r5
 800fba2:	dc26      	bgt.n	800fbf2 <_printf_common+0x96>
 800fba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fba8:	1e13      	subs	r3, r2, #0
 800fbaa:	6822      	ldr	r2, [r4, #0]
 800fbac:	bf18      	it	ne
 800fbae:	2301      	movne	r3, #1
 800fbb0:	0692      	lsls	r2, r2, #26
 800fbb2:	d42b      	bmi.n	800fc0c <_printf_common+0xb0>
 800fbb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbb8:	4649      	mov	r1, r9
 800fbba:	4638      	mov	r0, r7
 800fbbc:	47c0      	blx	r8
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	d01e      	beq.n	800fc00 <_printf_common+0xa4>
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	6922      	ldr	r2, [r4, #16]
 800fbc6:	f003 0306 	and.w	r3, r3, #6
 800fbca:	2b04      	cmp	r3, #4
 800fbcc:	bf02      	ittt	eq
 800fbce:	68e5      	ldreq	r5, [r4, #12]
 800fbd0:	6833      	ldreq	r3, [r6, #0]
 800fbd2:	1aed      	subeq	r5, r5, r3
 800fbd4:	68a3      	ldr	r3, [r4, #8]
 800fbd6:	bf0c      	ite	eq
 800fbd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbdc:	2500      	movne	r5, #0
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	bfc4      	itt	gt
 800fbe2:	1a9b      	subgt	r3, r3, r2
 800fbe4:	18ed      	addgt	r5, r5, r3
 800fbe6:	2600      	movs	r6, #0
 800fbe8:	341a      	adds	r4, #26
 800fbea:	42b5      	cmp	r5, r6
 800fbec:	d11a      	bne.n	800fc24 <_printf_common+0xc8>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	e008      	b.n	800fc04 <_printf_common+0xa8>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	4652      	mov	r2, sl
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	4638      	mov	r0, r7
 800fbfa:	47c0      	blx	r8
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	d103      	bne.n	800fc08 <_printf_common+0xac>
 800fc00:	f04f 30ff 	mov.w	r0, #4294967295
 800fc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc08:	3501      	adds	r5, #1
 800fc0a:	e7c6      	b.n	800fb9a <_printf_common+0x3e>
 800fc0c:	18e1      	adds	r1, r4, r3
 800fc0e:	1c5a      	adds	r2, r3, #1
 800fc10:	2030      	movs	r0, #48	; 0x30
 800fc12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc16:	4422      	add	r2, r4
 800fc18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc20:	3302      	adds	r3, #2
 800fc22:	e7c7      	b.n	800fbb4 <_printf_common+0x58>
 800fc24:	2301      	movs	r3, #1
 800fc26:	4622      	mov	r2, r4
 800fc28:	4649      	mov	r1, r9
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	47c0      	blx	r8
 800fc2e:	3001      	adds	r0, #1
 800fc30:	d0e6      	beq.n	800fc00 <_printf_common+0xa4>
 800fc32:	3601      	adds	r6, #1
 800fc34:	e7d9      	b.n	800fbea <_printf_common+0x8e>
	...

0800fc38 <_printf_i>:
 800fc38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3c:	7e0f      	ldrb	r7, [r1, #24]
 800fc3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc40:	2f78      	cmp	r7, #120	; 0x78
 800fc42:	4691      	mov	r9, r2
 800fc44:	4680      	mov	r8, r0
 800fc46:	460c      	mov	r4, r1
 800fc48:	469a      	mov	sl, r3
 800fc4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc4e:	d807      	bhi.n	800fc60 <_printf_i+0x28>
 800fc50:	2f62      	cmp	r7, #98	; 0x62
 800fc52:	d80a      	bhi.n	800fc6a <_printf_i+0x32>
 800fc54:	2f00      	cmp	r7, #0
 800fc56:	f000 80d4 	beq.w	800fe02 <_printf_i+0x1ca>
 800fc5a:	2f58      	cmp	r7, #88	; 0x58
 800fc5c:	f000 80c0 	beq.w	800fde0 <_printf_i+0x1a8>
 800fc60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc68:	e03a      	b.n	800fce0 <_printf_i+0xa8>
 800fc6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc6e:	2b15      	cmp	r3, #21
 800fc70:	d8f6      	bhi.n	800fc60 <_printf_i+0x28>
 800fc72:	a101      	add	r1, pc, #4	; (adr r1, 800fc78 <_printf_i+0x40>)
 800fc74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc78:	0800fcd1 	.word	0x0800fcd1
 800fc7c:	0800fce5 	.word	0x0800fce5
 800fc80:	0800fc61 	.word	0x0800fc61
 800fc84:	0800fc61 	.word	0x0800fc61
 800fc88:	0800fc61 	.word	0x0800fc61
 800fc8c:	0800fc61 	.word	0x0800fc61
 800fc90:	0800fce5 	.word	0x0800fce5
 800fc94:	0800fc61 	.word	0x0800fc61
 800fc98:	0800fc61 	.word	0x0800fc61
 800fc9c:	0800fc61 	.word	0x0800fc61
 800fca0:	0800fc61 	.word	0x0800fc61
 800fca4:	0800fde9 	.word	0x0800fde9
 800fca8:	0800fd11 	.word	0x0800fd11
 800fcac:	0800fda3 	.word	0x0800fda3
 800fcb0:	0800fc61 	.word	0x0800fc61
 800fcb4:	0800fc61 	.word	0x0800fc61
 800fcb8:	0800fe0b 	.word	0x0800fe0b
 800fcbc:	0800fc61 	.word	0x0800fc61
 800fcc0:	0800fd11 	.word	0x0800fd11
 800fcc4:	0800fc61 	.word	0x0800fc61
 800fcc8:	0800fc61 	.word	0x0800fc61
 800fccc:	0800fdab 	.word	0x0800fdab
 800fcd0:	682b      	ldr	r3, [r5, #0]
 800fcd2:	1d1a      	adds	r2, r3, #4
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	602a      	str	r2, [r5, #0]
 800fcd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fce0:	2301      	movs	r3, #1
 800fce2:	e09f      	b.n	800fe24 <_printf_i+0x1ec>
 800fce4:	6820      	ldr	r0, [r4, #0]
 800fce6:	682b      	ldr	r3, [r5, #0]
 800fce8:	0607      	lsls	r7, r0, #24
 800fcea:	f103 0104 	add.w	r1, r3, #4
 800fcee:	6029      	str	r1, [r5, #0]
 800fcf0:	d501      	bpl.n	800fcf6 <_printf_i+0xbe>
 800fcf2:	681e      	ldr	r6, [r3, #0]
 800fcf4:	e003      	b.n	800fcfe <_printf_i+0xc6>
 800fcf6:	0646      	lsls	r6, r0, #25
 800fcf8:	d5fb      	bpl.n	800fcf2 <_printf_i+0xba>
 800fcfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fcfe:	2e00      	cmp	r6, #0
 800fd00:	da03      	bge.n	800fd0a <_printf_i+0xd2>
 800fd02:	232d      	movs	r3, #45	; 0x2d
 800fd04:	4276      	negs	r6, r6
 800fd06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd0a:	485a      	ldr	r0, [pc, #360]	; (800fe74 <_printf_i+0x23c>)
 800fd0c:	230a      	movs	r3, #10
 800fd0e:	e012      	b.n	800fd36 <_printf_i+0xfe>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	6820      	ldr	r0, [r4, #0]
 800fd14:	1d19      	adds	r1, r3, #4
 800fd16:	6029      	str	r1, [r5, #0]
 800fd18:	0605      	lsls	r5, r0, #24
 800fd1a:	d501      	bpl.n	800fd20 <_printf_i+0xe8>
 800fd1c:	681e      	ldr	r6, [r3, #0]
 800fd1e:	e002      	b.n	800fd26 <_printf_i+0xee>
 800fd20:	0641      	lsls	r1, r0, #25
 800fd22:	d5fb      	bpl.n	800fd1c <_printf_i+0xe4>
 800fd24:	881e      	ldrh	r6, [r3, #0]
 800fd26:	4853      	ldr	r0, [pc, #332]	; (800fe74 <_printf_i+0x23c>)
 800fd28:	2f6f      	cmp	r7, #111	; 0x6f
 800fd2a:	bf0c      	ite	eq
 800fd2c:	2308      	moveq	r3, #8
 800fd2e:	230a      	movne	r3, #10
 800fd30:	2100      	movs	r1, #0
 800fd32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd36:	6865      	ldr	r5, [r4, #4]
 800fd38:	60a5      	str	r5, [r4, #8]
 800fd3a:	2d00      	cmp	r5, #0
 800fd3c:	bfa2      	ittt	ge
 800fd3e:	6821      	ldrge	r1, [r4, #0]
 800fd40:	f021 0104 	bicge.w	r1, r1, #4
 800fd44:	6021      	strge	r1, [r4, #0]
 800fd46:	b90e      	cbnz	r6, 800fd4c <_printf_i+0x114>
 800fd48:	2d00      	cmp	r5, #0
 800fd4a:	d04b      	beq.n	800fde4 <_printf_i+0x1ac>
 800fd4c:	4615      	mov	r5, r2
 800fd4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd52:	fb03 6711 	mls	r7, r3, r1, r6
 800fd56:	5dc7      	ldrb	r7, [r0, r7]
 800fd58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd5c:	4637      	mov	r7, r6
 800fd5e:	42bb      	cmp	r3, r7
 800fd60:	460e      	mov	r6, r1
 800fd62:	d9f4      	bls.n	800fd4e <_printf_i+0x116>
 800fd64:	2b08      	cmp	r3, #8
 800fd66:	d10b      	bne.n	800fd80 <_printf_i+0x148>
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	07de      	lsls	r6, r3, #31
 800fd6c:	d508      	bpl.n	800fd80 <_printf_i+0x148>
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	6861      	ldr	r1, [r4, #4]
 800fd72:	4299      	cmp	r1, r3
 800fd74:	bfde      	ittt	le
 800fd76:	2330      	movle	r3, #48	; 0x30
 800fd78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd80:	1b52      	subs	r2, r2, r5
 800fd82:	6122      	str	r2, [r4, #16]
 800fd84:	f8cd a000 	str.w	sl, [sp]
 800fd88:	464b      	mov	r3, r9
 800fd8a:	aa03      	add	r2, sp, #12
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	4640      	mov	r0, r8
 800fd90:	f7ff fee4 	bl	800fb5c <_printf_common>
 800fd94:	3001      	adds	r0, #1
 800fd96:	d14a      	bne.n	800fe2e <_printf_i+0x1f6>
 800fd98:	f04f 30ff 	mov.w	r0, #4294967295
 800fd9c:	b004      	add	sp, #16
 800fd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	f043 0320 	orr.w	r3, r3, #32
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	4833      	ldr	r0, [pc, #204]	; (800fe78 <_printf_i+0x240>)
 800fdac:	2778      	movs	r7, #120	; 0x78
 800fdae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	6829      	ldr	r1, [r5, #0]
 800fdb6:	061f      	lsls	r7, r3, #24
 800fdb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdbc:	d402      	bmi.n	800fdc4 <_printf_i+0x18c>
 800fdbe:	065f      	lsls	r7, r3, #25
 800fdc0:	bf48      	it	mi
 800fdc2:	b2b6      	uxthmi	r6, r6
 800fdc4:	07df      	lsls	r7, r3, #31
 800fdc6:	bf48      	it	mi
 800fdc8:	f043 0320 	orrmi.w	r3, r3, #32
 800fdcc:	6029      	str	r1, [r5, #0]
 800fdce:	bf48      	it	mi
 800fdd0:	6023      	strmi	r3, [r4, #0]
 800fdd2:	b91e      	cbnz	r6, 800fddc <_printf_i+0x1a4>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	f023 0320 	bic.w	r3, r3, #32
 800fdda:	6023      	str	r3, [r4, #0]
 800fddc:	2310      	movs	r3, #16
 800fdde:	e7a7      	b.n	800fd30 <_printf_i+0xf8>
 800fde0:	4824      	ldr	r0, [pc, #144]	; (800fe74 <_printf_i+0x23c>)
 800fde2:	e7e4      	b.n	800fdae <_printf_i+0x176>
 800fde4:	4615      	mov	r5, r2
 800fde6:	e7bd      	b.n	800fd64 <_printf_i+0x12c>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	6826      	ldr	r6, [r4, #0]
 800fdec:	6961      	ldr	r1, [r4, #20]
 800fdee:	1d18      	adds	r0, r3, #4
 800fdf0:	6028      	str	r0, [r5, #0]
 800fdf2:	0635      	lsls	r5, r6, #24
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	d501      	bpl.n	800fdfc <_printf_i+0x1c4>
 800fdf8:	6019      	str	r1, [r3, #0]
 800fdfa:	e002      	b.n	800fe02 <_printf_i+0x1ca>
 800fdfc:	0670      	lsls	r0, r6, #25
 800fdfe:	d5fb      	bpl.n	800fdf8 <_printf_i+0x1c0>
 800fe00:	8019      	strh	r1, [r3, #0]
 800fe02:	2300      	movs	r3, #0
 800fe04:	6123      	str	r3, [r4, #16]
 800fe06:	4615      	mov	r5, r2
 800fe08:	e7bc      	b.n	800fd84 <_printf_i+0x14c>
 800fe0a:	682b      	ldr	r3, [r5, #0]
 800fe0c:	1d1a      	adds	r2, r3, #4
 800fe0e:	602a      	str	r2, [r5, #0]
 800fe10:	681d      	ldr	r5, [r3, #0]
 800fe12:	6862      	ldr	r2, [r4, #4]
 800fe14:	2100      	movs	r1, #0
 800fe16:	4628      	mov	r0, r5
 800fe18:	f7f0 f9e2 	bl	80001e0 <memchr>
 800fe1c:	b108      	cbz	r0, 800fe22 <_printf_i+0x1ea>
 800fe1e:	1b40      	subs	r0, r0, r5
 800fe20:	6060      	str	r0, [r4, #4]
 800fe22:	6863      	ldr	r3, [r4, #4]
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	2300      	movs	r3, #0
 800fe28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe2c:	e7aa      	b.n	800fd84 <_printf_i+0x14c>
 800fe2e:	6923      	ldr	r3, [r4, #16]
 800fe30:	462a      	mov	r2, r5
 800fe32:	4649      	mov	r1, r9
 800fe34:	4640      	mov	r0, r8
 800fe36:	47d0      	blx	sl
 800fe38:	3001      	adds	r0, #1
 800fe3a:	d0ad      	beq.n	800fd98 <_printf_i+0x160>
 800fe3c:	6823      	ldr	r3, [r4, #0]
 800fe3e:	079b      	lsls	r3, r3, #30
 800fe40:	d413      	bmi.n	800fe6a <_printf_i+0x232>
 800fe42:	68e0      	ldr	r0, [r4, #12]
 800fe44:	9b03      	ldr	r3, [sp, #12]
 800fe46:	4298      	cmp	r0, r3
 800fe48:	bfb8      	it	lt
 800fe4a:	4618      	movlt	r0, r3
 800fe4c:	e7a6      	b.n	800fd9c <_printf_i+0x164>
 800fe4e:	2301      	movs	r3, #1
 800fe50:	4632      	mov	r2, r6
 800fe52:	4649      	mov	r1, r9
 800fe54:	4640      	mov	r0, r8
 800fe56:	47d0      	blx	sl
 800fe58:	3001      	adds	r0, #1
 800fe5a:	d09d      	beq.n	800fd98 <_printf_i+0x160>
 800fe5c:	3501      	adds	r5, #1
 800fe5e:	68e3      	ldr	r3, [r4, #12]
 800fe60:	9903      	ldr	r1, [sp, #12]
 800fe62:	1a5b      	subs	r3, r3, r1
 800fe64:	42ab      	cmp	r3, r5
 800fe66:	dcf2      	bgt.n	800fe4e <_printf_i+0x216>
 800fe68:	e7eb      	b.n	800fe42 <_printf_i+0x20a>
 800fe6a:	2500      	movs	r5, #0
 800fe6c:	f104 0619 	add.w	r6, r4, #25
 800fe70:	e7f5      	b.n	800fe5e <_printf_i+0x226>
 800fe72:	bf00      	nop
 800fe74:	08012eaa 	.word	0x08012eaa
 800fe78:	08012ebb 	.word	0x08012ebb

0800fe7c <__sflush_r>:
 800fe7c:	898a      	ldrh	r2, [r1, #12]
 800fe7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe82:	4605      	mov	r5, r0
 800fe84:	0710      	lsls	r0, r2, #28
 800fe86:	460c      	mov	r4, r1
 800fe88:	d458      	bmi.n	800ff3c <__sflush_r+0xc0>
 800fe8a:	684b      	ldr	r3, [r1, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	dc05      	bgt.n	800fe9c <__sflush_r+0x20>
 800fe90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dc02      	bgt.n	800fe9c <__sflush_r+0x20>
 800fe96:	2000      	movs	r0, #0
 800fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe9e:	2e00      	cmp	r6, #0
 800fea0:	d0f9      	beq.n	800fe96 <__sflush_r+0x1a>
 800fea2:	2300      	movs	r3, #0
 800fea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fea8:	682f      	ldr	r7, [r5, #0]
 800feaa:	6a21      	ldr	r1, [r4, #32]
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	d032      	beq.n	800ff16 <__sflush_r+0x9a>
 800feb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	075a      	lsls	r2, r3, #29
 800feb6:	d505      	bpl.n	800fec4 <__sflush_r+0x48>
 800feb8:	6863      	ldr	r3, [r4, #4]
 800feba:	1ac0      	subs	r0, r0, r3
 800febc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800febe:	b10b      	cbz	r3, 800fec4 <__sflush_r+0x48>
 800fec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fec2:	1ac0      	subs	r0, r0, r3
 800fec4:	2300      	movs	r3, #0
 800fec6:	4602      	mov	r2, r0
 800fec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800feca:	6a21      	ldr	r1, [r4, #32]
 800fecc:	4628      	mov	r0, r5
 800fece:	47b0      	blx	r6
 800fed0:	1c43      	adds	r3, r0, #1
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	d106      	bne.n	800fee4 <__sflush_r+0x68>
 800fed6:	6829      	ldr	r1, [r5, #0]
 800fed8:	291d      	cmp	r1, #29
 800feda:	d82b      	bhi.n	800ff34 <__sflush_r+0xb8>
 800fedc:	4a29      	ldr	r2, [pc, #164]	; (800ff84 <__sflush_r+0x108>)
 800fede:	410a      	asrs	r2, r1
 800fee0:	07d6      	lsls	r6, r2, #31
 800fee2:	d427      	bmi.n	800ff34 <__sflush_r+0xb8>
 800fee4:	2200      	movs	r2, #0
 800fee6:	6062      	str	r2, [r4, #4]
 800fee8:	04d9      	lsls	r1, r3, #19
 800feea:	6922      	ldr	r2, [r4, #16]
 800feec:	6022      	str	r2, [r4, #0]
 800feee:	d504      	bpl.n	800fefa <__sflush_r+0x7e>
 800fef0:	1c42      	adds	r2, r0, #1
 800fef2:	d101      	bne.n	800fef8 <__sflush_r+0x7c>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	b903      	cbnz	r3, 800fefa <__sflush_r+0x7e>
 800fef8:	6560      	str	r0, [r4, #84]	; 0x54
 800fefa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fefc:	602f      	str	r7, [r5, #0]
 800fefe:	2900      	cmp	r1, #0
 800ff00:	d0c9      	beq.n	800fe96 <__sflush_r+0x1a>
 800ff02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff06:	4299      	cmp	r1, r3
 800ff08:	d002      	beq.n	800ff10 <__sflush_r+0x94>
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f7ff fbe2 	bl	800f6d4 <_free_r>
 800ff10:	2000      	movs	r0, #0
 800ff12:	6360      	str	r0, [r4, #52]	; 0x34
 800ff14:	e7c0      	b.n	800fe98 <__sflush_r+0x1c>
 800ff16:	2301      	movs	r3, #1
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b0      	blx	r6
 800ff1c:	1c41      	adds	r1, r0, #1
 800ff1e:	d1c8      	bne.n	800feb2 <__sflush_r+0x36>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d0c5      	beq.n	800feb2 <__sflush_r+0x36>
 800ff26:	2b1d      	cmp	r3, #29
 800ff28:	d001      	beq.n	800ff2e <__sflush_r+0xb2>
 800ff2a:	2b16      	cmp	r3, #22
 800ff2c:	d101      	bne.n	800ff32 <__sflush_r+0xb6>
 800ff2e:	602f      	str	r7, [r5, #0]
 800ff30:	e7b1      	b.n	800fe96 <__sflush_r+0x1a>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff38:	81a3      	strh	r3, [r4, #12]
 800ff3a:	e7ad      	b.n	800fe98 <__sflush_r+0x1c>
 800ff3c:	690f      	ldr	r7, [r1, #16]
 800ff3e:	2f00      	cmp	r7, #0
 800ff40:	d0a9      	beq.n	800fe96 <__sflush_r+0x1a>
 800ff42:	0793      	lsls	r3, r2, #30
 800ff44:	680e      	ldr	r6, [r1, #0]
 800ff46:	bf08      	it	eq
 800ff48:	694b      	ldreq	r3, [r1, #20]
 800ff4a:	600f      	str	r7, [r1, #0]
 800ff4c:	bf18      	it	ne
 800ff4e:	2300      	movne	r3, #0
 800ff50:	eba6 0807 	sub.w	r8, r6, r7
 800ff54:	608b      	str	r3, [r1, #8]
 800ff56:	f1b8 0f00 	cmp.w	r8, #0
 800ff5a:	dd9c      	ble.n	800fe96 <__sflush_r+0x1a>
 800ff5c:	6a21      	ldr	r1, [r4, #32]
 800ff5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff60:	4643      	mov	r3, r8
 800ff62:	463a      	mov	r2, r7
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b0      	blx	r6
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	dc06      	bgt.n	800ff7a <__sflush_r+0xfe>
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e78e      	b.n	800fe98 <__sflush_r+0x1c>
 800ff7a:	4407      	add	r7, r0
 800ff7c:	eba8 0800 	sub.w	r8, r8, r0
 800ff80:	e7e9      	b.n	800ff56 <__sflush_r+0xda>
 800ff82:	bf00      	nop
 800ff84:	dfbffffe 	.word	0xdfbffffe

0800ff88 <_fflush_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	690b      	ldr	r3, [r1, #16]
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	b913      	cbnz	r3, 800ff98 <_fflush_r+0x10>
 800ff92:	2500      	movs	r5, #0
 800ff94:	4628      	mov	r0, r5
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	b118      	cbz	r0, 800ffa2 <_fflush_r+0x1a>
 800ff9a:	6a03      	ldr	r3, [r0, #32]
 800ff9c:	b90b      	cbnz	r3, 800ffa2 <_fflush_r+0x1a>
 800ff9e:	f7ff fa5b 	bl	800f458 <__sinit>
 800ffa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0f3      	beq.n	800ff92 <_fflush_r+0xa>
 800ffaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffac:	07d0      	lsls	r0, r2, #31
 800ffae:	d404      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb0:	0599      	lsls	r1, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffb6:	f7ff fb5e 	bl	800f676 <__retarget_lock_acquire_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f7ff ff5d 	bl	800fe7c <__sflush_r>
 800ffc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffc4:	07da      	lsls	r2, r3, #31
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	d4e4      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	d4e1      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffd2:	f7ff fb51 	bl	800f678 <__retarget_lock_release_recursive>
 800ffd6:	e7dd      	b.n	800ff94 <_fflush_r+0xc>

0800ffd8 <fiprintf>:
 800ffd8:	b40e      	push	{r1, r2, r3}
 800ffda:	b503      	push	{r0, r1, lr}
 800ffdc:	4601      	mov	r1, r0
 800ffde:	ab03      	add	r3, sp, #12
 800ffe0:	4805      	ldr	r0, [pc, #20]	; (800fff8 <fiprintf+0x20>)
 800ffe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	f7ff fc9d 	bl	800f928 <_vfiprintf_r>
 800ffee:	b002      	add	sp, #8
 800fff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fff4:	b003      	add	sp, #12
 800fff6:	4770      	bx	lr
 800fff8:	20000084 	.word	0x20000084

0800fffc <__swbuf_r>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	460e      	mov	r6, r1
 8010000:	4614      	mov	r4, r2
 8010002:	4605      	mov	r5, r0
 8010004:	b118      	cbz	r0, 801000e <__swbuf_r+0x12>
 8010006:	6a03      	ldr	r3, [r0, #32]
 8010008:	b90b      	cbnz	r3, 801000e <__swbuf_r+0x12>
 801000a:	f7ff fa25 	bl	800f458 <__sinit>
 801000e:	69a3      	ldr	r3, [r4, #24]
 8010010:	60a3      	str	r3, [r4, #8]
 8010012:	89a3      	ldrh	r3, [r4, #12]
 8010014:	071a      	lsls	r2, r3, #28
 8010016:	d525      	bpl.n	8010064 <__swbuf_r+0x68>
 8010018:	6923      	ldr	r3, [r4, #16]
 801001a:	b31b      	cbz	r3, 8010064 <__swbuf_r+0x68>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	6922      	ldr	r2, [r4, #16]
 8010020:	1a98      	subs	r0, r3, r2
 8010022:	6963      	ldr	r3, [r4, #20]
 8010024:	b2f6      	uxtb	r6, r6
 8010026:	4283      	cmp	r3, r0
 8010028:	4637      	mov	r7, r6
 801002a:	dc04      	bgt.n	8010036 <__swbuf_r+0x3a>
 801002c:	4621      	mov	r1, r4
 801002e:	4628      	mov	r0, r5
 8010030:	f7ff ffaa 	bl	800ff88 <_fflush_r>
 8010034:	b9e0      	cbnz	r0, 8010070 <__swbuf_r+0x74>
 8010036:	68a3      	ldr	r3, [r4, #8]
 8010038:	3b01      	subs	r3, #1
 801003a:	60a3      	str	r3, [r4, #8]
 801003c:	6823      	ldr	r3, [r4, #0]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	6022      	str	r2, [r4, #0]
 8010042:	701e      	strb	r6, [r3, #0]
 8010044:	6962      	ldr	r2, [r4, #20]
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	429a      	cmp	r2, r3
 801004a:	d004      	beq.n	8010056 <__swbuf_r+0x5a>
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	07db      	lsls	r3, r3, #31
 8010050:	d506      	bpl.n	8010060 <__swbuf_r+0x64>
 8010052:	2e0a      	cmp	r6, #10
 8010054:	d104      	bne.n	8010060 <__swbuf_r+0x64>
 8010056:	4621      	mov	r1, r4
 8010058:	4628      	mov	r0, r5
 801005a:	f7ff ff95 	bl	800ff88 <_fflush_r>
 801005e:	b938      	cbnz	r0, 8010070 <__swbuf_r+0x74>
 8010060:	4638      	mov	r0, r7
 8010062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010064:	4621      	mov	r1, r4
 8010066:	4628      	mov	r0, r5
 8010068:	f000 f806 	bl	8010078 <__swsetup_r>
 801006c:	2800      	cmp	r0, #0
 801006e:	d0d5      	beq.n	801001c <__swbuf_r+0x20>
 8010070:	f04f 37ff 	mov.w	r7, #4294967295
 8010074:	e7f4      	b.n	8010060 <__swbuf_r+0x64>
	...

08010078 <__swsetup_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4b2a      	ldr	r3, [pc, #168]	; (8010124 <__swsetup_r+0xac>)
 801007c:	4605      	mov	r5, r0
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	460c      	mov	r4, r1
 8010082:	b118      	cbz	r0, 801008c <__swsetup_r+0x14>
 8010084:	6a03      	ldr	r3, [r0, #32]
 8010086:	b90b      	cbnz	r3, 801008c <__swsetup_r+0x14>
 8010088:	f7ff f9e6 	bl	800f458 <__sinit>
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010092:	0718      	lsls	r0, r3, #28
 8010094:	d422      	bmi.n	80100dc <__swsetup_r+0x64>
 8010096:	06d9      	lsls	r1, r3, #27
 8010098:	d407      	bmi.n	80100aa <__swsetup_r+0x32>
 801009a:	2309      	movs	r3, #9
 801009c:	602b      	str	r3, [r5, #0]
 801009e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	e034      	b.n	8010114 <__swsetup_r+0x9c>
 80100aa:	0758      	lsls	r0, r3, #29
 80100ac:	d512      	bpl.n	80100d4 <__swsetup_r+0x5c>
 80100ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100b0:	b141      	cbz	r1, 80100c4 <__swsetup_r+0x4c>
 80100b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100b6:	4299      	cmp	r1, r3
 80100b8:	d002      	beq.n	80100c0 <__swsetup_r+0x48>
 80100ba:	4628      	mov	r0, r5
 80100bc:	f7ff fb0a 	bl	800f6d4 <_free_r>
 80100c0:	2300      	movs	r3, #0
 80100c2:	6363      	str	r3, [r4, #52]	; 0x34
 80100c4:	89a3      	ldrh	r3, [r4, #12]
 80100c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100ca:	81a3      	strh	r3, [r4, #12]
 80100cc:	2300      	movs	r3, #0
 80100ce:	6063      	str	r3, [r4, #4]
 80100d0:	6923      	ldr	r3, [r4, #16]
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	89a3      	ldrh	r3, [r4, #12]
 80100d6:	f043 0308 	orr.w	r3, r3, #8
 80100da:	81a3      	strh	r3, [r4, #12]
 80100dc:	6923      	ldr	r3, [r4, #16]
 80100de:	b94b      	cbnz	r3, 80100f4 <__swsetup_r+0x7c>
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ea:	d003      	beq.n	80100f4 <__swsetup_r+0x7c>
 80100ec:	4621      	mov	r1, r4
 80100ee:	4628      	mov	r0, r5
 80100f0:	f000 f857 	bl	80101a2 <__smakebuf_r>
 80100f4:	89a0      	ldrh	r0, [r4, #12]
 80100f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100fa:	f010 0301 	ands.w	r3, r0, #1
 80100fe:	d00a      	beq.n	8010116 <__swsetup_r+0x9e>
 8010100:	2300      	movs	r3, #0
 8010102:	60a3      	str	r3, [r4, #8]
 8010104:	6963      	ldr	r3, [r4, #20]
 8010106:	425b      	negs	r3, r3
 8010108:	61a3      	str	r3, [r4, #24]
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	b943      	cbnz	r3, 8010120 <__swsetup_r+0xa8>
 801010e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010112:	d1c4      	bne.n	801009e <__swsetup_r+0x26>
 8010114:	bd38      	pop	{r3, r4, r5, pc}
 8010116:	0781      	lsls	r1, r0, #30
 8010118:	bf58      	it	pl
 801011a:	6963      	ldrpl	r3, [r4, #20]
 801011c:	60a3      	str	r3, [r4, #8]
 801011e:	e7f4      	b.n	801010a <__swsetup_r+0x92>
 8010120:	2000      	movs	r0, #0
 8010122:	e7f7      	b.n	8010114 <__swsetup_r+0x9c>
 8010124:	20000084 	.word	0x20000084

08010128 <_sbrk_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d06      	ldr	r5, [pc, #24]	; (8010144 <_sbrk_r+0x1c>)
 801012c:	2300      	movs	r3, #0
 801012e:	4604      	mov	r4, r0
 8010130:	4608      	mov	r0, r1
 8010132:	602b      	str	r3, [r5, #0]
 8010134:	f7f0 fce6 	bl	8000b04 <_sbrk>
 8010138:	1c43      	adds	r3, r0, #1
 801013a:	d102      	bne.n	8010142 <_sbrk_r+0x1a>
 801013c:	682b      	ldr	r3, [r5, #0]
 801013e:	b103      	cbz	r3, 8010142 <_sbrk_r+0x1a>
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	bd38      	pop	{r3, r4, r5, pc}
 8010144:	20008534 	.word	0x20008534

08010148 <abort>:
 8010148:	b508      	push	{r3, lr}
 801014a:	2006      	movs	r0, #6
 801014c:	f000 f88e 	bl	801026c <raise>
 8010150:	2001      	movs	r0, #1
 8010152:	f7f0 fc5f 	bl	8000a14 <_exit>

08010156 <__swhatbuf_r>:
 8010156:	b570      	push	{r4, r5, r6, lr}
 8010158:	460c      	mov	r4, r1
 801015a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801015e:	2900      	cmp	r1, #0
 8010160:	b096      	sub	sp, #88	; 0x58
 8010162:	4615      	mov	r5, r2
 8010164:	461e      	mov	r6, r3
 8010166:	da0d      	bge.n	8010184 <__swhatbuf_r+0x2e>
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801016e:	f04f 0100 	mov.w	r1, #0
 8010172:	bf0c      	ite	eq
 8010174:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010178:	2340      	movne	r3, #64	; 0x40
 801017a:	2000      	movs	r0, #0
 801017c:	6031      	str	r1, [r6, #0]
 801017e:	602b      	str	r3, [r5, #0]
 8010180:	b016      	add	sp, #88	; 0x58
 8010182:	bd70      	pop	{r4, r5, r6, pc}
 8010184:	466a      	mov	r2, sp
 8010186:	f000 f879 	bl	801027c <_fstat_r>
 801018a:	2800      	cmp	r0, #0
 801018c:	dbec      	blt.n	8010168 <__swhatbuf_r+0x12>
 801018e:	9901      	ldr	r1, [sp, #4]
 8010190:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010194:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010198:	4259      	negs	r1, r3
 801019a:	4159      	adcs	r1, r3
 801019c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a0:	e7eb      	b.n	801017a <__swhatbuf_r+0x24>

080101a2 <__smakebuf_r>:
 80101a2:	898b      	ldrh	r3, [r1, #12]
 80101a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101a6:	079d      	lsls	r5, r3, #30
 80101a8:	4606      	mov	r6, r0
 80101aa:	460c      	mov	r4, r1
 80101ac:	d507      	bpl.n	80101be <__smakebuf_r+0x1c>
 80101ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	2301      	movs	r3, #1
 80101b8:	6163      	str	r3, [r4, #20]
 80101ba:	b002      	add	sp, #8
 80101bc:	bd70      	pop	{r4, r5, r6, pc}
 80101be:	ab01      	add	r3, sp, #4
 80101c0:	466a      	mov	r2, sp
 80101c2:	f7ff ffc8 	bl	8010156 <__swhatbuf_r>
 80101c6:	9900      	ldr	r1, [sp, #0]
 80101c8:	4605      	mov	r5, r0
 80101ca:	4630      	mov	r0, r6
 80101cc:	f7ff faf6 	bl	800f7bc <_malloc_r>
 80101d0:	b948      	cbnz	r0, 80101e6 <__smakebuf_r+0x44>
 80101d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101d6:	059a      	lsls	r2, r3, #22
 80101d8:	d4ef      	bmi.n	80101ba <__smakebuf_r+0x18>
 80101da:	f023 0303 	bic.w	r3, r3, #3
 80101de:	f043 0302 	orr.w	r3, r3, #2
 80101e2:	81a3      	strh	r3, [r4, #12]
 80101e4:	e7e3      	b.n	80101ae <__smakebuf_r+0xc>
 80101e6:	89a3      	ldrh	r3, [r4, #12]
 80101e8:	6020      	str	r0, [r4, #0]
 80101ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ee:	81a3      	strh	r3, [r4, #12]
 80101f0:	9b00      	ldr	r3, [sp, #0]
 80101f2:	6163      	str	r3, [r4, #20]
 80101f4:	9b01      	ldr	r3, [sp, #4]
 80101f6:	6120      	str	r0, [r4, #16]
 80101f8:	b15b      	cbz	r3, 8010212 <__smakebuf_r+0x70>
 80101fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101fe:	4630      	mov	r0, r6
 8010200:	f000 f84e 	bl	80102a0 <_isatty_r>
 8010204:	b128      	cbz	r0, 8010212 <__smakebuf_r+0x70>
 8010206:	89a3      	ldrh	r3, [r4, #12]
 8010208:	f023 0303 	bic.w	r3, r3, #3
 801020c:	f043 0301 	orr.w	r3, r3, #1
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	89a3      	ldrh	r3, [r4, #12]
 8010214:	431d      	orrs	r5, r3
 8010216:	81a5      	strh	r5, [r4, #12]
 8010218:	e7cf      	b.n	80101ba <__smakebuf_r+0x18>

0801021a <_raise_r>:
 801021a:	291f      	cmp	r1, #31
 801021c:	b538      	push	{r3, r4, r5, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	d904      	bls.n	801022e <_raise_r+0x14>
 8010224:	2316      	movs	r3, #22
 8010226:	6003      	str	r3, [r0, #0]
 8010228:	f04f 30ff 	mov.w	r0, #4294967295
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010230:	b112      	cbz	r2, 8010238 <_raise_r+0x1e>
 8010232:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010236:	b94b      	cbnz	r3, 801024c <_raise_r+0x32>
 8010238:	4620      	mov	r0, r4
 801023a:	f000 f853 	bl	80102e4 <_getpid_r>
 801023e:	462a      	mov	r2, r5
 8010240:	4601      	mov	r1, r0
 8010242:	4620      	mov	r0, r4
 8010244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010248:	f000 b83a 	b.w	80102c0 <_kill_r>
 801024c:	2b01      	cmp	r3, #1
 801024e:	d00a      	beq.n	8010266 <_raise_r+0x4c>
 8010250:	1c59      	adds	r1, r3, #1
 8010252:	d103      	bne.n	801025c <_raise_r+0x42>
 8010254:	2316      	movs	r3, #22
 8010256:	6003      	str	r3, [r0, #0]
 8010258:	2001      	movs	r0, #1
 801025a:	e7e7      	b.n	801022c <_raise_r+0x12>
 801025c:	2400      	movs	r4, #0
 801025e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010262:	4628      	mov	r0, r5
 8010264:	4798      	blx	r3
 8010266:	2000      	movs	r0, #0
 8010268:	e7e0      	b.n	801022c <_raise_r+0x12>
	...

0801026c <raise>:
 801026c:	4b02      	ldr	r3, [pc, #8]	; (8010278 <raise+0xc>)
 801026e:	4601      	mov	r1, r0
 8010270:	6818      	ldr	r0, [r3, #0]
 8010272:	f7ff bfd2 	b.w	801021a <_raise_r>
 8010276:	bf00      	nop
 8010278:	20000084 	.word	0x20000084

0801027c <_fstat_r>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4d07      	ldr	r5, [pc, #28]	; (801029c <_fstat_r+0x20>)
 8010280:	2300      	movs	r3, #0
 8010282:	4604      	mov	r4, r0
 8010284:	4608      	mov	r0, r1
 8010286:	4611      	mov	r1, r2
 8010288:	602b      	str	r3, [r5, #0]
 801028a:	f7f0 fc12 	bl	8000ab2 <_fstat>
 801028e:	1c43      	adds	r3, r0, #1
 8010290:	d102      	bne.n	8010298 <_fstat_r+0x1c>
 8010292:	682b      	ldr	r3, [r5, #0]
 8010294:	b103      	cbz	r3, 8010298 <_fstat_r+0x1c>
 8010296:	6023      	str	r3, [r4, #0]
 8010298:	bd38      	pop	{r3, r4, r5, pc}
 801029a:	bf00      	nop
 801029c:	20008534 	.word	0x20008534

080102a0 <_isatty_r>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4d06      	ldr	r5, [pc, #24]	; (80102bc <_isatty_r+0x1c>)
 80102a4:	2300      	movs	r3, #0
 80102a6:	4604      	mov	r4, r0
 80102a8:	4608      	mov	r0, r1
 80102aa:	602b      	str	r3, [r5, #0]
 80102ac:	f7f0 fc11 	bl	8000ad2 <_isatty>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	d102      	bne.n	80102ba <_isatty_r+0x1a>
 80102b4:	682b      	ldr	r3, [r5, #0]
 80102b6:	b103      	cbz	r3, 80102ba <_isatty_r+0x1a>
 80102b8:	6023      	str	r3, [r4, #0]
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	20008534 	.word	0x20008534

080102c0 <_kill_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4d07      	ldr	r5, [pc, #28]	; (80102e0 <_kill_r+0x20>)
 80102c4:	2300      	movs	r3, #0
 80102c6:	4604      	mov	r4, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	4611      	mov	r1, r2
 80102cc:	602b      	str	r3, [r5, #0]
 80102ce:	f7f0 fb8f 	bl	80009f0 <_kill>
 80102d2:	1c43      	adds	r3, r0, #1
 80102d4:	d102      	bne.n	80102dc <_kill_r+0x1c>
 80102d6:	682b      	ldr	r3, [r5, #0]
 80102d8:	b103      	cbz	r3, 80102dc <_kill_r+0x1c>
 80102da:	6023      	str	r3, [r4, #0]
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
 80102de:	bf00      	nop
 80102e0:	20008534 	.word	0x20008534

080102e4 <_getpid_r>:
 80102e4:	f7f0 bb7c 	b.w	80009e0 <_getpid>

080102e8 <_init>:
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ea:	bf00      	nop
 80102ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ee:	bc08      	pop	{r3}
 80102f0:	469e      	mov	lr, r3
 80102f2:	4770      	bx	lr

080102f4 <_fini>:
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	bf00      	nop
 80102f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102fa:	bc08      	pop	{r3}
 80102fc:	469e      	mov	lr, r3
 80102fe:	4770      	bx	lr
