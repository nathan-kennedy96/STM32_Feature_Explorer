
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  080102f8  080102f8  000202f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ec4  08012ec4  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012ec4  08012ec4  00022ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ecc  08012ecc  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ecc  08012ecc  00022ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ed0  08012ed0  00022ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012ed4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          000084bc  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008544  20008544  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c023  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000054bd  00000000  00000000  0004c11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001488  00000000  00000000  000515e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000105b  00000000  00000000  00052a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d58b  00000000  00000000  00053ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000255af  00000000  00000000  0008104e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbe0e  00000000  00000000  000a65fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a98  00000000  00000000  0018240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00187ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080102e0 	.word	0x080102e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080102e0 	.word	0x080102e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <nok>:

#include "command_manager.h"

FunctionPointer function_map[NUM_FUNCTIONS];

void nok(Message* rx_msg, uint8_t* tx_buffer){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	// Respond with all zeros
	const Message ret_msg = {
 8000586:	2300      	movs	r3, #0
 8000588:	733b      	strb	r3, [r7, #12]
 800058a:	2300      	movs	r3, #0
 800058c:	81fb      	strh	r3, [r7, #14]
		.cmd = NOK,
		.data = 0
	};
	serialize_message(&ret_msg, tx_buffer);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f962 	bl	800085e <serialize_message>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <hello>:

void hello(Message* rx_msg, uint8_t* tx_buffer){
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
	//For now we will just have hello respond their number + 1
	const Message ret_msg = {
 80005ac:	2301      	movs	r3, #1
 80005ae:	733b      	strb	r3, [r7, #12]
	        .cmd = HELLO,
	        .data = rx_msg->data + 1
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b29b      	uxth	r3, r3
	const Message ret_msg = {
 80005b8:	81fb      	strh	r3, [r7, #14]
	};
	serialize_message(&ret_msg, tx_buffer);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f94c 	bl	800085e <serialize_message>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <initialize_function_map>:

// Initialization function for the command map
void initialize_function_map(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    function_map[NOK] = nok;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <initialize_function_map+0x1c>)
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <initialize_function_map+0x20>)
 80005d8:	601a      	str	r2, [r3, #0]
    function_map[HELLO] = hello;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <initialize_function_map+0x1c>)
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <initialize_function_map+0x24>)
 80005de:	605a      	str	r2, [r3, #4]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000a4 	.word	0x200000a4
 80005f0:	0800057d 	.word	0x0800057d
 80005f4:	080005a3 	.word	0x080005a3

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialize_function_map();
 80005fc:	f7ff ffe8 	bl	80005d0 <initialize_function_map>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fcde 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f814 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8ae 	bl	8000768 <MX_GPIO_Init>
  MX_UART4_Init();
 800060c:	f000 f87a 	bl	8000704 <MX_UART4_Init>
  MX_LWIP_Init();
 8000610:	f003 fdb6 	bl	8004180 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, rx_buffer, COMM_BUFFER_SIZE);
 8000614:	2204      	movs	r2, #4
 8000616:	4904      	ldr	r1, [pc, #16]	; (8000628 <main+0x30>)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <main+0x34>)
 800061a:	f002 fe87 	bl	800332c <HAL_UART_Receive_IT>
  tcp_server_init();
 800061e:	f000 fab7 	bl	8000b90 <tcp_server_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Main loop does nothing, just waits for interrupts
    MX_LWIP_Process();
 8000622:	f003 fef9 	bl	8004418 <MX_LWIP_Process>
 8000626:	e7fc      	b.n	8000622 <main+0x2a>
 8000628:	200000f0 	.word	0x200000f0
 800062c:	200000ac 	.word	0x200000ac

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00e ffa1 	bl	800f586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f94f 	bl	8002958 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f8b8 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fbb0 	bl	8002e48 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f8a1 	bl	8000834 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_UART4_Init+0x5c>)
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <MX_UART4_Init+0x60>)
 800070c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_UART4_Init+0x5c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_UART4_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_UART4_Init+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_UART4_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_UART4_Init+0x5c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_UART4_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_UART4_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_UART4_Init+0x5c>)
 800073c:	f002 fd64 	bl	8003208 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f875 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Enable the UART interrupt in NVIC
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2034      	movs	r0, #52	; 0x34
 8000750:	f000 fda7 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000754:	2034      	movs	r0, #52	; 0x34
 8000756:	f000 fdc0 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ac 	.word	0x200000ac
 8000764:	40004c00 	.word	0x40004c00

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0x68>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x68>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x68>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_GPIO_Init+0x68>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x68>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x68>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x68>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_UART_RxCpltCallback+0x48>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d116      	bne.n	8000814 <HAL_UART_RxCpltCallback+0x40>
  {
      //Deserialize the message
	  deserialize_message(rx_buffer, &rx_message); //TODO: handle deserialization failures and unknown msgs!
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <HAL_UART_RxCpltCallback+0x4c>)
 80007e8:	480e      	ldr	r0, [pc, #56]	; (8000824 <HAL_UART_RxCpltCallback+0x50>)
 80007ea:	f000 f828 	bl	800083e <deserialize_message>
	  // We should use the NOK return for those!
	  function_map[rx_message.cmd](&rx_message, tx_buffer);
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_UART_RxCpltCallback+0x4c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_UART_RxCpltCallback+0x54>)
 80007f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fa:	490c      	ldr	r1, [pc, #48]	; (800082c <HAL_UART_RxCpltCallback+0x58>)
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <HAL_UART_RxCpltCallback+0x4c>)
 80007fe:	4798      	blx	r3
	  // Transmit the received data back
	  HAL_UART_Transmit_IT(&huart4, tx_buffer, COMM_BUFFER_SIZE);
 8000800:	2204      	movs	r2, #4
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <HAL_UART_RxCpltCallback+0x58>)
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <HAL_UART_RxCpltCallback+0x5c>)
 8000806:	f002 fd4c 	bl	80032a2 <HAL_UART_Transmit_IT>

	  // Restart UART reception
	  HAL_UART_Receive_IT(&huart4, rx_buffer, COMM_BUFFER_SIZE);
 800080a:	2204      	movs	r2, #4
 800080c:	4905      	ldr	r1, [pc, #20]	; (8000824 <HAL_UART_RxCpltCallback+0x50>)
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_UART_RxCpltCallback+0x5c>)
 8000810:	f002 fd8c 	bl	800332c <HAL_UART_Receive_IT>
  }
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004c00 	.word	0x40004c00
 8000820:	200000f4 	.word	0x200000f4
 8000824:	200000f0 	.word	0x200000f0
 8000828:	200000a4 	.word	0x200000a4
 800082c:	200000f8 	.word	0x200000f8
 8000830:	200000ac 	.word	0x200000ac

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>

0800083e <deserialize_message>:
 */


#include "message.h"

void deserialize_message(const uint8_t* buffer, Message* msg) {
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
	memcpy((uint8_t*)msg, buffer, sizeof(Message));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <serialize_message>:
void serialize_message(const Message* msg, uint8_t* buffer) {
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
	 memcpy(buffer, (uint8_t*)msg, sizeof(Message));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <HAL_UART_MspInit+0x94>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d134      	bne.n	800095c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_UART_MspInit+0x98>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <HAL_UART_MspInit+0x98>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x98>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0x98>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_UART_MspInit+0x98>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_UART_MspInit+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800092a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800093c:	2308      	movs	r3, #8
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_UART_MspInit+0x9c>)
 8000948:	f001 fe6a 	bl	8002620 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2034      	movs	r0, #52	; 0x34
 8000952:	f000 fca6 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000956:	2034      	movs	r0, #52	; 0x34
 8000958:	f000 fcbf 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40004c00 	.word	0x40004c00
 8000968:	40023800 	.word	0x40023800
 800096c:	40020800 	.word	0x40020800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fb52 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <UART4_IRQHandler+0x10>)
 80009ca:	f002 fcdf 	bl	800338c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000ac 	.word	0x200000ac

080009d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return 1;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_kill>:

int _kill(int pid, int sig)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <_kill+0x20>)
 80009f4:	2216      	movs	r2, #22
 80009f6:	601a      	str	r2, [r3, #0]
  return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	20008534 	.word	0x20008534

08000a0c <_exit>:

void _exit (int status)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ffe5 	bl	80009e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a1e:	e7fe      	b.n	8000a1e <_exit+0x12>

08000a20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e00a      	b.n	8000a48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a32:	f3af 8000 	nop.w
 8000a36:	4601      	mov	r1, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	b2ca      	uxtb	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf0      	blt.n	8000a32 <_read+0x12>
  }

  return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e009      	b.n	8000a80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf1      	blt.n	8000a6c <_write+0x12>
  }
  return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_close>:

int _close(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	605a      	str	r2, [r3, #4]
  return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d205      	bcs.n	8000b38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <_sbrk+0x6c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200000fc 	.word	0x200000fc
 8000b64:	20008548 	.word	0x20008548
 8000b68:	20008534 	.word	0x20008534

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <tcp_server_init>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err);
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
static void tcp_server_error(void *arg, err_t err);

void tcp_server_init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
    tcp_server_pcb = tcp_new();
 8000b96:	f007 f981 	bl	8007e9c <tcp_new>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <tcp_server_init+0x5c>)
 8000b9e:	6013      	str	r3, [r2, #0]
    if (tcp_server_pcb != NULL) {
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <tcp_server_init+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d01c      	beq.n	8000be2 <tcp_server_init+0x52>
        err_t err;
        err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, SERVER_PORT);
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <tcp_server_init+0x5c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f243 0239 	movw	r2, #12345	; 0x3039
 8000bb0:	490f      	ldr	r1, [pc, #60]	; (8000bf0 <tcp_server_init+0x60>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f006 f8ce 	bl	8006d54 <tcp_bind>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
        if (err == ERR_OK) {
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10e      	bne.n	8000be2 <tcp_server_init+0x52>
            tcp_server_pcb = tcp_listen(tcp_server_pcb);
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <tcp_server_init+0x5c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	21ff      	movs	r1, #255	; 0xff
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 f97a 	bl	8006ec4 <tcp_listen_with_backlog>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <tcp_server_init+0x5c>)
 8000bd4:	6013      	str	r3, [r2, #0]
            tcp_accept(tcp_server_pcb, tcp_server_accept);
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <tcp_server_init+0x5c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <tcp_server_init+0x64>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 f9a9 	bl	8007f34 <tcp_accept>
            // Handle error
        }
    } else {
        // Handle error
    }
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000100 	.word	0x20000100
 8000bf0:	08012dd4 	.word	0x08012dd4
 8000bf4:	08000bf9 	.word	0x08000bf9

08000bf8 <tcp_server_accept>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	4613      	mov	r3, r2
 8000c04:	71fb      	strb	r3, [r7, #7]
    tcp_setprio(newpcb, TCP_PRIO_NORMAL);
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f006 ff55 	bl	8007ab8 <tcp_setprio>
    tcp_recv(newpcb, tcp_server_recv);
 8000c0e:	4906      	ldr	r1, [pc, #24]	; (8000c28 <tcp_server_accept+0x30>)
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f007 f94b 	bl	8007eac <tcp_recv>
    tcp_err(newpcb, tcp_server_error);
 8000c16:	4905      	ldr	r1, [pc, #20]	; (8000c2c <tcp_server_accept+0x34>)
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f007 f969 	bl	8007ef0 <tcp_err>
    return ERR_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08000c31 	.word	0x08000c31
 8000c2c:	08000c95 	.word	0x08000c95

08000c30 <tcp_server_recv>:

static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d108      	bne.n	8000c56 <tcp_server_recv+0x26>
        tcp_close(tpcb);
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f005 ff8f 	bl	8006b68 <tcp_close>
        tcp_recv(tpcb, NULL);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f007 f92d 	bl	8007eac <tcp_recv>
        return ERR_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e018      	b.n	8000c88 <tcp_server_recv+0x58>
    } else {
        // Handle received data
        char response[] = "hello";
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <tcp_server_recv+0x60>)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c60:	6018      	str	r0, [r3, #0]
 8000c62:	3304      	adds	r3, #4
 8000c64:	8019      	strh	r1, [r3, #0]
        tcp_write(tpcb, response, strlen(response), TCP_WRITE_FLAG_COPY);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fab0 	bl	80001d0 <strlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f107 0110 	add.w	r1, r7, #16
 8000c78:	2301      	movs	r3, #1
 8000c7a:	68b8      	ldr	r0, [r7, #8]
 8000c7c:	f009 fff4 	bl	800ac68 <tcp_write>
        pbuf_free(p);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f005 fad3 	bl	800622c <pbuf_free>
        return ERR_OK;
 8000c86:	2300      	movs	r3, #0
    }
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	080102f8 	.word	0x080102f8

08000c94 <tcp_server_error>:

static void tcp_server_error(void *arg, err_t err) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
    // Handle error
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ff49 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f00e fca3 	bl	800f624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc8b 	bl	80005f8 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cf0:	08012ed4 	.word	0x08012ed4
  ldr r2, =_sbss
 8000cf4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cf8:	20008544 	.word	0x20008544

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>

08000cfe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00b      	beq.n	8000d26 <LAN8742_RegisterBusIO+0x28>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d007      	beq.n	8000d26 <LAN8742_RegisterBusIO+0x28>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <LAN8742_RegisterBusIO+0x28>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e014      	b.n	8000d56 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d17c      	bne.n	8000e7c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e01c      	b.n	8000dd6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f107 0208 	add.w	r2, r7, #8
 8000da4:	2112      	movs	r1, #18
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	4798      	blx	r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da03      	bge.n	8000db8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000db0:	f06f 0304 	mvn.w	r3, #4
 8000db4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000db6:	e00b      	b.n	8000dd0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d105      	bne.n	8000dd0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
         break;
 8000dce:	e005      	b.n	8000ddc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b1f      	cmp	r3, #31
 8000dda:	d9df      	bls.n	8000d9c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b1f      	cmp	r3, #31
 8000de2:	d902      	bls.n	8000dea <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000de4:	f06f 0302 	mvn.w	r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d145      	bne.n	8000e7c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6810      	ldr	r0, [r2, #0]
 8000df8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4798      	blx	r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db37      	blt.n	8000e76 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6810      	ldr	r0, [r2, #0]
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	2100      	movs	r1, #0
 8000e14:	4798      	blx	r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db28      	blt.n	8000e6e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4798      	blx	r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e26:	e01c      	b.n	8000e62 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4798      	blx	r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e3a:	d80e      	bhi.n	8000e5a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	f107 0208 	add.w	r2, r7, #8
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4798      	blx	r3
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da07      	bge.n	8000e62 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e52:	f06f 0304 	mvn.w	r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
                 break;
 8000e58:	e010      	b.n	8000e7c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e5a:	f06f 0301 	mvn.w	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
               break;
 8000e60:	e00c      	b.n	8000e7c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1dd      	bne.n	8000e28 <LAN8742_Init+0xc6>
 8000e6c:	e006      	b.n	8000e7c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e6e:	f06f 0304 	mvn.w	r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e002      	b.n	8000e7c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e76:	f06f 0303 	mvn.w	r3, #3
 8000e7a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d112      	bne.n	8000ea8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4798      	blx	r3
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e8c:	bf00      	nop
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4798      	blx	r3
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ea0:	d9f5      	bls.n	8000e8e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 }
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6810      	ldr	r0, [r2, #0]
 8000ec6:	f107 020c 	add.w	r2, r7, #12
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4798      	blx	r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da02      	bge.n	8000eda <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ed4:	f06f 0304 	mvn.w	r3, #4
 8000ed8:	e06e      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6810      	ldr	r0, [r2, #0]
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da02      	bge.n	8000ef6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ef0:	f06f 0304 	mvn.w	r3, #4
 8000ef4:	e060      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f00:	2301      	movs	r3, #1
 8000f02:	e059      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6810      	ldr	r0, [r2, #0]
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	2100      	movs	r1, #0
 8000f12:	4798      	blx	r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da02      	bge.n	8000f20 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f1a:	f06f 0304 	mvn.w	r3, #4
 8000f1e:	e04b      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11b      	bne.n	8000f62 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <LAN8742_GetLinkState+0x90>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e03a      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e033      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e02c      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e02a      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6810      	ldr	r0, [r2, #0]
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	211f      	movs	r1, #31
 8000f70:	4798      	blx	r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da02      	bge.n	8000f7e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f78:	f06f 0304 	mvn.w	r3, #4
 8000f7c:	e01c      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	e015      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 031c 	and.w	r3, r3, #28
 8000f92:	2b18      	cmp	r3, #24
 8000f94:	d101      	bne.n	8000f9a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f96:	2302      	movs	r3, #2
 8000f98:	e00e      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f003 031c 	and.w	r3, r3, #28
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d101      	bne.n	8000fa8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e007      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 031c 	and.w	r3, r3, #28
 8000fae:	2b14      	cmp	r3, #20
 8000fb0:	d101      	bne.n	8000fb6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e000      	b.n	8000fb8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fb6:	2305      	movs	r3, #5
    }				
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94f 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fc44 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92f 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000104 	.word	0x20000104

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000104 	.word	0x20000104

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff feb6 	bl	800108c <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e052      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0216 	bic.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <HAL_DMA_Abort+0x62>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0208 	bic.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e013      	b.n	80013ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe7b 	bl	800108c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d90c      	bls.n	80013ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e015      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00c      	b.n	8001426 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06c      	b.n	8001520 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2223      	movs	r2, #35	; 0x23
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f003 f999 	bl	8004790 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_ETH_Init+0xf4>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a30      	ldr	r2, [pc, #192]	; (8001528 <HAL_ETH_Init+0xf4>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_ETH_Init+0xf4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_ETH_Init+0xf8>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_ETH_Init+0xf8>)
 8001480:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001484:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_ETH_Init+0xf8>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4927      	ldr	r1, [pc, #156]	; (800152c <HAL_ETH_Init+0xf8>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_ETH_Init+0xf8>)
 8001496:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff fdec 	bl	800108c <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014b6:	e011      	b.n	80014dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014b8:	f7ff fde8 	bl	800108c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c6:	d909      	bls.n	80014dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	22e0      	movs	r2, #224	; 0xe0
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e021      	b.n	8001520 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e4      	bne.n	80014b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fdf0 	bl	80020d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fe97 	bl	8002228 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 feed 	bl	80022da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	461a      	mov	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fe55 	bl	80021b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2210      	movs	r2, #16
 800151a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800

08001530 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800153e:	2b10      	cmp	r3, #16
 8001540:	d150      	bne.n	80015e4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2223      	movs	r2, #35	; 0x23
 8001546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f9fd 	bl	8001950 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0208 	orr.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fd98 	bl	80010a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0204 	orr.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fd85 	bl	80010a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fc36 	bl	8001e14 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015be:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2223      	movs	r2, #35	; 0x23
 80015dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015fc:	2b23      	cmp	r3, #35	; 0x23
 80015fe:	d14a      	bne.n	8001696 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2223      	movs	r2, #35	; 0x23
 8001604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800161a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f023 0302 	bic.w	r3, r3, #2
 8001632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001636:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0204 	bic.w	r2, r2, #4
 8001646:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fd27 	bl	80010a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fbd8 	bl	8001e14 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0208 	bic.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fd11 	bl	80010a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2210      	movs	r2, #16
 800168e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07c      	b.n	80017c0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016cc:	2b23      	cmp	r3, #35	; 0x23
 80016ce:	d176      	bne.n	80017be <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80016d0:	2200      	movs	r2, #0
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fe6d 	bl	80023b4 <ETH_Prepare_Tx_Descriptors>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	f043 0202 	orr.w	r2, r3, #2
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e065      	b.n	80017c0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016f4:	f3bf 8f4f 	dsb	sy
}
 80016f8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3206      	adds	r2, #6
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	2b03      	cmp	r3, #3
 8001718:	d904      	bls.n	8001724 <HAL_ETH_Transmit+0x84>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	1f1a      	subs	r2, r3, #4
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3106      	adds	r1, #6
 8001730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001738:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800173a:	f7ff fca7 	bl	800108c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001740:	e037      	b.n	80017b2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	f043 0208 	orr.w	r2, r3, #8
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e023      	b.n	80017c0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177e:	d018      	beq.n	80017b2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001780:	f7ff fc84 	bl	800108c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	d302      	bcc.n	8001796 <HAL_ETH_Transmit+0xf6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10d      	bne.n	80017b2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179c:	f043 0204 	orr.w	r2, r3, #4
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017ac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e006      	b.n	80017c0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dbc3      	blt.n	8001742 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0a8      	b.n	8001946 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017fa:	2b23      	cmp	r3, #35	; 0x23
 80017fc:	d001      	beq.n	8001802 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0a1      	b.n	8001946 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	3212      	adds	r2, #18
 800180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001818:	f1c3 0304 	rsb	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800181e:	e06a      	b.n	80018f6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <HAL_ETH_ReadData+0x88>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d040      	beq.n	80018d2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001884:	3b04      	subs	r3, #4
 8001886:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018ac:	461a      	mov	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f003 f91d 	bl	8004af0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	441a      	add	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d902      	bls.n	80018e4 <HAL_ETH_ReadData+0x11c>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b04      	subs	r3, #4
 80018e2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	3212      	adds	r2, #18
 80018ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db06      	blt.n	800190c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	429a      	cmp	r2, r3
 8001904:	d202      	bcs.n	800190c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d089      	beq.n	8001820 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	441a      	add	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f815 	bl	8001950 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800195c:	2301      	movs	r3, #1
 800195e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001964:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	3212      	adds	r2, #18
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001976:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001978:	e040      	b.n	80019fc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d112      	bne.n	80019a8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f882 	bl	8004a90 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	74fb      	strb	r3, [r7, #19]
 8001996:	e007      	b.n	80019a8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d026      	beq.n	80019fc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <ETH_UpdateDescriptor+0xe4>)
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	e003      	b.n	80019c6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80019c4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019c6:	f3bf 8f5f 	dmb	sy
}
 80019ca:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d902      	bls.n	80019ea <ETH_UpdateDescriptor+0x9a>
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3b04      	subs	r3, #4
 80019e8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	3212      	adds	r2, #18
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	617b      	str	r3, [r7, #20]
      desccount--;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <ETH_UpdateDescriptor+0xb8>
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1b8      	bne.n	800197a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d00c      	beq.n	8001a2c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	80004600 	.word	0x80004600

08001a38 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 031c 	and.w	r3, r3, #28
 8001a54:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	02db      	lsls	r3, r3, #11
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0302 	bic.w	r3, r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a88:	f7ff fb00 	bl	800108c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a8e:	e00d      	b.n	8001aac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a90:	f7ff fafc 	bl	800108c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d301      	bcc.n	8001aa4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e010      	b.n	8001ac6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ec      	bne.n	8001a90 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 031c 	and.w	r3, r3, #28
 8001aea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	02db      	lsls	r3, r3, #11
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	019b      	lsls	r3, r3, #6
 8001afc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b28:	f7ff fab0 	bl	800108c <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b2e:	e00d      	b.n	8001b4c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b30:	f7ff faac 	bl	800108c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d301      	bcc.n	8001b44 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e009      	b.n	8001b58 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ec      	bne.n	8001b30 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d9      	b.n	8001d28 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bf14      	ite	ne
 8001c8e:	2301      	movne	r3, #1
 8001c90:	2300      	moveq	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	0c1b      	lsrs	r3, r3, #16
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e00b      	b.n	8001d60 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d105      	bne.n	8001d5e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f883 	bl	8001e60 <ETH_SetMACConfig>

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 031c 	bic.w	r3, r3, #28
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d80:	f001 fa0e 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 8001d84:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d908      	bls.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x38>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d804      	bhi.n	8001da0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e027      	b.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d908      	bls.n	8001dba <HAL_ETH_SetMDIOClockRange+0x52>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d204      	bcs.n	8001dba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f043 030c 	orr.w	r3, r3, #12
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e01a      	b.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d303      	bcc.n	8001dca <HAL_ETH_SetMDIOClockRange+0x62>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d911      	bls.n	8001dee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e005      	b.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e000      	b.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001dee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	611a      	str	r2, [r3, #16]
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	01312cff 	.word	0x01312cff
 8001e04:	02160ebf 	.word	0x02160ebf
 8001e08:	03938700 	.word	0x03938700
 8001e0c:	05f5e0ff 	.word	0x05f5e0ff
 8001e10:	08f0d17f 	.word	0x08f0d17f

08001e14 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e36:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff f92d 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e54:	6193      	str	r3, [r2, #24]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <ETH_SetMACConfig+0x15c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7c1b      	ldrb	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <ETH_SetMACConfig+0x28>
 8001e82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e86:	e000      	b.n	8001e8a <ETH_SetMACConfig+0x2a>
 8001e88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7c5b      	ldrb	r3, [r3, #17]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <ETH_SetMACConfig+0x38>
 8001e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e96:	e000      	b.n	8001e9a <ETH_SetMACConfig+0x3a>
 8001e98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ea0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7fdb      	ldrb	r3, [r3, #31]
 8001ea6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	7f92      	ldrb	r2, [r2, #30]
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d102      	bne.n	8001ebe <ETH_SetMACConfig+0x5e>
 8001eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebc:	e000      	b.n	8001ec0 <ETH_SetMACConfig+0x60>
 8001ebe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ec0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
 8001ec6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ec8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ece:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d102      	bne.n	8001ee8 <ETH_SetMACConfig+0x88>
 8001ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee6:	e000      	b.n	8001eea <ETH_SetMACConfig+0x8a>
 8001ee8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	7bdb      	ldrb	r3, [r3, #15]
 8001ef0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ef2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f02:	4313      	orrs	r3, r2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff f8c2 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d101      	bne.n	8001f4e <ETH_SetMACConfig+0xee>
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0xf0>
 8001f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d101      	bne.n	8001f66 <ETH_SetMACConfig+0x106>
 8001f62:	2208      	movs	r2, #8
 8001f64:	e000      	b.n	8001f68 <ETH_SetMACConfig+0x108>
 8001f66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	d101      	bne.n	8001f78 <ETH_SetMACConfig+0x118>
 8001f74:	2204      	movs	r2, #4
 8001f76:	e000      	b.n	8001f7a <ETH_SetMACConfig+0x11a>
 8001f78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f82:	2a01      	cmp	r2, #1
 8001f84:	d101      	bne.n	8001f8a <ETH_SetMACConfig+0x12a>
 8001f86:	2202      	movs	r2, #2
 8001f88:	e000      	b.n	8001f8c <ETH_SetMACConfig+0x12c>
 8001f8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff f87d 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	ff20810f 	.word	0xff20810f

08001fc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <ETH_SetDMAConfig+0x110>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	7b1b      	ldrb	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <ETH_SetDMAConfig+0x2c>
 8001fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fea:	e000      	b.n	8001fee <ETH_SetDMAConfig+0x2e>
 8001fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7b5b      	ldrb	r3, [r3, #13]
 8001ff2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ff4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	7f52      	ldrb	r2, [r2, #29]
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	d102      	bne.n	8002004 <ETH_SetDMAConfig+0x44>
 8001ffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002002:	e000      	b.n	8002006 <ETH_SetDMAConfig+0x46>
 8002004:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002006:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	7b9b      	ldrb	r3, [r3, #14]
 800200c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800200e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002014:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7f1b      	ldrb	r3, [r3, #28]
 800201a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800201c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7f9b      	ldrb	r3, [r3, #30]
 8002022:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002024:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800202a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002032:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002034:	4313      	orrs	r3, r2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff f824 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002074:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800207a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002080:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002088:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800208a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002092:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002098:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe fff5 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	f8de3f23 	.word	0xf8de3f23

080020d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0a6      	sub	sp, #152	; 0x98
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002110:	2300      	movs	r3, #0
 8002112:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800211a:	2300      	movs	r3, #0
 800211c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800213c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002140:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fe86 	bl	8001e60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002154:	2301      	movs	r3, #1
 8002156:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002158:	2301      	movs	r3, #1
 800215a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002162:	2301      	movs	r3, #1
 8002164:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002180:	2301      	movs	r3, #1
 8002182:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002188:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800218a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002194:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff08 	bl	8001fc0 <ETH_SetDMAConfig>
}
 80021b0:	bf00      	nop
 80021b2:	3798      	adds	r7, #152	; 0x98
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3305      	adds	r3, #5
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	3204      	adds	r2, #4
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <ETH_MACAddressConfig+0x68>)
 80021da:	4413      	add	r3, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3303      	adds	r3, #3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	061a      	lsls	r2, r3, #24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3302      	adds	r3, #2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4313      	orrs	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <ETH_MACAddressConfig+0x6c>)
 800220a:	4413      	add	r3, r2
 800220c:	461a      	mov	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6013      	str	r3, [r2, #0]
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40028040 	.word	0x40028040
 8002224:	40028044 	.word	0x40028044

08002228 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e03e      	b.n	80022b4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68d9      	ldr	r1, [r3, #12]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	3206      	adds	r2, #6
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d80c      	bhi.n	8002298 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	e004      	b.n	80022a2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d9bd      	bls.n	8002236 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	611a      	str	r2, [r3, #16]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e046      	b.n	8002376 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6919      	ldr	r1, [r3, #16]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002324:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800232c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	3212      	adds	r2, #18
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d80c      	bhi.n	8002366 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6919      	ldr	r1, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	e004      	b.n	8002370 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d9b5      	bls.n	80022e8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b08d      	sub	sp, #52	; 0x34
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3318      	adds	r3, #24
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023f6:	d007      	beq.n	8002408 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	3304      	adds	r3, #4
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	e103      	b.n	8002614 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3301      	adds	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002424:	f023 031f 	bic.w	r3, r3, #31
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	6852      	ldr	r2, [r2, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	431a      	orrs	r2, r3
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	431a      	orrs	r2, r3
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002492:	f3bf 8f5f 	dmb	sy
}
 8002496:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024a4:	e084      	b.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e005      	b.n	80024d2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	3301      	adds	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d902      	bls.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x130>
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	3b04      	subs	r3, #4
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002506:	d007      	beq.n	8002518 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	3304      	adds	r3, #4
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d029      	beq.n	800256c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
 800252a:	e019      	b.n	8002560 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800252c:	f3bf 8f5f 	dmb	sy
}
 8002530:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	3301      	adds	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b03      	cmp	r3, #3
 8002548:	d902      	bls.n	8002550 <ETH_Prepare_Tx_Descriptors+0x19c>
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	3b04      	subs	r3, #4
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	3301      	adds	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	429a      	cmp	r2, r3
 8002566:	d3e1      	bcc.n	800252c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	e053      	b.n	8002614 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800258a:	f023 031f 	bic.w	r3, r3, #31
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	6852      	ldr	r2, [r2, #4]
 8002592:	431a      	orrs	r2, r3
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	3301      	adds	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800259e:	f3bf 8f5f 	dmb	sy
}
 80025a2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f af76 	bne.w	80024a6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e005      	b.n	80025da <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	3304      	adds	r3, #4
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800260e:	b662      	cpsie	i
}
 8002610:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3734      	adds	r7, #52	; 0x34
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e16b      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 815a 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b4 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	; (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae90 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e267      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d00c      	beq.n	800299c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d112      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b7e      	ldr	r3, [pc, #504]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e242      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x74>
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6f      	ldr	r2, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029f0:	4b69      	ldr	r3, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a68      	ldr	r2, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a65      	ldr	r2, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb3c 	bl	800108c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fb38 	bl	800108c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e207      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb28 	bl	800108c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fb24 	bl	800108c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1f3      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1c7      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e03a      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_OscConfig+0x244>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe fadd 	bl	800108c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fad9 	bl	800108c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1a8      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4925      	ldr	r1, [pc, #148]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_OscConfig+0x244>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fabc 	bl	800108c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fab8 	bl	800108c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e187      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d036      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCC_OscConfig+0x248>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fa9c 	bl	800108c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fa98 	bl	800108c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e167      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x200>
 8002b76:	e01b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_RCC_OscConfig+0x248>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fa85 	bl	800108c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	e00e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fe fa81 	bl	800108c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d907      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e150      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470000 	.word	0x42470000
 8002ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ea      	bne.n	8002b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8097 	beq.w	8002cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fa41 	bl	800108c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fe fa3d 	bl	800108c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e10c      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2ea>
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x324>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x30c>
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a5e      	ldr	r2, [pc, #376]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x324>
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c76:	f023 0304 	bic.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fa02 	bl	800108c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f9fe 	bl	800108c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0cb      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCC_OscConfig+0x334>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fe f9ec 	bl	800108c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f9e8 	bl	800108c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0b5      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a1 	beq.w	8002e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d05c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d141      	bne.n	8002d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9bc 	bl	800108c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f9b8 	bl	800108c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e087      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	491b      	ldr	r1, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe f991 	bl	800108c <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe f98d 	bl	800108c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e05c      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x416>
 8002d8c:	e054      	b.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe f97a 	bl	800108c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe f976 	bl	800108c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e045      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x444>
 8002dba:	e03d      	b.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e038      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x4ec>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d028      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d121      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d90c      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d044      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e067      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4934      	ldr	r1, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fe f8a8 	bl	800108c <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe f8a4 	bl	800108c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d20c      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f821 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f808 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	08012ce0 	.word	0x08012ce0
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b090      	sub	sp, #64	; 0x40
 800301a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d00d      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x40>
 8003038:	2b08      	cmp	r3, #8
 800303a:	f200 80a1 	bhi.w	8003180 <HAL_RCC_GetSysClockFreq+0x16c>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x34>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x3a>
 8003046:	e09b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_GetSysClockFreq+0x184>)
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800304c:	e09b      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304e:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003052:	e098      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003054:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305e:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d028      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	627a      	str	r2, [r7, #36]	; 0x24
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800307c:	2100      	movs	r1, #0
 800307e:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 8003080:	fb03 f201 	mul.w	r2, r3, r1
 8003084:	2300      	movs	r3, #0
 8003086:	fb00 f303 	mul.w	r3, r0, r3
 800308a:	4413      	add	r3, r2
 800308c:	4a43      	ldr	r2, [pc, #268]	; (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 800308e:	fba0 1202 	umull	r1, r2, r0, r2
 8003092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003094:	460a      	mov	r2, r1
 8003096:	62ba      	str	r2, [r7, #40]	; 0x28
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	4413      	add	r3, r2
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	2200      	movs	r2, #0
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	61fa      	str	r2, [r7, #28]
 80030a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ae:	f7fd f8e7 	bl	8000280 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4613      	mov	r3, r2
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ba:	e053      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	2200      	movs	r2, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	617a      	str	r2, [r7, #20]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ce:	f04f 0b00 	mov.w	fp, #0
 80030d2:	4652      	mov	r2, sl
 80030d4:	465b      	mov	r3, fp
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	ebb2 080a 	subs.w	r8, r2, sl
 80030ee:	eb63 090b 	sbc.w	r9, r3, fp
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003102:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003106:	ebb2 0408 	subs.w	r4, r2, r8
 800310a:	eb63 0509 	sbc.w	r5, r3, r9
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	00eb      	lsls	r3, r5, #3
 8003118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311c:	00e2      	lsls	r2, r4, #3
 800311e:	4614      	mov	r4, r2
 8003120:	461d      	mov	r5, r3
 8003122:	eb14 030a 	adds.w	r3, r4, sl
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	eb45 030b 	adc.w	r3, r5, fp
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313a:	4629      	mov	r1, r5
 800313c:	028b      	lsls	r3, r1, #10
 800313e:	4621      	mov	r1, r4
 8003140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003144:	4621      	mov	r1, r4
 8003146:	028a      	lsls	r2, r1, #10
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	2200      	movs	r2, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	60fa      	str	r2, [r7, #12]
 8003154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003158:	f7fd f892 	bl	8000280 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetSysClockFreq+0x184>)
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003188:	4618      	mov	r0, r3
 800318a:	3740      	adds	r7, #64	; 0x40
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	00f42400 	.word	0x00f42400
 800319c:	017d7840 	.word	0x017d7840

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08012cf0 	.word	0x08012cf0

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffdc 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0b5b      	lsrs	r3, r3, #13
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	08012cf0 	.word	0x08012cf0

08003208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e03f      	b.n	800329a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fb4e 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fd23 	bl	8003c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d130      	bne.n	800331e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_UART_Transmit_IT+0x26>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e029      	b.n	8003320 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit_IT+0x38>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e022      	b.n	8003320 <HAL_UART_Transmit_IT+0x7e>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2221      	movs	r2, #33	; 0x21
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003318:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e000      	b.n	8003320 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800331e:	2302      	movs	r3, #2
  }
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d11d      	bne.n	8003382 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_UART_Receive_IT+0x26>
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e016      	b.n	8003384 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_UART_Receive_IT+0x38>
 8003360:	2302      	movs	r3, #2
 8003362:	e00f      	b.n	8003384 <HAL_UART_Receive_IT+0x58>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	461a      	mov	r2, r3
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fab5 	bl	80038e8 <UART_Start_Receive_IT>
 800337e:	4603      	mov	r3, r0
 8003380:	e000      	b.n	8003384 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0ba      	sub	sp, #232	; 0xe8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb99 	bl	8003b22 <UART_Receive_IT>
      return;
 80033f0:	e256      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80de 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
 80033fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80d1 	beq.w	80035b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 81ed 	beq.w	8003896 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb24 	bl	8003b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_UART_IRQHandler+0x17a>
 80034fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04f      	beq.n	80035a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa2c 	bl	8003964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d141      	bne.n	800359e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3314      	adds	r3, #20
 8003542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800354a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800355e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d9      	bne.n	800351a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a7d      	ldr	r2, [pc, #500]	; (8003768 <HAL_UART_IRQHandler+0x3dc>)
 8003574:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd ff37 	bl	80013ee <HAL_DMA_Abort_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	e00e      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f990 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	e00a      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f98c 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	e006      	b.n	80035b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f988 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035b2:	e170      	b.n	8003896 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	bf00      	nop
    return;
 80035b6:	e16e      	b.n	8003896 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f040 814a 	bne.w	8003856 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8143 	beq.w	8003856 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 813c 	beq.w	8003856 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	f040 80b4 	bne.w	800376c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8140 	beq.w	800389a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800361e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003622:	429a      	cmp	r2, r3
 8003624:	f080 8139 	bcs.w	800389a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	f000 8088 	beq.w	800374e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800366a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003676:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1d9      	bne.n	800363e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800369a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e1      	bne.n	800368a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003730:	65ba      	str	r2, [r7, #88]	; 0x58
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800373e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e3      	bne.n	800370c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fde0 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003756:	b29b      	uxth	r3, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8b6 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003764:	e099      	b.n	800389a <HAL_UART_IRQHandler+0x50e>
 8003766:	bf00      	nop
 8003768:	08003a2b 	.word	0x08003a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003774:	b29b      	uxth	r3, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 808b 	beq.w	800389e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8086 	beq.w	800389e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037b6:	647a      	str	r2, [r7, #68]	; 0x44
 80037b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e3      	bne.n	8003792 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	623b      	str	r3, [r7, #32]
   return(result);
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037ee:	633a      	str	r2, [r7, #48]	; 0x30
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f83e 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003854:	e023      	b.n	800389e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_UART_IRQHandler+0x4ea>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8ef 	bl	8003a52 <UART_Transmit_IT>
    return;
 8003874:	e014      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <HAL_UART_IRQHandler+0x514>
 8003882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f92f 	bl	8003af2 <UART_EndTransmit_IT>
    return;
 8003894:	e004      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
    return;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
      return;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_UART_IRQHandler+0x514>
      return;
 800389e:	bf00      	nop
  }
}
 80038a0:	37e8      	adds	r7, #232	; 0xe8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop

080038a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2222      	movs	r2, #34	; 0x22
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0220 	orr.w	r2, r2, #32
 8003954:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b095      	sub	sp, #84	; 0x54
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800398c:	643a      	str	r2, [r7, #64]	; 0x40
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e5      	bne.n	800396c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3314      	adds	r3, #20
 80039a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3314      	adds	r3, #20
 80039be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d119      	bne.n	8003a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0310 	bic.w	r3, r3, #16
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039fc:	61ba      	str	r2, [r7, #24]
 80039fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6979      	ldr	r1, [r7, #20]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a1e:	bf00      	nop
 8003a20:	3754      	adds	r7, #84	; 0x54
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ff39 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b21      	cmp	r3, #33	; 0x21
 8003a64:	d13e      	bne.n	8003ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d114      	bne.n	8003a9a <UART_Transmit_IT+0x48>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	1c9a      	adds	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]
 8003a98:	e008      	b.n	8003aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6211      	str	r1, [r2, #32]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fec8 	bl	80038a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08c      	sub	sp, #48	; 0x30
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b22      	cmp	r3, #34	; 0x22
 8003b34:	f040 80ab 	bne.w	8003c8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b40:	d117      	bne.n	8003b72 <UART_Receive_IT+0x50>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b70:	e026      	b.n	8003bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b84:	d007      	beq.n	8003b96 <UART_Receive_IT+0x74>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <UART_Receive_IT+0x82>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e008      	b.n	8003bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d15a      	bne.n	8003c8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0220 	bic.w	r2, r2, #32
 8003be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d135      	bne.n	8003c80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f023 0310 	bic.w	r3, r3, #16
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	623a      	str	r2, [r7, #32]
 8003c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d10a      	bne.n	8003c72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fe29 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
 8003c7e:	e002      	b.n	8003c86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fc fda7 	bl	80007d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e002      	b.n	8003c90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3730      	adds	r7, #48	; 0x30
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b0c0      	sub	sp, #256	; 0x100
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	68d9      	ldr	r1, [r3, #12]
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	ea40 0301 	orr.w	r3, r0, r1
 8003cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf0:	f021 010c 	bic.w	r1, r1, #12
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	6999      	ldr	r1, [r3, #24]
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	ea40 0301 	orr.w	r3, r0, r1
 8003d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d005      	beq.n	8003d38 <UART_SetConfig+0xa0>
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8d      	ldr	r3, [pc, #564]	; (8003f68 <UART_SetConfig+0x2d0>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d104      	bne.n	8003d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7ff fa52 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d40:	e003      	b.n	8003d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7ff fa39 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003d46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	f040 810c 	bne.w	8003f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d72:	415b      	adcs	r3, r3
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	eb12 0801 	adds.w	r8, r2, r1
 8003d80:	4629      	mov	r1, r5
 8003d82:	eb43 0901 	adc.w	r9, r3, r1
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9a:	4690      	mov	r8, r2
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	eb18 0303 	adds.w	r3, r8, r3
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003da8:	462b      	mov	r3, r5
 8003daa:	eb49 0303 	adc.w	r3, r9, r3
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	18db      	adds	r3, r3, r3
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
 8003dcc:	4613      	mov	r3, r2
 8003dce:	eb42 0303 	adc.w	r3, r2, r3
 8003dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ddc:	f7fc fa50 	bl	8000280 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	011c      	lsls	r4, r3, #4
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e10:	4641      	mov	r1, r8
 8003e12:	eb12 0a01 	adds.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0b01 	adc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e30:	4692      	mov	sl, r2
 8003e32:	469b      	mov	fp, r3
 8003e34:	4643      	mov	r3, r8
 8003e36:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	eb4b 0303 	adc.w	r3, fp, r3
 8003e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	18db      	adds	r3, r3, r3
 8003e60:	643b      	str	r3, [r7, #64]	; 0x40
 8003e62:	4613      	mov	r3, r2
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e72:	f7fc fa05 	bl	8000280 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2264      	movs	r2, #100	; 0x64
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	1acb      	subs	r3, r1, r3
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003e94:	fba3 2302 	umull	r2, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea0:	441c      	add	r4, r3
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	1851      	adds	r1, r2, r1
 8003ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eca:	4649      	mov	r1, r9
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003edc:	4659      	mov	r1, fp
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef8:	464b      	mov	r3, r9
 8003efa:	460a      	mov	r2, r1
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f18:	460b      	mov	r3, r1
 8003f1a:	18db      	adds	r3, r3, r3
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1e:	4613      	mov	r3, r2
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f2e:	f7fc f9a7 	bl	8000280 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 0207 	and.w	r2, r3, #7
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f60:	e106      	b.n	8004170 <UART_SetConfig+0x4d8>
 8003f62:	bf00      	nop
 8003f64:	40011000 	.word	0x40011000
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f82:	4642      	mov	r2, r8
 8003f84:	464b      	mov	r3, r9
 8003f86:	1891      	adds	r1, r2, r2
 8003f88:	6239      	str	r1, [r7, #32]
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f92:	4641      	mov	r1, r8
 8003f94:	1854      	adds	r4, r2, r1
 8003f96:	4649      	mov	r1, r9
 8003f98:	eb43 0501 	adc.w	r5, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fb8:	464b      	mov	r3, r9
 8003fba:	eb45 0303 	adc.w	r3, r5, r3
 8003fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fde:	4629      	mov	r1, r5
 8003fe0:	008b      	lsls	r3, r1, #2
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe8:	4621      	mov	r1, r4
 8003fea:	008a      	lsls	r2, r1, #2
 8003fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ff0:	f7fc f946 	bl	8000280 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4b60      	ldr	r3, [pc, #384]	; (800417c <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	011c      	lsls	r4, r3, #4
 8004002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800400c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	61b9      	str	r1, [r7, #24]
 800401c:	415b      	adcs	r3, r3
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004024:	4641      	mov	r1, r8
 8004026:	1851      	adds	r1, r2, r1
 8004028:	6139      	str	r1, [r7, #16]
 800402a:	4649      	mov	r1, r9
 800402c:	414b      	adcs	r3, r1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800403c:	4659      	mov	r1, fp
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4651      	mov	r1, sl
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4642      	mov	r2, r8
 8004052:	189b      	adds	r3, r3, r2
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004058:	464b      	mov	r3, r9
 800405a:	460a      	mov	r2, r1
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	67bb      	str	r3, [r7, #120]	; 0x78
 800406e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800407c:	4649      	mov	r1, r9
 800407e:	008b      	lsls	r3, r1, #2
 8004080:	4641      	mov	r1, r8
 8004082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004086:	4641      	mov	r1, r8
 8004088:	008a      	lsls	r2, r1, #2
 800408a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800408e:	f7fc f8f7 	bl	8000280 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4611      	mov	r1, r2
 8004098:	4b38      	ldr	r3, [pc, #224]	; (800417c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2264      	movs	r2, #100	; 0x64
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a33      	ldr	r2, [pc, #204]	; (800417c <UART_SetConfig+0x4e4>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	441c      	add	r4, r3
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	673b      	str	r3, [r7, #112]	; 0x70
 80040c2:	677a      	str	r2, [r7, #116]	; 0x74
 80040c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	415b      	adcs	r3, r3
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	66bb      	str	r3, [r7, #104]	; 0x68
 800410a:	464b      	mov	r3, r9
 800410c:	460a      	mov	r2, r1
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
 800411e:	667a      	str	r2, [r7, #100]	; 0x64
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800413e:	f7fc f89f 	bl	8000280 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x4e4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x4e4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004176:	46bd      	mov	sp, r7
 8004178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004186:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004188:	22c0      	movs	r2, #192	; 0xc0
 800418a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800418c:	4b8b      	ldr	r3, [pc, #556]	; (80043bc <MX_LWIP_Init+0x23c>)
 800418e:	22a8      	movs	r2, #168	; 0xa8
 8004190:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004192:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004194:	2200      	movs	r2, #0
 8004196:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <MX_LWIP_Init+0x23c>)
 800419a:	220a      	movs	r2, #10
 800419c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041a4:	4b86      	ldr	r3, [pc, #536]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041a6:	22ff      	movs	r2, #255	; 0xff
 80041a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80041b0:	4b83      	ldr	r3, [pc, #524]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80041b6:	4b83      	ldr	r3, [pc, #524]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041b8:	22c0      	movs	r2, #192	; 0xc0
 80041ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80041bc:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041be:	22a8      	movs	r2, #168	; 0xa8
 80041c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80041c2:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80041ce:	f000 fcfd 	bl	8004bcc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	061a      	lsls	r2, r3, #24
 80041d8:	4b78      	ldr	r3, [pc, #480]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	4313      	orrs	r3, r2
 80041e8:	4a74      	ldr	r2, [pc, #464]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041ea:	78d2      	ldrb	r2, [r2, #3]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	0619      	lsls	r1, r3, #24
 80041f6:	4b71      	ldr	r3, [pc, #452]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	4319      	orrs	r1, r3
 80041fe:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004200:	789b      	ldrb	r3, [r3, #2]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	430b      	orrs	r3, r1
 8004206:	496d      	ldr	r1, [pc, #436]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004208:	78c9      	ldrb	r1, [r1, #3]
 800420a:	430b      	orrs	r3, r1
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004212:	431a      	orrs	r2, r3
 8004214:	4b69      	ldr	r3, [pc, #420]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0619      	lsls	r1, r3, #24
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <MX_LWIP_Init+0x23c>)
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	4319      	orrs	r1, r3
 8004222:	4b66      	ldr	r3, [pc, #408]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004224:	789b      	ldrb	r3, [r3, #2]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	430b      	orrs	r3, r1
 800422a:	4964      	ldr	r1, [pc, #400]	; (80043bc <MX_LWIP_Init+0x23c>)
 800422c:	78c9      	ldrb	r1, [r1, #3]
 800422e:	430b      	orrs	r3, r1
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004236:	431a      	orrs	r2, r3
 8004238:	4b60      	ldr	r3, [pc, #384]	; (80043bc <MX_LWIP_Init+0x23c>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	0619      	lsls	r1, r3, #24
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	4319      	orrs	r1, r3
 8004246:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004248:	789b      	ldrb	r3, [r3, #2]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	430b      	orrs	r3, r1
 800424e:	495b      	ldr	r1, [pc, #364]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004250:	78c9      	ldrb	r1, [r1, #3]
 8004252:	430b      	orrs	r3, r1
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	4313      	orrs	r3, r2
 8004258:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <MX_LWIP_Init+0x248>)
 800425a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <MX_LWIP_Init+0x240>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	061a      	lsls	r2, r3, #24
 8004262:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <MX_LWIP_Init+0x240>)
 800426c:	789b      	ldrb	r3, [r3, #2]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	4313      	orrs	r3, r2
 8004272:	4a53      	ldr	r2, [pc, #332]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004274:	78d2      	ldrb	r2, [r2, #3]
 8004276:	4313      	orrs	r3, r2
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <MX_LWIP_Init+0x240>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	0619      	lsls	r1, r3, #24
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	4319      	orrs	r1, r3
 8004288:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <MX_LWIP_Init+0x240>)
 800428a:	789b      	ldrb	r3, [r3, #2]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	430b      	orrs	r3, r1
 8004290:	494b      	ldr	r1, [pc, #300]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004292:	78c9      	ldrb	r1, [r1, #3]
 8004294:	430b      	orrs	r3, r1
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800429c:	431a      	orrs	r2, r3
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0619      	lsls	r1, r3, #24
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	4319      	orrs	r1, r3
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042ae:	789b      	ldrb	r3, [r3, #2]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	430b      	orrs	r3, r1
 80042b4:	4942      	ldr	r1, [pc, #264]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042b6:	78c9      	ldrb	r1, [r1, #3]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042c0:	431a      	orrs	r2, r3
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	0619      	lsls	r1, r3, #24
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	4319      	orrs	r1, r3
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042d2:	789b      	ldrb	r3, [r3, #2]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	430b      	orrs	r3, r1
 80042d8:	4939      	ldr	r1, [pc, #228]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042da:	78c9      	ldrb	r1, [r1, #3]
 80042dc:	430b      	orrs	r3, r1
 80042de:	0e1b      	lsrs	r3, r3, #24
 80042e0:	4313      	orrs	r3, r2
 80042e2:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <MX_LWIP_Init+0x24c>)
 80042e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	061a      	lsls	r2, r3, #24
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4313      	orrs	r3, r2
 80042fc:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042fe:	78d2      	ldrb	r2, [r2, #3]
 8004300:	4313      	orrs	r3, r2
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	0619      	lsls	r1, r3, #24
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <MX_LWIP_Init+0x244>)
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	4319      	orrs	r1, r3
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	430b      	orrs	r3, r1
 800431a:	492a      	ldr	r1, [pc, #168]	; (80043c4 <MX_LWIP_Init+0x244>)
 800431c:	78c9      	ldrb	r1, [r1, #3]
 800431e:	430b      	orrs	r3, r1
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004326:	431a      	orrs	r2, r3
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <MX_LWIP_Init+0x244>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	0619      	lsls	r1, r3, #24
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	4319      	orrs	r1, r3
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	430b      	orrs	r3, r1
 800433e:	4921      	ldr	r1, [pc, #132]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004340:	78c9      	ldrb	r1, [r1, #3]
 8004342:	430b      	orrs	r3, r1
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800434a:	431a      	orrs	r2, r3
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <MX_LWIP_Init+0x244>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	0619      	lsls	r1, r3, #24
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	4319      	orrs	r1, r3
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_LWIP_Init+0x244>)
 800435c:	789b      	ldrb	r3, [r3, #2]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	430b      	orrs	r3, r1
 8004362:	4918      	ldr	r1, [pc, #96]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004364:	78c9      	ldrb	r1, [r1, #3]
 8004366:	430b      	orrs	r3, r1
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	4313      	orrs	r3, r2
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <MX_LWIP_Init+0x250>)
 800436e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <MX_LWIP_Init+0x254>)
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <MX_LWIP_Init+0x258>)
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <MX_LWIP_Init+0x250>)
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <MX_LWIP_Init+0x24c>)
 8004380:	4911      	ldr	r1, [pc, #68]	; (80043c8 <MX_LWIP_Init+0x248>)
 8004382:	4816      	ldr	r0, [pc, #88]	; (80043dc <MX_LWIP_Init+0x25c>)
 8004384:	f001 f90e 	bl	80055a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004388:	4814      	ldr	r0, [pc, #80]	; (80043dc <MX_LWIP_Init+0x25c>)
 800438a:	f001 fabd 	bl	8005908 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <MX_LWIP_Init+0x25c>)
 8004390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043a0:	480e      	ldr	r0, [pc, #56]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043a2:	f001 fac1 	bl	8005928 <netif_set_up>
 80043a6:	e002      	b.n	80043ae <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043aa:	f001 fb29 	bl	8005a00 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80043ae:	490c      	ldr	r1, [pc, #48]	; (80043e0 <MX_LWIP_Init+0x260>)
 80043b0:	480a      	ldr	r0, [pc, #40]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043b2:	f001 fbbb 	bl	8005b2c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000014c 	.word	0x2000014c
 80043c0:	20000150 	.word	0x20000150
 80043c4:	20000154 	.word	0x20000154
 80043c8:	20000140 	.word	0x20000140
 80043cc:	20000144 	.word	0x20000144
 80043d0:	20000148 	.word	0x20000148
 80043d4:	0800f111 	.word	0x0800f111
 80043d8:	080046f1 	.word	0x080046f1
 80043dc:	2000010c 	.word	0x2000010c
 80043e0:	08004435 	.word	0x08004435

080043e4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80043ec:	f7fc fe4e 	bl	800108c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <Ethernet_Link_Periodic_Handle+0x30>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b63      	cmp	r3, #99	; 0x63
 80043fa:	d907      	bls.n	800440c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80043fc:	f7fc fe46 	bl	800108c <HAL_GetTick>
 8004400:	4603      	mov	r3, r0
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <Ethernet_Link_Periodic_Handle+0x30>)
 8004404:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fab6 	bl	8004978 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000108 	.word	0x20000108

08004418 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <MX_LWIP_Process+0x18>)
 800441e:	f000 f947 	bl	80046b0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004422:	f008 fa89 	bl	800c938 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004426:	4802      	ldr	r0, [pc, #8]	; (8004430 <MX_LWIP_Process+0x18>)
 8004428:	f7ff ffdc 	bl	80043e4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000010c 	.word	0x2000010c

08004434 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <low_level_init+0x110>)
 8004456:	4a41      	ldr	r2, [pc, #260]	; (800455c <low_level_init+0x114>)
 8004458:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800445a:	2300      	movs	r3, #0
 800445c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004462:	23e1      	movs	r3, #225	; 0xe1
 8004464:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004466:	2300      	movs	r3, #0
 8004468:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800446a:	2300      	movs	r3, #0
 800446c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004472:	4a39      	ldr	r2, [pc, #228]	; (8004558 <low_level_init+0x110>)
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800447a:	4b37      	ldr	r3, [pc, #220]	; (8004558 <low_level_init+0x110>)
 800447c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004480:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <low_level_init+0x110>)
 8004484:	4a36      	ldr	r2, [pc, #216]	; (8004560 <low_level_init+0x118>)
 8004486:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004488:	4b33      	ldr	r3, [pc, #204]	; (8004558 <low_level_init+0x110>)
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <low_level_init+0x11c>)
 800448c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <low_level_init+0x110>)
 8004490:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004494:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004496:	4830      	ldr	r0, [pc, #192]	; (8004558 <low_level_init+0x110>)
 8004498:	f7fc ffcc 	bl	8001434 <HAL_ETH_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80044a0:	2238      	movs	r2, #56	; 0x38
 80044a2:	2100      	movs	r1, #0
 80044a4:	4830      	ldr	r0, [pc, #192]	; (8004568 <low_level_init+0x120>)
 80044a6:	f00b f86e 	bl	800f586 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80044aa:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <low_level_init+0x120>)
 80044ac:	2221      	movs	r2, #33	; 0x21
 80044ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <low_level_init+0x120>)
 80044b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80044b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <low_level_init+0x120>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80044be:	482b      	ldr	r0, [pc, #172]	; (800456c <low_level_init+0x124>)
 80044c0:	f000 ff38 	bl	8005334 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2206      	movs	r2, #6
 80044c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <low_level_init+0x110>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <low_level_init+0x110>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	785a      	ldrb	r2, [r3, #1]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <low_level_init+0x110>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	789a      	ldrb	r2, [r3, #2]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <low_level_init+0x110>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	78da      	ldrb	r2, [r3, #3]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <low_level_init+0x110>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	791a      	ldrb	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <low_level_init+0x110>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	795a      	ldrb	r2, [r3, #5]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800451a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004522:	f043 030a 	orr.w	r3, r3, #10
 8004526:	b2da      	uxtb	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800452e:	4910      	ldr	r1, [pc, #64]	; (8004570 <low_level_init+0x128>)
 8004530:	4810      	ldr	r0, [pc, #64]	; (8004574 <low_level_init+0x12c>)
 8004532:	f7fc fbe4 	bl	8000cfe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004536:	480f      	ldr	r0, [pc, #60]	; (8004574 <low_level_init+0x12c>)
 8004538:	f7fc fc13 	bl	8000d62 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa18 	bl	8004978 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004548:	e001      	b.n	800454e <low_level_init+0x106>
    Error_Handler();
 800454a:	f7fc f973 	bl	8000834 <Error_Handler>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20004c24 	.word	0x20004c24
 800455c:	40028000 	.word	0x40028000
 8004560:	20004b84 	.word	0x20004b84
 8004564:	20004ae4 	.word	0x20004ae4
 8004568:	20004cd4 	.word	0x20004cd4
 800456c:	08012cf8 	.word	0x08012cf8
 8004570:	2000000c 	.word	0x2000000c
 8004574:	20004d0c 	.word	0x20004d0c

08004578 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b092      	sub	sp, #72	; 0x48
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	2230      	movs	r2, #48	; 0x30
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f00a fff4 	bl	800f586 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800459e:	f107 030c 	add.w	r3, r7, #12
 80045a2:	2230      	movs	r2, #48	; 0x30
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f00a ffed 	bl	800f586 <memset>

  for(q = p; q != NULL; q = q->next)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
 80045b0:	e045      	b.n	800463e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80045b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d902      	bls.n	80045be <low_level_output+0x46>
      return ERR_IF;
 80045b8:	f06f 030b 	mvn.w	r3, #11
 80045bc:	e055      	b.n	800466a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80045be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3348      	adds	r3, #72	; 0x48
 80045ce:	443b      	add	r3, r7
 80045d0:	3b3c      	subs	r3, #60	; 0x3c
 80045d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80045d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d6:	895b      	ldrh	r3, [r3, #10]
 80045d8:	4619      	mov	r1, r3
 80045da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3348      	adds	r3, #72	; 0x48
 80045e6:	443b      	add	r3, r7
 80045e8:	3b38      	subs	r3, #56	; 0x38
 80045ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 80045ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80045f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	f107 000c 	add.w	r0, r7, #12
 80045fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045fc:	460b      	mov	r3, r1
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	440b      	add	r3, r1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	18c1      	adds	r1, r0, r3
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	3348      	adds	r3, #72	; 0x48
 8004610:	443b      	add	r3, r7
 8004612:	3b34      	subs	r3, #52	; 0x34
 8004614:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800461e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3348      	adds	r3, #72	; 0x48
 800462a:	443b      	add	r3, r7
 800462c:	3b34      	subs	r3, #52	; 0x34
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004634:	3301      	adds	r3, #1
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	643b      	str	r3, [r7, #64]	; 0x40
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1b6      	bne.n	80045b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	891b      	ldrh	r3, [r3, #8]
 8004648:	461a      	mov	r2, r3
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <low_level_output+0xfc>)
 800464c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <low_level_output+0xfc>)
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004656:	4a07      	ldr	r2, [pc, #28]	; (8004674 <low_level_output+0xfc>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800465c:	2214      	movs	r2, #20
 800465e:	4905      	ldr	r1, [pc, #20]	; (8004674 <low_level_output+0xfc>)
 8004660:	4805      	ldr	r0, [pc, #20]	; (8004678 <low_level_output+0x100>)
 8004662:	f7fd f81d 	bl	80016a0 <HAL_ETH_Transmit>

  return errval;
 8004666:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800466a:	4618      	mov	r0, r3
 800466c:	3748      	adds	r7, #72	; 0x48
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20004cd4 	.word	0x20004cd4
 8004678:	20004c24 	.word	0x20004c24

0800467c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <low_level_input+0x2c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	4805      	ldr	r0, [pc, #20]	; (80046ac <low_level_input+0x30>)
 8004698:	f7fd f896 	bl	80017c8 <HAL_ETH_ReadData>
  }

  return p;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20004ae0 	.word	0x20004ae0
 80046ac:	20004c24 	.word	0x20004c24

080046b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ffdd 	bl	800467c <low_level_input>
 80046c2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	4798      	blx	r3
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f001 fda6 	bl	800622c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ea      	bne.n	80046bc <ethernetif_input+0xc>
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <ethernetif_init+0x1c>
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <ethernetif_init+0x48>)
 8004700:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004704:	490d      	ldr	r1, [pc, #52]	; (800473c <ethernetif_init+0x4c>)
 8004706:	480e      	ldr	r0, [pc, #56]	; (8004740 <ethernetif_init+0x50>)
 8004708:	f00a fed8 	bl	800f4bc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2273      	movs	r2, #115	; 0x73
 8004710:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2274      	movs	r2, #116	; 0x74
 8004718:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <ethernetif_init+0x54>)
 8004720:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <ethernetif_init+0x58>)
 8004726:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fe8d 	bl	8004448 <low_level_init>

  return ERR_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08010300 	.word	0x08010300
 800473c:	0801031c 	.word	0x0801031c
 8004740:	0801032c 	.word	0x0801032c
 8004744:	0800d5c9 	.word	0x0800d5c9
 8004748:	08004579 	.word	0x08004579

0800474c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	4807      	ldr	r0, [pc, #28]	; (8004778 <pbuf_free_custom+0x2c>)
 800475c:	f000 fecc 	bl	80054f8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <pbuf_free_custom+0x30>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d102      	bne.n	800476e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <pbuf_free_custom+0x30>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
  }
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	08012cf8 	.word	0x08012cf8
 800477c:	20004ae0 	.word	0x20004ae0

08004780 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004784:	f7fc fc82 	bl	800108c <HAL_GetTick>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	; 0x38
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a46      	ldr	r2, [pc, #280]	; (80048c8 <HAL_ETH_MspInit+0x138>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	f040 8085 	bne.w	80048be <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80047b4:	2300      	movs	r3, #0
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	4b44      	ldr	r3, [pc, #272]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	4a43      	ldr	r2, [pc, #268]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047c2:	6313      	str	r3, [r2, #48]	; 0x30
 80047c4:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047de:	6313      	str	r3, [r2, #48]	; 0x30
 80047e0:	4b3a      	ldr	r3, [pc, #232]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	4a35      	ldr	r2, [pc, #212]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047fa:	6313      	str	r3, [r2, #48]	; 0x30
 80047fc:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	4a2e      	ldr	r2, [pc, #184]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 8004812:	f043 0304 	orr.w	r3, r3, #4
 8004816:	6313      	str	r3, [r2, #48]	; 0x30
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4a27      	ldr	r2, [pc, #156]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6313      	str	r3, [r2, #48]	; 0x30
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	4a20      	ldr	r2, [pc, #128]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 800484a:	f043 0302 	orr.w	r3, r3, #2
 800484e:	6313      	str	r3, [r2, #48]	; 0x30
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_ETH_MspInit+0x13c>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800485c:	2332      	movs	r3, #50	; 0x32
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004860:	2302      	movs	r3, #2
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004868:	2303      	movs	r3, #3
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800486c:	230b      	movs	r3, #11
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	4619      	mov	r1, r3
 8004876:	4816      	ldr	r0, [pc, #88]	; (80048d0 <HAL_ETH_MspInit+0x140>)
 8004878:	f7fd fed2 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800487c:	2386      	movs	r3, #134	; 0x86
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004888:	2303      	movs	r3, #3
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800488c:	230b      	movs	r3, #11
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004894:	4619      	mov	r1, r3
 8004896:	480f      	ldr	r0, [pc, #60]	; (80048d4 <HAL_ETH_MspInit+0x144>)
 8004898:	f7fd fec2 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800489c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048aa:	2303      	movs	r3, #3
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048ae:	230b      	movs	r3, #11
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b6:	4619      	mov	r1, r3
 80048b8:	4807      	ldr	r0, [pc, #28]	; (80048d8 <HAL_ETH_MspInit+0x148>)
 80048ba:	f7fd feb1 	bl	8002620 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80048be:	bf00      	nop
 80048c0:	3738      	adds	r7, #56	; 0x38
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40028000 	.word	0x40028000
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020000 	.word	0x40020000
 80048d8:	40020400 	.word	0x40020400

080048dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80048e0:	4802      	ldr	r0, [pc, #8]	; (80048ec <ETH_PHY_IO_Init+0x10>)
 80048e2:	f7fd fa41 	bl	8001d68 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20004c24 	.word	0x20004c24

080048f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return 0;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	4807      	ldr	r0, [pc, #28]	; (8004930 <ETH_PHY_IO_ReadReg+0x30>)
 8004914:	f7fd f890 	bl	8001a38 <HAL_ETH_ReadPHYRegister>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	e000      	b.n	8004926 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20004c24 	.word	0x20004c24

08004934 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	4807      	ldr	r0, [pc, #28]	; (8004964 <ETH_PHY_IO_WriteReg+0x30>)
 8004948:	f7fd f8c1 	bl	8001ace <HAL_ETH_WritePHYRegister>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e000      	b.n	800495a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20004c24 	.word	0x20004c24

08004968 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800496c:	f7fc fb8e 	bl	800108c <HAL_GetTick>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b0a0      	sub	sp, #128	; 0x80
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004980:	f107 030c 	add.w	r3, r7, #12
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f00a fdfc 	bl	800f586 <memset>
  int32_t PHYLinkState = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004996:	2300      	movs	r3, #0
 8004998:	67bb      	str	r3, [r7, #120]	; 0x78
 800499a:	2300      	movs	r3, #0
 800499c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800499e:	483a      	ldr	r0, [pc, #232]	; (8004a88 <ethernet_link_check_state+0x110>)
 80049a0:	f7fc fa87 	bl	8000eb2 <LAN8742_GetLinkState>
 80049a4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <ethernet_link_check_state+0x5a>
 80049b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	dc09      	bgt.n	80049d2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80049be:	4833      	ldr	r0, [pc, #204]	; (8004a8c <ethernet_link_check_state+0x114>)
 80049c0:	f7fc fe15 	bl	80015ee <HAL_ETH_Stop>
    netif_set_down(netif);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 f81b 	bl	8005a00 <netif_set_down>
    netif_set_link_down(netif);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 f87e 	bl	8005acc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80049d0:	e055      	b.n	8004a7e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d14e      	bne.n	8004a7e <ethernet_link_check_state+0x106>
 80049e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	dd4b      	ble.n	8004a7e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80049e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e8:	3b02      	subs	r3, #2
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d82a      	bhi.n	8004a44 <ethernet_link_check_state+0xcc>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <ethernet_link_check_state+0x7c>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a17 	.word	0x08004a17
 80049fc:	08004a27 	.word	0x08004a27
 8004a00:	08004a37 	.word	0x08004a37
      duplex = ETH_FULLDUPLEX_MODE;
 8004a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a14:	e017      	b.n	8004a46 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a20:	2301      	movs	r3, #1
 8004a22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a24:	e00f      	b.n	8004a46 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a2a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a30:	2301      	movs	r3, #1
 8004a32:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a34:	e007      	b.n	8004a46 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a42:	e000      	b.n	8004a46 <ethernet_link_check_state+0xce>
      break;
 8004a44:	bf00      	nop
    if(linkchanged)
 8004a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d018      	beq.n	8004a7e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4619      	mov	r1, r3
 8004a52:	480e      	ldr	r0, [pc, #56]	; (8004a8c <ethernet_link_check_state+0x114>)
 8004a54:	f7fd f884 	bl	8001b60 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	4619      	mov	r1, r3
 8004a66:	4809      	ldr	r0, [pc, #36]	; (8004a8c <ethernet_link_check_state+0x114>)
 8004a68:	f7fd f964 	bl	8001d34 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004a6c:	4807      	ldr	r0, [pc, #28]	; (8004a8c <ethernet_link_check_state+0x114>)
 8004a6e:	f7fc fd5f 	bl	8001530 <HAL_ETH_Start>
      netif_set_up(netif);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 ff58 	bl	8005928 <netif_set_up>
      netif_set_link_up(netif);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fff3 	bl	8005a64 <netif_set_link_up>
}
 8004a7e:	bf00      	nop
 8004a80:	3780      	adds	r7, #128	; 0x80
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20004d0c 	.word	0x20004d0c
 8004a8c:	20004c24 	.word	0x20004c24

08004a90 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004a98:	4812      	ldr	r0, [pc, #72]	; (8004ae4 <HAL_ETH_RxAllocateCallback+0x54>)
 8004a9a:	f000 fcbf 	bl	800541c <memp_malloc_pool>
 8004a9e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d014      	beq.n	8004ad0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f103 0220 	add.w	r2, r3, #32
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <HAL_ETH_RxAllocateCallback+0x58>)
 8004ab4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2241      	movs	r2, #65	; 0x41
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f001 f9f5 	bl	8005eb8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004ace:	e005      	b.n	8004adc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_ETH_RxAllocateCallback+0x5c>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	08012cf8 	.word	0x08012cf8
 8004ae8:	0800474d 	.word	0x0800474d
 8004aec:	20004ae0 	.word	0x20004ae0

08004af0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3b20      	subs	r3, #32
 8004b0e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e003      	b.n	8004b3a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	e009      	b.n	8004b5c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	891a      	ldrh	r2, [r3, #8]
 8004b4c:	887b      	ldrh	r3, [r7, #2]
 8004b4e:	4413      	add	r3, r2
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f2      	bne.n	8004b48 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	3724      	adds	r7, #36	; 0x24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	b21a      	sxth	r2, r3
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	b29b      	uxth	r3, r3
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	061a      	lsls	r2, r3, #24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	4313      	orrs	r3, r2
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004bd6:	f000 f8d5 	bl	8004d84 <mem_init>
  memp_init();
 8004bda:	f000 fbdb 	bl	8005394 <memp_init>
  pbuf_init();
  netif_init();
 8004bde:	f000 fcd9 	bl	8005594 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004be2:	f007 feeb 	bl	800c9bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004be6:	f001 fdaf 	bl	8006748 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004bea:	f007 fe5d 	bl	800c8a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <ptr_to_mem+0x20>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	4413      	add	r3, r2
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20005398 	.word	0x20005398

08004c1c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <mem_to_ptr+0x20>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20005398 	.word	0x20005398

08004c40 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c48:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <plug_holes+0x120>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d206      	bcs.n	8004c60 <plug_holes+0x20>
 8004c52:	4b44      	ldr	r3, [pc, #272]	; (8004d64 <plug_holes+0x124>)
 8004c54:	f240 12df 	movw	r2, #479	; 0x1df
 8004c58:	4943      	ldr	r1, [pc, #268]	; (8004d68 <plug_holes+0x128>)
 8004c5a:	4844      	ldr	r0, [pc, #272]	; (8004d6c <plug_holes+0x12c>)
 8004c5c:	f00a fc2e 	bl	800f4bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <plug_holes+0x130>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d306      	bcc.n	8004c78 <plug_holes+0x38>
 8004c6a:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <plug_holes+0x124>)
 8004c6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c70:	4940      	ldr	r1, [pc, #256]	; (8004d74 <plug_holes+0x134>)
 8004c72:	483e      	ldr	r0, [pc, #248]	; (8004d6c <plug_holes+0x12c>)
 8004c74:	f00a fc22 	bl	800f4bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <plug_holes+0x4e>
 8004c80:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <plug_holes+0x124>)
 8004c82:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004c86:	493c      	ldr	r1, [pc, #240]	; (8004d78 <plug_holes+0x138>)
 8004c88:	4838      	ldr	r0, [pc, #224]	; (8004d6c <plug_holes+0x12c>)
 8004c8a:	f00a fc17 	bl	800f4bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c96:	d906      	bls.n	8004ca6 <plug_holes+0x66>
 8004c98:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <plug_holes+0x124>)
 8004c9a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004c9e:	4937      	ldr	r1, [pc, #220]	; (8004d7c <plug_holes+0x13c>)
 8004ca0:	4832      	ldr	r0, [pc, #200]	; (8004d6c <plug_holes+0x12c>)
 8004ca2:	f00a fc0b 	bl	800f4bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ffa4 	bl	8004bf8 <ptr_to_mem>
 8004cb0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d024      	beq.n	8004d04 <plug_holes+0xc4>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d120      	bne.n	8004d04 <plug_holes+0xc4>
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <plug_holes+0x130>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d01b      	beq.n	8004d04 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004ccc:	4b2c      	ldr	r3, [pc, #176]	; (8004d80 <plug_holes+0x140>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d102      	bne.n	8004cdc <plug_holes+0x9c>
      lfree = mem;
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <plug_holes+0x140>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cec:	d00a      	beq.n	8004d04 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff80 	bl	8004bf8 <ptr_to_mem>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff8e 	bl	8004c1c <mem_to_ptr>
 8004d00:	4603      	mov	r3, r0
 8004d02:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	885b      	ldrh	r3, [r3, #2]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff75 	bl	8004bf8 <ptr_to_mem>
 8004d0e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d01f      	beq.n	8004d58 <plug_holes+0x118>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11b      	bne.n	8004d58 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <plug_holes+0x140>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d102      	bne.n	8004d30 <plug_holes+0xf0>
      lfree = pmem;
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <plug_holes+0x140>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d40:	d00a      	beq.n	8004d58 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff56 	bl	8004bf8 <ptr_to_mem>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	f7ff ff64 	bl	8004c1c <mem_to_ptr>
 8004d54:	4603      	mov	r3, r0
 8004d56:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	20005398 	.word	0x20005398
 8004d64:	08010354 	.word	0x08010354
 8004d68:	08010384 	.word	0x08010384
 8004d6c:	0801039c 	.word	0x0801039c
 8004d70:	2000539c 	.word	0x2000539c
 8004d74:	080103c4 	.word	0x080103c4
 8004d78:	080103e0 	.word	0x080103e0
 8004d7c:	080103fc 	.word	0x080103fc
 8004d80:	200053a0 	.word	0x200053a0

08004d84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <mem_init+0x68>)
 8004d8c:	3303      	adds	r3, #3
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	461a      	mov	r2, r3
 8004d94:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <mem_init+0x6c>)
 8004d96:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <mem_init+0x6c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004da4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004db2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004db6:	f7ff ff1f 	bl	8004bf8 <ptr_to_mem>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <mem_init+0x70>)
 8004dbe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <mem_init+0x70>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <mem_init+0x70>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004dd0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <mem_init+0x70>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004dda:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <mem_init+0x6c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a05      	ldr	r2, [pc, #20]	; (8004df8 <mem_init+0x74>)
 8004de2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20004d44 	.word	0x20004d44
 8004df0:	20005398 	.word	0x20005398
 8004df4:	2000539c 	.word	0x2000539c
 8004df8:	200053a0 	.word	0x200053a0

08004dfc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ff09 	bl	8004c1c <mem_to_ptr>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fef0 	bl	8004bf8 <ptr_to_mem>
 8004e18:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff feea 	bl	8004bf8 <ptr_to_mem>
 8004e24:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e2e:	d818      	bhi.n	8004e62 <mem_link_valid+0x66>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	885b      	ldrh	r3, [r3, #2]
 8004e34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e38:	d813      	bhi.n	8004e62 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d004      	beq.n	8004e4e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	8afa      	ldrh	r2, [r7, #22]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d109      	bne.n	8004e62 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e4e:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <mem_link_valid+0x74>)
 8004e50:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d006      	beq.n	8004e66 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	885b      	ldrh	r3, [r3, #2]
 8004e5c:	8afa      	ldrh	r2, [r7, #22]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d001      	beq.n	8004e66 <mem_link_valid+0x6a>
    return 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <mem_link_valid+0x6c>
  }
  return 1;
 8004e66:	2301      	movs	r3, #1
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	2000539c 	.word	0x2000539c

08004e74 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d04c      	beq.n	8004f1c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <mem_free+0xb0>)
 8004e8e:	f240 2273 	movw	r2, #627	; 0x273
 8004e92:	4925      	ldr	r1, [pc, #148]	; (8004f28 <mem_free+0xb4>)
 8004e94:	4825      	ldr	r0, [pc, #148]	; (8004f2c <mem_free+0xb8>)
 8004e96:	f00a fb11 	bl	800f4bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e9a:	e040      	b.n	8004f1e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b08      	subs	r3, #8
 8004ea0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <mem_free+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d306      	bcc.n	8004eba <mem_free+0x46>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f103 020c 	add.w	r2, r3, #12
 8004eb2:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <mem_free+0xc0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d907      	bls.n	8004eca <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <mem_free+0xb0>)
 8004ebc:	f240 227f 	movw	r2, #639	; 0x27f
 8004ec0:	491d      	ldr	r1, [pc, #116]	; (8004f38 <mem_free+0xc4>)
 8004ec2:	481a      	ldr	r0, [pc, #104]	; (8004f2c <mem_free+0xb8>)
 8004ec4:	f00a fafa 	bl	800f4bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ec8:	e029      	b.n	8004f1e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <mem_free+0xb0>)
 8004ed4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004ed8:	4918      	ldr	r1, [pc, #96]	; (8004f3c <mem_free+0xc8>)
 8004eda:	4814      	ldr	r0, [pc, #80]	; (8004f2c <mem_free+0xb8>)
 8004edc:	f00a faee 	bl	800f4bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ee0:	e01d      	b.n	8004f1e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ff8a 	bl	8004dfc <mem_link_valid>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <mem_free+0xb0>)
 8004ef0:	f240 2295 	movw	r2, #661	; 0x295
 8004ef4:	4912      	ldr	r1, [pc, #72]	; (8004f40 <mem_free+0xcc>)
 8004ef6:	480d      	ldr	r0, [pc, #52]	; (8004f2c <mem_free+0xb8>)
 8004ef8:	f00a fae0 	bl	800f4bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004efc:	e00f      	b.n	8004f1e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <mem_free+0xd0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d202      	bcs.n	8004f14 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004f0e:	4a0d      	ldr	r2, [pc, #52]	; (8004f44 <mem_free+0xd0>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff fe93 	bl	8004c40 <plug_holes>
 8004f1a:	e000      	b.n	8004f1e <mem_free+0xaa>
    return;
 8004f1c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	08010354 	.word	0x08010354
 8004f28:	08010428 	.word	0x08010428
 8004f2c:	0801039c 	.word	0x0801039c
 8004f30:	20005398 	.word	0x20005398
 8004f34:	2000539c 	.word	0x2000539c
 8004f38:	0801044c 	.word	0x0801044c
 8004f3c:	08010468 	.word	0x08010468
 8004f40:	08010490 	.word	0x08010490
 8004f44:	200053a0 	.word	0x200053a0

08004f48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	3303      	adds	r3, #3
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	2b0b      	cmp	r3, #11
 8004f64:	d801      	bhi.n	8004f6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004f66:	230c      	movs	r3, #12
 8004f68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004f6a:	8bfb      	ldrh	r3, [r7, #30]
 8004f6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f70:	d803      	bhi.n	8004f7a <mem_trim+0x32>
 8004f72:	8bfa      	ldrh	r2, [r7, #30]
 8004f74:	887b      	ldrh	r3, [r7, #2]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d201      	bcs.n	8004f7e <mem_trim+0x36>
    return NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e0cc      	b.n	8005118 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004f7e:	4b68      	ldr	r3, [pc, #416]	; (8005120 <mem_trim+0x1d8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d304      	bcc.n	8004f92 <mem_trim+0x4a>
 8004f88:	4b66      	ldr	r3, [pc, #408]	; (8005124 <mem_trim+0x1dc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d306      	bcc.n	8004fa0 <mem_trim+0x58>
 8004f92:	4b65      	ldr	r3, [pc, #404]	; (8005128 <mem_trim+0x1e0>)
 8004f94:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004f98:	4964      	ldr	r1, [pc, #400]	; (800512c <mem_trim+0x1e4>)
 8004f9a:	4865      	ldr	r0, [pc, #404]	; (8005130 <mem_trim+0x1e8>)
 8004f9c:	f00a fa8e 	bl	800f4bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004fa0:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <mem_trim+0x1d8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d304      	bcc.n	8004fb4 <mem_trim+0x6c>
 8004faa:	4b5e      	ldr	r3, [pc, #376]	; (8005124 <mem_trim+0x1dc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d301      	bcc.n	8004fb8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	e0af      	b.n	8005118 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b08      	subs	r3, #8
 8004fbc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004fbe:	69b8      	ldr	r0, [r7, #24]
 8004fc0:	f7ff fe2c 	bl	8004c1c <mem_to_ptr>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	8afb      	ldrh	r3, [r7, #22]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b08      	subs	r3, #8
 8004fd4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004fd6:	8bfa      	ldrh	r2, [r7, #30]
 8004fd8:	8abb      	ldrh	r3, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d906      	bls.n	8004fec <mem_trim+0xa4>
 8004fde:	4b52      	ldr	r3, [pc, #328]	; (8005128 <mem_trim+0x1e0>)
 8004fe0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004fe4:	4953      	ldr	r1, [pc, #332]	; (8005134 <mem_trim+0x1ec>)
 8004fe6:	4852      	ldr	r0, [pc, #328]	; (8005130 <mem_trim+0x1e8>)
 8004fe8:	f00a fa68 	bl	800f4bc <iprintf>
  if (newsize > size) {
 8004fec:	8bfa      	ldrh	r2, [r7, #30]
 8004fee:	8abb      	ldrh	r3, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d901      	bls.n	8004ff8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e08f      	b.n	8005118 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004ff8:	8bfa      	ldrh	r2, [r7, #30]
 8004ffa:	8abb      	ldrh	r3, [r7, #20]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d101      	bne.n	8005004 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	e089      	b.n	8005118 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fdf5 	bl	8004bf8 <ptr_to_mem>
 800500e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	791b      	ldrb	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d13f      	bne.n	8005098 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005020:	d106      	bne.n	8005030 <mem_trim+0xe8>
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <mem_trim+0x1e0>)
 8005024:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005028:	4943      	ldr	r1, [pc, #268]	; (8005138 <mem_trim+0x1f0>)
 800502a:	4841      	ldr	r0, [pc, #260]	; (8005130 <mem_trim+0x1e8>)
 800502c:	f00a fa46 	bl	800f4bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005036:	8afa      	ldrh	r2, [r7, #22]
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	4413      	add	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	3308      	adds	r3, #8
 8005040:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005042:	4b3e      	ldr	r3, [pc, #248]	; (800513c <mem_trim+0x1f4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d106      	bne.n	800505a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800504c:	89fb      	ldrh	r3, [r7, #14]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fdd2 	bl	8004bf8 <ptr_to_mem>
 8005054:	4603      	mov	r3, r0
 8005056:	4a39      	ldr	r2, [pc, #228]	; (800513c <mem_trim+0x1f4>)
 8005058:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fdcb 	bl	8004bf8 <ptr_to_mem>
 8005062:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2200      	movs	r2, #0
 8005068:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	89ba      	ldrh	r2, [r7, #12]
 800506e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	8afa      	ldrh	r2, [r7, #22]
 8005074:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	89fa      	ldrh	r2, [r7, #14]
 800507a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005084:	d047      	beq.n	8005116 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fdb4 	bl	8004bf8 <ptr_to_mem>
 8005090:	4602      	mov	r2, r0
 8005092:	89fb      	ldrh	r3, [r7, #14]
 8005094:	8053      	strh	r3, [r2, #2]
 8005096:	e03e      	b.n	8005116 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	f103 0214 	add.w	r2, r3, #20
 800509e:	8abb      	ldrh	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d838      	bhi.n	8005116 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80050a4:	8afa      	ldrh	r2, [r7, #22]
 80050a6:	8bfb      	ldrh	r3, [r7, #30]
 80050a8:	4413      	add	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3308      	adds	r3, #8
 80050ae:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050b8:	d106      	bne.n	80050c8 <mem_trim+0x180>
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <mem_trim+0x1e0>)
 80050bc:	f240 3216 	movw	r2, #790	; 0x316
 80050c0:	491d      	ldr	r1, [pc, #116]	; (8005138 <mem_trim+0x1f0>)
 80050c2:	481b      	ldr	r0, [pc, #108]	; (8005130 <mem_trim+0x1e8>)
 80050c4:	f00a f9fa 	bl	800f4bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fd94 	bl	8004bf8 <ptr_to_mem>
 80050d0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <mem_trim+0x1f4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d202      	bcs.n	80050e2 <mem_trim+0x19a>
      lfree = mem2;
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <mem_trim+0x1f4>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2200      	movs	r2, #0
 80050e6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	881a      	ldrh	r2, [r3, #0]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	8afa      	ldrh	r2, [r7, #22]
 80050f4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	89fa      	ldrh	r2, [r7, #14]
 80050fa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005104:	d007      	beq.n	8005116 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fd74 	bl	8004bf8 <ptr_to_mem>
 8005110:	4602      	mov	r2, r0
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005116:	687b      	ldr	r3, [r7, #4]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20005398 	.word	0x20005398
 8005124:	2000539c 	.word	0x2000539c
 8005128:	08010354 	.word	0x08010354
 800512c:	080104c4 	.word	0x080104c4
 8005130:	0801039c 	.word	0x0801039c
 8005134:	080104dc 	.word	0x080104dc
 8005138:	080104fc 	.word	0x080104fc
 800513c:	200053a0 	.word	0x200053a0

08005140 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <mem_malloc+0x14>
    return NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	e0d9      	b.n	8005308 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	3303      	adds	r3, #3
 8005158:	b29b      	uxth	r3, r3
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005160:	8bbb      	ldrh	r3, [r7, #28]
 8005162:	2b0b      	cmp	r3, #11
 8005164:	d801      	bhi.n	800516a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005166:	230c      	movs	r3, #12
 8005168:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800516a:	8bbb      	ldrh	r3, [r7, #28]
 800516c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005170:	d803      	bhi.n	800517a <mem_malloc+0x3a>
 8005172:	8bba      	ldrh	r2, [r7, #28]
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	429a      	cmp	r2, r3
 8005178:	d201      	bcs.n	800517e <mem_malloc+0x3e>
    return NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	e0c4      	b.n	8005308 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800517e:	4b64      	ldr	r3, [pc, #400]	; (8005310 <mem_malloc+0x1d0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fd4a 	bl	8004c1c <mem_to_ptr>
 8005188:	4603      	mov	r3, r0
 800518a:	83fb      	strh	r3, [r7, #30]
 800518c:	e0b4      	b.n	80052f8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800518e:	8bfb      	ldrh	r3, [r7, #30]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fd31 	bl	8004bf8 <ptr_to_mem>
 8005196:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	791b      	ldrb	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 80a4 	bne.w	80052ea <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	8bfb      	ldrh	r3, [r7, #30]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f1a3 0208 	sub.w	r2, r3, #8
 80051b0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80051b2:	429a      	cmp	r2, r3
 80051b4:	f0c0 8099 	bcc.w	80052ea <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f1a3 0208 	sub.w	r2, r3, #8
 80051c6:	8bbb      	ldrh	r3, [r7, #28]
 80051c8:	3314      	adds	r3, #20
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d333      	bcc.n	8005236 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80051ce:	8bfa      	ldrh	r2, [r7, #30]
 80051d0:	8bbb      	ldrh	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3308      	adds	r3, #8
 80051d8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80051da:	8a7b      	ldrh	r3, [r7, #18]
 80051dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051e0:	d106      	bne.n	80051f0 <mem_malloc+0xb0>
 80051e2:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <mem_malloc+0x1d4>)
 80051e4:	f240 3287 	movw	r2, #903	; 0x387
 80051e8:	494b      	ldr	r1, [pc, #300]	; (8005318 <mem_malloc+0x1d8>)
 80051ea:	484c      	ldr	r0, [pc, #304]	; (800531c <mem_malloc+0x1dc>)
 80051ec:	f00a f966 	bl	800f4bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80051f0:	8a7b      	ldrh	r3, [r7, #18]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fd00 	bl	8004bf8 <ptr_to_mem>
 80051f8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8bfa      	ldrh	r2, [r7, #30]
 800520c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	8a7a      	ldrh	r2, [r7, #18]
 8005212:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2201      	movs	r2, #1
 8005218:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005222:	d00b      	beq.n	800523c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fce5 	bl	8004bf8 <ptr_to_mem>
 800522e:	4602      	mov	r2, r0
 8005230:	8a7b      	ldrh	r3, [r7, #18]
 8005232:	8053      	strh	r3, [r2, #2]
 8005234:	e002      	b.n	800523c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2201      	movs	r2, #1
 800523a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <mem_malloc+0x1d0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	429a      	cmp	r2, r3
 8005244:	d127      	bne.n	8005296 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005246:	4b32      	ldr	r3, [pc, #200]	; (8005310 <mem_malloc+0x1d0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800524c:	e005      	b.n	800525a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fcd0 	bl	8004bf8 <ptr_to_mem>
 8005258:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <mem_malloc+0x12c>
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <mem_malloc+0x1e0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d1f0      	bne.n	800524e <mem_malloc+0x10e>
          }
          lfree = cur;
 800526c:	4a28      	ldr	r2, [pc, #160]	; (8005310 <mem_malloc+0x1d0>)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <mem_malloc+0x1d0>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <mem_malloc+0x1e0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00b      	beq.n	8005296 <mem_malloc+0x156>
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <mem_malloc+0x1d0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	791b      	ldrb	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <mem_malloc+0x156>
 8005288:	4b22      	ldr	r3, [pc, #136]	; (8005314 <mem_malloc+0x1d4>)
 800528a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800528e:	4925      	ldr	r1, [pc, #148]	; (8005324 <mem_malloc+0x1e4>)
 8005290:	4822      	ldr	r0, [pc, #136]	; (800531c <mem_malloc+0x1dc>)
 8005292:	f00a f913 	bl	800f4bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005296:	8bba      	ldrh	r2, [r7, #28]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	3308      	adds	r3, #8
 800529e:	4a20      	ldr	r2, [pc, #128]	; (8005320 <mem_malloc+0x1e0>)
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d906      	bls.n	80052b4 <mem_malloc+0x174>
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <mem_malloc+0x1d4>)
 80052a8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80052ac:	491e      	ldr	r1, [pc, #120]	; (8005328 <mem_malloc+0x1e8>)
 80052ae:	481b      	ldr	r0, [pc, #108]	; (800531c <mem_malloc+0x1dc>)
 80052b0:	f00a f904 	bl	800f4bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <mem_malloc+0x18c>
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <mem_malloc+0x1d4>)
 80052c0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80052c4:	4919      	ldr	r1, [pc, #100]	; (800532c <mem_malloc+0x1ec>)
 80052c6:	4815      	ldr	r0, [pc, #84]	; (800531c <mem_malloc+0x1dc>)
 80052c8:	f00a f8f8 	bl	800f4bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <mem_malloc+0x1a4>
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <mem_malloc+0x1d4>)
 80052d8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80052dc:	4914      	ldr	r1, [pc, #80]	; (8005330 <mem_malloc+0x1f0>)
 80052de:	480f      	ldr	r0, [pc, #60]	; (800531c <mem_malloc+0x1dc>)
 80052e0:	f00a f8ec 	bl	800f4bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3308      	adds	r3, #8
 80052e8:	e00e      	b.n	8005308 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80052ea:	8bfb      	ldrh	r3, [r7, #30]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff fc83 	bl	8004bf8 <ptr_to_mem>
 80052f2:	4603      	mov	r3, r0
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80052f8:	8bfa      	ldrh	r2, [r7, #30]
 80052fa:	8bbb      	ldrh	r3, [r7, #28]
 80052fc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005300:	429a      	cmp	r2, r3
 8005302:	f4ff af44 	bcc.w	800518e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200053a0 	.word	0x200053a0
 8005314:	08010354 	.word	0x08010354
 8005318:	080104fc 	.word	0x080104fc
 800531c:	0801039c 	.word	0x0801039c
 8005320:	2000539c 	.word	0x2000539c
 8005324:	08010510 	.word	0x08010510
 8005328:	0801052c 	.word	0x0801052c
 800532c:	0801055c 	.word	0x0801055c
 8005330:	0801058c 	.word	0x0801058c

08005334 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	3303      	adds	r3, #3
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e011      	b.n	800537a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	885b      	ldrh	r3, [r3, #2]
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4293      	cmp	r3, r2
 8005384:	dbe7      	blt.n	8005356 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800539a:	2300      	movs	r3, #0
 800539c:	80fb      	strh	r3, [r7, #6]
 800539e:	e009      	b.n	80053b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <memp_init+0x30>)
 80053a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ffc3 	bl	8005334 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	3301      	adds	r3, #1
 80053b2:	80fb      	strh	r3, [r7, #6]
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d9f2      	bls.n	80053a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	08012d70 	.word	0x08012d70

080053c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d012      	beq.n	8005404 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <do_memp_malloc_pool+0x38>
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <do_memp_malloc_pool+0x48>)
 80053f4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80053f8:	4906      	ldr	r1, [pc, #24]	; (8005414 <do_memp_malloc_pool+0x4c>)
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <do_memp_malloc_pool+0x50>)
 80053fc:	f00a f85e 	bl	800f4bc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	e000      	b.n	8005406 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080105b0 	.word	0x080105b0
 8005414:	080105e0 	.word	0x080105e0
 8005418:	08010604 	.word	0x08010604

0800541c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <memp_malloc_pool+0x1c>
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <memp_malloc_pool+0x38>)
 800542c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005430:	4909      	ldr	r1, [pc, #36]	; (8005458 <memp_malloc_pool+0x3c>)
 8005432:	480a      	ldr	r0, [pc, #40]	; (800545c <memp_malloc_pool+0x40>)
 8005434:	f00a f842 	bl	800f4bc <iprintf>
  if (desc == NULL) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <memp_malloc_pool+0x26>
    return NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	e003      	b.n	800544a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff ffc0 	bl	80053c8 <do_memp_malloc_pool>
 8005448:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	080105b0 	.word	0x080105b0
 8005458:	0801062c 	.word	0x0801062c
 800545c:	08010604 	.word	0x08010604

08005460 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d908      	bls.n	8005482 <memp_malloc+0x22>
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <memp_malloc+0x3c>)
 8005472:	f240 1257 	movw	r2, #343	; 0x157
 8005476:	490a      	ldr	r1, [pc, #40]	; (80054a0 <memp_malloc+0x40>)
 8005478:	480a      	ldr	r0, [pc, #40]	; (80054a4 <memp_malloc+0x44>)
 800547a:	f00a f81f 	bl	800f4bc <iprintf>
 800547e:	2300      	movs	r3, #0
 8005480:	e008      	b.n	8005494 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <memp_malloc+0x48>)
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff9c 	bl	80053c8 <do_memp_malloc_pool>
 8005490:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005492:	68fb      	ldr	r3, [r7, #12]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	080105b0 	.word	0x080105b0
 80054a0:	08010640 	.word	0x08010640
 80054a4:	08010604 	.word	0x08010604
 80054a8:	08012d70 	.word	0x08012d70

080054ac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <do_memp_free_pool+0x22>
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <do_memp_free_pool+0x40>)
 80054c2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80054c6:	490a      	ldr	r1, [pc, #40]	; (80054f0 <do_memp_free_pool+0x44>)
 80054c8:	480a      	ldr	r0, [pc, #40]	; (80054f4 <do_memp_free_pool+0x48>)
 80054ca:	f009 fff7 	bl	800f4bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	080105b0 	.word	0x080105b0
 80054f0:	08010660 	.word	0x08010660
 80054f4:	08010604 	.word	0x08010604

080054f8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <memp_free_pool+0x1e>
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <memp_free_pool+0x3c>)
 800550a:	f240 1295 	movw	r2, #405	; 0x195
 800550e:	490a      	ldr	r1, [pc, #40]	; (8005538 <memp_free_pool+0x40>)
 8005510:	480a      	ldr	r0, [pc, #40]	; (800553c <memp_free_pool+0x44>)
 8005512:	f009 ffd3 	bl	800f4bc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <memp_free_pool+0x34>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ffc1 	bl	80054ac <do_memp_free_pool>
 800552a:	e000      	b.n	800552e <memp_free_pool+0x36>
    return;
 800552c:	bf00      	nop
}
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	080105b0 	.word	0x080105b0
 8005538:	0801062c 	.word	0x0801062c
 800553c:	08010604 	.word	0x08010604

08005540 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	6039      	str	r1, [r7, #0]
 800554a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	2b08      	cmp	r3, #8
 8005550:	d907      	bls.n	8005562 <memp_free+0x22>
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <memp_free+0x44>)
 8005554:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005558:	490b      	ldr	r1, [pc, #44]	; (8005588 <memp_free+0x48>)
 800555a:	480c      	ldr	r0, [pc, #48]	; (800558c <memp_free+0x4c>)
 800555c:	f009 ffae 	bl	800f4bc <iprintf>
 8005560:	e00c      	b.n	800557c <memp_free+0x3c>

  if (mem == NULL) {
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <memp_free+0x50>)
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff ff9a 	bl	80054ac <do_memp_free_pool>
 8005578:	e000      	b.n	800557c <memp_free+0x3c>
    return;
 800557a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	080105b0 	.word	0x080105b0
 8005588:	08010680 	.word	0x08010680
 800558c:	08010604 	.word	0x08010604
 8005590:	08012d70 	.word	0x08012d70

08005594 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <netif_add+0x26>
 80055b8:	4b57      	ldr	r3, [pc, #348]	; (8005718 <netif_add+0x174>)
 80055ba:	f240 1227 	movw	r2, #295	; 0x127
 80055be:	4957      	ldr	r1, [pc, #348]	; (800571c <netif_add+0x178>)
 80055c0:	4857      	ldr	r0, [pc, #348]	; (8005720 <netif_add+0x17c>)
 80055c2:	f009 ff7b 	bl	800f4bc <iprintf>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e0a2      	b.n	8005710 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <netif_add+0x3e>
 80055d0:	4b51      	ldr	r3, [pc, #324]	; (8005718 <netif_add+0x174>)
 80055d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80055d6:	4953      	ldr	r1, [pc, #332]	; (8005724 <netif_add+0x180>)
 80055d8:	4851      	ldr	r0, [pc, #324]	; (8005720 <netif_add+0x17c>)
 80055da:	f009 ff6f 	bl	800f4bc <iprintf>
 80055de:	2300      	movs	r3, #0
 80055e0:	e096      	b.n	8005710 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80055e8:	4b4f      	ldr	r3, [pc, #316]	; (8005728 <netif_add+0x184>)
 80055ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80055f2:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <netif_add+0x184>)
 80055f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80055fc:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <netif_add+0x184>)
 80055fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a45      	ldr	r2, [pc, #276]	; (800572c <netif_add+0x188>)
 8005616:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005632:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <netif_add+0x18c>)
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005640:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f913 	bl	8005874 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	4798      	blx	r3
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <netif_add+0xba>
    return NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	e058      	b.n	8005710 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005664:	2bff      	cmp	r3, #255	; 0xff
 8005666:	d103      	bne.n	8005670 <netif_add+0xcc>
        netif->num = 0;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005674:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <netif_add+0x190>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e02b      	b.n	80056d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d106      	bne.n	8005692 <netif_add+0xee>
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <netif_add+0x174>)
 8005686:	f240 128b 	movw	r2, #395	; 0x18b
 800568a:	492b      	ldr	r1, [pc, #172]	; (8005738 <netif_add+0x194>)
 800568c:	4824      	ldr	r0, [pc, #144]	; (8005720 <netif_add+0x17c>)
 800568e:	f009 ff15 	bl	800f4bc <iprintf>
        num_netifs++;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3301      	adds	r3, #1
 8005696:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2bff      	cmp	r3, #255	; 0xff
 800569c:	dd06      	ble.n	80056ac <netif_add+0x108>
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <netif_add+0x174>)
 80056a0:	f240 128d 	movw	r2, #397	; 0x18d
 80056a4:	4925      	ldr	r1, [pc, #148]	; (800573c <netif_add+0x198>)
 80056a6:	481e      	ldr	r0, [pc, #120]	; (8005720 <netif_add+0x17c>)
 80056a8:	f009 ff08 	bl	800f4bc <iprintf>
        if (netif2->num == netif->num) {
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d108      	bne.n	80056ce <netif_add+0x12a>
          netif->num++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c2:	3301      	adds	r3, #1
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80056cc:	e005      	b.n	80056da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1d0      	bne.n	800567c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1be      	bne.n	800565e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e6:	2bfe      	cmp	r3, #254	; 0xfe
 80056e8:	d103      	bne.n	80056f2 <netif_add+0x14e>
    netif_num = 0;
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <netif_add+0x18c>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e006      	b.n	8005700 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056f8:	3301      	adds	r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <netif_add+0x18c>)
 80056fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <netif_add+0x190>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005708:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <netif_add+0x190>)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800570e:	68fb      	ldr	r3, [r7, #12]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	0801069c 	.word	0x0801069c
 800571c:	08010730 	.word	0x08010730
 8005720:	080106ec 	.word	0x080106ec
 8005724:	0801074c 	.word	0x0801074c
 8005728:	08012dd4 	.word	0x08012dd4
 800572c:	08005b4f 	.word	0x08005b4f
 8005730:	20008298 	.word	0x20008298
 8005734:	20008290 	.word	0x20008290
 8005738:	08010770 	.word	0x08010770
 800573c:	08010784 	.word	0x08010784

08005740 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f002 fd7f 	bl	8008250 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f007 fabb 	bl	800ccd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <netif_do_set_ipaddr+0x20>
 8005776:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <netif_do_set_ipaddr+0x88>)
 8005778:	f240 12cb 	movw	r2, #459	; 0x1cb
 800577c:	491c      	ldr	r1, [pc, #112]	; (80057f0 <netif_do_set_ipaddr+0x8c>)
 800577e:	481d      	ldr	r0, [pc, #116]	; (80057f4 <netif_do_set_ipaddr+0x90>)
 8005780:	f009 fe9c 	bl	800f4bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <netif_do_set_ipaddr+0x34>
 800578a:	4b18      	ldr	r3, [pc, #96]	; (80057ec <netif_do_set_ipaddr+0x88>)
 800578c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005790:	4917      	ldr	r1, [pc, #92]	; (80057f0 <netif_do_set_ipaddr+0x8c>)
 8005792:	4818      	ldr	r0, [pc, #96]	; (80057f4 <netif_do_set_ipaddr+0x90>)
 8005794:	f009 fe92 	bl	800f4bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3304      	adds	r3, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d01c      	beq.n	80057e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3304      	adds	r3, #4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80057b6:	f107 0314 	add.w	r3, r7, #20
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ffbf 	bl	8005740 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <netif_do_set_ipaddr+0x6a>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	e000      	b.n	80057d0 <netif_do_set_ipaddr+0x6c>
 80057ce:	2300      	movs	r3, #0
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80057d4:	2101      	movs	r1, #1
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f8d2 	bl	8005980 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0801069c 	.word	0x0801069c
 80057f0:	080107b4 	.word	0x080107b4
 80057f4:	080106ec 	.word	0x080106ec

080057f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3308      	adds	r3, #8
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d00a      	beq.n	8005828 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <netif_do_set_netmask+0x26>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	e000      	b.n	8005820 <netif_do_set_netmask+0x28>
 800581e:	2300      	movs	r3, #0
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	330c      	adds	r3, #12
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d00a      	beq.n	8005866 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <netif_do_set_gw+0x26>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	e000      	b.n	800585e <netif_do_set_gw+0x28>
 800585c:	2300      	movs	r3, #0
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <netif_set_addr+0x90>)
 8005892:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <netif_set_addr+0x90>)
 800589c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <netif_set_addr+0x90>)
 80058a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <netif_set_addr+0x42>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <netif_set_addr+0x46>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <netif_set_addr+0x48>
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058c4:	f107 0310 	add.w	r3, r7, #16
 80058c8:	461a      	mov	r2, r3
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ff49 	bl	8005764 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff ff8e 	bl	80057f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ffa8 	bl	8005836 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	461a      	mov	r2, r3
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ff35 	bl	8005764 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80058fa:	bf00      	nop
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	08012dd4 	.word	0x08012dd4

08005908 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005910:	4a04      	ldr	r2, [pc, #16]	; (8005924 <netif_set_default+0x1c>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20008294 	.word	0x20008294

08005928 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <netif_set_up+0x1e>
 8005936:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <netif_set_up+0x4c>)
 8005938:	f44f 7254 	mov.w	r2, #848	; 0x350
 800593c:	490e      	ldr	r1, [pc, #56]	; (8005978 <netif_set_up+0x50>)
 800593e:	480f      	ldr	r0, [pc, #60]	; (800597c <netif_set_up+0x54>)
 8005940:	f009 fdbc 	bl	800f4bc <iprintf>
 8005944:	e013      	b.n	800596e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10c      	bne.n	800596e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005966:	2103      	movs	r1, #3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f809 	bl	8005980 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	0801069c 	.word	0x0801069c
 8005978:	08010824 	.word	0x08010824
 800597c:	080106ec 	.word	0x080106ec

08005980 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <netif_issue_reports+0x20>
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <netif_issue_reports+0x74>)
 8005994:	f240 326d 	movw	r2, #877	; 0x36d
 8005998:	4917      	ldr	r1, [pc, #92]	; (80059f8 <netif_issue_reports+0x78>)
 800599a:	4818      	ldr	r0, [pc, #96]	; (80059fc <netif_issue_reports+0x7c>)
 800599c:	f009 fd8e 	bl	800f4bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01e      	beq.n	80059ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f008 f8dd 	bl	800dba4 <etharp_request>
 80059ea:	e000      	b.n	80059ee <netif_issue_reports+0x6e>
    return;
 80059ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	0801069c 	.word	0x0801069c
 80059f8:	08010840 	.word	0x08010840
 80059fc:	080106ec 	.word	0x080106ec

08005a00 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <netif_set_down+0x1e>
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <netif_set_down+0x58>)
 8005a10:	f240 329b 	movw	r2, #923	; 0x39b
 8005a14:	4911      	ldr	r1, [pc, #68]	; (8005a5c <netif_set_down+0x5c>)
 8005a16:	4812      	ldr	r0, [pc, #72]	; (8005a60 <netif_set_down+0x60>)
 8005a18:	f009 fd50 	bl	800f4bc <iprintf>
 8005a1c:	e019      	b.n	8005a52 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f007 fc67 	bl	800d320 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0801069c 	.word	0x0801069c
 8005a5c:	08010864 	.word	0x08010864
 8005a60:	080106ec 	.word	0x080106ec

08005a64 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <netif_set_link_up+0x1e>
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <netif_set_link_up+0x5c>)
 8005a74:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005a78:	4912      	ldr	r1, [pc, #72]	; (8005ac4 <netif_set_link_up+0x60>)
 8005a7a:	4813      	ldr	r0, [pc, #76]	; (8005ac8 <netif_set_link_up+0x64>)
 8005a7c:	f009 fd1e 	bl	800f4bc <iprintf>
 8005a80:	e01b      	b.n	8005aba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d114      	bne.n	8005aba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005aa2:	2103      	movs	r1, #3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff6b 	bl	8005980 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <netif_set_link_up+0x56>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	0801069c 	.word	0x0801069c
 8005ac4:	08010884 	.word	0x08010884
 8005ac8:	080106ec 	.word	0x080106ec

08005acc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <netif_set_link_down+0x1e>
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <netif_set_link_down+0x54>)
 8005adc:	f240 4206 	movw	r2, #1030	; 0x406
 8005ae0:	4910      	ldr	r1, [pc, #64]	; (8005b24 <netif_set_link_down+0x58>)
 8005ae2:	4811      	ldr	r0, [pc, #68]	; (8005b28 <netif_set_link_down+0x5c>)
 8005ae4:	f009 fcea 	bl	800f4bc <iprintf>
 8005ae8:	e017      	b.n	8005b1a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005afe:	f023 0304 	bic.w	r3, r3, #4
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <netif_set_link_down+0x4e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0801069c 	.word	0x0801069c
 8005b24:	080108a8 	.word	0x080108a8
 8005b28:	080106ec 	.word	0x080106ec

08005b2c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	61da      	str	r2, [r3, #28]
  }
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005b5a:	f06f 030b 	mvn.w	r3, #11
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d013      	beq.n	8005ba4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <netif_get_by_index+0x48>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e00c      	b.n	8005b9e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	79fa      	ldrb	r2, [r7, #7]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d101      	bne.n	8005b98 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e006      	b.n	8005ba6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ef      	bne.n	8005b84 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20008290 	.word	0x20008290

08005bb8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <pbuf_free_ooseq+0x38>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <pbuf_free_ooseq+0x3c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	e00a      	b.n	8005be2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f002 fb79 	bl	80082cc <tcp_free_ooseq>
      return;
 8005bda:	e005      	b.n	8005be8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f1      	bne.n	8005bcc <pbuf_free_ooseq+0x14>
    }
  }
}
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20008299 	.word	0x20008299
 8005bf4:	200082a8 	.word	0x200082a8

08005bf8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <pbuf_pool_is_empty+0x14>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20008299 	.word	0x20008299

08005c10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	80fb      	strh	r3, [r7, #6]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88ba      	ldrh	r2, [r7, #4]
 8005c3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005c3e:	8b3b      	ldrh	r3, [r7, #24]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	7f3a      	ldrb	r2, [r7, #28]
 8005c4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	73da      	strb	r2, [r3, #15]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08c      	sub	sp, #48	; 0x30
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	80bb      	strh	r3, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c80:	d07f      	beq.n	8005d82 <pbuf_alloc+0x11e>
 8005c82:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c86:	f300 80c8 	bgt.w	8005e1a <pbuf_alloc+0x1b6>
 8005c8a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c8e:	d010      	beq.n	8005cb2 <pbuf_alloc+0x4e>
 8005c90:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c94:	f300 80c1 	bgt.w	8005e1a <pbuf_alloc+0x1b6>
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d002      	beq.n	8005ca2 <pbuf_alloc+0x3e>
 8005c9c:	2b41      	cmp	r3, #65	; 0x41
 8005c9e:	f040 80bc 	bne.w	8005e1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f000 f8d1 	bl	8005e50 <pbuf_alloc_reference>
 8005cae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005cb0:	e0bd      	b.n	8005e2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005cba:	88bb      	ldrh	r3, [r7, #4]
 8005cbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005cbe:	2008      	movs	r0, #8
 8005cc0:	f7ff fbce 	bl	8005460 <memp_malloc>
 8005cc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005ccc:	f7ff ff94 	bl	8005bf8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <pbuf_alloc+0x78>
            pbuf_free(p);
 8005cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cd8:	f000 faa8 	bl	800622c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e0a7      	b.n	8005e30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005ce0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ce2:	3303      	adds	r3, #3
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8b7a      	ldrh	r2, [r7, #26]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bf28      	it	cs
 8005cf8:	4613      	movcs	r3, r2
 8005cfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cfe:	3310      	adds	r3, #16
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	3303      	adds	r3, #3
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	89f9      	ldrh	r1, [r7, #14]
 8005d0e:	8b7a      	ldrh	r2, [r7, #26]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	887b      	ldrh	r3, [r7, #2]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6938      	ldr	r0, [r7, #16]
 8005d1e:	f7ff ff77 	bl	8005c10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <pbuf_alloc+0xd8>
 8005d2e:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <pbuf_alloc+0x1d4>)
 8005d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d34:	4941      	ldr	r1, [pc, #260]	; (8005e3c <pbuf_alloc+0x1d8>)
 8005d36:	4842      	ldr	r0, [pc, #264]	; (8005e40 <pbuf_alloc+0x1dc>)
 8005d38:	f009 fbc0 	bl	800f4bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d3e:	3303      	adds	r3, #3
 8005d40:	f023 0303 	bic.w	r3, r3, #3
 8005d44:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005d48:	d106      	bne.n	8005d58 <pbuf_alloc+0xf4>
 8005d4a:	4b3b      	ldr	r3, [pc, #236]	; (8005e38 <pbuf_alloc+0x1d4>)
 8005d4c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005d50:	493c      	ldr	r1, [pc, #240]	; (8005e44 <pbuf_alloc+0x1e0>)
 8005d52:	483b      	ldr	r0, [pc, #236]	; (8005e40 <pbuf_alloc+0x1dc>)
 8005d54:	f009 fbb2 	bl	800f4bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	e002      	b.n	8005d6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005d6e:	8b7a      	ldrh	r2, [r7, #26]
 8005d70:	89fb      	ldrh	r3, [r7, #14]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005d7a:	8b7b      	ldrh	r3, [r7, #26]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d19e      	bne.n	8005cbe <pbuf_alloc+0x5a>
      break;
 8005d80:	e055      	b.n	8005e2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d84:	3303      	adds	r3, #3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	88bb      	ldrh	r3, [r7, #4]
 8005d90:	3303      	adds	r3, #3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f023 0303 	bic.w	r3, r3, #3
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005d9e:	8b3b      	ldrh	r3, [r7, #24]
 8005da0:	3310      	adds	r3, #16
 8005da2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005da4:	8b3a      	ldrh	r2, [r7, #24]
 8005da6:	88bb      	ldrh	r3, [r7, #4]
 8005da8:	3303      	adds	r3, #3
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d306      	bcc.n	8005dc0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005db2:	8afa      	ldrh	r2, [r7, #22]
 8005db4:	88bb      	ldrh	r3, [r7, #4]
 8005db6:	3303      	adds	r3, #3
 8005db8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d201      	bcs.n	8005dc4 <pbuf_alloc+0x160>
        return NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e035      	b.n	8005e30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005dc4:	8afb      	ldrh	r3, [r7, #22]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff f9ba 	bl	8005140 <mem_malloc>
 8005dcc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <pbuf_alloc+0x174>
        return NULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e02b      	b.n	8005e30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dda:	3310      	adds	r3, #16
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	4413      	add	r3, r2
 8005de0:	3303      	adds	r3, #3
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	4618      	mov	r0, r3
 8005de8:	88b9      	ldrh	r1, [r7, #4]
 8005dea:	88ba      	ldrh	r2, [r7, #4]
 8005dec:	2300      	movs	r3, #0
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	887b      	ldrh	r3, [r7, #2]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	460b      	mov	r3, r1
 8005df6:	4601      	mov	r1, r0
 8005df8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dfa:	f7ff ff09 	bl	8005c10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <pbuf_alloc+0x1c8>
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <pbuf_alloc+0x1d4>)
 8005e0c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005e10:	490d      	ldr	r1, [pc, #52]	; (8005e48 <pbuf_alloc+0x1e4>)
 8005e12:	480b      	ldr	r0, [pc, #44]	; (8005e40 <pbuf_alloc+0x1dc>)
 8005e14:	f009 fb52 	bl	800f4bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005e18:	e008      	b.n	8005e2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <pbuf_alloc+0x1d4>)
 8005e1c:	f240 1227 	movw	r2, #295	; 0x127
 8005e20:	490a      	ldr	r1, [pc, #40]	; (8005e4c <pbuf_alloc+0x1e8>)
 8005e22:	4807      	ldr	r0, [pc, #28]	; (8005e40 <pbuf_alloc+0x1dc>)
 8005e24:	f009 fb4a 	bl	800f4bc <iprintf>
      return NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e001      	b.n	8005e30 <pbuf_alloc+0x1cc>
      break;
 8005e2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	080108cc 	.word	0x080108cc
 8005e3c:	080108fc 	.word	0x080108fc
 8005e40:	0801092c 	.word	0x0801092c
 8005e44:	08010954 	.word	0x08010954
 8005e48:	08010988 	.word	0x08010988
 8005e4c:	080109b4 	.word	0x080109b4

08005e50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005e60:	883b      	ldrh	r3, [r7, #0]
 8005e62:	2b41      	cmp	r3, #65	; 0x41
 8005e64:	d009      	beq.n	8005e7a <pbuf_alloc_reference+0x2a>
 8005e66:	883b      	ldrh	r3, [r7, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d006      	beq.n	8005e7a <pbuf_alloc_reference+0x2a>
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <pbuf_alloc_reference+0x5c>)
 8005e6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005e72:	490f      	ldr	r1, [pc, #60]	; (8005eb0 <pbuf_alloc_reference+0x60>)
 8005e74:	480f      	ldr	r0, [pc, #60]	; (8005eb4 <pbuf_alloc_reference+0x64>)
 8005e76:	f009 fb21 	bl	800f4bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005e7a:	2007      	movs	r0, #7
 8005e7c:	f7ff faf0 	bl	8005460 <memp_malloc>
 8005e80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e00b      	b.n	8005ea4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005e8c:	8879      	ldrh	r1, [r7, #2]
 8005e8e:	887a      	ldrh	r2, [r7, #2]
 8005e90:	2300      	movs	r3, #0
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	883b      	ldrh	r3, [r7, #0]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff feb7 	bl	8005c10 <pbuf_init_alloced_pbuf>
  return p;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	080108cc 	.word	0x080108cc
 8005eb0:	080109d0 	.word	0x080109d0
 8005eb4:	0801092c 	.word	0x0801092c

08005eb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	81bb      	strh	r3, [r7, #12]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005ed0:	8a7b      	ldrh	r3, [r7, #18]
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	f023 0203 	bic.w	r2, r3, #3
 8005ed8:	89bb      	ldrh	r3, [r7, #12]
 8005eda:	441a      	add	r2, r3
 8005edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d901      	bls.n	8005ee6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e018      	b.n	8005f18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005eec:	8a7b      	ldrh	r3, [r7, #18]
 8005eee:	3303      	adds	r3, #3
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e001      	b.n	8005f00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	89b9      	ldrh	r1, [r7, #12]
 8005f04:	89ba      	ldrh	r2, [r7, #12]
 8005f06:	2302      	movs	r3, #2
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	6979      	ldr	r1, [r7, #20]
 8005f12:	f7ff fe7d 	bl	8005c10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005f16:	687b      	ldr	r3, [r7, #4]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <pbuf_realloc+0x20>
 8005f32:	4b3a      	ldr	r3, [pc, #232]	; (800601c <pbuf_realloc+0xfc>)
 8005f34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <pbuf_realloc+0x100>)
 8005f3a:	483a      	ldr	r0, [pc, #232]	; (8006024 <pbuf_realloc+0x104>)
 8005f3c:	f009 fabe 	bl	800f4bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	891b      	ldrh	r3, [r3, #8]
 8005f44:	887a      	ldrh	r2, [r7, #2]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d263      	bcs.n	8006012 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	891a      	ldrh	r2, [r3, #8]
 8005f4e:	887b      	ldrh	r3, [r7, #2]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	817b      	strh	r3, [r7, #10]
  q = p;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005f5c:	e018      	b.n	8005f90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	897a      	ldrh	r2, [r7, #10]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	891a      	ldrh	r2, [r3, #8]
 8005f6c:	893b      	ldrh	r3, [r7, #8]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <pbuf_realloc+0x70>
 8005f82:	4b26      	ldr	r3, [pc, #152]	; (800601c <pbuf_realloc+0xfc>)
 8005f84:	f240 12af 	movw	r2, #431	; 0x1af
 8005f88:	4927      	ldr	r1, [pc, #156]	; (8006028 <pbuf_realloc+0x108>)
 8005f8a:	4826      	ldr	r0, [pc, #152]	; (8006024 <pbuf_realloc+0x104>)
 8005f8c:	f009 fa96 	bl	800f4bc <iprintf>
  while (rem_len > q->len) {
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	895b      	ldrh	r3, [r3, #10]
 8005f94:	897a      	ldrh	r2, [r7, #10]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d8e1      	bhi.n	8005f5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d121      	bne.n	8005fea <pbuf_realloc+0xca>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	897a      	ldrh	r2, [r7, #10]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d01c      	beq.n	8005fea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	7b5b      	ldrb	r3, [r3, #13]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d116      	bne.n	8005fea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	897b      	ldrh	r3, [r7, #10]
 8005fc8:	4413      	add	r3, r2
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7fe ffba 	bl	8004f48 <mem_trim>
 8005fd4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <pbuf_realloc+0xca>
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <pbuf_realloc+0xfc>)
 8005fde:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005fe2:	4912      	ldr	r1, [pc, #72]	; (800602c <pbuf_realloc+0x10c>)
 8005fe4:	480f      	ldr	r0, [pc, #60]	; (8006024 <pbuf_realloc+0x104>)
 8005fe6:	f009 fa69 	bl	800f4bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	897a      	ldrh	r2, [r7, #10]
 8005fee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	895a      	ldrh	r2, [r3, #10]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f911 	bl	800622c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e000      	b.n	8006014 <pbuf_realloc+0xf4>
    return;
 8006012:	bf00      	nop

}
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	080108cc 	.word	0x080108cc
 8006020:	080109e4 	.word	0x080109e4
 8006024:	0801092c 	.word	0x0801092c
 8006028:	080109fc 	.word	0x080109fc
 800602c:	08010a14 	.word	0x08010a14

08006030 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <pbuf_add_header_impl+0x22>
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <pbuf_add_header_impl+0xc4>)
 8006046:	f240 12df 	movw	r2, #479	; 0x1df
 800604a:	492b      	ldr	r1, [pc, #172]	; (80060f8 <pbuf_add_header_impl+0xc8>)
 800604c:	482b      	ldr	r0, [pc, #172]	; (80060fc <pbuf_add_header_impl+0xcc>)
 800604e:	f009 fa35 	bl	800f4bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <pbuf_add_header_impl+0x30>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605e:	d301      	bcc.n	8006064 <pbuf_add_header_impl+0x34>
    return 1;
 8006060:	2301      	movs	r3, #1
 8006062:	e043      	b.n	80060ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <pbuf_add_header_impl+0x3e>
    return 0;
 800606a:	2300      	movs	r3, #0
 800606c:	e03e      	b.n	80060ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	891a      	ldrh	r2, [r3, #8]
 8006076:	8a7b      	ldrh	r3, [r7, #18]
 8006078:	4413      	add	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	8a7a      	ldrh	r2, [r7, #18]
 800607e:	429a      	cmp	r2, r3
 8006080:	d901      	bls.n	8006086 <pbuf_add_header_impl+0x56>
    return 1;
 8006082:	2301      	movs	r3, #1
 8006084:	e032      	b.n	80060ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	7b1b      	ldrb	r3, [r3, #12]
 800608a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800608c:	8a3b      	ldrh	r3, [r7, #16]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00c      	beq.n	80060b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	425b      	negs	r3, r3
 800609e:	4413      	add	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3310      	adds	r3, #16
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d20d      	bcs.n	80060c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e01d      	b.n	80060ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	425b      	negs	r3, r3
 80060be:	4413      	add	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e001      	b.n	80060c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e011      	b.n	80060ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	895a      	ldrh	r2, [r3, #10]
 80060d2:	8a7b      	ldrh	r3, [r7, #18]
 80060d4:	4413      	add	r3, r2
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	891a      	ldrh	r2, [r3, #8]
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	4413      	add	r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	811a      	strh	r2, [r3, #8]


  return 0;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	080108cc 	.word	0x080108cc
 80060f8:	08010a30 	.word	0x08010a30
 80060fc:	0801092c 	.word	0x0801092c

08006100 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800610a:	2200      	movs	r2, #0
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff ff8e 	bl	8006030 <pbuf_add_header_impl>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <pbuf_remove_header+0x1e>
 8006130:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <pbuf_remove_header+0x94>)
 8006132:	f240 224b 	movw	r2, #587	; 0x24b
 8006136:	4920      	ldr	r1, [pc, #128]	; (80061b8 <pbuf_remove_header+0x98>)
 8006138:	4820      	ldr	r0, [pc, #128]	; (80061bc <pbuf_remove_header+0x9c>)
 800613a:	f009 f9bf 	bl	800f4bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <pbuf_remove_header+0x2c>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614a:	d301      	bcc.n	8006150 <pbuf_remove_header+0x30>
    return 1;
 800614c:	2301      	movs	r3, #1
 800614e:	e02c      	b.n	80061aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <pbuf_remove_header+0x3a>
    return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e027      	b.n	80061aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	895b      	ldrh	r3, [r3, #10]
 8006162:	89fa      	ldrh	r2, [r7, #14]
 8006164:	429a      	cmp	r2, r3
 8006166:	d908      	bls.n	800617a <pbuf_remove_header+0x5a>
 8006168:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <pbuf_remove_header+0x94>)
 800616a:	f240 2255 	movw	r2, #597	; 0x255
 800616e:	4914      	ldr	r1, [pc, #80]	; (80061c0 <pbuf_remove_header+0xa0>)
 8006170:	4812      	ldr	r0, [pc, #72]	; (80061bc <pbuf_remove_header+0x9c>)
 8006172:	f009 f9a3 	bl	800f4bc <iprintf>
 8006176:	2301      	movs	r3, #1
 8006178:	e017      	b.n	80061aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	441a      	add	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	895a      	ldrh	r2, [r3, #10]
 8006190:	89fb      	ldrh	r3, [r7, #14]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	891a      	ldrh	r2, [r3, #8]
 800619e:	89fb      	ldrh	r3, [r7, #14]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	080108cc 	.word	0x080108cc
 80061b8:	08010a30 	.word	0x08010a30
 80061bc:	0801092c 	.word	0x0801092c
 80061c0:	08010a3c 	.word	0x08010a3c

080061c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80061d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da08      	bge.n	80061ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80061dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061e0:	425b      	negs	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff ff9b 	bl	8006120 <pbuf_remove_header>
 80061ea:	4603      	mov	r3, r0
 80061ec:	e007      	b.n	80061fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80061ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061f2:	787a      	ldrb	r2, [r7, #1]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ff1a 	bl	8006030 <pbuf_add_header_impl>
 80061fc:	4603      	mov	r3, r0
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006212:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006216:	2201      	movs	r2, #1
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ffd2 	bl	80061c4 <pbuf_header_impl>
 8006220:	4603      	mov	r3, r0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <pbuf_free+0x22>
 8006240:	4b38      	ldr	r3, [pc, #224]	; (8006324 <pbuf_free+0xf8>)
 8006242:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006246:	4938      	ldr	r1, [pc, #224]	; (8006328 <pbuf_free+0xfc>)
 8006248:	4838      	ldr	r0, [pc, #224]	; (800632c <pbuf_free+0x100>)
 800624a:	f009 f937 	bl	800f4bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800624e:	2300      	movs	r3, #0
 8006250:	e063      	b.n	800631a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006256:	e05c      	b.n	8006312 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7b9b      	ldrb	r3, [r3, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <pbuf_free+0x42>
 8006260:	4b30      	ldr	r3, [pc, #192]	; (8006324 <pbuf_free+0xf8>)
 8006262:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006266:	4932      	ldr	r1, [pc, #200]	; (8006330 <pbuf_free+0x104>)
 8006268:	4830      	ldr	r0, [pc, #192]	; (800632c <pbuf_free+0x100>)
 800626a:	f009 f927 	bl	800f4bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	7b9b      	ldrb	r3, [r3, #14]
 8006272:	3b01      	subs	r3, #1
 8006274:	b2da      	uxtb	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	739a      	strb	r2, [r3, #14]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7b9b      	ldrb	r3, [r3, #14]
 800627e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006280:	7dbb      	ldrb	r3, [r7, #22]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d143      	bne.n	800630e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7b1b      	ldrb	r3, [r3, #12]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7b5b      	ldrb	r3, [r3, #13]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d011      	beq.n	80062c6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <pbuf_free+0x90>
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <pbuf_free+0xf8>)
 80062b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80062b4:	491f      	ldr	r1, [pc, #124]	; (8006334 <pbuf_free+0x108>)
 80062b6:	481d      	ldr	r0, [pc, #116]	; (800632c <pbuf_free+0x100>)
 80062b8:	f009 f900 	bl	800f4bc <iprintf>
        pc->custom_free_function(p);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	e01d      	b.n	8006302 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d104      	bne.n	80062d6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	2008      	movs	r0, #8
 80062d0:	f7ff f936 	bl	8005540 <memp_free>
 80062d4:	e015      	b.n	8006302 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d104      	bne.n	80062e6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	2007      	movs	r0, #7
 80062e0:	f7ff f92e 	bl	8005540 <memp_free>
 80062e4:	e00d      	b.n	8006302 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d103      	bne.n	80062f4 <pbuf_free+0xc8>
          mem_free(p);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fe fdc1 	bl	8004e74 <mem_free>
 80062f2:	e006      	b.n	8006302 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <pbuf_free+0xf8>)
 80062f6:	f240 320f 	movw	r2, #783	; 0x30f
 80062fa:	490f      	ldr	r1, [pc, #60]	; (8006338 <pbuf_free+0x10c>)
 80062fc:	480b      	ldr	r0, [pc, #44]	; (800632c <pbuf_free+0x100>)
 80062fe:	f009 f8dd 	bl	800f4bc <iprintf>
        }
      }
      count++;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	3301      	adds	r3, #1
 8006306:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	e001      	b.n	8006312 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d19f      	bne.n	8006258 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	080108cc 	.word	0x080108cc
 8006328:	08010a30 	.word	0x08010a30
 800632c:	0801092c 	.word	0x0801092c
 8006330:	08010a5c 	.word	0x08010a5c
 8006334:	08010a74 	.word	0x08010a74
 8006338:	08010a98 	.word	0x08010a98

0800633c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006348:	e005      	b.n	8006356 <pbuf_clen+0x1a>
    ++len;
 800634a:	89fb      	ldrh	r3, [r7, #14]
 800634c:	3301      	adds	r3, #1
 800634e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f6      	bne.n	800634a <pbuf_clen+0xe>
  }
  return len;
 800635c:	89fb      	ldrh	r3, [r7, #14]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d010      	beq.n	800639c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7b9b      	ldrb	r3, [r3, #14]
 800637e:	3301      	adds	r3, #1
 8006380:	b2da      	uxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7b9b      	ldrb	r3, [r3, #14]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <pbuf_ref+0x30>
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <pbuf_ref+0x38>)
 8006390:	f240 3242 	movw	r2, #834	; 0x342
 8006394:	4904      	ldr	r1, [pc, #16]	; (80063a8 <pbuf_ref+0x3c>)
 8006396:	4805      	ldr	r0, [pc, #20]	; (80063ac <pbuf_ref+0x40>)
 8006398:	f009 f890 	bl	800f4bc <iprintf>
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	080108cc 	.word	0x080108cc
 80063a8:	08010aac 	.word	0x08010aac
 80063ac:	0801092c 	.word	0x0801092c

080063b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <pbuf_cat+0x16>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d107      	bne.n	80063d6 <pbuf_cat+0x26>
 80063c6:	4b20      	ldr	r3, [pc, #128]	; (8006448 <pbuf_cat+0x98>)
 80063c8:	f240 3259 	movw	r2, #857	; 0x359
 80063cc:	491f      	ldr	r1, [pc, #124]	; (800644c <pbuf_cat+0x9c>)
 80063ce:	4820      	ldr	r0, [pc, #128]	; (8006450 <pbuf_cat+0xa0>)
 80063d0:	f009 f874 	bl	800f4bc <iprintf>
 80063d4:	e034      	b.n	8006440 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e00a      	b.n	80063f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	891a      	ldrh	r2, [r3, #8]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	891b      	ldrh	r3, [r3, #8]
 80063e4:	4413      	add	r3, r2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	891a      	ldrh	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	429a      	cmp	r2, r3
 8006404:	d006      	beq.n	8006414 <pbuf_cat+0x64>
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <pbuf_cat+0x98>)
 8006408:	f240 3262 	movw	r2, #866	; 0x362
 800640c:	4911      	ldr	r1, [pc, #68]	; (8006454 <pbuf_cat+0xa4>)
 800640e:	4810      	ldr	r0, [pc, #64]	; (8006450 <pbuf_cat+0xa0>)
 8006410:	f009 f854 	bl	800f4bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <pbuf_cat+0x7a>
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <pbuf_cat+0x98>)
 800641e:	f240 3263 	movw	r2, #867	; 0x363
 8006422:	490d      	ldr	r1, [pc, #52]	; (8006458 <pbuf_cat+0xa8>)
 8006424:	480a      	ldr	r0, [pc, #40]	; (8006450 <pbuf_cat+0xa0>)
 8006426:	f009 f849 	bl	800f4bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	891a      	ldrh	r2, [r3, #8]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	891b      	ldrh	r3, [r3, #8]
 8006432:	4413      	add	r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	080108cc 	.word	0x080108cc
 800644c:	08010ac0 	.word	0x08010ac0
 8006450:	0801092c 	.word	0x0801092c
 8006454:	08010af8 	.word	0x08010af8
 8006458:	08010b28 	.word	0x08010b28

0800645c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <pbuf_copy+0x2a>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <pbuf_copy+0x2a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	891a      	ldrh	r2, [r3, #8]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	891b      	ldrh	r3, [r3, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d209      	bcs.n	800649a <pbuf_copy+0x3e>
 8006486:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <pbuf_copy+0x188>)
 8006488:	f240 32c9 	movw	r2, #969	; 0x3c9
 800648c:	4956      	ldr	r1, [pc, #344]	; (80065e8 <pbuf_copy+0x18c>)
 800648e:	4857      	ldr	r0, [pc, #348]	; (80065ec <pbuf_copy+0x190>)
 8006490:	f009 f814 	bl	800f4bc <iprintf>
 8006494:	f06f 030f 	mvn.w	r3, #15
 8006498:	e09f      	b.n	80065da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	895b      	ldrh	r3, [r3, #10]
 800649e:	461a      	mov	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	895b      	ldrh	r3, [r3, #10]
 80064a8:	4619      	mov	r1, r3
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1acb      	subs	r3, r1, r3
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d306      	bcc.n	80064c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	895b      	ldrh	r3, [r3, #10]
 80064b6:	461a      	mov	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e005      	b.n	80064cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	895b      	ldrh	r3, [r3, #10]
 80064c4:	461a      	mov	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	18d0      	adds	r0, r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	f009 f8c7 	bl	800f672 <memcpy>
    offset_to += len;
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	461a      	mov	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d906      	bls.n	800650e <pbuf_copy+0xb2>
 8006500:	4b38      	ldr	r3, [pc, #224]	; (80065e4 <pbuf_copy+0x188>)
 8006502:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006506:	493a      	ldr	r1, [pc, #232]	; (80065f0 <pbuf_copy+0x194>)
 8006508:	4838      	ldr	r0, [pc, #224]	; (80065ec <pbuf_copy+0x190>)
 800650a:	f008 ffd7 	bl	800f4bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	895b      	ldrh	r3, [r3, #10]
 8006512:	461a      	mov	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4293      	cmp	r3, r2
 8006518:	d906      	bls.n	8006528 <pbuf_copy+0xcc>
 800651a:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <pbuf_copy+0x188>)
 800651c:	f240 32da 	movw	r2, #986	; 0x3da
 8006520:	4934      	ldr	r1, [pc, #208]	; (80065f4 <pbuf_copy+0x198>)
 8006522:	4832      	ldr	r0, [pc, #200]	; (80065ec <pbuf_copy+0x190>)
 8006524:	f008 ffca 	bl	800f4bc <iprintf>
    if (offset_from >= p_from->len) {
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	895b      	ldrh	r3, [r3, #10]
 800652c:	461a      	mov	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4293      	cmp	r3, r2
 8006532:	d304      	bcc.n	800653e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	461a      	mov	r2, r3
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4293      	cmp	r3, r2
 8006548:	d114      	bne.n	8006574 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10c      	bne.n	8006574 <pbuf_copy+0x118>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <pbuf_copy+0x118>
 8006560:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <pbuf_copy+0x188>)
 8006562:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006566:	4924      	ldr	r1, [pc, #144]	; (80065f8 <pbuf_copy+0x19c>)
 8006568:	4820      	ldr	r0, [pc, #128]	; (80065ec <pbuf_copy+0x190>)
 800656a:	f008 ffa7 	bl	800f4bc <iprintf>
 800656e:	f06f 030f 	mvn.w	r3, #15
 8006572:	e032      	b.n	80065da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <pbuf_copy+0x146>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	895a      	ldrh	r2, [r3, #10]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	891b      	ldrh	r3, [r3, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	d10d      	bne.n	80065a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <pbuf_copy+0x146>
 800658e:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <pbuf_copy+0x188>)
 8006590:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006594:	4919      	ldr	r1, [pc, #100]	; (80065fc <pbuf_copy+0x1a0>)
 8006596:	4815      	ldr	r0, [pc, #84]	; (80065ec <pbuf_copy+0x190>)
 8006598:	f008 ff90 	bl	800f4bc <iprintf>
 800659c:	f06f 0305 	mvn.w	r3, #5
 80065a0:	e01b      	b.n	80065da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d013      	beq.n	80065d0 <pbuf_copy+0x174>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	895a      	ldrh	r2, [r3, #10]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	891b      	ldrh	r3, [r3, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d10d      	bne.n	80065d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <pbuf_copy+0x174>
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <pbuf_copy+0x188>)
 80065be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80065c2:	490e      	ldr	r1, [pc, #56]	; (80065fc <pbuf_copy+0x1a0>)
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <pbuf_copy+0x190>)
 80065c6:	f008 ff79 	bl	800f4bc <iprintf>
 80065ca:	f06f 0305 	mvn.w	r3, #5
 80065ce:	e004      	b.n	80065da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f47f af61 	bne.w	800649a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	080108cc 	.word	0x080108cc
 80065e8:	08010b74 	.word	0x08010b74
 80065ec:	0801092c 	.word	0x0801092c
 80065f0:	08010ba4 	.word	0x08010ba4
 80065f4:	08010bbc 	.word	0x08010bbc
 80065f8:	08010bd8 	.word	0x08010bd8
 80065fc:	08010be8 	.word	0x08010be8

08006600 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	460b      	mov	r3, r1
 8006610:	80fb      	strh	r3, [r7, #6]
 8006612:	4613      	mov	r3, r2
 8006614:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <pbuf_copy_partial+0x36>
 8006624:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <pbuf_copy_partial+0xd4>)
 8006626:	f240 420a 	movw	r2, #1034	; 0x40a
 800662a:	492b      	ldr	r1, [pc, #172]	; (80066d8 <pbuf_copy_partial+0xd8>)
 800662c:	482b      	ldr	r0, [pc, #172]	; (80066dc <pbuf_copy_partial+0xdc>)
 800662e:	f008 ff45 	bl	800f4bc <iprintf>
 8006632:	2300      	movs	r3, #0
 8006634:	e04a      	b.n	80066cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d108      	bne.n	800664e <pbuf_copy_partial+0x4e>
 800663c:	4b25      	ldr	r3, [pc, #148]	; (80066d4 <pbuf_copy_partial+0xd4>)
 800663e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006642:	4927      	ldr	r1, [pc, #156]	; (80066e0 <pbuf_copy_partial+0xe0>)
 8006644:	4825      	ldr	r0, [pc, #148]	; (80066dc <pbuf_copy_partial+0xdc>)
 8006646:	f008 ff39 	bl	800f4bc <iprintf>
 800664a:	2300      	movs	r3, #0
 800664c:	e03e      	b.n	80066cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e034      	b.n	80066be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006654:	88bb      	ldrh	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <pbuf_copy_partial+0x70>
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	895b      	ldrh	r3, [r3, #10]
 800665e:	88ba      	ldrh	r2, [r7, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d305      	bcc.n	8006670 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	895b      	ldrh	r3, [r3, #10]
 8006668:	88ba      	ldrh	r2, [r7, #4]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	80bb      	strh	r3, [r7, #4]
 800666e:	e023      	b.n	80066b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	895a      	ldrh	r2, [r3, #10]
 8006674:	88bb      	ldrh	r3, [r7, #4]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800667a:	8b3a      	ldrh	r2, [r7, #24]
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	429a      	cmp	r2, r3
 8006680:	d901      	bls.n	8006686 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006686:	8b7b      	ldrh	r3, [r7, #26]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	18d0      	adds	r0, r2, r3
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	88bb      	ldrh	r3, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	8b3a      	ldrh	r2, [r7, #24]
 8006696:	4619      	mov	r1, r3
 8006698:	f008 ffeb 	bl	800f672 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800669c:	8afa      	ldrh	r2, [r7, #22]
 800669e:	8b3b      	ldrh	r3, [r7, #24]
 80066a0:	4413      	add	r3, r2
 80066a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80066a4:	8b7a      	ldrh	r2, [r7, #26]
 80066a6:	8b3b      	ldrh	r3, [r7, #24]
 80066a8:	4413      	add	r3, r2
 80066aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	8b3b      	ldrh	r3, [r7, #24]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <pbuf_copy_partial+0xca>
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1c4      	bne.n	8006654 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80066ca:	8afb      	ldrh	r3, [r7, #22]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	080108cc 	.word	0x080108cc
 80066d8:	08010c14 	.word	0x08010c14
 80066dc:	0801092c 	.word	0x0801092c
 80066e0:	08010c34 	.word	0x08010c34

080066e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	603a      	str	r2, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
 80066f0:	460b      	mov	r3, r1
 80066f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	8919      	ldrh	r1, [r3, #8]
 80066f8:	88ba      	ldrh	r2, [r7, #4]
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fab1 	bl	8005c64 <pbuf_alloc>
 8006702:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <pbuf_clone+0x2a>
    return NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	e011      	b.n	8006732 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fea3 	bl	800645c <pbuf_copy>
 8006716:	4603      	mov	r3, r0
 8006718:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800671a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d006      	beq.n	8006730 <pbuf_clone+0x4c>
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <pbuf_clone+0x58>)
 8006724:	f240 5224 	movw	r2, #1316	; 0x524
 8006728:	4905      	ldr	r1, [pc, #20]	; (8006740 <pbuf_clone+0x5c>)
 800672a:	4806      	ldr	r0, [pc, #24]	; (8006744 <pbuf_clone+0x60>)
 800672c:	f008 fec6 	bl	800f4bc <iprintf>
  return q;
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	080108cc 	.word	0x080108cc
 8006740:	08010d40 	.word	0x08010d40
 8006744:	0801092c 	.word	0x0801092c

08006748 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800674c:	f008 fdb6 	bl	800f2bc <rand>
 8006750:	4603      	mov	r3, r0
 8006752:	b29b      	uxth	r3, r3
 8006754:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006758:	b29b      	uxth	r3, r3
 800675a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800675e:	b29a      	uxth	r2, r3
 8006760:	4b01      	ldr	r3, [pc, #4]	; (8006768 <tcp_init+0x20>)
 8006762:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000020 	.word	0x20000020

0800676c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7d1b      	ldrb	r3, [r3, #20]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d105      	bne.n	8006788 <tcp_free+0x1c>
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <tcp_free+0x2c>)
 800677e:	22d4      	movs	r2, #212	; 0xd4
 8006780:	4906      	ldr	r1, [pc, #24]	; (800679c <tcp_free+0x30>)
 8006782:	4807      	ldr	r0, [pc, #28]	; (80067a0 <tcp_free+0x34>)
 8006784:	f008 fe9a 	bl	800f4bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	2001      	movs	r0, #1
 800678c:	f7fe fed8 	bl	8005540 <memp_free>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08010dcc 	.word	0x08010dcc
 800679c:	08010dfc 	.word	0x08010dfc
 80067a0:	08010e10 	.word	0x08010e10

080067a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	7d1b      	ldrb	r3, [r3, #20]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <tcp_free_listen+0x1c>
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <tcp_free_listen+0x2c>)
 80067b6:	22df      	movs	r2, #223	; 0xdf
 80067b8:	4906      	ldr	r1, [pc, #24]	; (80067d4 <tcp_free_listen+0x30>)
 80067ba:	4807      	ldr	r0, [pc, #28]	; (80067d8 <tcp_free_listen+0x34>)
 80067bc:	f008 fe7e 	bl	800f4bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	2002      	movs	r0, #2
 80067c4:	f7fe febc 	bl	8005540 <memp_free>
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	08010dcc 	.word	0x08010dcc
 80067d4:	08010e38 	.word	0x08010e38
 80067d8:	08010e10 	.word	0x08010e10

080067dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80067e0:	f001 f85c 	bl	800789c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <tcp_tmr+0x28>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <tcp_tmr+0x28>)
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <tcp_tmr+0x28>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80067fc:	f000 fd0e 	bl	800721c <tcp_slowtmr>
  }
}
 8006800:	bf00      	nop
 8006802:	bd80      	pop	{r7, pc}
 8006804:	200082b1 	.word	0x200082b1

08006808 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <tcp_remove_listener+0x1c>
 8006818:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <tcp_remove_listener+0x48>)
 800681a:	22ff      	movs	r2, #255	; 0xff
 800681c:	490d      	ldr	r1, [pc, #52]	; (8006854 <tcp_remove_listener+0x4c>)
 800681e:	480e      	ldr	r0, [pc, #56]	; (8006858 <tcp_remove_listener+0x50>)
 8006820:	f008 fe4c 	bl	800f4bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e00a      	b.n	8006840 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d102      	bne.n	800683a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f1      	bne.n	800682a <tcp_remove_listener+0x22>
    }
  }
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	08010dcc 	.word	0x08010dcc
 8006854:	08010e54 	.word	0x08010e54
 8006858:	08010e10 	.word	0x08010e10

0800685c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <tcp_listen_closed+0x1c>
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <tcp_listen_closed+0x60>)
 800686c:	f240 1211 	movw	r2, #273	; 0x111
 8006870:	4913      	ldr	r1, [pc, #76]	; (80068c0 <tcp_listen_closed+0x64>)
 8006872:	4814      	ldr	r0, [pc, #80]	; (80068c4 <tcp_listen_closed+0x68>)
 8006874:	f008 fe22 	bl	800f4bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7d1b      	ldrb	r3, [r3, #20]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d006      	beq.n	800688e <tcp_listen_closed+0x32>
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <tcp_listen_closed+0x60>)
 8006882:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006886:	4910      	ldr	r1, [pc, #64]	; (80068c8 <tcp_listen_closed+0x6c>)
 8006888:	480e      	ldr	r0, [pc, #56]	; (80068c4 <tcp_listen_closed+0x68>)
 800688a:	f008 fe17 	bl	800f4bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800688e:	2301      	movs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e00b      	b.n	80068ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006894:	4a0d      	ldr	r2, [pc, #52]	; (80068cc <tcp_listen_closed+0x70>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff ffb1 	bl	8006808 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d9f0      	bls.n	8006894 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08010dcc 	.word	0x08010dcc
 80068c0:	08010e7c 	.word	0x08010e7c
 80068c4:	08010e10 	.word	0x08010e10
 80068c8:	08010e88 	.word	0x08010e88
 80068cc:	08012dac 	.word	0x08012dac

080068d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80068d0:	b5b0      	push	{r4, r5, r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <tcp_close_shutdown+0x20>
 80068e2:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <tcp_close_shutdown+0x1a0>)
 80068e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80068e8:	4962      	ldr	r1, [pc, #392]	; (8006a74 <tcp_close_shutdown+0x1a4>)
 80068ea:	4863      	ldr	r0, [pc, #396]	; (8006a78 <tcp_close_shutdown+0x1a8>)
 80068ec:	f008 fde6 	bl	800f4bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d066      	beq.n	80069c4 <tcp_close_shutdown+0xf4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7d1b      	ldrb	r3, [r3, #20]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d003      	beq.n	8006906 <tcp_close_shutdown+0x36>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	2b07      	cmp	r3, #7
 8006904:	d15e      	bne.n	80069c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <tcp_close_shutdown+0x48>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006916:	d055      	beq.n	80069c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8b5b      	ldrh	r3, [r3, #26]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <tcp_close_shutdown+0x62>
 8006924:	4b52      	ldr	r3, [pc, #328]	; (8006a70 <tcp_close_shutdown+0x1a0>)
 8006926:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800692a:	4954      	ldr	r1, [pc, #336]	; (8006a7c <tcp_close_shutdown+0x1ac>)
 800692c:	4852      	ldr	r0, [pc, #328]	; (8006a78 <tcp_close_shutdown+0x1a8>)
 800692e:	f008 fdc5 	bl	800f4bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800693a:	687d      	ldr	r5, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	8ad2      	ldrh	r2, [r2, #22]
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	8b09      	ldrh	r1, [r1, #24]
 8006948:	9102      	str	r1, [sp, #8]
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	462b      	mov	r3, r5
 8006950:	4622      	mov	r2, r4
 8006952:	4601      	mov	r1, r0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f005 fd25 	bl	800c3a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fb02 	bl	8007f64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006960:	4b47      	ldr	r3, [pc, #284]	; (8006a80 <tcp_close_shutdown+0x1b0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d105      	bne.n	8006976 <tcp_close_shutdown+0xa6>
 800696a:	4b45      	ldr	r3, [pc, #276]	; (8006a80 <tcp_close_shutdown+0x1b0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a43      	ldr	r2, [pc, #268]	; (8006a80 <tcp_close_shutdown+0x1b0>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	e013      	b.n	800699e <tcp_close_shutdown+0xce>
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <tcp_close_shutdown+0x1b0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e00c      	b.n	8006998 <tcp_close_shutdown+0xc8>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d104      	bne.n	8006992 <tcp_close_shutdown+0xc2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	e005      	b.n	800699e <tcp_close_shutdown+0xce>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1ef      	bne.n	800697e <tcp_close_shutdown+0xae>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <tcp_close_shutdown+0x1b4>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80069aa:	4b37      	ldr	r3, [pc, #220]	; (8006a88 <tcp_close_shutdown+0x1b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d102      	bne.n	80069ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80069b4:	f003 ff9a 	bl	800a8ec <tcp_trigger_input_pcb_close>
 80069b8:	e002      	b.n	80069c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fed6 	bl	800676c <tcp_free>
      }
      return ERR_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e050      	b.n	8006a66 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7d1b      	ldrb	r3, [r3, #20]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d03b      	beq.n	8006a44 <tcp_close_shutdown+0x174>
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	dc44      	bgt.n	8006a5a <tcp_close_shutdown+0x18a>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <tcp_close_shutdown+0x10a>
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d02a      	beq.n	8006a2e <tcp_close_shutdown+0x15e>
 80069d8:	e03f      	b.n	8006a5a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8adb      	ldrh	r3, [r3, #22]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d021      	beq.n	8006a26 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <tcp_close_shutdown+0x1bc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d105      	bne.n	80069f8 <tcp_close_shutdown+0x128>
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <tcp_close_shutdown+0x1bc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <tcp_close_shutdown+0x1bc>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e013      	b.n	8006a20 <tcp_close_shutdown+0x150>
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <tcp_close_shutdown+0x1bc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	e00c      	b.n	8006a1a <tcp_close_shutdown+0x14a>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d104      	bne.n	8006a14 <tcp_close_shutdown+0x144>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e005      	b.n	8006a20 <tcp_close_shutdown+0x150>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1ef      	bne.n	8006a00 <tcp_close_shutdown+0x130>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fea0 	bl	800676c <tcp_free>
      break;
 8006a2c:	e01a      	b.n	8006a64 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ff14 	bl	800685c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4816      	ldr	r0, [pc, #88]	; (8006a90 <tcp_close_shutdown+0x1c0>)
 8006a38:	f001 fae4 	bl	8008004 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff feb1 	bl	80067a4 <tcp_free_listen>
      break;
 8006a42:	e00f      	b.n	8006a64 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	480e      	ldr	r0, [pc, #56]	; (8006a80 <tcp_close_shutdown+0x1b0>)
 8006a48:	f001 fadc 	bl	8008004 <tcp_pcb_remove>
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <tcp_close_shutdown+0x1b4>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fe8a 	bl	800676c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a58:	e004      	b.n	8006a64 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f81a 	bl	8006a94 <tcp_close_shutdown_fin>
 8006a60:	4603      	mov	r3, r0
 8006a62:	e000      	b.n	8006a66 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	08010dcc 	.word	0x08010dcc
 8006a74:	08010ea0 	.word	0x08010ea0
 8006a78:	08010e10 	.word	0x08010e10
 8006a7c:	08010ec0 	.word	0x08010ec0
 8006a80:	200082a8 	.word	0x200082a8
 8006a84:	200082b0 	.word	0x200082b0
 8006a88:	200082e8 	.word	0x200082e8
 8006a8c:	200082a0 	.word	0x200082a0
 8006a90:	200082a4 	.word	0x200082a4

08006a94 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <tcp_close_shutdown_fin+0x1c>
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <tcp_close_shutdown_fin+0xc8>)
 8006aa4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006aa8:	492d      	ldr	r1, [pc, #180]	; (8006b60 <tcp_close_shutdown_fin+0xcc>)
 8006aaa:	482e      	ldr	r0, [pc, #184]	; (8006b64 <tcp_close_shutdown_fin+0xd0>)
 8006aac:	f008 fd06 	bl	800f4bc <iprintf>

  switch (pcb->state) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7d1b      	ldrb	r3, [r3, #20]
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	d020      	beq.n	8006afa <tcp_close_shutdown_fin+0x66>
 8006ab8:	2b07      	cmp	r3, #7
 8006aba:	dc2b      	bgt.n	8006b14 <tcp_close_shutdown_fin+0x80>
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d002      	beq.n	8006ac6 <tcp_close_shutdown_fin+0x32>
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d00d      	beq.n	8006ae0 <tcp_close_shutdown_fin+0x4c>
 8006ac4:	e026      	b.n	8006b14 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f004 fd7a 	bl	800b5c0 <tcp_send_fin>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11f      	bne.n	8006b18 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2205      	movs	r2, #5
 8006adc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ade:	e01b      	b.n	8006b18 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f004 fd6d 	bl	800b5c0 <tcp_send_fin>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d114      	bne.n	8006b1c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2205      	movs	r2, #5
 8006af6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006af8:	e010      	b.n	8006b1c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f004 fd60 	bl	800b5c0 <tcp_send_fin>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2209      	movs	r2, #9
 8006b10:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b12:	e005      	b.n	8006b20 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e01c      	b.n	8006b52 <tcp_close_shutdown_fin+0xbe>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <tcp_close_shutdown_fin+0x8e>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <tcp_close_shutdown_fin+0x8e>
      break;
 8006b20:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f004 fe86 	bl	800b83c <tcp_output>
 8006b30:	e00d      	b.n	8006b4e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d108      	bne.n	8006b4e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8b5b      	ldrh	r3, [r3, #26]
 8006b40:	f043 0308 	orr.w	r3, r3, #8
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e001      	b.n	8006b52 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08010dcc 	.word	0x08010dcc
 8006b60:	08010e7c 	.word	0x08010e7c
 8006b64:	08010e10 	.word	0x08010e10

08006b68 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <tcp_close+0x22>
 8006b76:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <tcp_close+0x4c>)
 8006b78:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006b7c:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <tcp_close+0x50>)
 8006b7e:	480f      	ldr	r0, [pc, #60]	; (8006bbc <tcp_close+0x54>)
 8006b80:	f008 fc9c 	bl	800f4bc <iprintf>
 8006b84:	f06f 030f 	mvn.w	r3, #15
 8006b88:	e00f      	b.n	8006baa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7d1b      	ldrb	r3, [r3, #20]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d006      	beq.n	8006ba0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8b5b      	ldrh	r3, [r3, #26]
 8006b96:	f043 0310 	orr.w	r3, r3, #16
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fe94 	bl	80068d0 <tcp_close_shutdown>
 8006ba8:	4603      	mov	r3, r0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08010dcc 	.word	0x08010dcc
 8006bb8:	08010edc 	.word	0x08010edc
 8006bbc:	08010e10 	.word	0x08010e10

08006bc0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af04      	add	r7, sp, #16
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d107      	bne.n	8006be0 <tcp_abandon+0x20>
 8006bd0:	4b52      	ldr	r3, [pc, #328]	; (8006d1c <tcp_abandon+0x15c>)
 8006bd2:	f240 223d 	movw	r2, #573	; 0x23d
 8006bd6:	4952      	ldr	r1, [pc, #328]	; (8006d20 <tcp_abandon+0x160>)
 8006bd8:	4852      	ldr	r0, [pc, #328]	; (8006d24 <tcp_abandon+0x164>)
 8006bda:	f008 fc6f 	bl	800f4bc <iprintf>
 8006bde:	e099      	b.n	8006d14 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d106      	bne.n	8006bf6 <tcp_abandon+0x36>
 8006be8:	4b4c      	ldr	r3, [pc, #304]	; (8006d1c <tcp_abandon+0x15c>)
 8006bea:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006bee:	494e      	ldr	r1, [pc, #312]	; (8006d28 <tcp_abandon+0x168>)
 8006bf0:	484c      	ldr	r0, [pc, #304]	; (8006d24 <tcp_abandon+0x164>)
 8006bf2:	f008 fc63 	bl	800f4bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7d1b      	ldrb	r3, [r3, #20]
 8006bfa:	2b0a      	cmp	r3, #10
 8006bfc:	d107      	bne.n	8006c0e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	484a      	ldr	r0, [pc, #296]	; (8006d2c <tcp_abandon+0x16c>)
 8006c02:	f001 f9ff 	bl	8008004 <tcp_pcb_remove>
    tcp_free(pcb);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fdb0 	bl	800676c <tcp_free>
 8006c0c:	e082      	b.n	8006d14 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7d1b      	ldrb	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d126      	bne.n	8006c86 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8adb      	ldrh	r3, [r3, #22]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d02e      	beq.n	8006c9e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c40:	4b3b      	ldr	r3, [pc, #236]	; (8006d30 <tcp_abandon+0x170>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d105      	bne.n	8006c56 <tcp_abandon+0x96>
 8006c4a:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <tcp_abandon+0x170>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a37      	ldr	r2, [pc, #220]	; (8006d30 <tcp_abandon+0x170>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e013      	b.n	8006c7e <tcp_abandon+0xbe>
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <tcp_abandon+0x170>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e00c      	b.n	8006c78 <tcp_abandon+0xb8>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d104      	bne.n	8006c72 <tcp_abandon+0xb2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e005      	b.n	8006c7e <tcp_abandon+0xbe>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ef      	bne.n	8006c5e <tcp_abandon+0x9e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	60da      	str	r2, [r3, #12]
 8006c84:	e00b      	b.n	8006c9e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8adb      	ldrh	r3, [r3, #22]
 8006c8e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4828      	ldr	r0, [pc, #160]	; (8006d34 <tcp_abandon+0x174>)
 8006c94:	f001 f9b6 	bl	8008004 <tcp_pcb_remove>
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <tcp_abandon+0x178>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fed6 	bl	8007a5c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fecd 	bl	8007a5c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fec4 	bl	8007a5c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	8b12      	ldrh	r2, [r2, #24]
 8006ce4:	9202      	str	r2, [sp, #8]
 8006ce6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	460b      	mov	r3, r1
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f005 fb56 	bl	800c3a4 <tcp_rst>
    }
    last_state = pcb->state;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7d1b      	ldrb	r3, [r3, #20]
 8006cfc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fd34 	bl	800676c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <tcp_abandon+0x154>
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f06f 010c 	mvn.w	r1, #12
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	4798      	blx	r3
  }
}
 8006d14:	3728      	adds	r7, #40	; 0x28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08010dcc 	.word	0x08010dcc
 8006d20:	08010f10 	.word	0x08010f10
 8006d24:	08010e10 	.word	0x08010e10
 8006d28:	08010f2c 	.word	0x08010f2c
 8006d2c:	200082ac 	.word	0x200082ac
 8006d30:	200082a0 	.word	0x200082a0
 8006d34:	200082a8 	.word	0x200082a8
 8006d38:	200082b0 	.word	0x200082b0

08006d3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006d44:	2101      	movs	r1, #1
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ff3a 	bl	8006bc0 <tcp_abandon>
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006d62:	2304      	movs	r3, #4
 8006d64:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	; (8006e68 <tcp_bind+0x114>)
 8006d6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <tcp_bind+0x36>
 8006d76:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <tcp_bind+0x118>)
 8006d78:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006d7c:	493c      	ldr	r1, [pc, #240]	; (8006e70 <tcp_bind+0x11c>)
 8006d7e:	483d      	ldr	r0, [pc, #244]	; (8006e74 <tcp_bind+0x120>)
 8006d80:	f008 fb9c 	bl	800f4bc <iprintf>
 8006d84:	f06f 030f 	mvn.w	r3, #15
 8006d88:	e06a      	b.n	8006e60 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	7d1b      	ldrb	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <tcp_bind+0x52>
 8006d92:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <tcp_bind+0x118>)
 8006d94:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006d98:	4937      	ldr	r1, [pc, #220]	; (8006e78 <tcp_bind+0x124>)
 8006d9a:	4836      	ldr	r0, [pc, #216]	; (8006e74 <tcp_bind+0x120>)
 8006d9c:	f008 fb8e 	bl	800f4bc <iprintf>
 8006da0:	f06f 0305 	mvn.w	r3, #5
 8006da4:	e05c      	b.n	8006e60 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006dac:	f000 f9f0 	bl	8007190 <tcp_new_port>
 8006db0:	4603      	mov	r3, r0
 8006db2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d135      	bne.n	8006e26 <tcp_bind+0xd2>
      return ERR_BUF;
 8006dba:	f06f 0301 	mvn.w	r3, #1
 8006dbe:	e04f      	b.n	8006e60 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e02b      	b.n	8006e1e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006dc6:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <tcp_bind+0x128>)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e01e      	b.n	8006e12 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	8adb      	ldrh	r3, [r3, #22]
 8006dd8:	88fa      	ldrh	r2, [r7, #6]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d116      	bne.n	8006e0c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006dde:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00c      	beq.n	8006e06 <tcp_bind+0xb2>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d102      	bne.n	8006e0c <tcp_bind+0xb8>
              return ERR_USE;
 8006e06:	f06f 0307 	mvn.w	r3, #7
 8006e0a:	e029      	b.n	8006e60 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1dd      	bne.n	8006dd4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	dbcf      	blt.n	8006dc6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00c      	beq.n	8006e46 <tcp_bind+0xf2>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <tcp_bind+0xec>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	e000      	b.n	8006e42 <tcp_bind+0xee>
 8006e40:	2300      	movs	r3, #0
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <tcp_bind+0x12c>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	60da      	str	r2, [r3, #12]
 8006e54:	4a0a      	ldr	r2, [pc, #40]	; (8006e80 <tcp_bind+0x12c>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	f005 fc65 	bl	800c728 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	08012dd4 	.word	0x08012dd4
 8006e6c:	08010dcc 	.word	0x08010dcc
 8006e70:	08010f60 	.word	0x08010f60
 8006e74:	08010e10 	.word	0x08010e10
 8006e78:	08010f78 	.word	0x08010f78
 8006e7c:	08012dac 	.word	0x08012dac
 8006e80:	200082a0 	.word	0x200082a0

08006e84 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <tcp_accept_null+0x22>
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <tcp_accept_null+0x34>)
 8006e9a:	f240 320f 	movw	r2, #783	; 0x30f
 8006e9e:	4907      	ldr	r1, [pc, #28]	; (8006ebc <tcp_accept_null+0x38>)
 8006ea0:	4807      	ldr	r0, [pc, #28]	; (8006ec0 <tcp_accept_null+0x3c>)
 8006ea2:	f008 fb0b 	bl	800f4bc <iprintf>

  tcp_abort(pcb);
 8006ea6:	68b8      	ldr	r0, [r7, #8]
 8006ea8:	f7ff ff48 	bl	8006d3c <tcp_abort>

  return ERR_ABRT;
 8006eac:	f06f 030c 	mvn.w	r3, #12
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	08010dcc 	.word	0x08010dcc
 8006ebc:	08010fa0 	.word	0x08010fa0
 8006ec0:	08010e10 	.word	0x08010e10

08006ec4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f806 	bl	8006ee8 <tcp_listen_with_backlog_and_err>
 8006edc:	4603      	mov	r3, r0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <tcp_listen_with_backlog_and_err+0x2c>
 8006f00:	4b47      	ldr	r3, [pc, #284]	; (8007020 <tcp_listen_with_backlog_and_err+0x138>)
 8006f02:	f240 3259 	movw	r2, #857	; 0x359
 8006f06:	4947      	ldr	r1, [pc, #284]	; (8007024 <tcp_listen_with_backlog_and_err+0x13c>)
 8006f08:	4847      	ldr	r0, [pc, #284]	; (8007028 <tcp_listen_with_backlog_and_err+0x140>)
 8006f0a:	f008 fad7 	bl	800f4bc <iprintf>
 8006f0e:	23f0      	movs	r3, #240	; 0xf0
 8006f10:	76fb      	strb	r3, [r7, #27]
 8006f12:	e079      	b.n	8007008 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	7d1b      	ldrb	r3, [r3, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <tcp_listen_with_backlog_and_err+0x48>
 8006f1c:	4b40      	ldr	r3, [pc, #256]	; (8007020 <tcp_listen_with_backlog_and_err+0x138>)
 8006f1e:	f240 325a 	movw	r2, #858	; 0x35a
 8006f22:	4942      	ldr	r1, [pc, #264]	; (800702c <tcp_listen_with_backlog_and_err+0x144>)
 8006f24:	4840      	ldr	r0, [pc, #256]	; (8007028 <tcp_listen_with_backlog_and_err+0x140>)
 8006f26:	f008 fac9 	bl	800f4bc <iprintf>
 8006f2a:	23f1      	movs	r3, #241	; 0xf1
 8006f2c:	76fb      	strb	r3, [r7, #27]
 8006f2e:	e06b      	b.n	8007008 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7d1b      	ldrb	r3, [r3, #20]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d104      	bne.n	8006f42 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006f3c:	23f7      	movs	r3, #247	; 0xf7
 8006f3e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006f40:	e062      	b.n	8007008 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006f42:	2002      	movs	r0, #2
 8006f44:	f7fe fa8c 	bl	8005460 <memp_malloc>
 8006f48:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006f50:	23ff      	movs	r3, #255	; 0xff
 8006f52:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006f54:	e058      	b.n	8007008 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8ada      	ldrh	r2, [r3, #22]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	7d5a      	ldrb	r2, [r3, #21]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7a5a      	ldrb	r2, [r3, #9]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	7ada      	ldrb	r2, [r3, #11]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7a9a      	ldrb	r2, [r3, #10]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8adb      	ldrh	r3, [r3, #22]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d021      	beq.n	8006fe6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006fa2:	4b23      	ldr	r3, [pc, #140]	; (8007030 <tcp_listen_with_backlog_and_err+0x148>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d105      	bne.n	8006fb8 <tcp_listen_with_backlog_and_err+0xd0>
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <tcp_listen_with_backlog_and_err+0x148>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4a1f      	ldr	r2, [pc, #124]	; (8007030 <tcp_listen_with_backlog_and_err+0x148>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e013      	b.n	8006fe0 <tcp_listen_with_backlog_and_err+0xf8>
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <tcp_listen_with_backlog_and_err+0x148>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e00c      	b.n	8006fda <tcp_listen_with_backlog_and_err+0xf2>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d104      	bne.n	8006fd4 <tcp_listen_with_backlog_and_err+0xec>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	e005      	b.n	8006fe0 <tcp_listen_with_backlog_and_err+0xf8>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ef      	bne.n	8006fc0 <tcp_listen_with_backlog_and_err+0xd8>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fbc0 	bl	800676c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4a11      	ldr	r2, [pc, #68]	; (8007034 <tcp_listen_with_backlog_and_err+0x14c>)
 8006ff0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <tcp_listen_with_backlog_and_err+0x150>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	60da      	str	r2, [r3, #12]
 8006ffa:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <tcp_listen_with_backlog_and_err+0x150>)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	f005 fb92 	bl	800c728 <tcp_timer_needed>
  res = ERR_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7efa      	ldrb	r2, [r7, #27]
 8007012:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007014:	69fb      	ldr	r3, [r7, #28]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	08010dcc 	.word	0x08010dcc
 8007024:	08010fc0 	.word	0x08010fc0
 8007028:	08010e10 	.word	0x08010e10
 800702c:	08010ff0 	.word	0x08010ff0
 8007030:	200082a0 	.word	0x200082a0
 8007034:	08006e85 	.word	0x08006e85
 8007038:	200082a4 	.word	0x200082a4

0800703c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <tcp_update_rcv_ann_wnd+0x1c>
 800704a:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800704c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007050:	4924      	ldr	r1, [pc, #144]	; (80070e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007052:	4825      	ldr	r0, [pc, #148]	; (80070e8 <tcp_update_rcv_ann_wnd+0xac>)
 8007054:	f008 fa32 	bl	800f4bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007060:	4413      	add	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800706c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007070:	bf28      	it	cs
 8007072:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007076:	b292      	uxth	r2, r2
 8007078:	4413      	add	r3, r2
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	db08      	blt.n	8007094 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	e020      	b.n	80070d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	dd03      	ble.n	80070aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070a8:	e014      	b.n	80070d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070bc:	d306      	bcc.n	80070cc <tcp_update_rcv_ann_wnd+0x90>
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80070c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80070c4:	4909      	ldr	r1, [pc, #36]	; (80070ec <tcp_update_rcv_ann_wnd+0xb0>)
 80070c6:	4808      	ldr	r0, [pc, #32]	; (80070e8 <tcp_update_rcv_ann_wnd+0xac>)
 80070c8:	f008 f9f8 	bl	800f4bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80070d4:	2300      	movs	r3, #0
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	08010dcc 	.word	0x08010dcc
 80070e4:	08011028 	.word	0x08011028
 80070e8:	08010e10 	.word	0x08010e10
 80070ec:	0801104c 	.word	0x0801104c

080070f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <tcp_recved+0x22>
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <tcp_recved+0x90>)
 8007104:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007108:	491e      	ldr	r1, [pc, #120]	; (8007184 <tcp_recved+0x94>)
 800710a:	481f      	ldr	r0, [pc, #124]	; (8007188 <tcp_recved+0x98>)
 800710c:	f008 f9d6 	bl	800f4bc <iprintf>
 8007110:	e032      	b.n	8007178 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7d1b      	ldrb	r3, [r3, #20]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d106      	bne.n	8007128 <tcp_recved+0x38>
 800711a:	4b19      	ldr	r3, [pc, #100]	; (8007180 <tcp_recved+0x90>)
 800711c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007120:	491a      	ldr	r1, [pc, #104]	; (800718c <tcp_recved+0x9c>)
 8007122:	4819      	ldr	r0, [pc, #100]	; (8007188 <tcp_recved+0x98>)
 8007124:	f008 f9ca 	bl	800f4bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	4413      	add	r3, r2
 8007130:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007138:	d804      	bhi.n	8007144 <tcp_recved+0x54>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713e:	89fa      	ldrh	r2, [r7, #14]
 8007140:	429a      	cmp	r2, r3
 8007142:	d204      	bcs.n	800714e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800714a:	851a      	strh	r2, [r3, #40]	; 0x28
 800714c:	e002      	b.n	8007154 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	89fa      	ldrh	r2, [r7, #14]
 8007152:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff71 	bl	800703c <tcp_update_rcv_ann_wnd>
 800715a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007162:	d309      	bcc.n	8007178 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8b5b      	ldrh	r3, [r3, #26]
 8007168:	f043 0302 	orr.w	r3, r3, #2
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f004 fb62 	bl	800b83c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	08010dcc 	.word	0x08010dcc
 8007184:	08011068 	.word	0x08011068
 8007188:	08010e10 	.word	0x08010e10
 800718c:	08011080 	.word	0x08011080

08007190 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <tcp_new_port+0x84>)
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	3301      	adds	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <tcp_new_port+0x84>)
 80071a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80071a6:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <tcp_new_port+0x84>)
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d103      	bne.n	80071ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <tcp_new_port+0x84>)
 80071b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80071b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071ba:	2300      	movs	r3, #0
 80071bc:	71fb      	strb	r3, [r7, #7]
 80071be:	e01e      	b.n	80071fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	4a15      	ldr	r2, [pc, #84]	; (8007218 <tcp_new_port+0x88>)
 80071c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	e011      	b.n	80071f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	8ada      	ldrh	r2, [r3, #22]
 80071d2:	4b10      	ldr	r3, [pc, #64]	; (8007214 <tcp_new_port+0x84>)
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d108      	bne.n	80071ec <tcp_new_port+0x5c>
        n++;
 80071da:	88bb      	ldrh	r3, [r7, #4]
 80071dc:	3301      	adds	r3, #1
 80071de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80071e0:	88bb      	ldrh	r3, [r7, #4]
 80071e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e6:	d3d8      	bcc.n	800719a <tcp_new_port+0xa>
          return 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e00d      	b.n	8007208 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ea      	bne.n	80071ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	3301      	adds	r3, #1
 80071fc:	71fb      	strb	r3, [r7, #7]
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	2b03      	cmp	r3, #3
 8007202:	d9dd      	bls.n	80071c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <tcp_new_port+0x84>)
 8007206:	881b      	ldrh	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000020 	.word	0x20000020
 8007218:	08012dac 	.word	0x08012dac

0800721c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800721c:	b5b0      	push	{r4, r5, r7, lr}
 800721e:	b090      	sub	sp, #64	; 0x40
 8007220:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007228:	4b94      	ldr	r3, [pc, #592]	; (800747c <tcp_slowtmr+0x260>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a93      	ldr	r2, [pc, #588]	; (800747c <tcp_slowtmr+0x260>)
 8007230:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007232:	4b93      	ldr	r3, [pc, #588]	; (8007480 <tcp_slowtmr+0x264>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	4b91      	ldr	r3, [pc, #580]	; (8007480 <tcp_slowtmr+0x264>)
 800723c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007242:	4b90      	ldr	r3, [pc, #576]	; (8007484 <tcp_slowtmr+0x268>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007248:	e29f      	b.n	800778a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	7d1b      	ldrb	r3, [r3, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <tcp_slowtmr+0x44>
 8007252:	4b8d      	ldr	r3, [pc, #564]	; (8007488 <tcp_slowtmr+0x26c>)
 8007254:	f240 42be 	movw	r2, #1214	; 0x4be
 8007258:	498c      	ldr	r1, [pc, #560]	; (800748c <tcp_slowtmr+0x270>)
 800725a:	488d      	ldr	r0, [pc, #564]	; (8007490 <tcp_slowtmr+0x274>)
 800725c:	f008 f92e 	bl	800f4bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	7d1b      	ldrb	r3, [r3, #20]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d106      	bne.n	8007276 <tcp_slowtmr+0x5a>
 8007268:	4b87      	ldr	r3, [pc, #540]	; (8007488 <tcp_slowtmr+0x26c>)
 800726a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800726e:	4989      	ldr	r1, [pc, #548]	; (8007494 <tcp_slowtmr+0x278>)
 8007270:	4887      	ldr	r0, [pc, #540]	; (8007490 <tcp_slowtmr+0x274>)
 8007272:	f008 f923 	bl	800f4bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	7d1b      	ldrb	r3, [r3, #20]
 800727a:	2b0a      	cmp	r3, #10
 800727c:	d106      	bne.n	800728c <tcp_slowtmr+0x70>
 800727e:	4b82      	ldr	r3, [pc, #520]	; (8007488 <tcp_slowtmr+0x26c>)
 8007280:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007284:	4984      	ldr	r1, [pc, #528]	; (8007498 <tcp_slowtmr+0x27c>)
 8007286:	4882      	ldr	r0, [pc, #520]	; (8007490 <tcp_slowtmr+0x274>)
 8007288:	f008 f918 	bl	800f4bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	7f9a      	ldrb	r2, [r3, #30]
 8007290:	4b7b      	ldr	r3, [pc, #492]	; (8007480 <tcp_slowtmr+0x264>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d105      	bne.n	80072a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80072a2:	e272      	b.n	800778a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80072a4:	4b76      	ldr	r3, [pc, #472]	; (8007480 <tcp_slowtmr+0x264>)
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d10a      	bne.n	80072d6 <tcp_slowtmr+0xba>
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d905      	bls.n	80072d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80072ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ce:	3301      	adds	r3, #1
 80072d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072d4:	e11e      	b.n	8007514 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072dc:	2b0b      	cmp	r3, #11
 80072de:	d905      	bls.n	80072ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e4:	3301      	adds	r3, #1
 80072e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072ea:	e113      	b.n	8007514 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d075      	beq.n	80073e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <tcp_slowtmr+0xf0>
 80072fe:	4b62      	ldr	r3, [pc, #392]	; (8007488 <tcp_slowtmr+0x26c>)
 8007300:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007304:	4965      	ldr	r1, [pc, #404]	; (800749c <tcp_slowtmr+0x280>)
 8007306:	4862      	ldr	r0, [pc, #392]	; (8007490 <tcp_slowtmr+0x274>)
 8007308:	f008 f8d8 	bl	800f4bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <tcp_slowtmr+0x106>
 8007314:	4b5c      	ldr	r3, [pc, #368]	; (8007488 <tcp_slowtmr+0x26c>)
 8007316:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800731a:	4961      	ldr	r1, [pc, #388]	; (80074a0 <tcp_slowtmr+0x284>)
 800731c:	485c      	ldr	r0, [pc, #368]	; (8007490 <tcp_slowtmr+0x274>)
 800731e:	f008 f8cd 	bl	800f4bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007328:	2b0b      	cmp	r3, #11
 800732a:	d905      	bls.n	8007338 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800732c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007330:	3301      	adds	r3, #1
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007336:	e0ed      	b.n	8007514 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800733e:	3b01      	subs	r3, #1
 8007340:	4a58      	ldr	r2, [pc, #352]	; (80074a4 <tcp_slowtmr+0x288>)
 8007342:	5cd3      	ldrb	r3, [r2, r3]
 8007344:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800734c:	7c7a      	ldrb	r2, [r7, #17]
 800734e:	429a      	cmp	r2, r3
 8007350:	d907      	bls.n	8007362 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007358:	3301      	adds	r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007368:	7c7a      	ldrb	r2, [r7, #17]
 800736a:	429a      	cmp	r2, r3
 800736c:	f200 80d2 	bhi.w	8007514 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007370:	2301      	movs	r3, #1
 8007372:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800737e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007380:	f005 f904 	bl	800c58c <tcp_zero_window_probe>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d014      	beq.n	80073b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800738a:	2300      	movs	r3, #0
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	e011      	b.n	80073b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007396:	4619      	mov	r1, r3
 8007398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739a:	f003 ffc9 	bl	800b330 <tcp_split_unsent_seg>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80073a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a6:	f004 fa49 	bl	800b83c <tcp_output>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80ac 	beq.w	8007514 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073ca:	2b06      	cmp	r3, #6
 80073cc:	f200 80a2 	bhi.w	8007514 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073d6:	3301      	adds	r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80073e0:	e098      	b.n	8007514 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db0f      	blt.n	800740c <tcp_slowtmr+0x1f0>
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d008      	beq.n	800740c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007400:	b29b      	uxth	r3, r3
 8007402:	3301      	adds	r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	b21a      	sxth	r2, r3
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007418:	429a      	cmp	r2, r3
 800741a:	db7b      	blt.n	8007514 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800741c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800741e:	f004 fd01 	bl	800be24 <tcp_rexmit_rto_prepare>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <tcp_slowtmr+0x21c>
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	2b00      	cmp	r3, #0
 800742e:	d171      	bne.n	8007514 <tcp_slowtmr+0x2f8>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d06d      	beq.n	8007514 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	7d1b      	ldrb	r3, [r3, #20]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d03a      	beq.n	80074b6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007446:	2b0c      	cmp	r3, #12
 8007448:	bf28      	it	cs
 800744a:	230c      	movcs	r3, #12
 800744c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007454:	10db      	asrs	r3, r3, #3
 8007456:	b21b      	sxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007460:	4413      	add	r3, r2
 8007462:	7efa      	ldrb	r2, [r7, #27]
 8007464:	4910      	ldr	r1, [pc, #64]	; (80074a8 <tcp_slowtmr+0x28c>)
 8007466:	5c8a      	ldrb	r2, [r1, r2]
 8007468:	4093      	lsls	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007472:	4293      	cmp	r3, r2
 8007474:	dc1a      	bgt.n	80074ac <tcp_slowtmr+0x290>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	b21a      	sxth	r2, r3
 800747a:	e019      	b.n	80074b0 <tcp_slowtmr+0x294>
 800747c:	2000829c 	.word	0x2000829c
 8007480:	200082b2 	.word	0x200082b2
 8007484:	200082a8 	.word	0x200082a8
 8007488:	08010dcc 	.word	0x08010dcc
 800748c:	08011110 	.word	0x08011110
 8007490:	08010e10 	.word	0x08010e10
 8007494:	0801113c 	.word	0x0801113c
 8007498:	08011168 	.word	0x08011168
 800749c:	08011198 	.word	0x08011198
 80074a0:	080111cc 	.word	0x080111cc
 80074a4:	08012da4 	.word	0x08012da4
 80074a8:	08012d94 	.word	0x08012d94
 80074ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2200      	movs	r2, #0
 80074ba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf28      	it	cs
 80074cc:	4613      	movcs	r3, r2
 80074ce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80074d0:	8a7b      	ldrh	r3, [r7, #18]
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d206      	bcs.n	80074fc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800750e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007510:	f004 fcf8 	bl	800bf04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	7d1b      	ldrb	r3, [r3, #20]
 8007518:	2b06      	cmp	r3, #6
 800751a:	d111      	bne.n	8007540 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	8b5b      	ldrh	r3, [r3, #26]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007528:	4b9d      	ldr	r3, [pc, #628]	; (80077a0 <tcp_slowtmr+0x584>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b28      	cmp	r3, #40	; 0x28
 8007534:	d904      	bls.n	8007540 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800753a:	3301      	adds	r3, #1
 800753c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	7a5b      	ldrb	r3, [r3, #9]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d04c      	beq.n	80075e6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007550:	2b04      	cmp	r3, #4
 8007552:	d003      	beq.n	800755c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007558:	2b07      	cmp	r3, #7
 800755a:	d144      	bne.n	80075e6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800755c:	4b90      	ldr	r3, [pc, #576]	; (80077a0 <tcp_slowtmr+0x584>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007570:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007574:	498b      	ldr	r1, [pc, #556]	; (80077a4 <tcp_slowtmr+0x588>)
 8007576:	fba1 1303 	umull	r1, r3, r1, r3
 800757a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800757c:	429a      	cmp	r2, r3
 800757e:	d90a      	bls.n	8007596 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800758a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758e:	3301      	adds	r3, #1
 8007590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007594:	e027      	b.n	80075e6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007596:	4b82      	ldr	r3, [pc, #520]	; (80077a0 <tcp_slowtmr+0x584>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075ac:	4618      	mov	r0, r3
 80075ae:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <tcp_slowtmr+0x58c>)
 80075b0:	fb00 f303 	mul.w	r3, r0, r3
 80075b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80075b6:	497b      	ldr	r1, [pc, #492]	; (80077a4 <tcp_slowtmr+0x588>)
 80075b8:	fba1 1303 	umull	r1, r3, r1, r3
 80075bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075be:	429a      	cmp	r2, r3
 80075c0:	d911      	bls.n	80075e6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80075c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c4:	f004 ffa2 	bl	800c50c <tcp_keepalive>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80075ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075dc:	3301      	adds	r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d011      	beq.n	8007612 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80075ee:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <tcp_slowtmr+0x584>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80075fe:	4619      	mov	r1, r3
 8007600:	460b      	mov	r3, r1
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	440b      	add	r3, r1
 8007606:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800760c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760e:	f000 fe5d 	bl	80082cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	7d1b      	ldrb	r3, [r3, #20]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d10b      	bne.n	8007632 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800761a:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <tcp_slowtmr+0x584>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b28      	cmp	r3, #40	; 0x28
 8007626:	d904      	bls.n	8007632 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762c:	3301      	adds	r3, #1
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	2b09      	cmp	r3, #9
 8007638:	d10b      	bne.n	8007652 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800763a:	4b59      	ldr	r3, [pc, #356]	; (80077a0 <tcp_slowtmr+0x584>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2bf0      	cmp	r3, #240	; 0xf0
 8007646:	d904      	bls.n	8007652 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764c:	3301      	adds	r3, #1
 800764e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007656:	2b00      	cmp	r3, #0
 8007658:	d060      	beq.n	800771c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007664:	f000 fc7e 	bl	8007f64 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800766e:	4b4f      	ldr	r3, [pc, #316]	; (80077ac <tcp_slowtmr+0x590>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d106      	bne.n	8007686 <tcp_slowtmr+0x46a>
 8007678:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <tcp_slowtmr+0x594>)
 800767a:	f240 526d 	movw	r2, #1389	; 0x56d
 800767e:	494d      	ldr	r1, [pc, #308]	; (80077b4 <tcp_slowtmr+0x598>)
 8007680:	484d      	ldr	r0, [pc, #308]	; (80077b8 <tcp_slowtmr+0x59c>)
 8007682:	f007 ff1b 	bl	800f4bc <iprintf>
        prev->next = pcb->next;
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e00f      	b.n	80076b0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <tcp_slowtmr+0x590>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007696:	429a      	cmp	r2, r3
 8007698:	d006      	beq.n	80076a8 <tcp_slowtmr+0x48c>
 800769a:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <tcp_slowtmr+0x594>)
 800769c:	f240 5271 	movw	r2, #1393	; 0x571
 80076a0:	4946      	ldr	r1, [pc, #280]	; (80077bc <tcp_slowtmr+0x5a0>)
 80076a2:	4845      	ldr	r0, [pc, #276]	; (80077b8 <tcp_slowtmr+0x59c>)
 80076a4:	f007 ff0a 	bl	800f4bc <iprintf>
        tcp_active_pcbs = pcb->next;
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a3f      	ldr	r2, [pc, #252]	; (80077ac <tcp_slowtmr+0x590>)
 80076ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80076b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	3304      	adds	r3, #4
 80076c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076c8:	8ad2      	ldrh	r2, [r2, #22]
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	8b09      	ldrh	r1, [r1, #24]
 80076ce:	9102      	str	r1, [sp, #8]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	4622      	mov	r2, r4
 80076d8:	4601      	mov	r1, r0
 80076da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076dc:	f004 fe62 	bl	800c3a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	7d1b      	ldrb	r3, [r3, #20]
 80076ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f7ff f838 	bl	800676c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80076fc:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <tcp_slowtmr+0x5a4>)
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <tcp_slowtmr+0x4f6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f06f 010c 	mvn.w	r1, #12
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007712:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d037      	beq.n	800778a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800771a:	e590      	b.n	800723e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	7f1b      	ldrb	r3, [r3, #28]
 800772a:	3301      	adds	r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	7f1a      	ldrb	r2, [r3, #28]
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	7f5b      	ldrb	r3, [r3, #29]
 800773a:	429a      	cmp	r2, r3
 800773c:	d325      	bcc.n	800778a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007744:	4b1e      	ldr	r3, [pc, #120]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <tcp_slowtmr+0x550>
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775c:	6912      	ldr	r2, [r2, #16]
 800775e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800776a:	e002      	b.n	8007772 <tcp_slowtmr+0x556>
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d000      	beq.n	800777c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800777a:	e560      	b.n	800723e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800777c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007786:	f004 f859 	bl	800b83c <tcp_output>
  while (pcb != NULL) {
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f47f ad5c 	bne.w	800724a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <tcp_slowtmr+0x5a8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800779c:	e067      	b.n	800786e <tcp_slowtmr+0x652>
 800779e:	bf00      	nop
 80077a0:	2000829c 	.word	0x2000829c
 80077a4:	10624dd3 	.word	0x10624dd3
 80077a8:	000124f8 	.word	0x000124f8
 80077ac:	200082a8 	.word	0x200082a8
 80077b0:	08010dcc 	.word	0x08010dcc
 80077b4:	08011204 	.word	0x08011204
 80077b8:	08010e10 	.word	0x08010e10
 80077bc:	08011230 	.word	0x08011230
 80077c0:	200082b0 	.word	0x200082b0
 80077c4:	200082ac 	.word	0x200082ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	7d1b      	ldrb	r3, [r3, #20]
 80077cc:	2b0a      	cmp	r3, #10
 80077ce:	d006      	beq.n	80077de <tcp_slowtmr+0x5c2>
 80077d0:	4b2b      	ldr	r3, [pc, #172]	; (8007880 <tcp_slowtmr+0x664>)
 80077d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80077d6:	492b      	ldr	r1, [pc, #172]	; (8007884 <tcp_slowtmr+0x668>)
 80077d8:	482b      	ldr	r0, [pc, #172]	; (8007888 <tcp_slowtmr+0x66c>)
 80077da:	f007 fe6f 	bl	800f4bc <iprintf>
    pcb_remove = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077e4:	4b29      	ldr	r3, [pc, #164]	; (800788c <tcp_slowtmr+0x670>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2bf0      	cmp	r3, #240	; 0xf0
 80077f0:	d904      	bls.n	80077fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80077f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f6:	3301      	adds	r3, #1
 80077f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80077fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007806:	f000 fbad 	bl	8007f64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <tcp_slowtmr+0x674>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007816:	429a      	cmp	r2, r3
 8007818:	d106      	bne.n	8007828 <tcp_slowtmr+0x60c>
 800781a:	4b19      	ldr	r3, [pc, #100]	; (8007880 <tcp_slowtmr+0x664>)
 800781c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007820:	491c      	ldr	r1, [pc, #112]	; (8007894 <tcp_slowtmr+0x678>)
 8007822:	4819      	ldr	r0, [pc, #100]	; (8007888 <tcp_slowtmr+0x66c>)
 8007824:	f007 fe4a 	bl	800f4bc <iprintf>
        prev->next = pcb->next;
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	60da      	str	r2, [r3, #12]
 8007830:	e00f      	b.n	8007852 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007832:	4b17      	ldr	r3, [pc, #92]	; (8007890 <tcp_slowtmr+0x674>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007838:	429a      	cmp	r2, r3
 800783a:	d006      	beq.n	800784a <tcp_slowtmr+0x62e>
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <tcp_slowtmr+0x664>)
 800783e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007842:	4915      	ldr	r1, [pc, #84]	; (8007898 <tcp_slowtmr+0x67c>)
 8007844:	4810      	ldr	r0, [pc, #64]	; (8007888 <tcp_slowtmr+0x66c>)
 8007846:	f007 fe39 	bl	800f4bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <tcp_slowtmr+0x674>)
 8007850:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800785c:	69f8      	ldr	r0, [r7, #28]
 800785e:	f7fe ff85 	bl	800676c <tcp_free>
 8007862:	e004      	b.n	800786e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1a9      	bne.n	80077c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bdb0      	pop	{r4, r5, r7, pc}
 800787e:	bf00      	nop
 8007880:	08010dcc 	.word	0x08010dcc
 8007884:	0801125c 	.word	0x0801125c
 8007888:	08010e10 	.word	0x08010e10
 800788c:	2000829c 	.word	0x2000829c
 8007890:	200082ac 	.word	0x200082ac
 8007894:	0801128c 	.word	0x0801128c
 8007898:	080112b4 	.word	0x080112b4

0800789c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80078a2:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <tcp_fasttmr+0xbc>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <tcp_fasttmr+0xbc>)
 80078ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80078ae:	4b2b      	ldr	r3, [pc, #172]	; (800795c <tcp_fasttmr+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80078b4:	e048      	b.n	8007948 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7f9a      	ldrb	r2, [r3, #30]
 80078ba:	4b27      	ldr	r3, [pc, #156]	; (8007958 <tcp_fasttmr+0xbc>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d03f      	beq.n	8007942 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80078c2:	4b25      	ldr	r3, [pc, #148]	; (8007958 <tcp_fasttmr+0xbc>)
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8b5b      	ldrh	r3, [r3, #26]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8b5b      	ldrh	r3, [r3, #26]
 80078da:	f043 0302 	orr.w	r3, r3, #2
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f003 ffa9 	bl	800b83c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8b5b      	ldrh	r3, [r3, #26]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8b5b      	ldrh	r3, [r3, #26]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8b5b      	ldrh	r3, [r3, #26]
 8007908:	f023 0308 	bic.w	r3, r3, #8
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f8be 	bl	8006a94 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <tcp_fasttmr+0xc4>)
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f819 	bl	8007964 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <tcp_fasttmr+0xc4>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d000      	beq.n	800793c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800793a:	e7b8      	b.n	80078ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	e002      	b.n	8007948 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1b3      	bne.n	80078b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200082b2 	.word	0x200082b2
 800795c:	200082a8 	.word	0x200082a8
 8007960:	200082b0 	.word	0x200082b0

08007964 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <tcp_process_refused_data+0x22>
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <tcp_process_refused_data+0xec>)
 8007974:	f240 6209 	movw	r2, #1545	; 0x609
 8007978:	4936      	ldr	r1, [pc, #216]	; (8007a54 <tcp_process_refused_data+0xf0>)
 800797a:	4837      	ldr	r0, [pc, #220]	; (8007a58 <tcp_process_refused_data+0xf4>)
 800797c:	f007 fd9e 	bl	800f4bc <iprintf>
 8007980:	f06f 030f 	mvn.w	r3, #15
 8007984:	e060      	b.n	8007a48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798a:	7b5b      	ldrb	r3, [r3, #13]
 800798c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007992:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <tcp_process_refused_data+0x58>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6918      	ldr	r0, [r3, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	47a0      	blx	r4
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	e007      	b.n	80079cc <tcp_process_refused_data+0x68>
 80079bc:	2300      	movs	r3, #0
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	2000      	movs	r0, #0
 80079c4:	f000 f8c2 	bl	8007b4c <tcp_recv_null>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80079cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d12a      	bne.n	8007a2a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d033      	beq.n	8007a46 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80079e6:	d005      	beq.n	80079f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	3301      	adds	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <tcp_process_refused_data+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6918      	ldr	r0, [r3, #16]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	47a0      	blx	r4
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
 8007a14:	e001      	b.n	8007a1a <tcp_process_refused_data+0xb6>
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1e:	f113 0f0d 	cmn.w	r3, #13
 8007a22:	d110      	bne.n	8007a46 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007a24:	f06f 030c 	mvn.w	r3, #12
 8007a28:	e00e      	b.n	8007a48 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a2e:	f113 0f0d 	cmn.w	r3, #13
 8007a32:	d102      	bne.n	8007a3a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007a34:	f06f 030c 	mvn.w	r3, #12
 8007a38:	e006      	b.n	8007a48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007a40:	f06f 0304 	mvn.w	r3, #4
 8007a44:	e000      	b.n	8007a48 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd90      	pop	{r4, r7, pc}
 8007a50:	08010dcc 	.word	0x08010dcc
 8007a54:	080112dc 	.word	0x080112dc
 8007a58:	08010e10 	.word	0x08010e10

08007a5c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007a64:	e007      	b.n	8007a76 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f80a 	bl	8007a86 <tcp_seg_free>
    seg = next;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f4      	bne.n	8007a66 <tcp_segs_free+0xa>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fbc3 	bl	800622c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	2003      	movs	r0, #3
 8007aaa:	f7fd fd49 	bl	8005540 <memp_free>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d107      	bne.n	8007ada <tcp_setprio+0x22>
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <tcp_setprio+0x30>)
 8007acc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007ad0:	4906      	ldr	r1, [pc, #24]	; (8007aec <tcp_setprio+0x34>)
 8007ad2:	4807      	ldr	r0, [pc, #28]	; (8007af0 <tcp_setprio+0x38>)
 8007ad4:	f007 fcf2 	bl	800f4bc <iprintf>
 8007ad8:	e002      	b.n	8007ae0 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	755a      	strb	r2, [r3, #21]
}
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08010dcc 	.word	0x08010dcc
 8007aec:	08011304 	.word	0x08011304
 8007af0:	08010e10 	.word	0x08010e10

08007af4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <tcp_seg_copy+0x1c>
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <tcp_seg_copy+0x4c>)
 8007b04:	f240 6282 	movw	r2, #1666	; 0x682
 8007b08:	490e      	ldr	r1, [pc, #56]	; (8007b44 <tcp_seg_copy+0x50>)
 8007b0a:	480f      	ldr	r0, [pc, #60]	; (8007b48 <tcp_seg_copy+0x54>)
 8007b0c:	f007 fcd6 	bl	800f4bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007b10:	2003      	movs	r0, #3
 8007b12:	f7fd fca5 	bl	8005460 <memp_malloc>
 8007b16:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <tcp_seg_copy+0x2e>
    return NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e00a      	b.n	8007b38 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007b22:	2210      	movs	r2, #16
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f007 fda3 	bl	800f672 <memcpy>
  pbuf_ref(cseg->p);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fc1b 	bl	800636c <pbuf_ref>
  return cseg;
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08010dcc 	.word	0x08010dcc
 8007b44:	08011320 	.word	0x08011320
 8007b48:	08010e10 	.word	0x08010e10

08007b4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <tcp_recv_null+0x28>
 8007b60:	4b12      	ldr	r3, [pc, #72]	; (8007bac <tcp_recv_null+0x60>)
 8007b62:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007b66:	4912      	ldr	r1, [pc, #72]	; (8007bb0 <tcp_recv_null+0x64>)
 8007b68:	4812      	ldr	r0, [pc, #72]	; (8007bb4 <tcp_recv_null+0x68>)
 8007b6a:	f007 fca7 	bl	800f4bc <iprintf>
 8007b6e:	f06f 030f 	mvn.w	r3, #15
 8007b72:	e016      	b.n	8007ba2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	891b      	ldrh	r3, [r3, #8]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68b8      	ldr	r0, [r7, #8]
 8007b82:	f7ff fab5 	bl	80070f0 <tcp_recved>
    pbuf_free(p);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fe fb50 	bl	800622c <pbuf_free>
 8007b8c:	e008      	b.n	8007ba0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007b96:	68b8      	ldr	r0, [r7, #8]
 8007b98:	f7fe ffe6 	bl	8006b68 <tcp_close>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	e000      	b.n	8007ba2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	08010dcc 	.word	0x08010dcc
 8007bb0:	0801133c 	.word	0x0801133c
 8007bb4:	08010e10 	.word	0x08010e10

08007bb8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	db01      	blt.n	8007bce <tcp_kill_prio+0x16>
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	e000      	b.n	8007bd0 <tcp_kill_prio+0x18>
 8007bce:	237f      	movs	r3, #127	; 0x7f
 8007bd0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d034      	beq.n	8007c42 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007be6:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <tcp_kill_prio+0x94>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e01f      	b.n	8007c2e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	7d5b      	ldrb	r3, [r3, #21]
 8007bf2:	7afa      	ldrb	r2, [r7, #11]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d80c      	bhi.n	8007c12 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007bfc:	7afa      	ldrb	r2, [r7, #11]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d112      	bne.n	8007c28 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007c02:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <tcp_kill_prio+0x98>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d80a      	bhi.n	8007c28 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <tcp_kill_prio+0x98>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	7d5b      	ldrb	r3, [r3, #21]
 8007c26:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1dc      	bne.n	8007bee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007c3a:	6938      	ldr	r0, [r7, #16]
 8007c3c:	f7ff f87e 	bl	8006d3c <tcp_abort>
 8007c40:	e000      	b.n	8007c44 <tcp_kill_prio+0x8c>
    return;
 8007c42:	bf00      	nop
  }
}
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	200082a8 	.word	0x200082a8
 8007c50:	2000829c 	.word	0x2000829c

08007c54 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d009      	beq.n	8007c78 <tcp_kill_state+0x24>
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d006      	beq.n	8007c78 <tcp_kill_state+0x24>
 8007c6a:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <tcp_kill_state+0x80>)
 8007c6c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007c70:	4919      	ldr	r1, [pc, #100]	; (8007cd8 <tcp_kill_state+0x84>)
 8007c72:	481a      	ldr	r0, [pc, #104]	; (8007cdc <tcp_kill_state+0x88>)
 8007c74:	f007 fc22 	bl	800f4bc <iprintf>

  inactivity = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c80:	4b17      	ldr	r3, [pc, #92]	; (8007ce0 <tcp_kill_state+0x8c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e017      	b.n	8007cb8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	7d1b      	ldrb	r3, [r3, #20]
 8007c8c:	79fa      	ldrb	r2, [r7, #7]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d10f      	bne.n	8007cb2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c92:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <tcp_kill_state+0x90>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d807      	bhi.n	8007cb2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007ca2:	4b10      	ldr	r3, [pc, #64]	; (8007ce4 <tcp_kill_state+0x90>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6938      	ldr	r0, [r7, #16]
 8007cc8:	f7fe ff7a 	bl	8006bc0 <tcp_abandon>
  }
}
 8007ccc:	bf00      	nop
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	08010dcc 	.word	0x08010dcc
 8007cd8:	08011358 	.word	0x08011358
 8007cdc:	08010e10 	.word	0x08010e10
 8007ce0:	200082a8 	.word	0x200082a8
 8007ce4:	2000829c 	.word	0x2000829c

08007ce8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <tcp_kill_timewait+0x58>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e012      	b.n	8007d24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007cfe:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <tcp_kill_timewait+0x5c>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d807      	bhi.n	8007d1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <tcp_kill_timewait+0x5c>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e9      	bne.n	8007cfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f7ff f803 	bl	8006d3c <tcp_abort>
  }
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200082ac 	.word	0x200082ac
 8007d44:	2000829c 	.word	0x2000829c

08007d48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <tcp_handle_closepend+0x48>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007d54:	e014      	b.n	8007d80 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8b5b      	ldrh	r3, [r3, #26]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8b5b      	ldrh	r3, [r3, #26]
 8007d6c:	f023 0308 	bic.w	r3, r3, #8
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fe fe8c 	bl	8006a94 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e7      	bne.n	8007d56 <tcp_handle_closepend+0xe>
  }
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200082a8 	.word	0x200082a8

08007d94 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d9e:	2001      	movs	r0, #1
 8007da0:	f7fd fb5e 	bl	8005460 <memp_malloc>
 8007da4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d126      	bne.n	8007dfa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007dac:	f7ff ffcc 	bl	8007d48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007db0:	f7ff ff9a 	bl	8007ce8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007db4:	2001      	movs	r0, #1
 8007db6:	f7fd fb53 	bl	8005460 <memp_malloc>
 8007dba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d11b      	bne.n	8007dfa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007dc2:	2009      	movs	r0, #9
 8007dc4:	f7ff ff46 	bl	8007c54 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dc8:	2001      	movs	r0, #1
 8007dca:	f7fd fb49 	bl	8005460 <memp_malloc>
 8007dce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d111      	bne.n	8007dfa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007dd6:	2008      	movs	r0, #8
 8007dd8:	f7ff ff3c 	bl	8007c54 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f7fd fb3f 	bl	8005460 <memp_malloc>
 8007de2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d107      	bne.n	8007dfa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fee3 	bl	8007bb8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007df2:	2001      	movs	r0, #1
 8007df4:	f7fd fb34 	bl	8005460 <memp_malloc>
 8007df8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d03f      	beq.n	8007e80 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007e00:	229c      	movs	r2, #156	; 0x9c
 8007e02:	2100      	movs	r1, #0
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f007 fbbe 	bl	800f586 <memset>
    pcb->prio = prio;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	79fa      	ldrb	r2, [r7, #7]
 8007e0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007e36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2206      	movs	r2, #6
 8007e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2206      	movs	r2, #6
 8007e44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007e56:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <tcp_alloc+0xf8>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <tcp_alloc+0xfc>)
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <tcp_alloc+0x100>)
 8007e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a07      	ldr	r2, [pc, #28]	; (8007e98 <tcp_alloc+0x104>)
 8007e7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	2000829c 	.word	0x2000829c
 8007e90:	200082b2 	.word	0x200082b2
 8007e94:	08007b4d 	.word	0x08007b4d
 8007e98:	006ddd00 	.word	0x006ddd00

08007e9c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007ea0:	2040      	movs	r0, #64	; 0x40
 8007ea2:	f7ff ff77 	bl	8007d94 <tcp_alloc>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00e      	beq.n	8007eda <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7d1b      	ldrb	r3, [r3, #20]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d106      	bne.n	8007ed2 <tcp_recv+0x26>
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <tcp_recv+0x38>)
 8007ec6:	f240 72df 	movw	r2, #2015	; 0x7df
 8007eca:	4907      	ldr	r1, [pc, #28]	; (8007ee8 <tcp_recv+0x3c>)
 8007ecc:	4807      	ldr	r0, [pc, #28]	; (8007eec <tcp_recv+0x40>)
 8007ece:	f007 faf5 	bl	800f4bc <iprintf>
    pcb->recv = recv;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08010dcc 	.word	0x08010dcc
 8007ee8:	08011368 	.word	0x08011368
 8007eec:	08010e10 	.word	0x08010e10

08007ef0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7d1b      	ldrb	r3, [r3, #20]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d106      	bne.n	8007f16 <tcp_err+0x26>
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <tcp_err+0x38>)
 8007f0a:	f640 020d 	movw	r2, #2061	; 0x80d
 8007f0e:	4907      	ldr	r1, [pc, #28]	; (8007f2c <tcp_err+0x3c>)
 8007f10:	4807      	ldr	r0, [pc, #28]	; (8007f30 <tcp_err+0x40>)
 8007f12:	f007 fad3 	bl	800f4bc <iprintf>
    pcb->errf = err;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	08010dcc 	.word	0x08010dcc
 8007f2c:	080113b8 	.word	0x080113b8
 8007f30:	08010e10 	.word	0x08010e10

08007f34 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <tcp_accept+0x22>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7d1b      	ldrb	r3, [r3, #20]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d104      	bne.n	8007f56 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	619a      	str	r2, [r3, #24]
  }
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d107      	bne.n	8007f82 <tcp_pcb_purge+0x1e>
 8007f72:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <tcp_pcb_purge+0x94>)
 8007f74:	f640 0251 	movw	r2, #2129	; 0x851
 8007f78:	4920      	ldr	r1, [pc, #128]	; (8007ffc <tcp_pcb_purge+0x98>)
 8007f7a:	4821      	ldr	r0, [pc, #132]	; (8008000 <tcp_pcb_purge+0x9c>)
 8007f7c:	f007 fa9e 	bl	800f4bc <iprintf>
 8007f80:	e037      	b.n	8007ff2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7d1b      	ldrb	r3, [r3, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d033      	beq.n	8007ff2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007f8e:	2b0a      	cmp	r3, #10
 8007f90:	d02f      	beq.n	8007ff2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d02b      	beq.n	8007ff2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe f940 	bl	800622c <pbuf_free>
      pcb->refused_data = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f986 	bl	80082cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fc6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fd45 	bl	8007a5c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fd40 	bl	8007a5c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	66da      	str	r2, [r3, #108]	; 0x6c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	08010dcc 	.word	0x08010dcc
 8007ffc:	08011418 	.word	0x08011418
 8008000:	08010e10 	.word	0x08010e10

08008004 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <tcp_pcb_remove+0x1e>
 8008014:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <tcp_pcb_remove+0x10c>)
 8008016:	f640 0283 	movw	r2, #2179	; 0x883
 800801a:	493e      	ldr	r1, [pc, #248]	; (8008114 <tcp_pcb_remove+0x110>)
 800801c:	483e      	ldr	r0, [pc, #248]	; (8008118 <tcp_pcb_remove+0x114>)
 800801e:	f007 fa4d 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <tcp_pcb_remove+0x32>
 8008028:	4b39      	ldr	r3, [pc, #228]	; (8008110 <tcp_pcb_remove+0x10c>)
 800802a:	f640 0284 	movw	r2, #2180	; 0x884
 800802e:	493b      	ldr	r1, [pc, #236]	; (800811c <tcp_pcb_remove+0x118>)
 8008030:	4839      	ldr	r0, [pc, #228]	; (8008118 <tcp_pcb_remove+0x114>)
 8008032:	f007 fa43 	bl	800f4bc <iprintf>

  TCP_RMV(pcblist, pcb);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d105      	bne.n	800804c <tcp_pcb_remove+0x48>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e013      	b.n	8008074 <tcp_pcb_remove+0x70>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e00c      	b.n	800806e <tcp_pcb_remove+0x6a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <tcp_pcb_remove+0x64>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e005      	b.n	8008074 <tcp_pcb_remove+0x70>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1ef      	bne.n	8008054 <tcp_pcb_remove+0x50>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800807a:	6838      	ldr	r0, [r7, #0]
 800807c:	f7ff ff72 	bl	8007f64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	7d1b      	ldrb	r3, [r3, #20]
 8008084:	2b0a      	cmp	r3, #10
 8008086:	d013      	beq.n	80080b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800808c:	2b01      	cmp	r3, #1
 800808e:	d00f      	beq.n	80080b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	8b5b      	ldrh	r3, [r3, #26]
 8008094:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008098:	2b00      	cmp	r3, #0
 800809a:	d009      	beq.n	80080b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	8b5b      	ldrh	r3, [r3, #26]
 80080a0:	f043 0302 	orr.w	r3, r3, #2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80080aa:	6838      	ldr	r0, [r7, #0]
 80080ac:	f003 fbc6 	bl	800b83c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d020      	beq.n	80080fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <tcp_pcb_remove+0xca>
 80080c0:	4b13      	ldr	r3, [pc, #76]	; (8008110 <tcp_pcb_remove+0x10c>)
 80080c2:	f640 0293 	movw	r2, #2195	; 0x893
 80080c6:	4916      	ldr	r1, [pc, #88]	; (8008120 <tcp_pcb_remove+0x11c>)
 80080c8:	4813      	ldr	r0, [pc, #76]	; (8008118 <tcp_pcb_remove+0x114>)
 80080ca:	f007 f9f7 	bl	800f4bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <tcp_pcb_remove+0xe0>
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <tcp_pcb_remove+0x10c>)
 80080d8:	f640 0294 	movw	r2, #2196	; 0x894
 80080dc:	4911      	ldr	r1, [pc, #68]	; (8008124 <tcp_pcb_remove+0x120>)
 80080de:	480e      	ldr	r0, [pc, #56]	; (8008118 <tcp_pcb_remove+0x114>)
 80080e0:	f007 f9ec 	bl	800f4bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <tcp_pcb_remove+0xf6>
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <tcp_pcb_remove+0x10c>)
 80080ee:	f640 0296 	movw	r2, #2198	; 0x896
 80080f2:	490d      	ldr	r1, [pc, #52]	; (8008128 <tcp_pcb_remove+0x124>)
 80080f4:	4808      	ldr	r0, [pc, #32]	; (8008118 <tcp_pcb_remove+0x114>)
 80080f6:	f007 f9e1 	bl	800f4bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08010dcc 	.word	0x08010dcc
 8008114:	08011434 	.word	0x08011434
 8008118:	08010e10 	.word	0x08010e10
 800811c:	08011450 	.word	0x08011450
 8008120:	08011470 	.word	0x08011470
 8008124:	08011488 	.word	0x08011488
 8008128:	080114a4 	.word	0x080114a4

0800812c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <tcp_next_iss+0x1c>
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <tcp_next_iss+0x38>)
 800813c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008140:	4909      	ldr	r1, [pc, #36]	; (8008168 <tcp_next_iss+0x3c>)
 8008142:	480a      	ldr	r0, [pc, #40]	; (800816c <tcp_next_iss+0x40>)
 8008144:	f007 f9ba 	bl	800f4bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <tcp_next_iss+0x44>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <tcp_next_iss+0x48>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4413      	add	r3, r2
 8008152:	4a07      	ldr	r2, [pc, #28]	; (8008170 <tcp_next_iss+0x44>)
 8008154:	6013      	str	r3, [r2, #0]
  return iss;
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <tcp_next_iss+0x44>)
 8008158:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	08010dcc 	.word	0x08010dcc
 8008168:	080114bc 	.word	0x080114bc
 800816c:	08010e10 	.word	0x08010e10
 8008170:	20000024 	.word	0x20000024
 8008174:	2000829c 	.word	0x2000829c

08008178 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <tcp_eff_send_mss_netif+0x22>
 800818c:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <tcp_eff_send_mss_netif+0x68>)
 800818e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008192:	4914      	ldr	r1, [pc, #80]	; (80081e4 <tcp_eff_send_mss_netif+0x6c>)
 8008194:	4814      	ldr	r0, [pc, #80]	; (80081e8 <tcp_eff_send_mss_netif+0x70>)
 8008196:	f007 f991 	bl	800f4bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	e019      	b.n	80081d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80081aa:	8afb      	ldrh	r3, [r7, #22]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80081b0:	2328      	movs	r3, #40	; 0x28
 80081b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80081b4:	8afa      	ldrh	r2, [r7, #22]
 80081b6:	8abb      	ldrh	r3, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d904      	bls.n	80081c6 <tcp_eff_send_mss_netif+0x4e>
 80081bc:	8afa      	ldrh	r2, [r7, #22]
 80081be:	8abb      	ldrh	r3, [r7, #20]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	e000      	b.n	80081c8 <tcp_eff_send_mss_netif+0x50>
 80081c6:	2300      	movs	r3, #0
 80081c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80081ca:	8a7a      	ldrh	r2, [r7, #18]
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bf28      	it	cs
 80081d2:	4613      	movcs	r3, r2
 80081d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80081d6:	89fb      	ldrh	r3, [r7, #14]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08010dcc 	.word	0x08010dcc
 80081e4:	080114d8 	.word	0x080114d8
 80081e8:	08010e10 	.word	0x08010e10

080081ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d119      	bne.n	8008234 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008202:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008206:	4910      	ldr	r1, [pc, #64]	; (8008248 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008208:	4810      	ldr	r0, [pc, #64]	; (800824c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800820a:	f007 f957 	bl	800f4bc <iprintf>

  while (pcb != NULL) {
 800820e:	e011      	b.n	8008234 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d108      	bne.n	800822e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7fe fd8a 	bl	8006d3c <tcp_abort>
      pcb = next;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e002      	b.n	8008234 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ea      	bne.n	8008210 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	08010dcc 	.word	0x08010dcc
 8008248:	08011500 	.word	0x08011500
 800824c:	08010e10 	.word	0x08010e10

08008250 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02a      	beq.n	80082b6 <tcp_netif_ip_addr_changed+0x66>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d026      	beq.n	80082b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <tcp_netif_ip_addr_changed+0x70>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ffbc 	bl	80081ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <tcp_netif_ip_addr_changed+0x74>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff ffb6 	bl	80081ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d017      	beq.n	80082b6 <tcp_netif_ip_addr_changed+0x66>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <tcp_netif_ip_addr_changed+0x78>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e00c      	b.n	80082b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d103      	bne.n	80082aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1ef      	bne.n	8008296 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200082a8 	.word	0x200082a8
 80082c4:	200082a0 	.word	0x200082a0
 80082c8:	200082a4 	.word	0x200082a4

080082cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fbbb 	bl	8007a5c <tcp_segs_free>
    pcb->ooseq = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b08d      	sub	sp, #52	; 0x34
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <tcp_input+0x1c>
 8008304:	4b9b      	ldr	r3, [pc, #620]	; (8008574 <tcp_input+0x280>)
 8008306:	2283      	movs	r2, #131	; 0x83
 8008308:	499b      	ldr	r1, [pc, #620]	; (8008578 <tcp_input+0x284>)
 800830a:	489c      	ldr	r0, [pc, #624]	; (800857c <tcp_input+0x288>)
 800830c:	f007 f8d6 	bl	800f4bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4a9a      	ldr	r2, [pc, #616]	; (8008580 <tcp_input+0x28c>)
 8008316:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	895b      	ldrh	r3, [r3, #10]
 800831c:	2b13      	cmp	r3, #19
 800831e:	f240 83d1 	bls.w	8008ac4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008322:	4b98      	ldr	r3, [pc, #608]	; (8008584 <tcp_input+0x290>)
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	4a97      	ldr	r2, [pc, #604]	; (8008584 <tcp_input+0x290>)
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f006 f86f 	bl	800e410 <ip4_addr_isbroadcast_u32>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 83c7 	bne.w	8008ac8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800833a:	4b92      	ldr	r3, [pc, #584]	; (8008584 <tcp_input+0x290>)
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008342:	2be0      	cmp	r3, #224	; 0xe0
 8008344:	f000 83c0 	beq.w	8008ac8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008348:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <tcp_input+0x28c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	899b      	ldrh	r3, [r3, #12]
 800834e:	b29b      	uxth	r3, r3
 8008350:	4618      	mov	r0, r3
 8008352:	f7fc fc0d 	bl	8004b70 <lwip_htons>
 8008356:	4603      	mov	r3, r0
 8008358:	0b1b      	lsrs	r3, r3, #12
 800835a:	b29b      	uxth	r3, r3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008362:	7cbb      	ldrb	r3, [r7, #18]
 8008364:	2b13      	cmp	r3, #19
 8008366:	f240 83b1 	bls.w	8008acc <tcp_input+0x7d8>
 800836a:	7cbb      	ldrb	r3, [r7, #18]
 800836c:	b29a      	uxth	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	891b      	ldrh	r3, [r3, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	f200 83aa 	bhi.w	8008acc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008378:	7cbb      	ldrb	r3, [r7, #18]
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b14      	subs	r3, #20
 800837e:	b29a      	uxth	r2, r3
 8008380:	4b81      	ldr	r3, [pc, #516]	; (8008588 <tcp_input+0x294>)
 8008382:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008384:	4b81      	ldr	r3, [pc, #516]	; (800858c <tcp_input+0x298>)
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	895a      	ldrh	r2, [r3, #10]
 800838e:	7cbb      	ldrb	r3, [r7, #18]
 8008390:	b29b      	uxth	r3, r3
 8008392:	429a      	cmp	r2, r3
 8008394:	d309      	bcc.n	80083aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008396:	4b7c      	ldr	r3, [pc, #496]	; (8008588 <tcp_input+0x294>)
 8008398:	881a      	ldrh	r2, [r3, #0]
 800839a:	4b7d      	ldr	r3, [pc, #500]	; (8008590 <tcp_input+0x29c>)
 800839c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800839e:	7cbb      	ldrb	r3, [r7, #18]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fd febc 	bl	8006120 <pbuf_remove_header>
 80083a8:	e04e      	b.n	8008448 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <tcp_input+0xca>
 80083b2:	4b70      	ldr	r3, [pc, #448]	; (8008574 <tcp_input+0x280>)
 80083b4:	22c2      	movs	r2, #194	; 0xc2
 80083b6:	4977      	ldr	r1, [pc, #476]	; (8008594 <tcp_input+0x2a0>)
 80083b8:	4870      	ldr	r0, [pc, #448]	; (800857c <tcp_input+0x288>)
 80083ba:	f007 f87f 	bl	800f4bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80083be:	2114      	movs	r1, #20
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fd fead 	bl	8006120 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	895a      	ldrh	r2, [r3, #10]
 80083ca:	4b71      	ldr	r3, [pc, #452]	; (8008590 <tcp_input+0x29c>)
 80083cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80083ce:	4b6e      	ldr	r3, [pc, #440]	; (8008588 <tcp_input+0x294>)
 80083d0:	881a      	ldrh	r2, [r3, #0]
 80083d2:	4b6f      	ldr	r3, [pc, #444]	; (8008590 <tcp_input+0x29c>)
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80083da:	4b6d      	ldr	r3, [pc, #436]	; (8008590 <tcp_input+0x29c>)
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7fd fe9d 	bl	8006120 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	895b      	ldrh	r3, [r3, #10]
 80083ec:	8a3a      	ldrh	r2, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f200 836e 	bhi.w	8008ad0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	4a64      	ldr	r2, [pc, #400]	; (800858c <tcp_input+0x298>)
 80083fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	8a3a      	ldrh	r2, [r7, #16]
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd fe8a 	bl	8006120 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	891a      	ldrh	r2, [r3, #8]
 8008410:	8a3b      	ldrh	r3, [r7, #16]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	895b      	ldrh	r3, [r3, #10]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <tcp_input+0x13a>
 8008422:	4b54      	ldr	r3, [pc, #336]	; (8008574 <tcp_input+0x280>)
 8008424:	22df      	movs	r2, #223	; 0xdf
 8008426:	495c      	ldr	r1, [pc, #368]	; (8008598 <tcp_input+0x2a4>)
 8008428:	4854      	ldr	r0, [pc, #336]	; (800857c <tcp_input+0x288>)
 800842a:	f007 f847 	bl	800f4bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	891a      	ldrh	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	891b      	ldrh	r3, [r3, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d005      	beq.n	8008448 <tcp_input+0x154>
 800843c:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <tcp_input+0x280>)
 800843e:	22e0      	movs	r2, #224	; 0xe0
 8008440:	4956      	ldr	r1, [pc, #344]	; (800859c <tcp_input+0x2a8>)
 8008442:	484e      	ldr	r0, [pc, #312]	; (800857c <tcp_input+0x288>)
 8008444:	f007 f83a 	bl	800f4bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008448:	4b4d      	ldr	r3, [pc, #308]	; (8008580 <tcp_input+0x28c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	4a4b      	ldr	r2, [pc, #300]	; (8008580 <tcp_input+0x28c>)
 8008452:	6814      	ldr	r4, [r2, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f7fc fb8b 	bl	8004b70 <lwip_htons>
 800845a:	4603      	mov	r3, r0
 800845c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800845e:	4b48      	ldr	r3, [pc, #288]	; (8008580 <tcp_input+0x28c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	885b      	ldrh	r3, [r3, #2]
 8008464:	b29b      	uxth	r3, r3
 8008466:	4a46      	ldr	r2, [pc, #280]	; (8008580 <tcp_input+0x28c>)
 8008468:	6814      	ldr	r4, [r2, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f7fc fb80 	bl	8004b70 <lwip_htons>
 8008470:	4603      	mov	r3, r0
 8008472:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008474:	4b42      	ldr	r3, [pc, #264]	; (8008580 <tcp_input+0x28c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4a41      	ldr	r2, [pc, #260]	; (8008580 <tcp_input+0x28c>)
 800847c:	6814      	ldr	r4, [r2, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fc fb8b 	bl	8004b9a <lwip_htonl>
 8008484:	4603      	mov	r3, r0
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	4a45      	ldr	r2, [pc, #276]	; (80085a0 <tcp_input+0x2ac>)
 800848c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800848e:	4b3c      	ldr	r3, [pc, #240]	; (8008580 <tcp_input+0x28c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	4a3a      	ldr	r2, [pc, #232]	; (8008580 <tcp_input+0x28c>)
 8008496:	6814      	ldr	r4, [r2, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f7fc fb7e 	bl	8004b9a <lwip_htonl>
 800849e:	4603      	mov	r3, r0
 80084a0:	60a3      	str	r3, [r4, #8]
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	4a3f      	ldr	r2, [pc, #252]	; (80085a4 <tcp_input+0x2b0>)
 80084a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80084a8:	4b35      	ldr	r3, [pc, #212]	; (8008580 <tcp_input+0x28c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	89db      	ldrh	r3, [r3, #14]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	4a33      	ldr	r2, [pc, #204]	; (8008580 <tcp_input+0x28c>)
 80084b2:	6814      	ldr	r4, [r2, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fc fb5b 	bl	8004b70 <lwip_htons>
 80084ba:	4603      	mov	r3, r0
 80084bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80084be:	4b30      	ldr	r3, [pc, #192]	; (8008580 <tcp_input+0x28c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fc fb52 	bl	8004b70 <lwip_htons>
 80084cc:	4603      	mov	r3, r0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b34      	ldr	r3, [pc, #208]	; (80085a8 <tcp_input+0x2b4>)
 80084d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	891a      	ldrh	r2, [r3, #8]
 80084de:	4b33      	ldr	r3, [pc, #204]	; (80085ac <tcp_input+0x2b8>)
 80084e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80084e2:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <tcp_input+0x2b4>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <tcp_input+0x214>
    tcplen++;
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <tcp_input+0x2b8>)
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <tcp_input+0x2b8>)
 80084f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	891a      	ldrh	r2, [r3, #8]
 80084fe:	4b2b      	ldr	r3, [pc, #172]	; (80085ac <tcp_input+0x2b8>)
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	f200 82e6 	bhi.w	8008ad4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008508:	2300      	movs	r3, #0
 800850a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <tcp_input+0x2bc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	e09d      	b.n	8008650 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	7d1b      	ldrb	r3, [r3, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d105      	bne.n	8008528 <tcp_input+0x234>
 800851c:	4b15      	ldr	r3, [pc, #84]	; (8008574 <tcp_input+0x280>)
 800851e:	22fb      	movs	r2, #251	; 0xfb
 8008520:	4924      	ldr	r1, [pc, #144]	; (80085b4 <tcp_input+0x2c0>)
 8008522:	4816      	ldr	r0, [pc, #88]	; (800857c <tcp_input+0x288>)
 8008524:	f006 ffca 	bl	800f4bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	2b0a      	cmp	r3, #10
 800852e:	d105      	bne.n	800853c <tcp_input+0x248>
 8008530:	4b10      	ldr	r3, [pc, #64]	; (8008574 <tcp_input+0x280>)
 8008532:	22fc      	movs	r2, #252	; 0xfc
 8008534:	4920      	ldr	r1, [pc, #128]	; (80085b8 <tcp_input+0x2c4>)
 8008536:	4811      	ldr	r0, [pc, #68]	; (800857c <tcp_input+0x288>)
 8008538:	f006 ffc0 	bl	800f4bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	7d1b      	ldrb	r3, [r3, #20]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d105      	bne.n	8008550 <tcp_input+0x25c>
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <tcp_input+0x280>)
 8008546:	22fd      	movs	r2, #253	; 0xfd
 8008548:	491c      	ldr	r1, [pc, #112]	; (80085bc <tcp_input+0x2c8>)
 800854a:	480c      	ldr	r0, [pc, #48]	; (800857c <tcp_input+0x288>)
 800854c:	f006 ffb6 	bl	800f4bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	7a1b      	ldrb	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d033      	beq.n	80085c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	7a1a      	ldrb	r2, [r3, #8]
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <tcp_input+0x290>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008564:	3301      	adds	r3, #1
 8008566:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008568:	429a      	cmp	r2, r3
 800856a:	d029      	beq.n	80085c0 <tcp_input+0x2cc>
      prev = pcb;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	61bb      	str	r3, [r7, #24]
      continue;
 8008570:	e06b      	b.n	800864a <tcp_input+0x356>
 8008572:	bf00      	nop
 8008574:	08011534 	.word	0x08011534
 8008578:	08011568 	.word	0x08011568
 800857c:	08011580 	.word	0x08011580
 8008580:	200082c4 	.word	0x200082c4
 8008584:	20004d2c 	.word	0x20004d2c
 8008588:	200082c8 	.word	0x200082c8
 800858c:	200082cc 	.word	0x200082cc
 8008590:	200082ca 	.word	0x200082ca
 8008594:	080115a8 	.word	0x080115a8
 8008598:	080115b8 	.word	0x080115b8
 800859c:	080115c4 	.word	0x080115c4
 80085a0:	200082d4 	.word	0x200082d4
 80085a4:	200082d8 	.word	0x200082d8
 80085a8:	200082e0 	.word	0x200082e0
 80085ac:	200082de 	.word	0x200082de
 80085b0:	200082a8 	.word	0x200082a8
 80085b4:	080115e4 	.word	0x080115e4
 80085b8:	0801160c 	.word	0x0801160c
 80085bc:	08011638 	.word	0x08011638
    }

    if (pcb->remote_port == tcphdr->src &&
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	8b1a      	ldrh	r2, [r3, #24]
 80085c4:	4b72      	ldr	r3, [pc, #456]	; (8008790 <tcp_input+0x49c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d13a      	bne.n	8008646 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	8ada      	ldrh	r2, [r3, #22]
 80085d4:	4b6e      	ldr	r3, [pc, #440]	; (8008790 <tcp_input+0x49c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80085dc:	429a      	cmp	r2, r3
 80085de:	d132      	bne.n	8008646 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	4b6b      	ldr	r3, [pc, #428]	; (8008794 <tcp_input+0x4a0>)
 80085e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d12c      	bne.n	8008646 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b68      	ldr	r3, [pc, #416]	; (8008794 <tcp_input+0x4a0>)
 80085f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d126      	bne.n	8008646 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d106      	bne.n	8008610 <tcp_input+0x31c>
 8008602:	4b65      	ldr	r3, [pc, #404]	; (8008798 <tcp_input+0x4a4>)
 8008604:	f240 120d 	movw	r2, #269	; 0x10d
 8008608:	4964      	ldr	r1, [pc, #400]	; (800879c <tcp_input+0x4a8>)
 800860a:	4865      	ldr	r0, [pc, #404]	; (80087a0 <tcp_input+0x4ac>)
 800860c:	f006 ff56 	bl	800f4bc <iprintf>
      if (prev != NULL) {
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <tcp_input+0x338>
        prev->next = pcb->next;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800861e:	4b61      	ldr	r3, [pc, #388]	; (80087a4 <tcp_input+0x4b0>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008626:	4a5f      	ldr	r2, [pc, #380]	; (80087a4 <tcp_input+0x4b0>)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	429a      	cmp	r2, r3
 8008634:	d111      	bne.n	800865a <tcp_input+0x366>
 8008636:	4b58      	ldr	r3, [pc, #352]	; (8008798 <tcp_input+0x4a4>)
 8008638:	f240 1215 	movw	r2, #277	; 0x115
 800863c:	495a      	ldr	r1, [pc, #360]	; (80087a8 <tcp_input+0x4b4>)
 800863e:	4858      	ldr	r0, [pc, #352]	; (80087a0 <tcp_input+0x4ac>)
 8008640:	f006 ff3c 	bl	800f4bc <iprintf>
      break;
 8008644:	e009      	b.n	800865a <tcp_input+0x366>
    }
    prev = pcb;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af5e 	bne.w	8008514 <tcp_input+0x220>
 8008658:	e000      	b.n	800865c <tcp_input+0x368>
      break;
 800865a:	bf00      	nop
  }

  if (pcb == NULL) {
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 80aa 	bne.w	80087b8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008664:	4b51      	ldr	r3, [pc, #324]	; (80087ac <tcp_input+0x4b8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	e03f      	b.n	80086ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	2b0a      	cmp	r3, #10
 8008672:	d006      	beq.n	8008682 <tcp_input+0x38e>
 8008674:	4b48      	ldr	r3, [pc, #288]	; (8008798 <tcp_input+0x4a4>)
 8008676:	f240 121f 	movw	r2, #287	; 0x11f
 800867a:	494d      	ldr	r1, [pc, #308]	; (80087b0 <tcp_input+0x4bc>)
 800867c:	4848      	ldr	r0, [pc, #288]	; (80087a0 <tcp_input+0x4ac>)
 800867e:	f006 ff1d 	bl	800f4bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	7a1b      	ldrb	r3, [r3, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	7a1a      	ldrb	r2, [r3, #8]
 800868e:	4b41      	ldr	r3, [pc, #260]	; (8008794 <tcp_input+0x4a0>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008696:	3301      	adds	r3, #1
 8008698:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800869a:	429a      	cmp	r2, r3
 800869c:	d122      	bne.n	80086e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	8b1a      	ldrh	r2, [r3, #24]
 80086a2:	4b3b      	ldr	r3, [pc, #236]	; (8008790 <tcp_input+0x49c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11b      	bne.n	80086e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	8ada      	ldrh	r2, [r3, #22]
 80086b2:	4b37      	ldr	r3, [pc, #220]	; (8008790 <tcp_input+0x49c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d113      	bne.n	80086e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	4b34      	ldr	r3, [pc, #208]	; (8008794 <tcp_input+0x4a0>)
 80086c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10d      	bne.n	80086e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b31      	ldr	r3, [pc, #196]	; (8008794 <tcp_input+0x4a0>)
 80086d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d107      	bne.n	80086e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80086d6:	69f8      	ldr	r0, [r7, #28]
 80086d8:	f000 fb56 	bl	8008d88 <tcp_timewait_input>
        }
        pbuf_free(p);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fd fda5 	bl	800622c <pbuf_free>
        return;
 80086e2:	e1fd      	b.n	8008ae0 <tcp_input+0x7ec>
        continue;
 80086e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1bc      	bne.n	800866c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086f6:	4b2f      	ldr	r3, [pc, #188]	; (80087b4 <tcp_input+0x4c0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e02a      	b.n	8008754 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	7a1b      	ldrb	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00c      	beq.n	8008720 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	7a1a      	ldrb	r2, [r3, #8]
 800870a:	4b22      	ldr	r3, [pc, #136]	; (8008794 <tcp_input+0x4a0>)
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008712:	3301      	adds	r3, #1
 8008714:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008716:	429a      	cmp	r2, r3
 8008718:	d002      	beq.n	8008720 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	61bb      	str	r3, [r7, #24]
        continue;
 800871e:	e016      	b.n	800874e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	8ada      	ldrh	r2, [r3, #22]
 8008724:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <tcp_input+0x49c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	885b      	ldrh	r3, [r3, #2]
 800872a:	b29b      	uxth	r3, r3
 800872c:	429a      	cmp	r2, r3
 800872e:	d10c      	bne.n	800874a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <tcp_input+0x4a0>)
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d00f      	beq.n	800875c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <tcp_input+0x46a>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1d1      	bne.n	80086fe <tcp_input+0x40a>
 800875a:	e000      	b.n	800875e <tcp_input+0x46a>
            break;
 800875c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d029      	beq.n	80087b8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008772:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <tcp_input+0x4c0>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800877a:	4a0e      	ldr	r2, [pc, #56]	; (80087b4 <tcp_input+0x4c0>)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008780:	6978      	ldr	r0, [r7, #20]
 8008782:	f000 fa03 	bl	8008b8c <tcp_listen_input>
      }
      pbuf_free(p);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fd fd50 	bl	800622c <pbuf_free>
      return;
 800878c:	e1a8      	b.n	8008ae0 <tcp_input+0x7ec>
 800878e:	bf00      	nop
 8008790:	200082c4 	.word	0x200082c4
 8008794:	20004d2c 	.word	0x20004d2c
 8008798:	08011534 	.word	0x08011534
 800879c:	08011660 	.word	0x08011660
 80087a0:	08011580 	.word	0x08011580
 80087a4:	200082a8 	.word	0x200082a8
 80087a8:	0801168c 	.word	0x0801168c
 80087ac:	200082ac 	.word	0x200082ac
 80087b0:	080116b8 	.word	0x080116b8
 80087b4:	200082a4 	.word	0x200082a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 8158 	beq.w	8008a70 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80087c0:	4b95      	ldr	r3, [pc, #596]	; (8008a18 <tcp_input+0x724>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	891a      	ldrh	r2, [r3, #8]
 80087ca:	4b93      	ldr	r3, [pc, #588]	; (8008a18 <tcp_input+0x724>)
 80087cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80087ce:	4a92      	ldr	r2, [pc, #584]	; (8008a18 <tcp_input+0x724>)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80087d4:	4b91      	ldr	r3, [pc, #580]	; (8008a1c <tcp_input+0x728>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a8f      	ldr	r2, [pc, #572]	; (8008a18 <tcp_input+0x724>)
 80087da:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80087dc:	4b90      	ldr	r3, [pc, #576]	; (8008a20 <tcp_input+0x72c>)
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80087e2:	4b90      	ldr	r3, [pc, #576]	; (8008a24 <tcp_input+0x730>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80087e8:	4b8f      	ldr	r3, [pc, #572]	; (8008a28 <tcp_input+0x734>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80087ee:	4b8f      	ldr	r3, [pc, #572]	; (8008a2c <tcp_input+0x738>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d006      	beq.n	8008808 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7b5b      	ldrb	r3, [r3, #13]
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800880c:	2b00      	cmp	r3, #0
 800880e:	d017      	beq.n	8008840 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008810:	69f8      	ldr	r0, [r7, #28]
 8008812:	f7ff f8a7 	bl	8007964 <tcp_process_refused_data>
 8008816:	4603      	mov	r3, r0
 8008818:	f113 0f0d 	cmn.w	r3, #13
 800881c:	d007      	beq.n	800882e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00c      	beq.n	8008840 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008826:	4b82      	ldr	r3, [pc, #520]	; (8008a30 <tcp_input+0x73c>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d008      	beq.n	8008840 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 80e3 	bne.w	80089fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008838:	69f8      	ldr	r0, [r7, #28]
 800883a:	f003 fe05 	bl	800c448 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800883e:	e0de      	b.n	80089fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008840:	4a7c      	ldr	r2, [pc, #496]	; (8008a34 <tcp_input+0x740>)
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008846:	69f8      	ldr	r0, [r7, #28]
 8008848:	f000 fb18 	bl	8008e7c <tcp_process>
 800884c:	4603      	mov	r3, r0
 800884e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008850:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008854:	f113 0f0d 	cmn.w	r3, #13
 8008858:	f000 80d3 	beq.w	8008a02 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800885c:	4b71      	ldr	r3, [pc, #452]	; (8008a24 <tcp_input+0x730>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d015      	beq.n	8008894 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <tcp_input+0x590>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	6912      	ldr	r2, [r2, #16]
 800887c:	f06f 010d 	mvn.w	r1, #13
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	486c      	ldr	r0, [pc, #432]	; (8008a38 <tcp_input+0x744>)
 8008888:	f7ff fbbc 	bl	8008004 <tcp_pcb_remove>
        tcp_free(pcb);
 800888c:	69f8      	ldr	r0, [r7, #28]
 800888e:	f7fd ff6d 	bl	800676c <tcp_free>
 8008892:	e0da      	b.n	8008a4a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008898:	4b63      	ldr	r3, [pc, #396]	; (8008a28 <tcp_input+0x734>)
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01d      	beq.n	80088dc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80088a0:	4b61      	ldr	r3, [pc, #388]	; (8008a28 <tcp_input+0x734>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <tcp_input+0x5d2>
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	6910      	ldr	r0, [r2, #16]
 80088ba:	89fa      	ldrh	r2, [r7, #14]
 80088bc:	69f9      	ldr	r1, [r7, #28]
 80088be:	4798      	blx	r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	74fb      	strb	r3, [r7, #19]
 80088c4:	e001      	b.n	80088ca <tcp_input+0x5d6>
 80088c6:	2300      	movs	r3, #0
 80088c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80088ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088ce:	f113 0f0d 	cmn.w	r3, #13
 80088d2:	f000 8098 	beq.w	8008a06 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80088d6:	4b54      	ldr	r3, [pc, #336]	; (8008a28 <tcp_input+0x734>)
 80088d8:	2200      	movs	r2, #0
 80088da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80088dc:	69f8      	ldr	r0, [r7, #28]
 80088de:	f000 f915 	bl	8008b0c <tcp_input_delayed_close>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f040 8090 	bne.w	8008a0a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80088ea:	4b4d      	ldr	r3, [pc, #308]	; (8008a20 <tcp_input+0x72c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d041      	beq.n	8008976 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <tcp_input+0x614>
 80088fa:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <tcp_input+0x748>)
 80088fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008900:	494f      	ldr	r1, [pc, #316]	; (8008a40 <tcp_input+0x74c>)
 8008902:	4850      	ldr	r0, [pc, #320]	; (8008a44 <tcp_input+0x750>)
 8008904:	f006 fdda 	bl	800f4bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	8b5b      	ldrh	r3, [r3, #26]
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008914:	4b42      	ldr	r3, [pc, #264]	; (8008a20 <tcp_input+0x72c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd fc87 	bl	800622c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800891e:	69f8      	ldr	r0, [r7, #28]
 8008920:	f7fe fa0c 	bl	8006d3c <tcp_abort>
            goto aborted;
 8008924:	e091      	b.n	8008a4a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <tcp_input+0x656>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	6918      	ldr	r0, [r3, #16]
 800893a:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <tcp_input+0x72c>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	69f9      	ldr	r1, [r7, #28]
 8008942:	47a0      	blx	r4
 8008944:	4603      	mov	r3, r0
 8008946:	74fb      	strb	r3, [r7, #19]
 8008948:	e008      	b.n	800895c <tcp_input+0x668>
 800894a:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <tcp_input+0x72c>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	2300      	movs	r3, #0
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	2000      	movs	r0, #0
 8008954:	f7ff f8fa 	bl	8007b4c <tcp_recv_null>
 8008958:	4603      	mov	r3, r0
 800895a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800895c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008960:	f113 0f0d 	cmn.w	r3, #13
 8008964:	d053      	beq.n	8008a0e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800896e:	4b2c      	ldr	r3, [pc, #176]	; (8008a20 <tcp_input+0x72c>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008976:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <tcp_input+0x730>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d030      	beq.n	80089e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898e:	7b5a      	ldrb	r2, [r3, #13]
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008994:	f042 0220 	orr.w	r2, r2, #32
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	735a      	strb	r2, [r3, #13]
 800899c:	e022      	b.n	80089e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80089a6:	d005      	beq.n	80089b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ac:	3301      	adds	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <tcp_input+0x6e2>
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	6918      	ldr	r0, [r3, #16]
 80089c8:	2300      	movs	r3, #0
 80089ca:	2200      	movs	r2, #0
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	47a0      	blx	r4
 80089d0:	4603      	mov	r3, r0
 80089d2:	74fb      	strb	r3, [r7, #19]
 80089d4:	e001      	b.n	80089da <tcp_input+0x6e6>
 80089d6:	2300      	movs	r3, #0
 80089d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089de:	f113 0f0d 	cmn.w	r3, #13
 80089e2:	d016      	beq.n	8008a12 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80089e4:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <tcp_input+0x740>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80089ea:	69f8      	ldr	r0, [r7, #28]
 80089ec:	f000 f88e 	bl	8008b0c <tcp_input_delayed_close>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d128      	bne.n	8008a48 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80089f6:	69f8      	ldr	r0, [r7, #28]
 80089f8:	f002 ff20 	bl	800b83c <tcp_output>
 80089fc:	e025      	b.n	8008a4a <tcp_input+0x756>
        goto aborted;
 80089fe:	bf00      	nop
 8008a00:	e023      	b.n	8008a4a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008a02:	bf00      	nop
 8008a04:	e021      	b.n	8008a4a <tcp_input+0x756>
              goto aborted;
 8008a06:	bf00      	nop
 8008a08:	e01f      	b.n	8008a4a <tcp_input+0x756>
          goto aborted;
 8008a0a:	bf00      	nop
 8008a0c:	e01d      	b.n	8008a4a <tcp_input+0x756>
            goto aborted;
 8008a0e:	bf00      	nop
 8008a10:	e01b      	b.n	8008a4a <tcp_input+0x756>
              goto aborted;
 8008a12:	bf00      	nop
 8008a14:	e019      	b.n	8008a4a <tcp_input+0x756>
 8008a16:	bf00      	nop
 8008a18:	200082b4 	.word	0x200082b4
 8008a1c:	200082c4 	.word	0x200082c4
 8008a20:	200082e4 	.word	0x200082e4
 8008a24:	200082e1 	.word	0x200082e1
 8008a28:	200082dc 	.word	0x200082dc
 8008a2c:	200082e0 	.word	0x200082e0
 8008a30:	200082de 	.word	0x200082de
 8008a34:	200082e8 	.word	0x200082e8
 8008a38:	200082a8 	.word	0x200082a8
 8008a3c:	08011534 	.word	0x08011534
 8008a40:	080116e8 	.word	0x080116e8
 8008a44:	08011580 	.word	0x08011580
          goto aborted;
 8008a48:	bf00      	nop
    tcp_input_pcb = NULL;
 8008a4a:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <tcp_input+0x7f4>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008a50:	4b26      	ldr	r3, [pc, #152]	; (8008aec <tcp_input+0x7f8>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <tcp_input+0x7fc>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03f      	beq.n	8008ade <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <tcp_input+0x7fc>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd fbe2 	bl	800622c <pbuf_free>
      inseg.p = NULL;
 8008a68:	4b21      	ldr	r3, [pc, #132]	; (8008af0 <tcp_input+0x7fc>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008a6e:	e036      	b.n	8008ade <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008a70:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <tcp_input+0x800>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fc f879 	bl	8004b70 <lwip_htons>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d118      	bne.n	8008abc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a8a:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <tcp_input+0x804>)
 8008a8c:	6819      	ldr	r1, [r3, #0]
 8008a8e:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <tcp_input+0x808>)
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <tcp_input+0x80c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a9a:	4b16      	ldr	r3, [pc, #88]	; (8008af4 <tcp_input+0x800>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a9e:	885b      	ldrh	r3, [r3, #2]
 8008aa0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aa2:	4a14      	ldr	r2, [pc, #80]	; (8008af4 <tcp_input+0x800>)
 8008aa4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	b292      	uxth	r2, r2
 8008aaa:	9202      	str	r2, [sp, #8]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <tcp_input+0x810>)
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <tcp_input+0x814>)
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f003 fc74 	bl	800c3a4 <tcp_rst>
    pbuf_free(p);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fd fbb5 	bl	800622c <pbuf_free>
  return;
 8008ac2:	e00c      	b.n	8008ade <tcp_input+0x7ea>
    goto dropped;
 8008ac4:	bf00      	nop
 8008ac6:	e006      	b.n	8008ad6 <tcp_input+0x7e2>
    goto dropped;
 8008ac8:	bf00      	nop
 8008aca:	e004      	b.n	8008ad6 <tcp_input+0x7e2>
    goto dropped;
 8008acc:	bf00      	nop
 8008ace:	e002      	b.n	8008ad6 <tcp_input+0x7e2>
      goto dropped;
 8008ad0:	bf00      	nop
 8008ad2:	e000      	b.n	8008ad6 <tcp_input+0x7e2>
      goto dropped;
 8008ad4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7fd fba8 	bl	800622c <pbuf_free>
 8008adc:	e000      	b.n	8008ae0 <tcp_input+0x7ec>
  return;
 8008ade:	bf00      	nop
}
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd90      	pop	{r4, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200082e8 	.word	0x200082e8
 8008aec:	200082e4 	.word	0x200082e4
 8008af0:	200082b4 	.word	0x200082b4
 8008af4:	200082c4 	.word	0x200082c4
 8008af8:	200082d8 	.word	0x200082d8
 8008afc:	200082de 	.word	0x200082de
 8008b00:	200082d4 	.word	0x200082d4
 8008b04:	20004d3c 	.word	0x20004d3c
 8008b08:	20004d40 	.word	0x20004d40

08008b0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <tcp_input_delayed_close+0x1c>
 8008b1a:	4b17      	ldr	r3, [pc, #92]	; (8008b78 <tcp_input_delayed_close+0x6c>)
 8008b1c:	f240 225a 	movw	r2, #602	; 0x25a
 8008b20:	4916      	ldr	r1, [pc, #88]	; (8008b7c <tcp_input_delayed_close+0x70>)
 8008b22:	4817      	ldr	r0, [pc, #92]	; (8008b80 <tcp_input_delayed_close+0x74>)
 8008b24:	f006 fcca 	bl	800f4bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008b28:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <tcp_input_delayed_close+0x78>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01c      	beq.n	8008b6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8b5b      	ldrh	r3, [r3, #26]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10d      	bne.n	8008b5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <tcp_input_delayed_close+0x50>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6912      	ldr	r2, [r2, #16]
 8008b54:	f06f 010e 	mvn.w	r1, #14
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	480a      	ldr	r0, [pc, #40]	; (8008b88 <tcp_input_delayed_close+0x7c>)
 8008b60:	f7ff fa50 	bl	8008004 <tcp_pcb_remove>
    tcp_free(pcb);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fd fe01 	bl	800676c <tcp_free>
    return 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	08011534 	.word	0x08011534
 8008b7c:	08011704 	.word	0x08011704
 8008b80:	08011580 	.word	0x08011580
 8008b84:	200082e1 	.word	0x200082e1
 8008b88:	200082a8 	.word	0x200082a8

08008b8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b08b      	sub	sp, #44	; 0x2c
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008b94:	4b6f      	ldr	r3, [pc, #444]	; (8008d54 <tcp_listen_input+0x1c8>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f040 80d2 	bne.w	8008d46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <tcp_listen_input+0x2a>
 8008ba8:	4b6b      	ldr	r3, [pc, #428]	; (8008d58 <tcp_listen_input+0x1cc>)
 8008baa:	f240 2281 	movw	r2, #641	; 0x281
 8008bae:	496b      	ldr	r1, [pc, #428]	; (8008d5c <tcp_listen_input+0x1d0>)
 8008bb0:	486b      	ldr	r0, [pc, #428]	; (8008d60 <tcp_listen_input+0x1d4>)
 8008bb2:	f006 fc83 	bl	800f4bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008bb6:	4b67      	ldr	r3, [pc, #412]	; (8008d54 <tcp_listen_input+0x1c8>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d019      	beq.n	8008bf6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bc2:	4b68      	ldr	r3, [pc, #416]	; (8008d64 <tcp_listen_input+0x1d8>)
 8008bc4:	6819      	ldr	r1, [r3, #0]
 8008bc6:	4b68      	ldr	r3, [pc, #416]	; (8008d68 <tcp_listen_input+0x1dc>)
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b67      	ldr	r3, [pc, #412]	; (8008d6c <tcp_listen_input+0x1e0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bd2:	4b67      	ldr	r3, [pc, #412]	; (8008d70 <tcp_listen_input+0x1e4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bda:	4a65      	ldr	r2, [pc, #404]	; (8008d70 <tcp_listen_input+0x1e4>)
 8008bdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bde:	8812      	ldrh	r2, [r2, #0]
 8008be0:	b292      	uxth	r2, r2
 8008be2:	9202      	str	r2, [sp, #8]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	4b63      	ldr	r3, [pc, #396]	; (8008d74 <tcp_listen_input+0x1e8>)
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	4b63      	ldr	r3, [pc, #396]	; (8008d78 <tcp_listen_input+0x1ec>)
 8008bec:	4602      	mov	r2, r0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f003 fbd8 	bl	800c3a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008bf4:	e0a9      	b.n	8008d4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008bf6:	4b57      	ldr	r3, [pc, #348]	; (8008d54 <tcp_listen_input+0x1c8>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a3 	beq.w	8008d4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7d5b      	ldrb	r3, [r3, #21]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff f8c3 	bl	8007d94 <tcp_alloc>
 8008c0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d111      	bne.n	8008c3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <tcp_listen_input+0xa8>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6910      	ldr	r0, [r2, #16]
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4798      	blx	r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73bb      	strb	r3, [r7, #14]
      return;
 8008c32:	e08b      	b.n	8008d4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c34:	23f0      	movs	r3, #240	; 0xf0
 8008c36:	73bb      	strb	r3, [r7, #14]
      return;
 8008c38:	e088      	b.n	8008d4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c3a:	4b50      	ldr	r3, [pc, #320]	; (8008d7c <tcp_listen_input+0x1f0>)
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008c42:	4b4e      	ldr	r3, [pc, #312]	; (8008d7c <tcp_listen_input+0x1f0>)
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	8ada      	ldrh	r2, [r3, #22]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008c52:	4b47      	ldr	r3, [pc, #284]	; (8008d70 <tcp_listen_input+0x1e4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2203      	movs	r2, #3
 8008c62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c64:	4b41      	ldr	r3, [pc, #260]	; (8008d6c <tcp_listen_input+0x1e0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008c76:	6978      	ldr	r0, [r7, #20]
 8008c78:	f7ff fa58 	bl	800812c <tcp_next_iss>
 8008c7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c96:	4b35      	ldr	r3, [pc, #212]	; (8008d6c <tcp_listen_input+0x1e0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1e5a      	subs	r2, r3, #1
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	7a5b      	ldrb	r3, [r3, #9]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	7a1a      	ldrb	r2, [r3, #8]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008cc4:	4b2e      	ldr	r3, [pc, #184]	; (8008d80 <tcp_listen_input+0x1f4>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	60da      	str	r2, [r3, #12]
 8008ccc:	4a2c      	ldr	r2, [pc, #176]	; (8008d80 <tcp_listen_input+0x1f4>)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	f003 fd29 	bl	800c728 <tcp_timer_needed>
 8008cd6:	4b2b      	ldr	r3, [pc, #172]	; (8008d84 <tcp_listen_input+0x1f8>)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008cdc:	6978      	ldr	r0, [r7, #20]
 8008cde:	f001 fd8f 	bl	800a800 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008ce2:	4b23      	ldr	r3, [pc, #140]	; (8008d70 <tcp_listen_input+0x1e4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	89db      	ldrh	r3, [r3, #14]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f005 f8ed 	bl	800dee4 <ip4_route>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	461a      	mov	r2, r3
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff fa30 	bl	8008178 <tcp_eff_send_mss_netif>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d20:	2112      	movs	r1, #18
 8008d22:	6978      	ldr	r0, [r7, #20]
 8008d24:	f002 fc9c 	bl	800b660 <tcp_enqueue_flags>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008d34:	2100      	movs	r1, #0
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f7fd ff42 	bl	8006bc0 <tcp_abandon>
      return;
 8008d3c:	e006      	b.n	8008d4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f002 fd7c 	bl	800b83c <tcp_output>
  return;
 8008d44:	e001      	b.n	8008d4a <tcp_listen_input+0x1be>
    return;
 8008d46:	bf00      	nop
 8008d48:	e000      	b.n	8008d4c <tcp_listen_input+0x1c0>
  return;
 8008d4a:	bf00      	nop
}
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd90      	pop	{r4, r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200082e0 	.word	0x200082e0
 8008d58:	08011534 	.word	0x08011534
 8008d5c:	0801172c 	.word	0x0801172c
 8008d60:	08011580 	.word	0x08011580
 8008d64:	200082d8 	.word	0x200082d8
 8008d68:	200082de 	.word	0x200082de
 8008d6c:	200082d4 	.word	0x200082d4
 8008d70:	200082c4 	.word	0x200082c4
 8008d74:	20004d3c 	.word	0x20004d3c
 8008d78:	20004d40 	.word	0x20004d40
 8008d7c:	20004d2c 	.word	0x20004d2c
 8008d80:	200082a8 	.word	0x200082a8
 8008d84:	200082b0 	.word	0x200082b0

08008d88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af04      	add	r7, sp, #16
 8008d8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008d90:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <tcp_timewait_input+0xc8>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d153      	bne.n	8008e44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <tcp_timewait_input+0x28>
 8008da2:	4b2c      	ldr	r3, [pc, #176]	; (8008e54 <tcp_timewait_input+0xcc>)
 8008da4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008da8:	492b      	ldr	r1, [pc, #172]	; (8008e58 <tcp_timewait_input+0xd0>)
 8008daa:	482c      	ldr	r0, [pc, #176]	; (8008e5c <tcp_timewait_input+0xd4>)
 8008dac:	f006 fb86 	bl	800f4bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008db0:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <tcp_timewait_input+0xc8>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d02a      	beq.n	8008e12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008dbc:	4b28      	ldr	r3, [pc, #160]	; (8008e60 <tcp_timewait_input+0xd8>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	db2d      	blt.n	8008e26 <tcp_timewait_input+0x9e>
 8008dca:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <tcp_timewait_input+0xd8>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dd6:	440b      	add	r3, r1
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc23      	bgt.n	8008e26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dde:	4b21      	ldr	r3, [pc, #132]	; (8008e64 <tcp_timewait_input+0xdc>)
 8008de0:	6819      	ldr	r1, [r3, #0]
 8008de2:	4b21      	ldr	r3, [pc, #132]	; (8008e68 <tcp_timewait_input+0xe0>)
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <tcp_timewait_input+0xd8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dee:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <tcp_timewait_input+0xe4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008df2:	885b      	ldrh	r3, [r3, #2]
 8008df4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008df6:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <tcp_timewait_input+0xe4>)
 8008df8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	b292      	uxth	r2, r2
 8008dfe:	9202      	str	r2, [sp, #8]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <tcp_timewait_input+0xe8>)
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	4b1b      	ldr	r3, [pc, #108]	; (8008e74 <tcp_timewait_input+0xec>)
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f003 faca 	bl	800c3a4 <tcp_rst>
      return;
 8008e10:	e01b      	b.n	8008e4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <tcp_timewait_input+0xc8>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e1e:	4b16      	ldr	r3, [pc, #88]	; (8008e78 <tcp_timewait_input+0xf0>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <tcp_timewait_input+0xe0>)
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00c      	beq.n	8008e48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8b5b      	ldrh	r3, [r3, #26]
 8008e32:	f043 0302 	orr.w	r3, r3, #2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 fcfd 	bl	800b83c <tcp_output>
  }
  return;
 8008e42:	e001      	b.n	8008e48 <tcp_timewait_input+0xc0>
    return;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <tcp_timewait_input+0xc2>
  return;
 8008e48:	bf00      	nop
}
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	200082e0 	.word	0x200082e0
 8008e54:	08011534 	.word	0x08011534
 8008e58:	0801174c 	.word	0x0801174c
 8008e5c:	08011580 	.word	0x08011580
 8008e60:	200082d4 	.word	0x200082d4
 8008e64:	200082d8 	.word	0x200082d8
 8008e68:	200082de 	.word	0x200082de
 8008e6c:	200082c4 	.word	0x200082c4
 8008e70:	20004d3c 	.word	0x20004d3c
 8008e74:	20004d40 	.word	0x20004d40
 8008e78:	2000829c 	.word	0x2000829c

08008e7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008e7c:	b590      	push	{r4, r7, lr}
 8008e7e:	b08d      	sub	sp, #52	; 0x34
 8008e80:	af04      	add	r7, sp, #16
 8008e82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <tcp_process+0x24>
 8008e92:	4b9d      	ldr	r3, [pc, #628]	; (8009108 <tcp_process+0x28c>)
 8008e94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e98:	499c      	ldr	r1, [pc, #624]	; (800910c <tcp_process+0x290>)
 8008e9a:	489d      	ldr	r0, [pc, #628]	; (8009110 <tcp_process+0x294>)
 8008e9c:	f006 fb0e 	bl	800f4bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008ea0:	4b9c      	ldr	r3, [pc, #624]	; (8009114 <tcp_process+0x298>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d04e      	beq.n	8008f4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7d1b      	ldrb	r3, [r3, #20]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d108      	bne.n	8008ec6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eb8:	4b97      	ldr	r3, [pc, #604]	; (8009118 <tcp_process+0x29c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d123      	bne.n	8008f08 <tcp_process+0x8c>
        acceptable = 1;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	76fb      	strb	r3, [r7, #27]
 8008ec4:	e020      	b.n	8008f08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eca:	4b94      	ldr	r3, [pc, #592]	; (800911c <tcp_process+0x2a0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d102      	bne.n	8008ed8 <tcp_process+0x5c>
        acceptable = 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	76fb      	strb	r3, [r7, #27]
 8008ed6:	e017      	b.n	8008f08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ed8:	4b90      	ldr	r3, [pc, #576]	; (800911c <tcp_process+0x2a0>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db10      	blt.n	8008f08 <tcp_process+0x8c>
 8008ee6:	4b8d      	ldr	r3, [pc, #564]	; (800911c <tcp_process+0x2a0>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ef2:	440b      	add	r3, r1
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dc06      	bgt.n	8008f08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8b5b      	ldrh	r3, [r3, #26]
 8008efe:	f043 0302 	orr.w	r3, r3, #2
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008f08:	7efb      	ldrb	r3, [r7, #27]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7d1b      	ldrb	r3, [r3, #20]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <tcp_process+0xa8>
 8008f16:	4b7c      	ldr	r3, [pc, #496]	; (8009108 <tcp_process+0x28c>)
 8008f18:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008f1c:	4980      	ldr	r1, [pc, #512]	; (8009120 <tcp_process+0x2a4>)
 8008f1e:	487c      	ldr	r0, [pc, #496]	; (8009110 <tcp_process+0x294>)
 8008f20:	f006 facc 	bl	800f4bc <iprintf>
      recv_flags |= TF_RESET;
 8008f24:	4b7f      	ldr	r3, [pc, #508]	; (8009124 <tcp_process+0x2a8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f043 0308 	orr.w	r3, r3, #8
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b7d      	ldr	r3, [pc, #500]	; (8009124 <tcp_process+0x2a8>)
 8008f30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8b5b      	ldrh	r3, [r3, #26]
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008f40:	f06f 030d 	mvn.w	r3, #13
 8008f44:	e37a      	b.n	800963c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	e378      	b.n	800963c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008f4a:	4b72      	ldr	r3, [pc, #456]	; (8009114 <tcp_process+0x298>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d010      	beq.n	8008f78 <tcp_process+0xfc>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7d1b      	ldrb	r3, [r3, #20]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d00c      	beq.n	8008f78 <tcp_process+0xfc>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7d1b      	ldrb	r3, [r3, #20]
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d008      	beq.n	8008f78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8b5b      	ldrh	r3, [r3, #26]
 8008f6a:	f043 0302 	orr.w	r3, r3, #2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	e361      	b.n	800963c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	8b5b      	ldrh	r3, [r3, #26]
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d103      	bne.n	8008f8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008f84:	4b68      	ldr	r3, [pc, #416]	; (8009128 <tcp_process+0x2ac>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fc2f 	bl	800a800 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7d1b      	ldrb	r3, [r3, #20]
 8008fa6:	3b02      	subs	r3, #2
 8008fa8:	2b07      	cmp	r3, #7
 8008faa:	f200 8337 	bhi.w	800961c <tcp_process+0x7a0>
 8008fae:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <tcp_process+0x138>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08009205 	.word	0x08009205
 8008fbc:	0800937d 	.word	0x0800937d
 8008fc0:	080093a7 	.word	0x080093a7
 8008fc4:	080094cb 	.word	0x080094cb
 8008fc8:	0800937d 	.word	0x0800937d
 8008fcc:	08009557 	.word	0x08009557
 8008fd0:	080095e7 	.word	0x080095e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008fd4:	4b4f      	ldr	r3, [pc, #316]	; (8009114 <tcp_process+0x298>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80e4 	beq.w	80091aa <tcp_process+0x32e>
 8008fe2:	4b4c      	ldr	r3, [pc, #304]	; (8009114 <tcp_process+0x298>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 80dd 	beq.w	80091aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	4b48      	ldr	r3, [pc, #288]	; (8009118 <tcp_process+0x29c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	f040 80d5 	bne.w	80091aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009000:	4b46      	ldr	r3, [pc, #280]	; (800911c <tcp_process+0x2a0>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009012:	4b41      	ldr	r3, [pc, #260]	; (8009118 <tcp_process+0x29c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800901a:	4b44      	ldr	r3, [pc, #272]	; (800912c <tcp_process+0x2b0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	89db      	ldrh	r3, [r3, #14]
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009034:	4b39      	ldr	r3, [pc, #228]	; (800911c <tcp_process+0x2a0>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2204      	movs	r2, #4
 8009042:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3304      	adds	r3, #4
 800904c:	4618      	mov	r0, r3
 800904e:	f004 ff49 	bl	800dee4 <ip4_route>
 8009052:	4601      	mov	r1, r0
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3304      	adds	r3, #4
 8009058:	461a      	mov	r2, r3
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff f88c 	bl	8008178 <tcp_eff_send_mss_netif>
 8009060:	4603      	mov	r3, r0
 8009062:	461a      	mov	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800906c:	009a      	lsls	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	f241 111c 	movw	r1, #4380	; 0x111c
 8009078:	428b      	cmp	r3, r1
 800907a:	bf38      	it	cc
 800907c:	460b      	movcc	r3, r1
 800907e:	429a      	cmp	r2, r3
 8009080:	d204      	bcs.n	800908c <tcp_process+0x210>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	b29b      	uxth	r3, r3
 800908a:	e00d      	b.n	80090a8 <tcp_process+0x22c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	f241 121c 	movw	r2, #4380	; 0x111c
 8009096:	4293      	cmp	r3, r2
 8009098:	d904      	bls.n	80090a4 <tcp_process+0x228>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	e001      	b.n	80090a8 <tcp_process+0x22c>
 80090a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <tcp_process+0x24a>
 80090b8:	4b13      	ldr	r3, [pc, #76]	; (8009108 <tcp_process+0x28c>)
 80090ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80090be:	491c      	ldr	r1, [pc, #112]	; (8009130 <tcp_process+0x2b4>)
 80090c0:	4813      	ldr	r0, [pc, #76]	; (8009110 <tcp_process+0x294>)
 80090c2:	f006 f9fb 	bl	800f4bc <iprintf>
        --pcb->snd_queuelen;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d12a      	bne.n	8009138 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <tcp_process+0x280>
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <tcp_process+0x28c>)
 80090f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80090f4:	490f      	ldr	r1, [pc, #60]	; (8009134 <tcp_process+0x2b8>)
 80090f6:	4806      	ldr	r0, [pc, #24]	; (8009110 <tcp_process+0x294>)
 80090f8:	f006 f9e0 	bl	800f4bc <iprintf>
          pcb->unsent = rseg->next;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	66da      	str	r2, [r3, #108]	; 0x6c
 8009104:	e01c      	b.n	8009140 <tcp_process+0x2c4>
 8009106:	bf00      	nop
 8009108:	08011534 	.word	0x08011534
 800910c:	0801176c 	.word	0x0801176c
 8009110:	08011580 	.word	0x08011580
 8009114:	200082e0 	.word	0x200082e0
 8009118:	200082d8 	.word	0x200082d8
 800911c:	200082d4 	.word	0x200082d4
 8009120:	08011788 	.word	0x08011788
 8009124:	200082e1 	.word	0x200082e1
 8009128:	2000829c 	.word	0x2000829c
 800912c:	200082c4 	.word	0x200082c4
 8009130:	080117a8 	.word	0x080117a8
 8009134:	080117c0 	.word	0x080117c0
        } else {
          pcb->unacked = rseg->next;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009140:	69f8      	ldr	r0, [r7, #28]
 8009142:	f7fe fca0 	bl	8007a86 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	2b00      	cmp	r3, #0
 800914c:	d104      	bne.n	8009158 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009154:	861a      	strh	r2, [r3, #48]	; 0x30
 8009156:	e006      	b.n	8009166 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00a      	beq.n	8009186 <tcp_process+0x30a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6910      	ldr	r0, [r2, #16]
 800917a:	2200      	movs	r2, #0
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4798      	blx	r3
 8009180:	4603      	mov	r3, r0
 8009182:	76bb      	strb	r3, [r7, #26]
 8009184:	e001      	b.n	800918a <tcp_process+0x30e>
 8009186:	2300      	movs	r3, #0
 8009188:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800918a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800918e:	f113 0f0d 	cmn.w	r3, #13
 8009192:	d102      	bne.n	800919a <tcp_process+0x31e>
          return ERR_ABRT;
 8009194:	f06f 030c 	mvn.w	r3, #12
 8009198:	e250      	b.n	800963c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	8b5b      	ldrh	r3, [r3, #26]
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80091a8:	e23a      	b.n	8009620 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80091aa:	4b98      	ldr	r3, [pc, #608]	; (800940c <tcp_process+0x590>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8234 	beq.w	8009620 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091b8:	4b95      	ldr	r3, [pc, #596]	; (8009410 <tcp_process+0x594>)
 80091ba:	6819      	ldr	r1, [r3, #0]
 80091bc:	4b95      	ldr	r3, [pc, #596]	; (8009414 <tcp_process+0x598>)
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b95      	ldr	r3, [pc, #596]	; (8009418 <tcp_process+0x59c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091c8:	4b94      	ldr	r3, [pc, #592]	; (800941c <tcp_process+0x5a0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091cc:	885b      	ldrh	r3, [r3, #2]
 80091ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091d0:	4a92      	ldr	r2, [pc, #584]	; (800941c <tcp_process+0x5a0>)
 80091d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091d4:	8812      	ldrh	r2, [r2, #0]
 80091d6:	b292      	uxth	r2, r2
 80091d8:	9202      	str	r2, [sp, #8]
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	4b90      	ldr	r3, [pc, #576]	; (8009420 <tcp_process+0x5a4>)
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4b90      	ldr	r3, [pc, #576]	; (8009424 <tcp_process+0x5a8>)
 80091e2:	4602      	mov	r2, r0
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f003 f8dd 	bl	800c3a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	f200 8215 	bhi.w	8009620 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f002 fea9 	bl	800bf54 <tcp_rexmit_rto>
      break;
 8009202:	e20d      	b.n	8009620 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009204:	4b81      	ldr	r3, [pc, #516]	; (800940c <tcp_process+0x590>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 0310 	and.w	r3, r3, #16
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80a1 	beq.w	8009354 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009212:	4b7f      	ldr	r3, [pc, #508]	; (8009410 <tcp_process+0x594>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	db7e      	blt.n	8009320 <tcp_process+0x4a4>
 8009222:	4b7b      	ldr	r3, [pc, #492]	; (8009410 <tcp_process+0x594>)
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	dc77      	bgt.n	8009320 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2204      	movs	r2, #4
 8009234:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800923e:	23fa      	movs	r3, #250	; 0xfa
 8009240:	76bb      	strb	r3, [r7, #26]
 8009242:	e01d      	b.n	8009280 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <tcp_process+0x3e0>
 800924e:	4b76      	ldr	r3, [pc, #472]	; (8009428 <tcp_process+0x5ac>)
 8009250:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009254:	4975      	ldr	r1, [pc, #468]	; (800942c <tcp_process+0x5b0>)
 8009256:	4876      	ldr	r0, [pc, #472]	; (8009430 <tcp_process+0x5b4>)
 8009258:	f006 f930 	bl	800f4bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <tcp_process+0x400>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6910      	ldr	r0, [r2, #16]
 8009270:	2200      	movs	r2, #0
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4798      	blx	r3
 8009276:	4603      	mov	r3, r0
 8009278:	76bb      	strb	r3, [r7, #26]
 800927a:	e001      	b.n	8009280 <tcp_process+0x404>
 800927c:	23f0      	movs	r3, #240	; 0xf0
 800927e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009280:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00a      	beq.n	800929e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009288:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800928c:	f113 0f0d 	cmn.w	r3, #13
 8009290:	d002      	beq.n	8009298 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fd fd52 	bl	8006d3c <tcp_abort>
            }
            return ERR_ABRT;
 8009298:	f06f 030c 	mvn.w	r3, #12
 800929c:	e1ce      	b.n	800963c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fae0 	bl	8009864 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80092a4:	4b63      	ldr	r3, [pc, #396]	; (8009434 <tcp_process+0x5b8>)
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <tcp_process+0x43c>
            recv_acked--;
 80092ac:	4b61      	ldr	r3, [pc, #388]	; (8009434 <tcp_process+0x5b8>)
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	4b5f      	ldr	r3, [pc, #380]	; (8009434 <tcp_process+0x5b8>)
 80092b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092bc:	009a      	lsls	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80092c8:	428b      	cmp	r3, r1
 80092ca:	bf38      	it	cc
 80092cc:	460b      	movcc	r3, r1
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d204      	bcs.n	80092dc <tcp_process+0x460>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	b29b      	uxth	r3, r3
 80092da:	e00d      	b.n	80092f8 <tcp_process+0x47c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d904      	bls.n	80092f4 <tcp_process+0x478>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	e001      	b.n	80092f8 <tcp_process+0x47c>
 80092f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80092fe:	4b4e      	ldr	r3, [pc, #312]	; (8009438 <tcp_process+0x5bc>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b00      	cmp	r3, #0
 8009308:	d037      	beq.n	800937a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	8b5b      	ldrh	r3, [r3, #26]
 800930e:	f043 0302 	orr.w	r3, r3, #2
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2207      	movs	r2, #7
 800931c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800931e:	e02c      	b.n	800937a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009320:	4b3b      	ldr	r3, [pc, #236]	; (8009410 <tcp_process+0x594>)
 8009322:	6819      	ldr	r1, [r3, #0]
 8009324:	4b3b      	ldr	r3, [pc, #236]	; (8009414 <tcp_process+0x598>)
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	4b3b      	ldr	r3, [pc, #236]	; (8009418 <tcp_process+0x59c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009330:	4b3a      	ldr	r3, [pc, #232]	; (800941c <tcp_process+0x5a0>)
 8009332:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009334:	885b      	ldrh	r3, [r3, #2]
 8009336:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009338:	4a38      	ldr	r2, [pc, #224]	; (800941c <tcp_process+0x5a0>)
 800933a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800933c:	8812      	ldrh	r2, [r2, #0]
 800933e:	b292      	uxth	r2, r2
 8009340:	9202      	str	r2, [sp, #8]
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	4b36      	ldr	r3, [pc, #216]	; (8009420 <tcp_process+0x5a4>)
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4b36      	ldr	r3, [pc, #216]	; (8009424 <tcp_process+0x5a8>)
 800934a:	4602      	mov	r2, r0
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f003 f829 	bl	800c3a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009352:	e167      	b.n	8009624 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009354:	4b2d      	ldr	r3, [pc, #180]	; (800940c <tcp_process+0x590>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8161 	beq.w	8009624 <tcp_process+0x7a8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	4b2b      	ldr	r3, [pc, #172]	; (8009418 <tcp_process+0x59c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	f040 8159 	bne.w	8009624 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 fe10 	bl	800bf98 <tcp_rexmit>
      break;
 8009378:	e154      	b.n	8009624 <tcp_process+0x7a8>
 800937a:	e153      	b.n	8009624 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa71 	bl	8009864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009382:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <tcp_process+0x5bc>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 814c 	beq.w	8009628 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8b5b      	ldrh	r3, [r3, #26]
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2207      	movs	r2, #7
 80093a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80093a4:	e140      	b.n	8009628 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa5c 	bl	8009864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80093ac:	4b22      	ldr	r3, [pc, #136]	; (8009438 <tcp_process+0x5bc>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d071      	beq.n	800949c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093b8:	4b14      	ldr	r3, [pc, #80]	; (800940c <tcp_process+0x590>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d060      	beq.n	8009486 <tcp_process+0x60a>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <tcp_process+0x594>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d15a      	bne.n	8009486 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d156      	bne.n	8009486 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	8b5b      	ldrh	r3, [r3, #26]
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fe fdbc 	bl	8007f64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80093ec:	4b13      	ldr	r3, [pc, #76]	; (800943c <tcp_process+0x5c0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d105      	bne.n	8009402 <tcp_process+0x586>
 80093f6:	4b11      	ldr	r3, [pc, #68]	; (800943c <tcp_process+0x5c0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	4a0f      	ldr	r2, [pc, #60]	; (800943c <tcp_process+0x5c0>)
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e02e      	b.n	8009460 <tcp_process+0x5e4>
 8009402:	4b0e      	ldr	r3, [pc, #56]	; (800943c <tcp_process+0x5c0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e027      	b.n	800945a <tcp_process+0x5de>
 800940a:	bf00      	nop
 800940c:	200082e0 	.word	0x200082e0
 8009410:	200082d8 	.word	0x200082d8
 8009414:	200082de 	.word	0x200082de
 8009418:	200082d4 	.word	0x200082d4
 800941c:	200082c4 	.word	0x200082c4
 8009420:	20004d3c 	.word	0x20004d3c
 8009424:	20004d40 	.word	0x20004d40
 8009428:	08011534 	.word	0x08011534
 800942c:	080117d4 	.word	0x080117d4
 8009430:	08011580 	.word	0x08011580
 8009434:	200082dc 	.word	0x200082dc
 8009438:	200082e1 	.word	0x200082e1
 800943c:	200082a8 	.word	0x200082a8
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d104      	bne.n	8009454 <tcp_process+0x5d8>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	e005      	b.n	8009460 <tcp_process+0x5e4>
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1ef      	bne.n	8009440 <tcp_process+0x5c4>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	4b77      	ldr	r3, [pc, #476]	; (8009644 <tcp_process+0x7c8>)
 8009468:	2201      	movs	r2, #1
 800946a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	220a      	movs	r2, #10
 8009470:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009472:	4b75      	ldr	r3, [pc, #468]	; (8009648 <tcp_process+0x7cc>)
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60da      	str	r2, [r3, #12]
 800947a:	4a73      	ldr	r2, [pc, #460]	; (8009648 <tcp_process+0x7cc>)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	f003 f952 	bl	800c728 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009484:	e0d2      	b.n	800962c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8b5b      	ldrh	r3, [r3, #26]
 800948a:	f043 0302 	orr.w	r3, r3, #2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2208      	movs	r2, #8
 8009498:	751a      	strb	r2, [r3, #20]
      break;
 800949a:	e0c7      	b.n	800962c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800949c:	4b6b      	ldr	r3, [pc, #428]	; (800964c <tcp_process+0x7d0>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0310 	and.w	r3, r3, #16
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80c1 	beq.w	800962c <tcp_process+0x7b0>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ae:	4b68      	ldr	r3, [pc, #416]	; (8009650 <tcp_process+0x7d4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f040 80ba 	bne.w	800962c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f040 80b5 	bne.w	800962c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2206      	movs	r2, #6
 80094c6:	751a      	strb	r2, [r3, #20]
      break;
 80094c8:	e0b0      	b.n	800962c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f9ca 	bl	8009864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80094d0:	4b60      	ldr	r3, [pc, #384]	; (8009654 <tcp_process+0x7d8>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80a9 	beq.w	8009630 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8b5b      	ldrh	r3, [r3, #26]
 80094e2:	f043 0302 	orr.w	r3, r3, #2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7fe fd39 	bl	8007f64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80094f2:	4b59      	ldr	r3, [pc, #356]	; (8009658 <tcp_process+0x7dc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d105      	bne.n	8009508 <tcp_process+0x68c>
 80094fc:	4b56      	ldr	r3, [pc, #344]	; (8009658 <tcp_process+0x7dc>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	4a55      	ldr	r2, [pc, #340]	; (8009658 <tcp_process+0x7dc>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	e013      	b.n	8009530 <tcp_process+0x6b4>
 8009508:	4b53      	ldr	r3, [pc, #332]	; (8009658 <tcp_process+0x7dc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	613b      	str	r3, [r7, #16]
 800950e:	e00c      	b.n	800952a <tcp_process+0x6ae>
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d104      	bne.n	8009524 <tcp_process+0x6a8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	e005      	b.n	8009530 <tcp_process+0x6b4>
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1ef      	bne.n	8009510 <tcp_process+0x694>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	60da      	str	r2, [r3, #12]
 8009536:	4b43      	ldr	r3, [pc, #268]	; (8009644 <tcp_process+0x7c8>)
 8009538:	2201      	movs	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	220a      	movs	r2, #10
 8009540:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009542:	4b41      	ldr	r3, [pc, #260]	; (8009648 <tcp_process+0x7cc>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60da      	str	r2, [r3, #12]
 800954a:	4a3f      	ldr	r2, [pc, #252]	; (8009648 <tcp_process+0x7cc>)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	f003 f8ea 	bl	800c728 <tcp_timer_needed>
      }
      break;
 8009554:	e06c      	b.n	8009630 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f984 	bl	8009864 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800955c:	4b3b      	ldr	r3, [pc, #236]	; (800964c <tcp_process+0x7d0>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d065      	beq.n	8009634 <tcp_process+0x7b8>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800956c:	4b38      	ldr	r3, [pc, #224]	; (8009650 <tcp_process+0x7d4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d15f      	bne.n	8009634 <tcp_process+0x7b8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009578:	2b00      	cmp	r3, #0
 800957a:	d15b      	bne.n	8009634 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7fe fcf1 	bl	8007f64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009582:	4b35      	ldr	r3, [pc, #212]	; (8009658 <tcp_process+0x7dc>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d105      	bne.n	8009598 <tcp_process+0x71c>
 800958c:	4b32      	ldr	r3, [pc, #200]	; (8009658 <tcp_process+0x7dc>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	4a31      	ldr	r2, [pc, #196]	; (8009658 <tcp_process+0x7dc>)
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	e013      	b.n	80095c0 <tcp_process+0x744>
 8009598:	4b2f      	ldr	r3, [pc, #188]	; (8009658 <tcp_process+0x7dc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	e00c      	b.n	80095ba <tcp_process+0x73e>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d104      	bne.n	80095b4 <tcp_process+0x738>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60da      	str	r2, [r3, #12]
 80095b2:	e005      	b.n	80095c0 <tcp_process+0x744>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1ef      	bne.n	80095a0 <tcp_process+0x724>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	60da      	str	r2, [r3, #12]
 80095c6:	4b1f      	ldr	r3, [pc, #124]	; (8009644 <tcp_process+0x7c8>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	220a      	movs	r2, #10
 80095d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095d2:	4b1d      	ldr	r3, [pc, #116]	; (8009648 <tcp_process+0x7cc>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60da      	str	r2, [r3, #12]
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <tcp_process+0x7cc>)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	f003 f8a2 	bl	800c728 <tcp_timer_needed>
      }
      break;
 80095e4:	e026      	b.n	8009634 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f93c 	bl	8009864 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <tcp_process+0x7d0>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01f      	beq.n	8009638 <tcp_process+0x7bc>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095fc:	4b14      	ldr	r3, [pc, #80]	; (8009650 <tcp_process+0x7d4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d119      	bne.n	8009638 <tcp_process+0x7bc>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d115      	bne.n	8009638 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800960c:	4b11      	ldr	r3, [pc, #68]	; (8009654 <tcp_process+0x7d8>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f043 0310 	orr.w	r3, r3, #16
 8009614:	b2da      	uxtb	r2, r3
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <tcp_process+0x7d8>)
 8009618:	701a      	strb	r2, [r3, #0]
      }
      break;
 800961a:	e00d      	b.n	8009638 <tcp_process+0x7bc>
    default:
      break;
 800961c:	bf00      	nop
 800961e:	e00c      	b.n	800963a <tcp_process+0x7be>
      break;
 8009620:	bf00      	nop
 8009622:	e00a      	b.n	800963a <tcp_process+0x7be>
      break;
 8009624:	bf00      	nop
 8009626:	e008      	b.n	800963a <tcp_process+0x7be>
      break;
 8009628:	bf00      	nop
 800962a:	e006      	b.n	800963a <tcp_process+0x7be>
      break;
 800962c:	bf00      	nop
 800962e:	e004      	b.n	800963a <tcp_process+0x7be>
      break;
 8009630:	bf00      	nop
 8009632:	e002      	b.n	800963a <tcp_process+0x7be>
      break;
 8009634:	bf00      	nop
 8009636:	e000      	b.n	800963a <tcp_process+0x7be>
      break;
 8009638:	bf00      	nop
  }
  return ERR_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3724      	adds	r7, #36	; 0x24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd90      	pop	{r4, r7, pc}
 8009644:	200082b0 	.word	0x200082b0
 8009648:	200082ac 	.word	0x200082ac
 800964c:	200082e0 	.word	0x200082e0
 8009650:	200082d8 	.word	0x200082d8
 8009654:	200082e1 	.word	0x200082e1
 8009658:	200082a8 	.word	0x200082a8

0800965c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <tcp_oos_insert_segment+0x1e>
 800966c:	4b3b      	ldr	r3, [pc, #236]	; (800975c <tcp_oos_insert_segment+0x100>)
 800966e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009672:	493b      	ldr	r1, [pc, #236]	; (8009760 <tcp_oos_insert_segment+0x104>)
 8009674:	483b      	ldr	r0, [pc, #236]	; (8009764 <tcp_oos_insert_segment+0x108>)
 8009676:	f005 ff21 	bl	800f4bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	899b      	ldrh	r3, [r3, #12]
 8009680:	b29b      	uxth	r3, r3
 8009682:	4618      	mov	r0, r3
 8009684:	f7fb fa74 	bl	8004b70 <lwip_htons>
 8009688:	4603      	mov	r3, r0
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d028      	beq.n	80096e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009694:	6838      	ldr	r0, [r7, #0]
 8009696:	f7fe f9e1 	bl	8007a5c <tcp_segs_free>
    next = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	e056      	b.n	800974e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	899b      	ldrh	r3, [r3, #12]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fb fa61 	bl	8004b70 <lwip_htons>
 80096ae:	4603      	mov	r3, r0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00d      	beq.n	80096d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	899b      	ldrh	r3, [r3, #12]
 80096c0:	b29c      	uxth	r4, r3
 80096c2:	2001      	movs	r0, #1
 80096c4:	f7fb fa54 	bl	8004b70 <lwip_htons>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	4322      	orrs	r2, r4
 80096d2:	b292      	uxth	r2, r2
 80096d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7fe f9d0 	bl	8007a86 <tcp_seg_free>
    while (next &&
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00e      	beq.n	800970a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	891b      	ldrh	r3, [r3, #8]
 80096f0:	461a      	mov	r2, r3
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <tcp_oos_insert_segment+0x10c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	441a      	add	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	8909      	ldrh	r1, [r1, #8]
 8009702:	440b      	add	r3, r1
 8009704:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009706:	2b00      	cmp	r3, #0
 8009708:	daca      	bge.n	80096a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01e      	beq.n	800974e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	891b      	ldrh	r3, [r3, #8]
 8009714:	461a      	mov	r2, r3
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <tcp_oos_insert_segment+0x10c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	441a      	add	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd12      	ble.n	800974e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b29a      	uxth	r2, r3
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <tcp_oos_insert_segment+0x10c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	891b      	ldrh	r3, [r3, #8]
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fc fbe9 	bl	8005f20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	bd90      	pop	{r4, r7, pc}
 800975c:	08011534 	.word	0x08011534
 8009760:	080117f4 	.word	0x080117f4
 8009764:	08011580 	.word	0x08011580
 8009768:	200082d4 	.word	0x200082d4

0800976c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800976c:	b5b0      	push	{r4, r5, r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800977a:	e03e      	b.n	80097fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4618      	mov	r0, r3
 800978c:	f7fc fdd6 	bl	800633c <pbuf_clen>
 8009790:	4603      	mov	r3, r0
 8009792:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800979a:	8a7a      	ldrh	r2, [r7, #18]
 800979c:	429a      	cmp	r2, r3
 800979e:	d906      	bls.n	80097ae <tcp_free_acked_segments+0x42>
 80097a0:	4b2a      	ldr	r3, [pc, #168]	; (800984c <tcp_free_acked_segments+0xe0>)
 80097a2:	f240 4257 	movw	r2, #1111	; 0x457
 80097a6:	492a      	ldr	r1, [pc, #168]	; (8009850 <tcp_free_acked_segments+0xe4>)
 80097a8:	482a      	ldr	r0, [pc, #168]	; (8009854 <tcp_free_acked_segments+0xe8>)
 80097aa:	f005 fe87 	bl	800f4bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80097b4:	8a7b      	ldrh	r3, [r7, #18]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	891a      	ldrh	r2, [r3, #8]
 80097c4:	4b24      	ldr	r3, [pc, #144]	; (8009858 <tcp_free_acked_segments+0xec>)
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	4413      	add	r3, r2
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	4b22      	ldr	r3, [pc, #136]	; (8009858 <tcp_free_acked_segments+0xec>)
 80097ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80097d0:	6978      	ldr	r0, [r7, #20]
 80097d2:	f7fe f958 	bl	8007a86 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <tcp_free_acked_segments+0x8e>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <tcp_free_acked_segments+0x8e>
 80097ec:	4b17      	ldr	r3, [pc, #92]	; (800984c <tcp_free_acked_segments+0xe0>)
 80097ee:	f240 4261 	movw	r2, #1121	; 0x461
 80097f2:	491a      	ldr	r1, [pc, #104]	; (800985c <tcp_free_acked_segments+0xf0>)
 80097f4:	4817      	ldr	r0, [pc, #92]	; (8009854 <tcp_free_acked_segments+0xe8>)
 80097f6:	f005 fe61 	bl	800f4bc <iprintf>
  while (seg_list != NULL &&
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d020      	beq.n	8009842 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	f7fb f9c7 	bl	8004b9a <lwip_htonl>
 800980c:	4604      	mov	r4, r0
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	891b      	ldrh	r3, [r3, #8]
 8009812:	461d      	mov	r5, r3
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	899b      	ldrh	r3, [r3, #12]
 800981a:	b29b      	uxth	r3, r3
 800981c:	4618      	mov	r0, r3
 800981e:	f7fb f9a7 	bl	8004b70 <lwip_htons>
 8009822:	4603      	mov	r3, r0
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <tcp_free_acked_segments+0xc6>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <tcp_free_acked_segments+0xc8>
 8009832:	2300      	movs	r3, #0
 8009834:	442b      	add	r3, r5
 8009836:	18e2      	adds	r2, r4, r3
 8009838:	4b09      	ldr	r3, [pc, #36]	; (8009860 <tcp_free_acked_segments+0xf4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800983e:	2b00      	cmp	r3, #0
 8009840:	dd9c      	ble.n	800977c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009842:	68bb      	ldr	r3, [r7, #8]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bdb0      	pop	{r4, r5, r7, pc}
 800984c:	08011534 	.word	0x08011534
 8009850:	0801181c 	.word	0x0801181c
 8009854:	08011580 	.word	0x08011580
 8009858:	200082dc 	.word	0x200082dc
 800985c:	08011844 	.word	0x08011844
 8009860:	200082d8 	.word	0x200082d8

08009864 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009864:	b5b0      	push	{r4, r5, r7, lr}
 8009866:	b094      	sub	sp, #80	; 0x50
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <tcp_receive+0x20>
 8009876:	4b91      	ldr	r3, [pc, #580]	; (8009abc <tcp_receive+0x258>)
 8009878:	f240 427b 	movw	r2, #1147	; 0x47b
 800987c:	4990      	ldr	r1, [pc, #576]	; (8009ac0 <tcp_receive+0x25c>)
 800987e:	4891      	ldr	r0, [pc, #580]	; (8009ac4 <tcp_receive+0x260>)
 8009880:	f005 fe1c 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7d1b      	ldrb	r3, [r3, #20]
 8009888:	2b03      	cmp	r3, #3
 800988a:	d806      	bhi.n	800989a <tcp_receive+0x36>
 800988c:	4b8b      	ldr	r3, [pc, #556]	; (8009abc <tcp_receive+0x258>)
 800988e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009892:	498d      	ldr	r1, [pc, #564]	; (8009ac8 <tcp_receive+0x264>)
 8009894:	488b      	ldr	r0, [pc, #556]	; (8009ac4 <tcp_receive+0x260>)
 8009896:	f005 fe11 	bl	800f4bc <iprintf>

  if (flags & TCP_ACK) {
 800989a:	4b8c      	ldr	r3, [pc, #560]	; (8009acc <tcp_receive+0x268>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8264 	beq.w	8009d70 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b4:	4413      	add	r3, r2
 80098b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098bc:	4b84      	ldr	r3, [pc, #528]	; (8009ad0 <tcp_receive+0x26c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	db1b      	blt.n	80098fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ca:	4b81      	ldr	r3, [pc, #516]	; (8009ad0 <tcp_receive+0x26c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d106      	bne.n	80098e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098d6:	4b7f      	ldr	r3, [pc, #508]	; (8009ad4 <tcp_receive+0x270>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	db0e      	blt.n	80098fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098e4:	4b7b      	ldr	r3, [pc, #492]	; (8009ad4 <tcp_receive+0x270>)
 80098e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d125      	bne.n	8009938 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098ec:	4b7a      	ldr	r3, [pc, #488]	; (8009ad8 <tcp_receive+0x274>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	89db      	ldrh	r3, [r3, #14]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d91c      	bls.n	8009938 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80098fe:	4b76      	ldr	r3, [pc, #472]	; (8009ad8 <tcp_receive+0x274>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	89db      	ldrh	r3, [r3, #14]
 8009904:	b29a      	uxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009918:	429a      	cmp	r2, r3
 800991a:	d205      	bcs.n	8009928 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009928:	4b69      	ldr	r3, [pc, #420]	; (8009ad0 <tcp_receive+0x26c>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009930:	4b68      	ldr	r3, [pc, #416]	; (8009ad4 <tcp_receive+0x270>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009938:	4b66      	ldr	r3, [pc, #408]	; (8009ad4 <tcp_receive+0x270>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	dc58      	bgt.n	80099f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009946:	4b65      	ldr	r3, [pc, #404]	; (8009adc <tcp_receive+0x278>)
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d14b      	bne.n	80099e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009958:	4413      	add	r3, r2
 800995a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995c:	429a      	cmp	r2, r3
 800995e:	d142      	bne.n	80099e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009966:	2b00      	cmp	r3, #0
 8009968:	db3d      	blt.n	80099e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996e:	4b59      	ldr	r3, [pc, #356]	; (8009ad4 <tcp_receive+0x270>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	d137      	bne.n	80099e6 <tcp_receive+0x182>
              found_dupack = 1;
 8009976:	2301      	movs	r3, #1
 8009978:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009980:	2bff      	cmp	r3, #255	; 0xff
 8009982:	d007      	beq.n	8009994 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800998a:	3301      	adds	r3, #1
 800998c:	b2da      	uxtb	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800999a:	2b03      	cmp	r3, #3
 800999c:	d91b      	bls.n	80099d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099a8:	4413      	add	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d30a      	bcc.n	80099cc <tcp_receive+0x168>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c0:	4413      	add	r3, r2
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80099ca:	e004      	b.n	80099d6 <tcp_receive+0x172>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d902      	bls.n	80099e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f002 fb45 	bl	800c070 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80099e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 8161 	bne.w	8009cb0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099f6:	e15b      	b.n	8009cb0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099f8:	4b36      	ldr	r3, [pc, #216]	; (8009ad4 <tcp_receive+0x270>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f2c0 814e 	blt.w	8009ca6 <tcp_receive+0x442>
 8009a0a:	4b32      	ldr	r3, [pc, #200]	; (8009ad4 <tcp_receive+0x270>)
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f300 8146 	bgt.w	8009ca6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8b5b      	ldrh	r3, [r3, #26]
 8009a1e:	f003 0304 	and.w	r3, r3, #4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d010      	beq.n	8009a48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	8b5b      	ldrh	r3, [r3, #26]
 8009a2a:	f023 0304 	bic.w	r3, r3, #4
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a56:	10db      	asrs	r3, r3, #3
 8009a58:	b21b      	sxth	r3, r3
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	4413      	add	r3, r2
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	b21a      	sxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a70:	4b18      	ldr	r3, [pc, #96]	; (8009ad4 <tcp_receive+0x270>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <tcp_receive+0x270>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	f240 8097 	bls.w	8009bc8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d245      	bcs.n	8009b36 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	8b5b      	ldrh	r3, [r3, #26]
 8009aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d014      	beq.n	8009ae0 <tcp_receive+0x27c>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e013      	b.n	8009ae2 <tcp_receive+0x27e>
 8009aba:	bf00      	nop
 8009abc:	08011534 	.word	0x08011534
 8009ac0:	08011864 	.word	0x08011864
 8009ac4:	08011580 	.word	0x08011580
 8009ac8:	08011880 	.word	0x08011880
 8009acc:	200082e0 	.word	0x200082e0
 8009ad0:	200082d4 	.word	0x200082d4
 8009ad4:	200082d8 	.word	0x200082d8
 8009ad8:	200082c4 	.word	0x200082c4
 8009adc:	200082de 	.word	0x200082de
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009ae6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009af0:	fb12 f303 	smulbb	r3, r2, r3
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009af8:	4293      	cmp	r3, r2
 8009afa:	bf28      	it	cs
 8009afc:	4613      	movcs	r3, r2
 8009afe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b08:	4413      	add	r3, r2
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d309      	bcc.n	8009b2a <tcp_receive+0x2c6>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b1e:	4413      	add	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b28:	e04e      	b.n	8009bc8 <tcp_receive+0x364>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b34:	e048      	b.n	8009bc8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b3e:	4413      	add	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d309      	bcc.n	8009b60 <tcp_receive+0x2fc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b54:	4413      	add	r3, r2
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b5e:	e004      	b.n	8009b6a <tcp_receive+0x306>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d326      	bcc.n	8009bc8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b9a:	4413      	add	r3, r2
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d30a      	bcc.n	8009bbe <tcp_receive+0x35a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bb2:	4413      	add	r3, r2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009bbc:	e004      	b.n	8009bc8 <tcp_receive+0x364>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd0:	4a98      	ldr	r2, [pc, #608]	; (8009e34 <tcp_receive+0x5d0>)
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fdca 	bl	800976c <tcp_free_acked_segments>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be6:	4a94      	ldr	r2, [pc, #592]	; (8009e38 <tcp_receive+0x5d4>)
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fdbf 	bl	800976c <tcp_free_acked_segments>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c02:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c04:	e002      	b.n	8009c0c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d103      	bne.n	8009c22 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009c28:	4b84      	ldr	r3, [pc, #528]	; (8009e3c <tcp_receive+0x5d8>)
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	8b5b      	ldrh	r3, [r3, #26]
 8009c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d035      	beq.n	8009cae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d118      	bne.n	8009c7c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00c      	beq.n	8009c6c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fa ff9b 	bl	8004b9a <lwip_htonl>
 8009c64:	4603      	mov	r3, r0
 8009c66:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dc20      	bgt.n	8009cae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8b5b      	ldrh	r3, [r3, #26]
 8009c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c7a:	e018      	b.n	8009cae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fa ff86 	bl	8004b9a <lwip_htonl>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	1ae3      	subs	r3, r4, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dc0b      	bgt.n	8009cae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	8b5b      	ldrh	r3, [r3, #26]
 8009c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ca4:	e003      	b.n	8009cae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f002 fbce 	bl	800c448 <tcp_send_empty_ack>
 8009cac:	e000      	b.n	8009cb0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d05b      	beq.n	8009d70 <tcp_receive+0x50c>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbc:	4b60      	ldr	r3, [pc, #384]	; (8009e40 <tcp_receive+0x5dc>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da54      	bge.n	8009d70 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009cc6:	4b5f      	ldr	r3, [pc, #380]	; (8009e44 <tcp_receive+0x5e0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009cda:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ce4:	10db      	asrs	r3, r3, #3
 8009ce6:	b21b      	sxth	r3, r3
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cfe:	4413      	add	r3, r2
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	b21a      	sxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009d08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da05      	bge.n	8009d1c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009d10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d14:	425b      	negs	r3, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d1c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d26:	109b      	asrs	r3, r3, #2
 8009d28:	b21b      	sxth	r3, r3
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d40:	4413      	add	r3, r2
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	b21a      	sxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d50:	10db      	asrs	r3, r3, #3
 8009d52:	b21b      	sxth	r3, r3
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	4413      	add	r3, r2
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	b21a      	sxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009d70:	4b35      	ldr	r3, [pc, #212]	; (8009e48 <tcp_receive+0x5e4>)
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 84e2 	beq.w	800a73e <tcp_receive+0xeda>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7d1b      	ldrb	r3, [r3, #20]
 8009d7e:	2b06      	cmp	r3, #6
 8009d80:	f200 84dd 	bhi.w	800a73e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d88:	4b30      	ldr	r3, [pc, #192]	; (8009e4c <tcp_receive+0x5e8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f2c0 808f 	blt.w	8009eb4 <tcp_receive+0x650>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d9a:	4b2b      	ldr	r3, [pc, #172]	; (8009e48 <tcp_receive+0x5e4>)
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4b2a      	ldr	r3, [pc, #168]	; (8009e4c <tcp_receive+0x5e8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	440b      	add	r3, r1
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	3301      	adds	r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f300 8082 	bgt.w	8009eb4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009db0:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <tcp_receive+0x5ec>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dba:	4b24      	ldr	r3, [pc, #144]	; (8009e4c <tcp_receive+0x5e8>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009dc2:	4b23      	ldr	r3, [pc, #140]	; (8009e50 <tcp_receive+0x5ec>)
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <tcp_receive+0x574>
 8009dca:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <tcp_receive+0x5f0>)
 8009dcc:	f240 5294 	movw	r2, #1428	; 0x594
 8009dd0:	4921      	ldr	r1, [pc, #132]	; (8009e58 <tcp_receive+0x5f4>)
 8009dd2:	4822      	ldr	r0, [pc, #136]	; (8009e5c <tcp_receive+0x5f8>)
 8009dd4:	f005 fb72 	bl	800f4bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d906      	bls.n	8009df0 <tcp_receive+0x58c>
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <tcp_receive+0x5f0>)
 8009de4:	f240 5295 	movw	r2, #1429	; 0x595
 8009de8:	491d      	ldr	r1, [pc, #116]	; (8009e60 <tcp_receive+0x5fc>)
 8009dea:	481c      	ldr	r0, [pc, #112]	; (8009e5c <tcp_receive+0x5f8>)
 8009dec:	f005 fb66 	bl	800f4bc <iprintf>
      off = (u16_t)off32;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009df6:	4b16      	ldr	r3, [pc, #88]	; (8009e50 <tcp_receive+0x5ec>)
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	891b      	ldrh	r3, [r3, #8]
 8009dfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d906      	bls.n	8009e12 <tcp_receive+0x5ae>
 8009e04:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <tcp_receive+0x5f0>)
 8009e06:	f240 5297 	movw	r2, #1431	; 0x597
 8009e0a:	4916      	ldr	r1, [pc, #88]	; (8009e64 <tcp_receive+0x600>)
 8009e0c:	4813      	ldr	r0, [pc, #76]	; (8009e5c <tcp_receive+0x5f8>)
 8009e0e:	f005 fb55 	bl	800f4bc <iprintf>
      inseg.len -= off;
 8009e12:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <tcp_receive+0x5ec>)
 8009e14:	891a      	ldrh	r2, [r3, #8]
 8009e16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <tcp_receive+0x5ec>)
 8009e20:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <tcp_receive+0x5ec>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	891a      	ldrh	r2, [r3, #8]
 8009e28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009e30:	e02a      	b.n	8009e88 <tcp_receive+0x624>
 8009e32:	bf00      	nop
 8009e34:	0801189c 	.word	0x0801189c
 8009e38:	080118a4 	.word	0x080118a4
 8009e3c:	200082dc 	.word	0x200082dc
 8009e40:	200082d8 	.word	0x200082d8
 8009e44:	2000829c 	.word	0x2000829c
 8009e48:	200082de 	.word	0x200082de
 8009e4c:	200082d4 	.word	0x200082d4
 8009e50:	200082b4 	.word	0x200082b4
 8009e54:	08011534 	.word	0x08011534
 8009e58:	080118ac 	.word	0x080118ac
 8009e5c:	08011580 	.word	0x08011580
 8009e60:	080118bc 	.word	0x080118bc
 8009e64:	080118cc 	.word	0x080118cc
        off -= p->len;
 8009e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e6a:	895b      	ldrh	r3, [r3, #10]
 8009e6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7e:	2200      	movs	r2, #0
 8009e80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8a:	895b      	ldrh	r3, [r3, #10]
 8009e8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d8e9      	bhi.n	8009e68 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009e94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009e9c:	f7fc f940 	bl	8006120 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	4a91      	ldr	r2, [pc, #580]	; (800a0ec <tcp_receive+0x888>)
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	4b91      	ldr	r3, [pc, #580]	; (800a0f0 <tcp_receive+0x88c>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	4a8f      	ldr	r2, [pc, #572]	; (800a0ec <tcp_receive+0x888>)
 8009eae:	6812      	ldr	r2, [r2, #0]
 8009eb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009eb2:	e00d      	b.n	8009ed0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009eb4:	4b8d      	ldr	r3, [pc, #564]	; (800a0ec <tcp_receive+0x888>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da06      	bge.n	8009ed0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8b5b      	ldrh	r3, [r3, #26]
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ed0:	4b86      	ldr	r3, [pc, #536]	; (800a0ec <tcp_receive+0x888>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f2c0 842a 	blt.w	800a734 <tcp_receive+0xed0>
 8009ee0:	4b82      	ldr	r3, [pc, #520]	; (800a0ec <tcp_receive+0x888>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	6879      	ldr	r1, [r7, #4]
 8009eea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009eec:	440b      	add	r3, r1
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f300 841e 	bgt.w	800a734 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009efc:	4b7b      	ldr	r3, [pc, #492]	; (800a0ec <tcp_receive+0x888>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	f040 829a 	bne.w	800a43a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009f06:	4b7a      	ldr	r3, [pc, #488]	; (800a0f0 <tcp_receive+0x88c>)
 8009f08:	891c      	ldrh	r4, [r3, #8]
 8009f0a:	4b79      	ldr	r3, [pc, #484]	; (800a0f0 <tcp_receive+0x88c>)
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	899b      	ldrh	r3, [r3, #12]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fa fe2c 	bl	8004b70 <lwip_htons>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <tcp_receive+0x6c4>
 8009f24:	2301      	movs	r3, #1
 8009f26:	e000      	b.n	8009f2a <tcp_receive+0x6c6>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4423      	add	r3, r4
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	4b71      	ldr	r3, [pc, #452]	; (800a0f4 <tcp_receive+0x890>)
 8009f30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f36:	4b6f      	ldr	r3, [pc, #444]	; (800a0f4 <tcp_receive+0x890>)
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d275      	bcs.n	800a02a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f3e:	4b6c      	ldr	r3, [pc, #432]	; (800a0f0 <tcp_receive+0x88c>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	899b      	ldrh	r3, [r3, #12]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fa fe12 	bl	8004b70 <lwip_htons>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01f      	beq.n	8009f98 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f58:	4b65      	ldr	r3, [pc, #404]	; (800a0f0 <tcp_receive+0x88c>)
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	899b      	ldrh	r3, [r3, #12]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	b21b      	sxth	r3, r3
 8009f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f66:	b21c      	sxth	r4, r3
 8009f68:	4b61      	ldr	r3, [pc, #388]	; (800a0f0 <tcp_receive+0x88c>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	899b      	ldrh	r3, [r3, #12]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fa fdfd 	bl	8004b70 <lwip_htons>
 8009f76:	4603      	mov	r3, r0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fa fdf4 	bl	8004b70 <lwip_htons>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	b21b      	sxth	r3, r3
 8009f8c:	4323      	orrs	r3, r4
 8009f8e:	b21a      	sxth	r2, r3
 8009f90:	4b57      	ldr	r3, [pc, #348]	; (800a0f0 <tcp_receive+0x88c>)
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	b292      	uxth	r2, r2
 8009f96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f9c:	4b54      	ldr	r3, [pc, #336]	; (800a0f0 <tcp_receive+0x88c>)
 8009f9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fa0:	4b53      	ldr	r3, [pc, #332]	; (800a0f0 <tcp_receive+0x88c>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	899b      	ldrh	r3, [r3, #12]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fa fde1 	bl	8004b70 <lwip_htons>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <tcp_receive+0x762>
            inseg.len -= 1;
 8009fba:	4b4d      	ldr	r3, [pc, #308]	; (800a0f0 <tcp_receive+0x88c>)
 8009fbc:	891b      	ldrh	r3, [r3, #8]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	4b4b      	ldr	r3, [pc, #300]	; (800a0f0 <tcp_receive+0x88c>)
 8009fc4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009fc6:	4b4a      	ldr	r3, [pc, #296]	; (800a0f0 <tcp_receive+0x88c>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4a49      	ldr	r2, [pc, #292]	; (800a0f0 <tcp_receive+0x88c>)
 8009fcc:	8912      	ldrh	r2, [r2, #8]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fb ffa5 	bl	8005f20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009fd6:	4b46      	ldr	r3, [pc, #280]	; (800a0f0 <tcp_receive+0x88c>)
 8009fd8:	891c      	ldrh	r4, [r3, #8]
 8009fda:	4b45      	ldr	r3, [pc, #276]	; (800a0f0 <tcp_receive+0x88c>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	899b      	ldrh	r3, [r3, #12]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fa fdc4 	bl	8004b70 <lwip_htons>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <tcp_receive+0x794>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <tcp_receive+0x796>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4423      	add	r3, r4
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	4b3d      	ldr	r3, [pc, #244]	; (800a0f4 <tcp_receive+0x890>)
 800a000:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a002:	4b3c      	ldr	r3, [pc, #240]	; (800a0f4 <tcp_receive+0x890>)
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	4b38      	ldr	r3, [pc, #224]	; (800a0ec <tcp_receive+0x888>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	441a      	add	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a016:	440b      	add	r3, r1
 800a018:	429a      	cmp	r2, r3
 800a01a:	d006      	beq.n	800a02a <tcp_receive+0x7c6>
 800a01c:	4b36      	ldr	r3, [pc, #216]	; (800a0f8 <tcp_receive+0x894>)
 800a01e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a022:	4936      	ldr	r1, [pc, #216]	; (800a0fc <tcp_receive+0x898>)
 800a024:	4836      	ldr	r0, [pc, #216]	; (800a100 <tcp_receive+0x89c>)
 800a026:	f005 fa49 	bl	800f4bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80e7 	beq.w	800a202 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a034:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <tcp_receive+0x88c>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	899b      	ldrh	r3, [r3, #12]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fa fd97 	bl	8004b70 <lwip_htons>
 800a042:	4603      	mov	r3, r0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d010      	beq.n	800a070 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a04e:	e00a      	b.n	800a066 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a054:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7fd fd10 	bl	8007a86 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f0      	bne.n	800a050 <tcp_receive+0x7ec>
 800a06e:	e0c8      	b.n	800a202 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a076:	e052      	b.n	800a11e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	899b      	ldrh	r3, [r3, #12]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	f7fa fd75 	bl	8004b70 <lwip_htons>
 800a086:	4603      	mov	r3, r0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d03d      	beq.n	800a10e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a092:	4b17      	ldr	r3, [pc, #92]	; (800a0f0 <tcp_receive+0x88c>)
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	899b      	ldrh	r3, [r3, #12]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fa fd68 	bl	8004b70 <lwip_htons>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d130      	bne.n	800a10e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a0ac:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <tcp_receive+0x88c>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	899b      	ldrh	r3, [r3, #12]
 800a0b2:	b29c      	uxth	r4, r3
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f7fa fd5b 	bl	8004b70 <lwip_htons>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <tcp_receive+0x88c>)
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	4322      	orrs	r2, r4
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a0c8:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <tcp_receive+0x88c>)
 800a0ca:	891c      	ldrh	r4, [r3, #8]
 800a0cc:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <tcp_receive+0x88c>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	899b      	ldrh	r3, [r3, #12]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fa fd4b 	bl	8004b70 <lwip_htons>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00e      	beq.n	800a104 <tcp_receive+0x8a0>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e00d      	b.n	800a106 <tcp_receive+0x8a2>
 800a0ea:	bf00      	nop
 800a0ec:	200082d4 	.word	0x200082d4
 800a0f0:	200082b4 	.word	0x200082b4
 800a0f4:	200082de 	.word	0x200082de
 800a0f8:	08011534 	.word	0x08011534
 800a0fc:	080118dc 	.word	0x080118dc
 800a100:	08011580 	.word	0x08011580
 800a104:	2300      	movs	r3, #0
 800a106:	4423      	add	r3, r4
 800a108:	b29a      	uxth	r2, r3
 800a10a:	4b98      	ldr	r3, [pc, #608]	; (800a36c <tcp_receive+0xb08>)
 800a10c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a110:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a118:	6938      	ldr	r0, [r7, #16]
 800a11a:	f7fd fcb4 	bl	8007a86 <tcp_seg_free>
            while (next &&
 800a11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00e      	beq.n	800a142 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a124:	4b91      	ldr	r3, [pc, #580]	; (800a36c <tcp_receive+0xb08>)
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	4b91      	ldr	r3, [pc, #580]	; (800a370 <tcp_receive+0xb0c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	441a      	add	r2, r3
 800a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a138:	8909      	ldrh	r1, [r1, #8]
 800a13a:	440b      	add	r3, r1
 800a13c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da9a      	bge.n	800a078 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d059      	beq.n	800a1fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a148:	4b88      	ldr	r3, [pc, #544]	; (800a36c <tcp_receive+0xb08>)
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b88      	ldr	r3, [pc, #544]	; (800a370 <tcp_receive+0xb0c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	441a      	add	r2, r3
 800a154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd4d      	ble.n	800a1fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	b29a      	uxth	r2, r3
 800a168:	4b81      	ldr	r3, [pc, #516]	; (800a370 <tcp_receive+0xb0c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	b29a      	uxth	r2, r3
 800a172:	4b80      	ldr	r3, [pc, #512]	; (800a374 <tcp_receive+0xb10>)
 800a174:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a176:	4b7f      	ldr	r3, [pc, #508]	; (800a374 <tcp_receive+0xb10>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fa fcf6 	bl	8004b70 <lwip_htons>
 800a184:	4603      	mov	r3, r0
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <tcp_receive+0x938>
                inseg.len -= 1;
 800a190:	4b78      	ldr	r3, [pc, #480]	; (800a374 <tcp_receive+0xb10>)
 800a192:	891b      	ldrh	r3, [r3, #8]
 800a194:	3b01      	subs	r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	4b76      	ldr	r3, [pc, #472]	; (800a374 <tcp_receive+0xb10>)
 800a19a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a19c:	4b75      	ldr	r3, [pc, #468]	; (800a374 <tcp_receive+0xb10>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a74      	ldr	r2, [pc, #464]	; (800a374 <tcp_receive+0xb10>)
 800a1a2:	8912      	ldrh	r2, [r2, #8]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fb feba 	bl	8005f20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a1ac:	4b71      	ldr	r3, [pc, #452]	; (800a374 <tcp_receive+0xb10>)
 800a1ae:	891c      	ldrh	r4, [r3, #8]
 800a1b0:	4b70      	ldr	r3, [pc, #448]	; (800a374 <tcp_receive+0xb10>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	899b      	ldrh	r3, [r3, #12]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fa fcd9 	bl	8004b70 <lwip_htons>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <tcp_receive+0x96a>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e000      	b.n	800a1d0 <tcp_receive+0x96c>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4423      	add	r3, r4
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	4b65      	ldr	r3, [pc, #404]	; (800a36c <tcp_receive+0xb08>)
 800a1d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a1d8:	4b64      	ldr	r3, [pc, #400]	; (800a36c <tcp_receive+0xb08>)
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4b64      	ldr	r3, [pc, #400]	; (800a370 <tcp_receive+0xb0c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	441a      	add	r2, r3
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d006      	beq.n	800a1fc <tcp_receive+0x998>
 800a1ee:	4b62      	ldr	r3, [pc, #392]	; (800a378 <tcp_receive+0xb14>)
 800a1f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a1f4:	4961      	ldr	r1, [pc, #388]	; (800a37c <tcp_receive+0xb18>)
 800a1f6:	4862      	ldr	r0, [pc, #392]	; (800a380 <tcp_receive+0xb1c>)
 800a1f8:	f005 f960 	bl	800f4bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a200:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a202:	4b5a      	ldr	r3, [pc, #360]	; (800a36c <tcp_receive+0xb08>)
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	4b59      	ldr	r3, [pc, #356]	; (800a370 <tcp_receive+0xb0c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	441a      	add	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a216:	4b55      	ldr	r3, [pc, #340]	; (800a36c <tcp_receive+0xb08>)
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d206      	bcs.n	800a22c <tcp_receive+0x9c8>
 800a21e:	4b56      	ldr	r3, [pc, #344]	; (800a378 <tcp_receive+0xb14>)
 800a220:	f240 6207 	movw	r2, #1543	; 0x607
 800a224:	4957      	ldr	r1, [pc, #348]	; (800a384 <tcp_receive+0xb20>)
 800a226:	4856      	ldr	r0, [pc, #344]	; (800a380 <tcp_receive+0xb1c>)
 800a228:	f005 f948 	bl	800f4bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a230:	4b4e      	ldr	r3, [pc, #312]	; (800a36c <tcp_receive+0xb08>)
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fc fefd 	bl	800703c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a242:	4b4c      	ldr	r3, [pc, #304]	; (800a374 <tcp_receive+0xb10>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	891b      	ldrh	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d006      	beq.n	800a25a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a24c:	4b49      	ldr	r3, [pc, #292]	; (800a374 <tcp_receive+0xb10>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	4a4d      	ldr	r2, [pc, #308]	; (800a388 <tcp_receive+0xb24>)
 800a252:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a254:	4b47      	ldr	r3, [pc, #284]	; (800a374 <tcp_receive+0xb10>)
 800a256:	2200      	movs	r2, #0
 800a258:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a25a:	4b46      	ldr	r3, [pc, #280]	; (800a374 <tcp_receive+0xb10>)
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	899b      	ldrh	r3, [r3, #12]
 800a260:	b29b      	uxth	r3, r3
 800a262:	4618      	mov	r0, r3
 800a264:	f7fa fc84 	bl	8004b70 <lwip_htons>
 800a268:	4603      	mov	r3, r0
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 0301 	and.w	r3, r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80b8 	beq.w	800a3e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a276:	4b45      	ldr	r3, [pc, #276]	; (800a38c <tcp_receive+0xb28>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	f043 0320 	orr.w	r3, r3, #32
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	4b42      	ldr	r3, [pc, #264]	; (800a38c <tcp_receive+0xb28>)
 800a282:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a284:	e0af      	b.n	800a3e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a28a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4a36      	ldr	r2, [pc, #216]	; (800a370 <tcp_receive+0xb0c>)
 800a296:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	891b      	ldrh	r3, [r3, #8]
 800a29c:	461c      	mov	r4, r3
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fa fc62 	bl	8004b70 <lwip_htons>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <tcp_receive+0xa58>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e000      	b.n	800a2be <tcp_receive+0xa5a>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	191a      	adds	r2, r3, r4
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	441a      	add	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ce:	461c      	mov	r4, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	891b      	ldrh	r3, [r3, #8]
 800a2d4:	461d      	mov	r5, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	899b      	ldrh	r3, [r3, #12]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fa fc46 	bl	8004b70 <lwip_htons>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <tcp_receive+0xa90>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e000      	b.n	800a2f6 <tcp_receive+0xa92>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	442b      	add	r3, r5
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	d206      	bcs.n	800a30a <tcp_receive+0xaa6>
 800a2fc:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <tcp_receive+0xb14>)
 800a2fe:	f240 622b 	movw	r2, #1579	; 0x62b
 800a302:	4923      	ldr	r1, [pc, #140]	; (800a390 <tcp_receive+0xb2c>)
 800a304:	481e      	ldr	r0, [pc, #120]	; (800a380 <tcp_receive+0xb1c>)
 800a306:	f005 f8d9 	bl	800f4bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	891b      	ldrh	r3, [r3, #8]
 800a30e:	461c      	mov	r4, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	899b      	ldrh	r3, [r3, #12]
 800a316:	b29b      	uxth	r3, r3
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fa fc29 	bl	8004b70 <lwip_htons>
 800a31e:	4603      	mov	r3, r0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <tcp_receive+0xaca>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <tcp_receive+0xacc>
 800a32e:	2300      	movs	r3, #0
 800a330:	1919      	adds	r1, r3, r4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a336:	b28b      	uxth	r3, r1
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7fc fe7b 	bl	800703c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	891b      	ldrh	r3, [r3, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d028      	beq.n	800a3a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <tcp_receive+0xb24>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01d      	beq.n	800a394 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <tcp_receive+0xb24>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7fc f824 	bl	80063b0 <pbuf_cat>
 800a368:	e018      	b.n	800a39c <tcp_receive+0xb38>
 800a36a:	bf00      	nop
 800a36c:	200082de 	.word	0x200082de
 800a370:	200082d4 	.word	0x200082d4
 800a374:	200082b4 	.word	0x200082b4
 800a378:	08011534 	.word	0x08011534
 800a37c:	08011914 	.word	0x08011914
 800a380:	08011580 	.word	0x08011580
 800a384:	08011950 	.word	0x08011950
 800a388:	200082e4 	.word	0x200082e4
 800a38c:	200082e1 	.word	0x200082e1
 800a390:	08011970 	.word	0x08011970
            } else {
              recv_data = cseg->p;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4a70      	ldr	r2, [pc, #448]	; (800a55c <tcp_receive+0xcf8>)
 800a39a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	899b      	ldrh	r3, [r3, #12]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fa fbe0 	bl	8004b70 <lwip_htons>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00d      	beq.n	800a3d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a3bc:	4b68      	ldr	r3, [pc, #416]	; (800a560 <tcp_receive+0xcfc>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f043 0320 	orr.w	r3, r3, #32
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4b66      	ldr	r3, [pc, #408]	; (800a560 <tcp_receive+0xcfc>)
 800a3c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7d1b      	ldrb	r3, [r3, #20]
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d102      	bne.n	800a3d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2207      	movs	r2, #7
 800a3d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a3e0:	68b8      	ldr	r0, [r7, #8]
 800a3e2:	f7fd fb50 	bl	8007a86 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	f43f af43 	beq.w	800a286 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8b5b      	ldrh	r3, [r3, #26]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00e      	beq.n	800a42a <tcp_receive+0xbc6>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	8b5b      	ldrh	r3, [r3, #26]
 800a410:	f023 0301 	bic.w	r3, r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	835a      	strh	r2, [r3, #26]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	8b5b      	ldrh	r3, [r3, #26]
 800a41e:	f043 0302 	orr.w	r3, r3, #2
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a428:	e188      	b.n	800a73c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	8b5b      	ldrh	r3, [r3, #26]
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	b29a      	uxth	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a438:	e180      	b.n	800a73c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a442:	4848      	ldr	r0, [pc, #288]	; (800a564 <tcp_receive+0xd00>)
 800a444:	f7fd fb56 	bl	8007af4 <tcp_seg_copy>
 800a448:	4602      	mov	r2, r0
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	675a      	str	r2, [r3, #116]	; 0x74
 800a44e:	e16d      	b.n	800a72c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a450:	2300      	movs	r3, #0
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a458:	63bb      	str	r3, [r7, #56]	; 0x38
 800a45a:	e157      	b.n	800a70c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	4b41      	ldr	r3, [pc, #260]	; (800a568 <tcp_receive+0xd04>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d11d      	bne.n	800a4a6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a46a:	4b3e      	ldr	r3, [pc, #248]	; (800a564 <tcp_receive+0xd00>)
 800a46c:	891a      	ldrh	r2, [r3, #8]
 800a46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a470:	891b      	ldrh	r3, [r3, #8]
 800a472:	429a      	cmp	r2, r3
 800a474:	f240 814f 	bls.w	800a716 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a478:	483a      	ldr	r0, [pc, #232]	; (800a564 <tcp_receive+0xd00>)
 800a47a:	f7fd fb3b 	bl	8007af4 <tcp_seg_copy>
 800a47e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 8149 	beq.w	800a71a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e002      	b.n	800a49c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a49c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a49e:	6978      	ldr	r0, [r7, #20]
 800a4a0:	f7ff f8dc 	bl	800965c <tcp_oos_insert_segment>
                }
                break;
 800a4a4:	e139      	b.n	800a71a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d117      	bne.n	800a4dc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a4ac:	4b2e      	ldr	r3, [pc, #184]	; (800a568 <tcp_receive+0xd04>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	da57      	bge.n	800a56c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4bc:	4829      	ldr	r0, [pc, #164]	; (800a564 <tcp_receive+0xd00>)
 800a4be:	f7fd fb19 	bl	8007af4 <tcp_seg_copy>
 800a4c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 8129 	beq.w	800a71e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a4d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4d4:	69b8      	ldr	r0, [r7, #24]
 800a4d6:	f7ff f8c1 	bl	800965c <tcp_oos_insert_segment>
                  }
                  break;
 800a4da:	e120      	b.n	800a71e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a4dc:	4b22      	ldr	r3, [pc, #136]	; (800a568 <tcp_receive+0xd04>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	db3e      	blt.n	800a56c <tcp_receive+0xd08>
 800a4ee:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <tcp_receive+0xd04>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dc35      	bgt.n	800a56c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a500:	4818      	ldr	r0, [pc, #96]	; (800a564 <tcp_receive+0xd00>)
 800a502:	f7fd faf7 	bl	8007af4 <tcp_seg_copy>
 800a506:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 8109 	beq.w	800a722 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a518:	8912      	ldrh	r2, [r2, #8]
 800a51a:	441a      	add	r2, r3
 800a51c:	4b12      	ldr	r3, [pc, #72]	; (800a568 <tcp_receive+0xd04>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	dd12      	ble.n	800a54c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a526:	4b10      	ldr	r3, [pc, #64]	; (800a568 <tcp_receive+0xd04>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	b29b      	uxth	r3, r3
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	b29a      	uxth	r2, r3
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	891b      	ldrh	r3, [r3, #8]
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fb fcea 	bl	8005f20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a554:	69f8      	ldr	r0, [r7, #28]
 800a556:	f7ff f881 	bl	800965c <tcp_oos_insert_segment>
                  }
                  break;
 800a55a:	e0e2      	b.n	800a722 <tcp_receive+0xebe>
 800a55c:	200082e4 	.word	0x200082e4
 800a560:	200082e1 	.word	0x200082e1
 800a564:	200082b4 	.word	0x200082b4
 800a568:	200082d4 	.word	0x200082d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f040 80c6 	bne.w	800a706 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a57a:	4b80      	ldr	r3, [pc, #512]	; (800a77c <tcp_receive+0xf18>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a586:	2b00      	cmp	r3, #0
 800a588:	f340 80bd 	ble.w	800a706 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	899b      	ldrh	r3, [r3, #12]
 800a592:	b29b      	uxth	r3, r3
 800a594:	4618      	mov	r0, r3
 800a596:	f7fa faeb 	bl	8004b70 <lwip_htons>
 800a59a:	4603      	mov	r3, r0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f040 80bf 	bne.w	800a726 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a5a8:	4875      	ldr	r0, [pc, #468]	; (800a780 <tcp_receive+0xf1c>)
 800a5aa:	f7fd faa3 	bl	8007af4 <tcp_seg_copy>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 80b6 	beq.w	800a72a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c6:	8912      	ldrh	r2, [r2, #8]
 800a5c8:	441a      	add	r2, r3
 800a5ca:	4b6c      	ldr	r3, [pc, #432]	; (800a77c <tcp_receive+0xf18>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dd12      	ble.n	800a5fa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a5d4:	4b69      	ldr	r3, [pc, #420]	; (800a77c <tcp_receive+0xf18>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	891b      	ldrh	r3, [r3, #8]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fb fc93 	bl	8005f20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a5fa:	4b62      	ldr	r3, [pc, #392]	; (800a784 <tcp_receive+0xf20>)
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	4b5e      	ldr	r3, [pc, #376]	; (800a77c <tcp_receive+0xf18>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	441a      	add	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a60e:	440b      	add	r3, r1
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	f340 8089 	ble.w	800a72a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	899b      	ldrh	r3, [r3, #12]
 800a620:	b29b      	uxth	r3, r3
 800a622:	4618      	mov	r0, r3
 800a624:	f7fa faa4 	bl	8004b70 <lwip_htons>
 800a628:	4603      	mov	r3, r0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d022      	beq.n	800a67a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	899b      	ldrh	r3, [r3, #12]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	b21b      	sxth	r3, r3
 800a640:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a644:	b21c      	sxth	r4, r3
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	899b      	ldrh	r3, [r3, #12]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4618      	mov	r0, r3
 800a652:	f7fa fa8d 	bl	8004b70 <lwip_htons>
 800a656:	4603      	mov	r3, r0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a660:	b29b      	uxth	r3, r3
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa fa84 	bl	8004b70 <lwip_htons>
 800a668:	4603      	mov	r3, r0
 800a66a:	b21b      	sxth	r3, r3
 800a66c:	4323      	orrs	r3, r4
 800a66e:	b21a      	sxth	r2, r3
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	b292      	uxth	r2, r2
 800a678:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a684:	4413      	add	r3, r2
 800a686:	b299      	uxth	r1, r3
 800a688:	4b3c      	ldr	r3, [pc, #240]	; (800a77c <tcp_receive+0xf18>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	1a8a      	subs	r2, r1, r2
 800a694:	b292      	uxth	r2, r2
 800a696:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	891b      	ldrh	r3, [r3, #8]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f7fb fc3a 	bl	8005f20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	891c      	ldrh	r4, [r3, #8]
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	899b      	ldrh	r3, [r3, #12]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fa fa57 	bl	8004b70 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <tcp_receive+0xe6e>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <tcp_receive+0xe70>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4423      	add	r3, r4
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <tcp_receive+0xf20>)
 800a6da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6dc:	4b29      	ldr	r3, [pc, #164]	; (800a784 <tcp_receive+0xf20>)
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b26      	ldr	r3, [pc, #152]	; (800a77c <tcp_receive+0xf18>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	441a      	add	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6f0:	440b      	add	r3, r1
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d019      	beq.n	800a72a <tcp_receive+0xec6>
 800a6f6:	4b24      	ldr	r3, [pc, #144]	; (800a788 <tcp_receive+0xf24>)
 800a6f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a6fc:	4923      	ldr	r1, [pc, #140]	; (800a78c <tcp_receive+0xf28>)
 800a6fe:	4824      	ldr	r0, [pc, #144]	; (800a790 <tcp_receive+0xf2c>)
 800a700:	f004 fedc 	bl	800f4bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a704:	e011      	b.n	800a72a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f47f aea4 	bne.w	800a45c <tcp_receive+0xbf8>
 800a714:	e00a      	b.n	800a72c <tcp_receive+0xec8>
                break;
 800a716:	bf00      	nop
 800a718:	e008      	b.n	800a72c <tcp_receive+0xec8>
                break;
 800a71a:	bf00      	nop
 800a71c:	e006      	b.n	800a72c <tcp_receive+0xec8>
                  break;
 800a71e:	bf00      	nop
 800a720:	e004      	b.n	800a72c <tcp_receive+0xec8>
                  break;
 800a722:	bf00      	nop
 800a724:	e002      	b.n	800a72c <tcp_receive+0xec8>
                  break;
 800a726:	bf00      	nop
 800a728:	e000      	b.n	800a72c <tcp_receive+0xec8>
                break;
 800a72a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 fe8b 	bl	800c448 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a732:	e003      	b.n	800a73c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 fe87 	bl	800c448 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a73a:	e01a      	b.n	800a772 <tcp_receive+0xf0e>
 800a73c:	e019      	b.n	800a772 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <tcp_receive+0xf18>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	db0a      	blt.n	800a762 <tcp_receive+0xefe>
 800a74c:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <tcp_receive+0xf18>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a758:	440b      	add	r3, r1
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	3301      	adds	r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dd07      	ble.n	800a772 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8b5b      	ldrh	r3, [r3, #26]
 800a766:	f043 0302 	orr.w	r3, r3, #2
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a770:	e7ff      	b.n	800a772 <tcp_receive+0xf0e>
 800a772:	bf00      	nop
 800a774:	3750      	adds	r7, #80	; 0x50
 800a776:	46bd      	mov	sp, r7
 800a778:	bdb0      	pop	{r4, r5, r7, pc}
 800a77a:	bf00      	nop
 800a77c:	200082d4 	.word	0x200082d4
 800a780:	200082b4 	.word	0x200082b4
 800a784:	200082de 	.word	0x200082de
 800a788:	08011534 	.word	0x08011534
 800a78c:	080118dc 	.word	0x080118dc
 800a790:	08011580 	.word	0x08011580

0800a794 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a79a:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <tcp_get_next_optbyte+0x5c>)
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	b291      	uxth	r1, r2
 800a7a2:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <tcp_get_next_optbyte+0x5c>)
 800a7a4:	8011      	strh	r1, [r2, #0]
 800a7a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a7a8:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <tcp_get_next_optbyte+0x60>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d004      	beq.n	800a7ba <tcp_get_next_optbyte+0x26>
 800a7b0:	4b11      	ldr	r3, [pc, #68]	; (800a7f8 <tcp_get_next_optbyte+0x64>)
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	88fa      	ldrh	r2, [r7, #6]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d208      	bcs.n	800a7cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a7ba:	4b10      	ldr	r3, [pc, #64]	; (800a7fc <tcp_get_next_optbyte+0x68>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3314      	adds	r3, #20
 800a7c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	e00b      	b.n	800a7e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a7cc:	88fb      	ldrh	r3, [r7, #6]
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <tcp_get_next_optbyte+0x64>)
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <tcp_get_next_optbyte+0x60>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	797b      	ldrb	r3, [r7, #5]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	200082d0 	.word	0x200082d0
 800a7f4:	200082cc 	.word	0x200082cc
 800a7f8:	200082ca 	.word	0x200082ca
 800a7fc:	200082c4 	.word	0x200082c4

0800a800 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <tcp_parseopt+0x1c>
 800a80e:	4b32      	ldr	r3, [pc, #200]	; (800a8d8 <tcp_parseopt+0xd8>)
 800a810:	f240 727d 	movw	r2, #1917	; 0x77d
 800a814:	4931      	ldr	r1, [pc, #196]	; (800a8dc <tcp_parseopt+0xdc>)
 800a816:	4832      	ldr	r0, [pc, #200]	; (800a8e0 <tcp_parseopt+0xe0>)
 800a818:	f004 fe50 	bl	800f4bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a81c:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <tcp_parseopt+0xe4>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d055      	beq.n	800a8d0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a824:	4b30      	ldr	r3, [pc, #192]	; (800a8e8 <tcp_parseopt+0xe8>)
 800a826:	2200      	movs	r2, #0
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	e045      	b.n	800a8b8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a82c:	f7ff ffb2 	bl	800a794 <tcp_get_next_optbyte>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d006      	beq.n	800a848 <tcp_parseopt+0x48>
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	dc2b      	bgt.n	800a896 <tcp_parseopt+0x96>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d041      	beq.n	800a8c6 <tcp_parseopt+0xc6>
 800a842:	2b01      	cmp	r3, #1
 800a844:	d127      	bne.n	800a896 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a846:	e037      	b.n	800a8b8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a848:	f7ff ffa4 	bl	800a794 <tcp_get_next_optbyte>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d13b      	bne.n	800a8ca <tcp_parseopt+0xca>
 800a852:	4b25      	ldr	r3, [pc, #148]	; (800a8e8 <tcp_parseopt+0xe8>)
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	4a22      	ldr	r2, [pc, #136]	; (800a8e4 <tcp_parseopt+0xe4>)
 800a85a:	8812      	ldrh	r2, [r2, #0]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	da34      	bge.n	800a8ca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a860:	f7ff ff98 	bl	800a794 <tcp_get_next_optbyte>
 800a864:	4603      	mov	r3, r0
 800a866:	b29b      	uxth	r3, r3
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a86c:	f7ff ff92 	bl	800a794 <tcp_get_next_optbyte>
 800a870:	4603      	mov	r3, r0
 800a872:	b29a      	uxth	r2, r3
 800a874:	89bb      	ldrh	r3, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a87a:	89bb      	ldrh	r3, [r7, #12]
 800a87c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a880:	d804      	bhi.n	800a88c <tcp_parseopt+0x8c>
 800a882:	89bb      	ldrh	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <tcp_parseopt+0x8c>
 800a888:	89ba      	ldrh	r2, [r7, #12]
 800a88a:	e001      	b.n	800a890 <tcp_parseopt+0x90>
 800a88c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a894:	e010      	b.n	800a8b8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a896:	f7ff ff7d 	bl	800a794 <tcp_get_next_optbyte>
 800a89a:	4603      	mov	r3, r0
 800a89c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d914      	bls.n	800a8ce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <tcp_parseopt+0xe8>)
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b02      	subs	r3, #2
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <tcp_parseopt+0xe8>)
 800a8b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a8b8:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <tcp_parseopt+0xe8>)
 800a8ba:	881a      	ldrh	r2, [r3, #0]
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <tcp_parseopt+0xe4>)
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d3b3      	bcc.n	800a82c <tcp_parseopt+0x2c>
 800a8c4:	e004      	b.n	800a8d0 <tcp_parseopt+0xd0>
          return;
 800a8c6:	bf00      	nop
 800a8c8:	e002      	b.n	800a8d0 <tcp_parseopt+0xd0>
            return;
 800a8ca:	bf00      	nop
 800a8cc:	e000      	b.n	800a8d0 <tcp_parseopt+0xd0>
            return;
 800a8ce:	bf00      	nop
      }
    }
  }
}
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	08011534 	.word	0x08011534
 800a8dc:	08011998 	.word	0x08011998
 800a8e0:	08011580 	.word	0x08011580
 800a8e4:	200082c8 	.word	0x200082c8
 800a8e8:	200082d0 	.word	0x200082d0

0800a8ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a8f0:	4b05      	ldr	r3, [pc, #20]	; (800a908 <tcp_trigger_input_pcb_close+0x1c>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f043 0310 	orr.w	r3, r3, #16
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	4b03      	ldr	r3, [pc, #12]	; (800a908 <tcp_trigger_input_pcb_close+0x1c>)
 800a8fc:	701a      	strb	r2, [r3, #0]
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	200082e1 	.word	0x200082e1

0800a90c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <tcp_route+0x28>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	7a1b      	ldrb	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	7a1b      	ldrb	r3, [r3, #8]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fb f91e 	bl	8005b6c <netif_get_by_index>
 800a930:	4603      	mov	r3, r0
 800a932:	e003      	b.n	800a93c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f003 fad5 	bl	800dee4 <ip4_route>
 800a93a:	4603      	mov	r3, r0
  }
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a944:	b590      	push	{r4, r7, lr}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <tcp_create_segment+0x22>
 800a95a:	4b44      	ldr	r3, [pc, #272]	; (800aa6c <tcp_create_segment+0x128>)
 800a95c:	22a3      	movs	r2, #163	; 0xa3
 800a95e:	4944      	ldr	r1, [pc, #272]	; (800aa70 <tcp_create_segment+0x12c>)
 800a960:	4844      	ldr	r0, [pc, #272]	; (800aa74 <tcp_create_segment+0x130>)
 800a962:	f004 fdab 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <tcp_create_segment+0x34>
 800a96c:	4b3f      	ldr	r3, [pc, #252]	; (800aa6c <tcp_create_segment+0x128>)
 800a96e:	22a4      	movs	r2, #164	; 0xa4
 800a970:	4941      	ldr	r1, [pc, #260]	; (800aa78 <tcp_create_segment+0x134>)
 800a972:	4840      	ldr	r0, [pc, #256]	; (800aa74 <tcp_create_segment+0x130>)
 800a974:	f004 fda2 	bl	800f4bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a978:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a986:	2003      	movs	r0, #3
 800a988:	f7fa fd6a 	bl	8005460 <memp_malloc>
 800a98c:	6138      	str	r0, [r7, #16]
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d104      	bne.n	800a99e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f7fb fc49 	bl	800622c <pbuf_free>
    return NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e061      	b.n	800aa62 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a9a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	891a      	ldrh	r2, [r3, #8]
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d205      	bcs.n	800a9ca <tcp_create_segment+0x86>
 800a9be:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <tcp_create_segment+0x128>)
 800a9c0:	22b0      	movs	r2, #176	; 0xb0
 800a9c2:	492e      	ldr	r1, [pc, #184]	; (800aa7c <tcp_create_segment+0x138>)
 800a9c4:	482b      	ldr	r0, [pc, #172]	; (800aa74 <tcp_create_segment+0x130>)
 800a9c6:	f004 fd79 	bl	800f4bc <iprintf>
  seg->len = p->tot_len - optlen;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	891a      	ldrh	r2, [r3, #8]
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a9da:	2114      	movs	r1, #20
 800a9dc:	68b8      	ldr	r0, [r7, #8]
 800a9de:	f7fb fb8f 	bl	8006100 <pbuf_add_header>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a9e8:	6938      	ldr	r0, [r7, #16]
 800a9ea:	f7fd f84c 	bl	8007a86 <tcp_seg_free>
    return NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e037      	b.n	800aa62 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8ada      	ldrh	r2, [r3, #22]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	68dc      	ldr	r4, [r3, #12]
 800aa04:	4610      	mov	r0, r2
 800aa06:	f7fa f8b3 	bl	8004b70 <lwip_htons>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8b1a      	ldrh	r2, [r3, #24]
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	68dc      	ldr	r4, [r3, #12]
 800aa16:	4610      	mov	r0, r2
 800aa18:	f7fa f8aa 	bl	8004b70 <lwip_htons>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	68dc      	ldr	r4, [r3, #12]
 800aa24:	6838      	ldr	r0, [r7, #0]
 800aa26:	f7fa f8b8 	bl	8004b9a <lwip_htonl>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	3305      	adds	r3, #5
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	031b      	lsls	r3, r3, #12
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4313      	orrs	r3, r2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	68dc      	ldr	r4, [r3, #12]
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fa f890 	bl	8004b70 <lwip_htons>
 800aa50:	4603      	mov	r3, r0
 800aa52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	749a      	strb	r2, [r3, #18]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	74da      	strb	r2, [r3, #19]
  return seg;
 800aa60:	693b      	ldr	r3, [r7, #16]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd90      	pop	{r4, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	080119b4 	.word	0x080119b4
 800aa70:	080119e8 	.word	0x080119e8
 800aa74:	08011a08 	.word	0x08011a08
 800aa78:	08011a30 	.word	0x08011a30
 800aa7c:	08011a54 	.word	0x08011a54

0800aa80 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	607b      	str	r3, [r7, #4]
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	81bb      	strh	r3, [r7, #12]
 800aa90:	4613      	mov	r3, r2
 800aa92:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800aa94:	89bb      	ldrh	r3, [r7, #12]
 800aa96:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <tcp_pbuf_prealloc+0x2a>
 800aa9e:	4b30      	ldr	r3, [pc, #192]	; (800ab60 <tcp_pbuf_prealloc+0xe0>)
 800aaa0:	22e8      	movs	r2, #232	; 0xe8
 800aaa2:	4930      	ldr	r1, [pc, #192]	; (800ab64 <tcp_pbuf_prealloc+0xe4>)
 800aaa4:	4830      	ldr	r0, [pc, #192]	; (800ab68 <tcp_pbuf_prealloc+0xe8>)
 800aaa6:	f004 fd09 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d105      	bne.n	800aabc <tcp_pbuf_prealloc+0x3c>
 800aab0:	4b2b      	ldr	r3, [pc, #172]	; (800ab60 <tcp_pbuf_prealloc+0xe0>)
 800aab2:	22e9      	movs	r2, #233	; 0xe9
 800aab4:	492d      	ldr	r1, [pc, #180]	; (800ab6c <tcp_pbuf_prealloc+0xec>)
 800aab6:	482c      	ldr	r0, [pc, #176]	; (800ab68 <tcp_pbuf_prealloc+0xe8>)
 800aab8:	f004 fd00 	bl	800f4bc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aabc:	89ba      	ldrh	r2, [r7, #12]
 800aabe:	897b      	ldrh	r3, [r7, #10]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d221      	bcs.n	800ab08 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d111      	bne.n	800aaf4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	8b5b      	ldrh	r3, [r3, #26]
 800aad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d115      	bne.n	800ab08 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800aadc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aaf4:	89bb      	ldrh	r3, [r7, #12]
 800aaf6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800aafa:	f023 0203 	bic.w	r2, r3, #3
 800aafe:	897b      	ldrh	r3, [r7, #10]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	bf28      	it	cs
 800ab04:	4613      	movcs	r3, r2
 800ab06:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ab08:	8af9      	ldrh	r1, [r7, #22]
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fb f8a7 	bl	8005c64 <pbuf_alloc>
 800ab16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e019      	b.n	800ab56 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d006      	beq.n	800ab38 <tcp_pbuf_prealloc+0xb8>
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <tcp_pbuf_prealloc+0xe0>)
 800ab2c:	f240 120b 	movw	r2, #267	; 0x10b
 800ab30:	490f      	ldr	r1, [pc, #60]	; (800ab70 <tcp_pbuf_prealloc+0xf0>)
 800ab32:	480d      	ldr	r0, [pc, #52]	; (800ab68 <tcp_pbuf_prealloc+0xe8>)
 800ab34:	f004 fcc2 	bl	800f4bc <iprintf>
  *oversize = p->len - length;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	895a      	ldrh	r2, [r3, #10]
 800ab3c:	89bb      	ldrh	r3, [r7, #12]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	89ba      	ldrh	r2, [r7, #12]
 800ab4a:	811a      	strh	r2, [r3, #8]
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	891a      	ldrh	r2, [r3, #8]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	815a      	strh	r2, [r3, #10]
  return p;
 800ab54:	693b      	ldr	r3, [r7, #16]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	080119b4 	.word	0x080119b4
 800ab64:	08011a6c 	.word	0x08011a6c
 800ab68:	08011a08 	.word	0x08011a08
 800ab6c:	08011a90 	.word	0x08011a90
 800ab70:	08011ab0 	.word	0x08011ab0

0800ab74 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d106      	bne.n	800ab94 <tcp_write_checks+0x20>
 800ab86:	4b33      	ldr	r3, [pc, #204]	; (800ac54 <tcp_write_checks+0xe0>)
 800ab88:	f240 1233 	movw	r2, #307	; 0x133
 800ab8c:	4932      	ldr	r1, [pc, #200]	; (800ac58 <tcp_write_checks+0xe4>)
 800ab8e:	4833      	ldr	r0, [pc, #204]	; (800ac5c <tcp_write_checks+0xe8>)
 800ab90:	f004 fc94 	bl	800f4bc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7d1b      	ldrb	r3, [r3, #20]
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d00e      	beq.n	800abba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800aba0:	2b07      	cmp	r3, #7
 800aba2:	d00a      	beq.n	800abba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d006      	beq.n	800abba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d002      	beq.n	800abba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800abb4:	f06f 030a 	mvn.w	r3, #10
 800abb8:	e048      	b.n	800ac4c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800abba:	887b      	ldrh	r3, [r7, #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <tcp_write_checks+0x50>
    return ERR_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	e043      	b.n	800ac4c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abca:	887a      	ldrh	r2, [r7, #2]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d909      	bls.n	800abe4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	8b5b      	ldrh	r3, [r3, #26]
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	b29a      	uxth	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800abde:	f04f 33ff 	mov.w	r3, #4294967295
 800abe2:	e033      	b.n	800ac4c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abea:	2b08      	cmp	r3, #8
 800abec:	d909      	bls.n	800ac02 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8b5b      	ldrh	r3, [r3, #26]
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800abfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ac00:	e024      	b.n	800ac4c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00f      	beq.n	800ac2c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11a      	bne.n	800ac4a <tcp_write_checks+0xd6>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d116      	bne.n	800ac4a <tcp_write_checks+0xd6>
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <tcp_write_checks+0xe0>)
 800ac1e:	f240 1255 	movw	r2, #341	; 0x155
 800ac22:	490f      	ldr	r1, [pc, #60]	; (800ac60 <tcp_write_checks+0xec>)
 800ac24:	480d      	ldr	r0, [pc, #52]	; (800ac5c <tcp_write_checks+0xe8>)
 800ac26:	f004 fc49 	bl	800f4bc <iprintf>
 800ac2a:	e00e      	b.n	800ac4a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <tcp_write_checks+0xc8>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d006      	beq.n	800ac4a <tcp_write_checks+0xd6>
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <tcp_write_checks+0xe0>)
 800ac3e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ac42:	4908      	ldr	r1, [pc, #32]	; (800ac64 <tcp_write_checks+0xf0>)
 800ac44:	4805      	ldr	r0, [pc, #20]	; (800ac5c <tcp_write_checks+0xe8>)
 800ac46:	f004 fc39 	bl	800f4bc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	080119b4 	.word	0x080119b4
 800ac58:	08011ac4 	.word	0x08011ac4
 800ac5c:	08011a08 	.word	0x08011a08
 800ac60:	08011ae4 	.word	0x08011ae4
 800ac64:	08011b20 	.word	0x08011b20

0800ac68 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ac68:	b590      	push	{r4, r7, lr}
 800ac6a:	b09b      	sub	sp, #108	; 0x6c
 800ac6c:	af04      	add	r7, sp, #16
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4611      	mov	r1, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	460b      	mov	r3, r1
 800ac78:	80fb      	strh	r3, [r7, #6]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
 800ac86:	2300      	movs	r3, #0
 800ac88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8e:	2300      	movs	r3, #0
 800ac90:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ac92:	2300      	movs	r3, #0
 800ac94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <tcp_write+0x5c>
 800acb0:	4ba4      	ldr	r3, [pc, #656]	; (800af44 <tcp_write+0x2dc>)
 800acb2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800acb6:	49a4      	ldr	r1, [pc, #656]	; (800af48 <tcp_write+0x2e0>)
 800acb8:	48a4      	ldr	r0, [pc, #656]	; (800af4c <tcp_write+0x2e4>)
 800acba:	f004 fbff 	bl	800f4bc <iprintf>
 800acbe:	f06f 030f 	mvn.w	r3, #15
 800acc2:	e32a      	b.n	800b31a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acd2:	4293      	cmp	r3, r2
 800acd4:	bf28      	it	cs
 800acd6:	4613      	movcs	r3, r2
 800acd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800acda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <tcp_write+0x7e>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ace4:	e000      	b.n	800ace8 <tcp_write+0x80>
 800ace6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ace8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <tcp_write+0x9c>
 800acf0:	4b94      	ldr	r3, [pc, #592]	; (800af44 <tcp_write+0x2dc>)
 800acf2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800acf6:	4996      	ldr	r1, [pc, #600]	; (800af50 <tcp_write+0x2e8>)
 800acf8:	4894      	ldr	r0, [pc, #592]	; (800af4c <tcp_write+0x2e4>)
 800acfa:	f004 fbdf 	bl	800f4bc <iprintf>
 800acfe:	f06f 030f 	mvn.w	r3, #15
 800ad02:	e30a      	b.n	800b31a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ad04:	88fb      	ldrh	r3, [r7, #6]
 800ad06:	4619      	mov	r1, r3
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f7ff ff33 	bl	800ab74 <tcp_write_checks>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ad14:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <tcp_write+0xba>
    return err;
 800ad1c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad20:	e2fb      	b.n	800b31a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 80f6 	beq.w	800af28 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad40:	653b      	str	r3, [r7, #80]	; 0x50
 800ad42:	e002      	b.n	800ad4a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ad44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f8      	bne.n	800ad44 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad54:	7a9b      	ldrb	r3, [r3, #10]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad64:	891b      	ldrh	r3, [r3, #8]
 800ad66:	4619      	mov	r1, r3
 800ad68:	8c3b      	ldrh	r3, [r7, #32]
 800ad6a:	440b      	add	r3, r1
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	da06      	bge.n	800ad7e <tcp_write+0x116>
 800ad70:	4b74      	ldr	r3, [pc, #464]	; (800af44 <tcp_write+0x2dc>)
 800ad72:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ad76:	4977      	ldr	r1, [pc, #476]	; (800af54 <tcp_write+0x2ec>)
 800ad78:	4874      	ldr	r0, [pc, #464]	; (800af4c <tcp_write+0x2e4>)
 800ad7a:	f004 fb9f 	bl	800f4bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ad7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad80:	891a      	ldrh	r2, [r3, #8]
 800ad82:	8c3b      	ldrh	r3, [r7, #32]
 800ad84:	4413      	add	r3, r2
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad94:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ad96:	8a7b      	ldrh	r3, [r7, #18]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d026      	beq.n	800adea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ad9c:	8a7b      	ldrh	r3, [r7, #18]
 800ad9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d206      	bcs.n	800adb2 <tcp_write+0x14a>
 800ada4:	4b67      	ldr	r3, [pc, #412]	; (800af44 <tcp_write+0x2dc>)
 800ada6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800adaa:	496b      	ldr	r1, [pc, #428]	; (800af58 <tcp_write+0x2f0>)
 800adac:	4867      	ldr	r0, [pc, #412]	; (800af4c <tcp_write+0x2e4>)
 800adae:	f004 fb85 	bl	800f4bc <iprintf>
      seg = last_unsent;
 800adb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800adb6:	8a7b      	ldrh	r3, [r7, #18]
 800adb8:	88fa      	ldrh	r2, [r7, #6]
 800adba:	4293      	cmp	r3, r2
 800adbc:	bf28      	it	cs
 800adbe:	4613      	movcs	r3, r2
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800adc4:	4293      	cmp	r3, r2
 800adc6:	bf28      	it	cs
 800adc8:	4613      	movcs	r3, r2
 800adca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800adcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800add0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800add2:	4413      	add	r3, r2
 800add4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800add8:	8a7a      	ldrh	r2, [r7, #18]
 800adda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	b29b      	uxth	r3, r3
 800ade0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ade2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ade4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800adea:	8a7b      	ldrh	r3, [r7, #18]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <tcp_write+0x1a0>
 800adf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d006      	beq.n	800ae08 <tcp_write+0x1a0>
 800adfa:	4b52      	ldr	r3, [pc, #328]	; (800af44 <tcp_write+0x2dc>)
 800adfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae00:	4956      	ldr	r1, [pc, #344]	; (800af5c <tcp_write+0x2f4>)
 800ae02:	4852      	ldr	r0, [pc, #328]	; (800af4c <tcp_write+0x2e4>)
 800ae04:	f004 fb5a 	bl	800f4bc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ae08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	f080 8167 	bcs.w	800b0e2 <tcp_write+0x47a>
 800ae14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 8163 	beq.w	800b0e2 <tcp_write+0x47a>
 800ae1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1e:	891b      	ldrh	r3, [r3, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 815e 	beq.w	800b0e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae26:	88fa      	ldrh	r2, [r7, #6]
 800ae28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae2c:	1ad2      	subs	r2, r2, r3
 800ae2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae30:	4293      	cmp	r3, r2
 800ae32:	bfa8      	it	ge
 800ae34:	4613      	movge	r3, r2
 800ae36:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ae38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae3c:	797b      	ldrb	r3, [r7, #5]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d027      	beq.n	800ae96 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ae46:	f107 0012 	add.w	r0, r7, #18
 800ae4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae4c:	8bf9      	ldrh	r1, [r7, #30]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	9302      	str	r3, [sp, #8]
 800ae52:	797b      	ldrb	r3, [r7, #5]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7ff fe0f 	bl	800aa80 <tcp_pbuf_prealloc>
 800ae62:	6578      	str	r0, [r7, #84]	; 0x54
 800ae64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 8225 	beq.w	800b2b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ae6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae6e:	6858      	ldr	r0, [r3, #4]
 800ae70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	4413      	add	r3, r2
 800ae78:	8bfa      	ldrh	r2, [r7, #30]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f004 fbf9 	bl	800f672 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ae80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae82:	f7fb fa5b 	bl	800633c <pbuf_clen>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae8e:	4413      	add	r3, r2
 800ae90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ae94:	e041      	b.n	800af1a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ae96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9c:	e002      	b.n	800aea4 <tcp_write+0x23c>
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
 800aea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f8      	bne.n	800ae9e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeae:	7b1b      	ldrb	r3, [r3, #12]
 800aeb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d115      	bne.n	800aee4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aebe:	8952      	ldrh	r2, [r2, #10]
 800aec0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d10d      	bne.n	800aee4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aec8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <tcp_write+0x276>
 800aed0:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <tcp_write+0x2dc>)
 800aed2:	f240 2231 	movw	r2, #561	; 0x231
 800aed6:	4922      	ldr	r1, [pc, #136]	; (800af60 <tcp_write+0x2f8>)
 800aed8:	481c      	ldr	r0, [pc, #112]	; (800af4c <tcp_write+0x2e4>)
 800aeda:	f004 faef 	bl	800f4bc <iprintf>
          extendlen = seglen;
 800aede:	8bfb      	ldrh	r3, [r7, #30]
 800aee0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aee2:	e01a      	b.n	800af1a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aee4:	8bfb      	ldrh	r3, [r7, #30]
 800aee6:	2201      	movs	r2, #1
 800aee8:	4619      	mov	r1, r3
 800aeea:	2000      	movs	r0, #0
 800aeec:	f7fa feba 	bl	8005c64 <pbuf_alloc>
 800aef0:	6578      	str	r0, [r7, #84]	; 0x54
 800aef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 81e0 	beq.w	800b2ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800aefa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	441a      	add	r2, r3
 800af02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af04:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800af06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800af08:	f7fb fa18 	bl	800633c <pbuf_clen>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461a      	mov	r2, r3
 800af10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af14:	4413      	add	r3, r2
 800af16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800af1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af1e:	8bfb      	ldrh	r3, [r7, #30]
 800af20:	4413      	add	r3, r2
 800af22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af26:	e0dc      	b.n	800b0e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80d7 	beq.w	800b0e2 <tcp_write+0x47a>
 800af34:	4b03      	ldr	r3, [pc, #12]	; (800af44 <tcp_write+0x2dc>)
 800af36:	f240 224a 	movw	r2, #586	; 0x24a
 800af3a:	490a      	ldr	r1, [pc, #40]	; (800af64 <tcp_write+0x2fc>)
 800af3c:	4803      	ldr	r0, [pc, #12]	; (800af4c <tcp_write+0x2e4>)
 800af3e:	f004 fabd 	bl	800f4bc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800af42:	e0ce      	b.n	800b0e2 <tcp_write+0x47a>
 800af44:	080119b4 	.word	0x080119b4
 800af48:	08011b54 	.word	0x08011b54
 800af4c:	08011a08 	.word	0x08011a08
 800af50:	08011b6c 	.word	0x08011b6c
 800af54:	08011ba0 	.word	0x08011ba0
 800af58:	08011bb8 	.word	0x08011bb8
 800af5c:	08011bd8 	.word	0x08011bd8
 800af60:	08011bf8 	.word	0x08011bf8
 800af64:	08011c24 	.word	0x08011c24
    struct pbuf *p;
    u16_t left = len - pos;
 800af68:	88fa      	ldrh	r2, [r7, #6]
 800af6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800af72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af76:	b29b      	uxth	r3, r3
 800af78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800af7e:	8b7a      	ldrh	r2, [r7, #26]
 800af80:	8bbb      	ldrh	r3, [r7, #28]
 800af82:	4293      	cmp	r3, r2
 800af84:	bf28      	it	cs
 800af86:	4613      	movcs	r3, r2
 800af88:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af8a:	797b      	ldrb	r3, [r7, #5]
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d036      	beq.n	800b002 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800af94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af98:	b29a      	uxth	r2, r3
 800af9a:	8b3b      	ldrh	r3, [r7, #24]
 800af9c:	4413      	add	r3, r2
 800af9e:	b299      	uxth	r1, r3
 800afa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bf0c      	ite	eq
 800afa6:	2301      	moveq	r3, #1
 800afa8:	2300      	movne	r3, #0
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f107 0012 	add.w	r0, r7, #18
 800afb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800afb2:	9302      	str	r3, [sp, #8]
 800afb4:	797b      	ldrb	r3, [r7, #5]
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4603      	mov	r3, r0
 800afbe:	2036      	movs	r0, #54	; 0x36
 800afc0:	f7ff fd5e 	bl	800aa80 <tcp_pbuf_prealloc>
 800afc4:	6338      	str	r0, [r7, #48]	; 0x30
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 8178 	beq.w	800b2be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	895b      	ldrh	r3, [r3, #10]
 800afd2:	8b3a      	ldrh	r2, [r7, #24]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d906      	bls.n	800afe6 <tcp_write+0x37e>
 800afd8:	4b8c      	ldr	r3, [pc, #560]	; (800b20c <tcp_write+0x5a4>)
 800afda:	f240 2266 	movw	r2, #614	; 0x266
 800afde:	498c      	ldr	r1, [pc, #560]	; (800b210 <tcp_write+0x5a8>)
 800afe0:	488c      	ldr	r0, [pc, #560]	; (800b214 <tcp_write+0x5ac>)
 800afe2:	f004 fa6b 	bl	800f4bc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afee:	18d0      	adds	r0, r2, r3
 800aff0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	4413      	add	r3, r2
 800aff8:	8b3a      	ldrh	r2, [r7, #24]
 800affa:	4619      	mov	r1, r3
 800affc:	f004 fb39 	bl	800f672 <memcpy>
 800b000:	e02f      	b.n	800b062 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b002:	8a7b      	ldrh	r3, [r7, #18]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d006      	beq.n	800b016 <tcp_write+0x3ae>
 800b008:	4b80      	ldr	r3, [pc, #512]	; (800b20c <tcp_write+0x5a4>)
 800b00a:	f240 2271 	movw	r2, #625	; 0x271
 800b00e:	4982      	ldr	r1, [pc, #520]	; (800b218 <tcp_write+0x5b0>)
 800b010:	4880      	ldr	r0, [pc, #512]	; (800b214 <tcp_write+0x5ac>)
 800b012:	f004 fa53 	bl	800f4bc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b016:	8b3b      	ldrh	r3, [r7, #24]
 800b018:	2201      	movs	r2, #1
 800b01a:	4619      	mov	r1, r3
 800b01c:	2036      	movs	r0, #54	; 0x36
 800b01e:	f7fa fe21 	bl	8005c64 <pbuf_alloc>
 800b022:	6178      	str	r0, [r7, #20]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 814b 	beq.w	800b2c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b02c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	441a      	add	r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b042:	4619      	mov	r1, r3
 800b044:	2036      	movs	r0, #54	; 0x36
 800b046:	f7fa fe0d 	bl	8005c64 <pbuf_alloc>
 800b04a:	6338      	str	r0, [r7, #48]	; 0x30
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d103      	bne.n	800b05a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b052:	6978      	ldr	r0, [r7, #20]
 800b054:	f7fb f8ea 	bl	800622c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b058:	e136      	b.n	800b2c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b05e:	f7fb f9a7 	bl	80063b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b064:	f7fb f96a 	bl	800633c <pbuf_clen>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b070:	4413      	add	r3, r2
 800b072:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b076:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d903      	bls.n	800b086 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b07e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b080:	f7fb f8d4 	bl	800622c <pbuf_free>
      goto memerr;
 800b084:	e120      	b.n	800b2c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b08a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b08e:	441a      	add	r2, r3
 800b090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	4613      	mov	r3, r2
 800b098:	2200      	movs	r2, #0
 800b09a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff fc51 	bl	800a944 <tcp_create_segment>
 800b0a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 810d 	beq.w	800b2c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <tcp_write+0x450>
      queue = seg;
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0b6:	e00c      	b.n	800b0d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <tcp_write+0x464>
 800b0be:	4b53      	ldr	r3, [pc, #332]	; (800b20c <tcp_write+0x5a4>)
 800b0c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b0c4:	4955      	ldr	r1, [pc, #340]	; (800b21c <tcp_write+0x5b4>)
 800b0c6:	4853      	ldr	r0, [pc, #332]	; (800b214 <tcp_write+0x5ac>)
 800b0c8:	f004 f9f8 	bl	800f4bc <iprintf>
      prev_seg->next = seg;
 800b0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b0d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0da:	8b3b      	ldrh	r3, [r7, #24]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b0e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	f4ff af3d 	bcc.w	800af68 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b0ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d02c      	beq.n	800b14e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0fa:	e01e      	b.n	800b13a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	891a      	ldrh	r2, [r3, #8]
 800b100:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b102:	4413      	add	r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b108:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d110      	bne.n	800b134 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b118:	8952      	ldrh	r2, [r2, #10]
 800b11a:	4413      	add	r3, r2
 800b11c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	4618      	mov	r0, r3
 800b122:	f004 faa6 	bl	800f672 <memcpy>
        p->len += oversize_used;
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	895a      	ldrh	r2, [r3, #10]
 800b12a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1dd      	bne.n	800b0fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b142:	891a      	ldrh	r2, [r3, #8]
 800b144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b146:	4413      	add	r3, r2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b14c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b14e:	8a7a      	ldrh	r2, [r7, #18]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d018      	beq.n	800b18e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <tcp_write+0x508>
 800b162:	4b2a      	ldr	r3, [pc, #168]	; (800b20c <tcp_write+0x5a4>)
 800b164:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b168:	492d      	ldr	r1, [pc, #180]	; (800b220 <tcp_write+0x5b8>)
 800b16a:	482a      	ldr	r0, [pc, #168]	; (800b214 <tcp_write+0x5ac>)
 800b16c:	f004 f9a6 	bl	800f4bc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b176:	4618      	mov	r0, r3
 800b178:	f7fb f91a 	bl	80063b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b17e:	891a      	ldrh	r2, [r3, #8]
 800b180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b182:	891b      	ldrh	r3, [r3, #8]
 800b184:	4413      	add	r3, r2
 800b186:	b29a      	uxth	r2, r3
 800b188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18a:	811a      	strh	r2, [r3, #8]
 800b18c:	e037      	b.n	800b1fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b18e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b190:	2b00      	cmp	r3, #0
 800b192:	d034      	beq.n	800b1fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <tcp_write+0x53a>
 800b19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <tcp_write+0x548>
 800b1a2:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <tcp_write+0x5a4>)
 800b1a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b1a8:	491e      	ldr	r1, [pc, #120]	; (800b224 <tcp_write+0x5bc>)
 800b1aa:	481a      	ldr	r0, [pc, #104]	; (800b214 <tcp_write+0x5ac>)
 800b1ac:	f004 f986 	bl	800f4bc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b6:	e009      	b.n	800b1cc <tcp_write+0x564>
      p->tot_len += extendlen;
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	891a      	ldrh	r2, [r3, #8]
 800b1bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1be:	4413      	add	r3, r2
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f1      	bne.n	800b1b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	891a      	ldrh	r2, [r3, #8]
 800b1d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1da:	4413      	add	r3, r2
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	895a      	ldrh	r2, [r3, #10]
 800b1e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1e8:	4413      	add	r3, r2
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f2:	891a      	ldrh	r2, [r3, #8]
 800b1f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1f6:	4413      	add	r3, r2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b200:	2b00      	cmp	r3, #0
 800b202:	d111      	bne.n	800b228 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b208:	66da      	str	r2, [r3, #108]	; 0x6c
 800b20a:	e010      	b.n	800b22e <tcp_write+0x5c6>
 800b20c:	080119b4 	.word	0x080119b4
 800b210:	08011c54 	.word	0x08011c54
 800b214:	08011a08 	.word	0x08011a08
 800b218:	08011c94 	.word	0x08011c94
 800b21c:	08011ca4 	.word	0x08011ca4
 800b220:	08011cb8 	.word	0x08011cb8
 800b224:	08011cf0 	.word	0x08011cf0
  } else {
    last_unsent->next = queue;
 800b228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b22a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b22c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b232:	88fb      	ldrh	r3, [r7, #6]
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b240:	88fb      	ldrh	r3, [r7, #6]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b252:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00e      	beq.n	800b27e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <tcp_write+0x616>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <tcp_write+0x616>
 800b270:	4b2c      	ldr	r3, [pc, #176]	; (800b324 <tcp_write+0x6bc>)
 800b272:	f240 3212 	movw	r2, #786	; 0x312
 800b276:	492c      	ldr	r1, [pc, #176]	; (800b328 <tcp_write+0x6c0>)
 800b278:	482c      	ldr	r0, [pc, #176]	; (800b32c <tcp_write+0x6c4>)
 800b27a:	f004 f91f 	bl	800f4bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d016      	beq.n	800b2b2 <tcp_write+0x64a>
 800b284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d012      	beq.n	800b2b2 <tcp_write+0x64a>
 800b28c:	797b      	ldrb	r3, [r7, #5]
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	899b      	ldrh	r3, [r3, #12]
 800b29c:	b29c      	uxth	r4, r3
 800b29e:	2008      	movs	r0, #8
 800b2a0:	f7f9 fc66 	bl	8004b70 <lwip_htons>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	4322      	orrs	r2, r4
 800b2ae:	b292      	uxth	r2, r2
 800b2b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e031      	b.n	800b31a <tcp_write+0x6b2>
          goto memerr;
 800b2b6:	bf00      	nop
 800b2b8:	e006      	b.n	800b2c8 <tcp_write+0x660>
            goto memerr;
 800b2ba:	bf00      	nop
 800b2bc:	e004      	b.n	800b2c8 <tcp_write+0x660>
        goto memerr;
 800b2be:	bf00      	nop
 800b2c0:	e002      	b.n	800b2c8 <tcp_write+0x660>
        goto memerr;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <tcp_write+0x660>
      goto memerr;
 800b2c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8b5b      	ldrh	r3, [r3, #26]
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b2d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b2dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b2de:	f7fa ffa5 	bl	800622c <pbuf_free>
  }
  if (queue != NULL) {
 800b2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <tcp_write+0x686>
    tcp_segs_free(queue);
 800b2e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b2ea:	f7fc fbb7 	bl	8007a5c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00e      	beq.n	800b316 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10a      	bne.n	800b316 <tcp_write+0x6ae>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <tcp_write+0x6ae>
 800b308:	4b06      	ldr	r3, [pc, #24]	; (800b324 <tcp_write+0x6bc>)
 800b30a:	f240 3227 	movw	r2, #807	; 0x327
 800b30e:	4906      	ldr	r1, [pc, #24]	; (800b328 <tcp_write+0x6c0>)
 800b310:	4806      	ldr	r0, [pc, #24]	; (800b32c <tcp_write+0x6c4>)
 800b312:	f004 f8d3 	bl	800f4bc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	375c      	adds	r7, #92	; 0x5c
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd90      	pop	{r4, r7, pc}
 800b322:	bf00      	nop
 800b324:	080119b4 	.word	0x080119b4
 800b328:	08011d28 	.word	0x08011d28
 800b32c:	08011a08 	.word	0x08011a08

0800b330 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b08b      	sub	sp, #44	; 0x2c
 800b334:	af02      	add	r7, sp, #8
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <tcp_split_unsent_seg+0x2c>
 800b34e:	4b95      	ldr	r3, [pc, #596]	; (800b5a4 <tcp_split_unsent_seg+0x274>)
 800b350:	f240 324b 	movw	r2, #843	; 0x34b
 800b354:	4994      	ldr	r1, [pc, #592]	; (800b5a8 <tcp_split_unsent_seg+0x278>)
 800b356:	4895      	ldr	r0, [pc, #596]	; (800b5ac <tcp_split_unsent_seg+0x27c>)
 800b358:	f004 f8b0 	bl	800f4bc <iprintf>

  useg = pcb->unsent;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b360:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
 800b36c:	e116      	b.n	800b59c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b36e:	887b      	ldrh	r3, [r7, #2]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d109      	bne.n	800b388 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b374:	4b8b      	ldr	r3, [pc, #556]	; (800b5a4 <tcp_split_unsent_seg+0x274>)
 800b376:	f240 3253 	movw	r2, #851	; 0x353
 800b37a:	498d      	ldr	r1, [pc, #564]	; (800b5b0 <tcp_split_unsent_seg+0x280>)
 800b37c:	488b      	ldr	r0, [pc, #556]	; (800b5ac <tcp_split_unsent_seg+0x27c>)
 800b37e:	f004 f89d 	bl	800f4bc <iprintf>
    return ERR_VAL;
 800b382:	f06f 0305 	mvn.w	r3, #5
 800b386:	e109      	b.n	800b59c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	891b      	ldrh	r3, [r3, #8]
 800b38c:	887a      	ldrh	r2, [r7, #2]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d301      	bcc.n	800b396 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	e102      	b.n	800b59c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39a:	887a      	ldrh	r2, [r7, #2]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d906      	bls.n	800b3ae <tcp_split_unsent_seg+0x7e>
 800b3a0:	4b80      	ldr	r3, [pc, #512]	; (800b5a4 <tcp_split_unsent_seg+0x274>)
 800b3a2:	f240 325b 	movw	r2, #859	; 0x35b
 800b3a6:	4983      	ldr	r1, [pc, #524]	; (800b5b4 <tcp_split_unsent_seg+0x284>)
 800b3a8:	4880      	ldr	r0, [pc, #512]	; (800b5ac <tcp_split_unsent_seg+0x27c>)
 800b3aa:	f004 f887 	bl	800f4bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	891b      	ldrh	r3, [r3, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <tcp_split_unsent_seg+0x94>
 800b3b6:	4b7b      	ldr	r3, [pc, #492]	; (800b5a4 <tcp_split_unsent_seg+0x274>)
 800b3b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b3bc:	497e      	ldr	r1, [pc, #504]	; (800b5b8 <tcp_split_unsent_seg+0x288>)
 800b3be:	487b      	ldr	r0, [pc, #492]	; (800b5ac <tcp_split_unsent_seg+0x27c>)
 800b3c0:	f004 f87c 	bl	800f4bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	7a9b      	ldrb	r3, [r3, #10]
 800b3c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	891a      	ldrh	r2, [r3, #8]
 800b3da:	887b      	ldrh	r3, [r7, #2]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	89bb      	ldrh	r3, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	2036      	movs	r0, #54	; 0x36
 800b3f2:	f7fa fc37 	bl	8005c64 <pbuf_alloc>
 800b3f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 80b7 	beq.w	800b56e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	891a      	ldrh	r2, [r3, #8]
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	891b      	ldrh	r3, [r3, #8]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	4413      	add	r3, r2
 800b412:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	6858      	ldr	r0, [r3, #4]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	18d1      	adds	r1, r2, r3
 800b420:	897b      	ldrh	r3, [r7, #10]
 800b422:	89ba      	ldrh	r2, [r7, #12]
 800b424:	f7fb f8ec 	bl	8006600 <pbuf_copy_partial>
 800b428:	4603      	mov	r3, r0
 800b42a:	461a      	mov	r2, r3
 800b42c:	89bb      	ldrh	r3, [r7, #12]
 800b42e:	4293      	cmp	r3, r2
 800b430:	f040 809f 	bne.w	800b572 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	899b      	ldrh	r3, [r3, #12]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f9 fb97 	bl	8004b70 <lwip_htons>
 800b442:	4603      	mov	r3, r0
 800b444:	b2db      	uxtb	r3, r3
 800b446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b44c:	2300      	movs	r3, #0
 800b44e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b450:	7efb      	ldrb	r3, [r7, #27]
 800b452:	f003 0308 	and.w	r3, r3, #8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b45a:	7efb      	ldrb	r3, [r7, #27]
 800b45c:	f023 0308 	bic.w	r3, r3, #8
 800b460:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b462:	7ebb      	ldrb	r3, [r7, #26]
 800b464:	f043 0308 	orr.w	r3, r3, #8
 800b468:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b46a:	7efb      	ldrb	r3, [r7, #27]
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b00      	cmp	r3, #0
 800b472:	d007      	beq.n	800b484 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b474:	7efb      	ldrb	r3, [r7, #27]
 800b476:	f023 0301 	bic.w	r3, r3, #1
 800b47a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b47c:	7ebb      	ldrb	r3, [r7, #26]
 800b47e:	f043 0301 	orr.w	r3, r3, #1
 800b482:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7f9 fb85 	bl	8004b9a <lwip_htonl>
 800b490:	4602      	mov	r2, r0
 800b492:	887b      	ldrh	r3, [r7, #2]
 800b494:	18d1      	adds	r1, r2, r3
 800b496:	7eba      	ldrb	r2, [r7, #26]
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	460b      	mov	r3, r1
 800b49e:	6939      	ldr	r1, [r7, #16]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fa4f 	bl	800a944 <tcp_create_segment>
 800b4a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d063      	beq.n	800b576 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fa ff42 	bl	800633c <pbuf_clen>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4c2:	1a9b      	subs	r3, r3, r2
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6858      	ldr	r0, [r3, #4]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	891a      	ldrh	r2, [r3, #8]
 800b4d6:	89bb      	ldrh	r3, [r7, #12]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f7fa fd1f 	bl	8005f20 <pbuf_realloc>
  useg->len -= remainder;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	891a      	ldrh	r2, [r3, #8]
 800b4e6:	89bb      	ldrh	r3, [r7, #12]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	b29c      	uxth	r4, r3
 800b4f8:	7efb      	ldrb	r3, [r7, #27]
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f9 fb37 	bl	8004b70 <lwip_htons>
 800b502:	4603      	mov	r3, r0
 800b504:	461a      	mov	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	4322      	orrs	r2, r4
 800b50c:	b292      	uxth	r2, r2
 800b50e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	f7fa ff11 	bl	800633c <pbuf_clen>
 800b51a:	4603      	mov	r3, r0
 800b51c:	461a      	mov	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b524:	4413      	add	r3, r2
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4618      	mov	r0, r3
 800b534:	f7fa ff02 	bl	800633c <pbuf_clen>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b542:	4413      	add	r3, r2
 800b544:	b29a      	uxth	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	69fa      	ldr	r2, [r7, #28]
 800b558:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d103      	bne.n	800b56a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	e016      	b.n	800b59c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b56e:	bf00      	nop
 800b570:	e002      	b.n	800b578 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b572:	bf00      	nop
 800b574:	e000      	b.n	800b578 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b576:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <tcp_split_unsent_seg+0x25c>
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <tcp_split_unsent_seg+0x274>)
 800b580:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b584:	490d      	ldr	r1, [pc, #52]	; (800b5bc <tcp_split_unsent_seg+0x28c>)
 800b586:	4809      	ldr	r0, [pc, #36]	; (800b5ac <tcp_split_unsent_seg+0x27c>)
 800b588:	f003 ff98 	bl	800f4bc <iprintf>
  if (p != NULL) {
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b592:	6938      	ldr	r0, [r7, #16]
 800b594:	f7fa fe4a 	bl	800622c <pbuf_free>
  }

  return ERR_MEM;
 800b598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3724      	adds	r7, #36	; 0x24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd90      	pop	{r4, r7, pc}
 800b5a4:	080119b4 	.word	0x080119b4
 800b5a8:	08011d48 	.word	0x08011d48
 800b5ac:	08011a08 	.word	0x08011a08
 800b5b0:	08011d6c 	.word	0x08011d6c
 800b5b4:	08011d90 	.word	0x08011d90
 800b5b8:	08011da0 	.word	0x08011da0
 800b5bc:	08011db0 	.word	0x08011db0

0800b5c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <tcp_send_fin+0x1c>
 800b5ce:	4b21      	ldr	r3, [pc, #132]	; (800b654 <tcp_send_fin+0x94>)
 800b5d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5d4:	4920      	ldr	r1, [pc, #128]	; (800b658 <tcp_send_fin+0x98>)
 800b5d6:	4821      	ldr	r0, [pc, #132]	; (800b65c <tcp_send_fin+0x9c>)
 800b5d8:	f003 ff70 	bl	800f4bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d02e      	beq.n	800b642 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	e002      	b.n	800b5f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1f8      	bne.n	800b5ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	899b      	ldrh	r3, [r3, #12]
 800b600:	b29b      	uxth	r3, r3
 800b602:	4618      	mov	r0, r3
 800b604:	f7f9 fab4 	bl	8004b70 <lwip_htons>
 800b608:	4603      	mov	r3, r0
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	2b00      	cmp	r3, #0
 800b612:	d116      	bne.n	800b642 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	899b      	ldrh	r3, [r3, #12]
 800b61a:	b29c      	uxth	r4, r3
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7f9 faa7 	bl	8004b70 <lwip_htons>
 800b622:	4603      	mov	r3, r0
 800b624:	461a      	mov	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	4322      	orrs	r2, r4
 800b62c:	b292      	uxth	r2, r2
 800b62e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	8b5b      	ldrh	r3, [r3, #26]
 800b634:	f043 0320 	orr.w	r3, r3, #32
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	e004      	b.n	800b64c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b642:	2101      	movs	r1, #1
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f80b 	bl	800b660 <tcp_enqueue_flags>
 800b64a:	4603      	mov	r3, r0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	bd90      	pop	{r4, r7, pc}
 800b654:	080119b4 	.word	0x080119b4
 800b658:	08011dbc 	.word	0x08011dbc
 800b65c:	08011a08 	.word	0x08011a08

0800b660 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08a      	sub	sp, #40	; 0x28
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d106      	bne.n	800b68c <tcp_enqueue_flags+0x2c>
 800b67e:	4b67      	ldr	r3, [pc, #412]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b680:	f240 4211 	movw	r2, #1041	; 0x411
 800b684:	4966      	ldr	r1, [pc, #408]	; (800b820 <tcp_enqueue_flags+0x1c0>)
 800b686:	4867      	ldr	r0, [pc, #412]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b688:	f003 ff18 	bl	800f4bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d106      	bne.n	800b6a0 <tcp_enqueue_flags+0x40>
 800b692:	4b62      	ldr	r3, [pc, #392]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b694:	f240 4213 	movw	r2, #1043	; 0x413
 800b698:	4963      	ldr	r1, [pc, #396]	; (800b828 <tcp_enqueue_flags+0x1c8>)
 800b69a:	4862      	ldr	r0, [pc, #392]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b69c:	f003 ff0e 	bl	800f4bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b6ae:	7ffb      	ldrb	r3, [r7, #31]
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	2036      	movs	r0, #54	; 0x36
 800b6c6:	f7fa facd 	bl	8005c64 <pbuf_alloc>
 800b6ca:	6138      	str	r0, [r7, #16]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	8b5b      	ldrh	r3, [r3, #26]
 800b6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e4:	e095      	b.n	800b812 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	895a      	ldrh	r2, [r3, #10]
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d206      	bcs.n	800b700 <tcp_enqueue_flags+0xa0>
 800b6f2:	4b4a      	ldr	r3, [pc, #296]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b6f4:	f240 4239 	movw	r2, #1081	; 0x439
 800b6f8:	494c      	ldr	r1, [pc, #304]	; (800b82c <tcp_enqueue_flags+0x1cc>)
 800b6fa:	484a      	ldr	r0, [pc, #296]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b6fc:	f003 fede 	bl	800f4bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	460b      	mov	r3, r1
 800b70c:	6939      	ldr	r1, [r7, #16]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff f918 	bl	800a944 <tcp_create_segment>
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d109      	bne.n	800b730 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8b5b      	ldrh	r3, [r3, #26]
 800b720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	e070      	b.n	800b812 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 0303 	and.w	r3, r3, #3
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d006      	beq.n	800b74a <tcp_enqueue_flags+0xea>
 800b73c:	4b37      	ldr	r3, [pc, #220]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b73e:	f240 4242 	movw	r2, #1090	; 0x442
 800b742:	493b      	ldr	r1, [pc, #236]	; (800b830 <tcp_enqueue_flags+0x1d0>)
 800b744:	4837      	ldr	r0, [pc, #220]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b746:	f003 feb9 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	891b      	ldrh	r3, [r3, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d006      	beq.n	800b760 <tcp_enqueue_flags+0x100>
 800b752:	4b32      	ldr	r3, [pc, #200]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b754:	f240 4243 	movw	r2, #1091	; 0x443
 800b758:	4936      	ldr	r1, [pc, #216]	; (800b834 <tcp_enqueue_flags+0x1d4>)
 800b75a:	4832      	ldr	r0, [pc, #200]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b75c:	f003 feae 	bl	800f4bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b76e:	e00d      	b.n	800b78c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	e002      	b.n	800b77e <tcp_enqueue_flags+0x11e>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f8      	bne.n	800b778 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d104      	bne.n	800b7a8 <tcp_enqueue_flags+0x148>
 800b79e:	78fb      	ldrb	r3, [r7, #3]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d004      	beq.n	800b7b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d006      	beq.n	800b7ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8b5b      	ldrh	r3, [r3, #26]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fa fdb4 	bl	800633c <pbuf_clen>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7de:	4413      	add	r3, r2
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00e      	beq.n	800b810 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <tcp_enqueue_flags+0x1b0>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <tcp_enqueue_flags+0x1b0>
 800b802:	4b06      	ldr	r3, [pc, #24]	; (800b81c <tcp_enqueue_flags+0x1bc>)
 800b804:	f240 4265 	movw	r2, #1125	; 0x465
 800b808:	490b      	ldr	r1, [pc, #44]	; (800b838 <tcp_enqueue_flags+0x1d8>)
 800b80a:	4806      	ldr	r0, [pc, #24]	; (800b824 <tcp_enqueue_flags+0x1c4>)
 800b80c:	f003 fe56 	bl	800f4bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	080119b4 	.word	0x080119b4
 800b820:	08011dd8 	.word	0x08011dd8
 800b824:	08011a08 	.word	0x08011a08
 800b828:	08011e30 	.word	0x08011e30
 800b82c:	08011e50 	.word	0x08011e50
 800b830:	08011e8c 	.word	0x08011e8c
 800b834:	08011ea4 	.word	0x08011ea4
 800b838:	08011ed0 	.word	0x08011ed0

0800b83c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b83c:	b5b0      	push	{r4, r5, r7, lr}
 800b83e:	b08a      	sub	sp, #40	; 0x28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <tcp_output+0x1c>
 800b84a:	4b8a      	ldr	r3, [pc, #552]	; (800ba74 <tcp_output+0x238>)
 800b84c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b850:	4989      	ldr	r1, [pc, #548]	; (800ba78 <tcp_output+0x23c>)
 800b852:	488a      	ldr	r0, [pc, #552]	; (800ba7c <tcp_output+0x240>)
 800b854:	f003 fe32 	bl	800f4bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7d1b      	ldrb	r3, [r3, #20]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d106      	bne.n	800b86e <tcp_output+0x32>
 800b860:	4b84      	ldr	r3, [pc, #528]	; (800ba74 <tcp_output+0x238>)
 800b862:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b866:	4986      	ldr	r1, [pc, #536]	; (800ba80 <tcp_output+0x244>)
 800b868:	4884      	ldr	r0, [pc, #528]	; (800ba7c <tcp_output+0x240>)
 800b86a:	f003 fe27 	bl	800f4bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b86e:	4b85      	ldr	r3, [pc, #532]	; (800ba84 <tcp_output+0x248>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d101      	bne.n	800b87c <tcp_output+0x40>
    return ERR_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e1ce      	b.n	800bc1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b888:	4293      	cmp	r3, r2
 800b88a:	bf28      	it	cs
 800b88c:	4613      	movcs	r3, r2
 800b88e:	b29b      	uxth	r3, r3
 800b890:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b896:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10b      	bne.n	800b8b6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	8b5b      	ldrh	r3, [r3, #26]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 81aa 	beq.w	800bc00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fdcb 	bl	800c448 <tcp_send_empty_ack>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	e1b1      	b.n	800bc1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff f824 	bl	800a90c <tcp_route>
 800b8c4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <tcp_output+0x96>
    return ERR_RTE;
 800b8cc:	f06f 0303 	mvn.w	r3, #3
 800b8d0:	e1a3      	b.n	800bc1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <tcp_output+0xa4>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d111      	bne.n	800b904 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <tcp_output+0xb0>
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	e000      	b.n	800b8ee <tcp_output+0xb2>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <tcp_output+0xc0>
      return ERR_RTE;
 800b8f6:	f06f 0303 	mvn.w	r3, #3
 800b8fa:	e18e      	b.n	800bc1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f9 f945 	bl	8004b9a <lwip_htonl>
 800b910:	4602      	mov	r2, r0
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91a:	8912      	ldrh	r2, [r2, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	429a      	cmp	r2, r3
 800b922:	d227      	bcs.n	800b974 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b92a:	461a      	mov	r2, r3
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	4293      	cmp	r3, r2
 800b930:	d114      	bne.n	800b95c <tcp_output+0x120>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b936:	2b00      	cmp	r3, #0
 800b938:	d110      	bne.n	800b95c <tcp_output+0x120>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10b      	bne.n	800b95c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	8b5b      	ldrh	r3, [r3, #26]
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 814d 	beq.w	800bc04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fd6c 	bl	800c448 <tcp_send_empty_ack>
 800b970:	4603      	mov	r3, r0
 800b972:	e152      	b.n	800bc1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b980:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 811c 	beq.w	800bbc2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b98a:	e002      	b.n	800b992 <tcp_output+0x156>
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	623b      	str	r3, [r7, #32]
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f8      	bne.n	800b98c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b99a:	e112      	b.n	800bbc2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	899b      	ldrh	r3, [r3, #12]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7f9 f8e3 	bl	8004b70 <lwip_htons>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 0304 	and.w	r3, r3, #4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <tcp_output+0x188>
 800b9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ba74 <tcp_output+0x238>)
 800b9b8:	f240 5236 	movw	r2, #1334	; 0x536
 800b9bc:	4932      	ldr	r1, [pc, #200]	; (800ba88 <tcp_output+0x24c>)
 800b9be:	482f      	ldr	r0, [pc, #188]	; (800ba7c <tcp_output+0x240>)
 800b9c0:	f003 fd7c 	bl	800f4bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01f      	beq.n	800ba0c <tcp_output+0x1d0>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	8b5b      	ldrh	r3, [r3, #26]
 800b9d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d119      	bne.n	800ba0c <tcp_output+0x1d0>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <tcp_output+0x1bc>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d110      	bne.n	800ba0c <tcp_output+0x1d0>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ee:	891a      	ldrh	r2, [r3, #8]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d209      	bcs.n	800ba0c <tcp_output+0x1d0>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d004      	beq.n	800ba0c <tcp_output+0x1d0>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba08:	2b08      	cmp	r3, #8
 800ba0a:	d901      	bls.n	800ba10 <tcp_output+0x1d4>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e000      	b.n	800ba12 <tcp_output+0x1d6>
 800ba10:	2300      	movs	r3, #0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8b5b      	ldrh	r3, [r3, #26]
 800ba1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80e4 	beq.w	800bbec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7d1b      	ldrb	r3, [r3, #20]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d00d      	beq.n	800ba48 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	899b      	ldrh	r3, [r3, #12]
 800ba32:	b29c      	uxth	r4, r3
 800ba34:	2010      	movs	r0, #16
 800ba36:	f7f9 f89b 	bl	8004b70 <lwip_htons>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	4322      	orrs	r2, r4
 800ba44:	b292      	uxth	r2, r2
 800ba46:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba4e:	f000 f909 	bl	800bc64 <tcp_output_segment>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d016      	beq.n	800ba8c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8b5b      	ldrh	r3, [r3, #26]
 800ba62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	835a      	strh	r2, [r3, #26]
      return err;
 800ba6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba70:	e0d3      	b.n	800bc1a <tcp_output+0x3de>
 800ba72:	bf00      	nop
 800ba74:	080119b4 	.word	0x080119b4
 800ba78:	08011ef8 	.word	0x08011ef8
 800ba7c:	08011a08 	.word	0x08011a08
 800ba80:	08011f10 	.word	0x08011f10
 800ba84:	200082e8 	.word	0x200082e8
 800ba88:	08011f38 	.word	0x08011f38
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7d1b      	ldrb	r3, [r3, #20]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d006      	beq.n	800baaa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	8b5b      	ldrh	r3, [r3, #26]
 800baa0:	f023 0303 	bic.w	r3, r3, #3
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f9 f872 	bl	8004b9a <lwip_htonl>
 800bab6:	4604      	mov	r4, r0
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	891b      	ldrh	r3, [r3, #8]
 800babc:	461d      	mov	r5, r3
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	899b      	ldrh	r3, [r3, #12]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f9 f852 	bl	8004b70 <lwip_htons>
 800bacc:	4603      	mov	r3, r0
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <tcp_output+0x2a0>
 800bad8:	2301      	movs	r3, #1
 800bada:	e000      	b.n	800bade <tcp_output+0x2a2>
 800badc:	2300      	movs	r3, #0
 800bade:	442b      	add	r3, r5
 800bae0:	4423      	add	r3, r4
 800bae2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	da02      	bge.n	800baf6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf8:	891b      	ldrh	r3, [r3, #8]
 800bafa:	461c      	mov	r4, r3
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	899b      	ldrh	r3, [r3, #12]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f9 f833 	bl	8004b70 <lwip_htons>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <tcp_output+0x2de>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <tcp_output+0x2e0>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4423      	add	r3, r4
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d049      	beq.n	800bbb6 <tcp_output+0x37a>
      seg->next = NULL;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <tcp_output+0x300>
        pcb->unacked = seg;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb34:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	623b      	str	r3, [r7, #32]
 800bb3a:	e03f      	b.n	800bbbc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7f9 f829 	bl	8004b9a <lwip_htonl>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f9 f822 	bl	8004b9a <lwip_htonl>
 800bb56:	4603      	mov	r3, r0
 800bb58:	1ae3      	subs	r3, r4, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da24      	bge.n	800bba8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3370      	adds	r3, #112	; 0x70
 800bb62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb64:	e002      	b.n	800bb6c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d011      	beq.n	800bb98 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f9 f80c 	bl	8004b9a <lwip_htonl>
 800bb82:	4604      	mov	r4, r0
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f9 f805 	bl	8004b9a <lwip_htonl>
 800bb90:	4603      	mov	r3, r0
 800bb92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dbe6      	blt.n	800bb66 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	e009      	b.n	800bbbc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	623b      	str	r3, [r7, #32]
 800bbb4:	e002      	b.n	800bbbc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bbb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb8:	f7fb ff65 	bl	8007a86 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d012      	beq.n	800bbee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f8 ffe3 	bl	8004b9a <lwip_htonl>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbde:	8912      	ldrh	r2, [r2, #8]
 800bbe0:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbe2:	69ba      	ldr	r2, [r7, #24]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	f4bf aed9 	bcs.w	800b99c <tcp_output+0x160>
 800bbea:	e000      	b.n	800bbee <tcp_output+0x3b2>
      break;
 800bbec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d108      	bne.n	800bc08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bbfe:	e004      	b.n	800bc0a <tcp_output+0x3ce>
    goto output_done;
 800bc00:	bf00      	nop
 800bc02:	e002      	b.n	800bc0a <tcp_output+0x3ce>
    goto output_done;
 800bc04:	bf00      	nop
 800bc06:	e000      	b.n	800bc0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8b5b      	ldrh	r3, [r3, #26]
 800bc0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3728      	adds	r7, #40	; 0x28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bdb0      	pop	{r4, r5, r7, pc}
 800bc22:	bf00      	nop

0800bc24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <tcp_output_segment_busy+0x1c>
 800bc32:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <tcp_output_segment_busy+0x34>)
 800bc34:	f240 529a 	movw	r2, #1434	; 0x59a
 800bc38:	4908      	ldr	r1, [pc, #32]	; (800bc5c <tcp_output_segment_busy+0x38>)
 800bc3a:	4809      	ldr	r0, [pc, #36]	; (800bc60 <tcp_output_segment_busy+0x3c>)
 800bc3c:	f003 fc3e 	bl	800f4bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	7b9b      	ldrb	r3, [r3, #14]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d001      	beq.n	800bc4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	080119b4 	.word	0x080119b4
 800bc5c:	08011f50 	.word	0x08011f50
 800bc60:	08011a08 	.word	0x08011a08

0800bc64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc64:	b5b0      	push	{r4, r5, r7, lr}
 800bc66:	b08c      	sub	sp, #48	; 0x30
 800bc68:	af04      	add	r7, sp, #16
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <tcp_output_segment+0x20>
 800bc76:	4b64      	ldr	r3, [pc, #400]	; (800be08 <tcp_output_segment+0x1a4>)
 800bc78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bc7c:	4963      	ldr	r1, [pc, #396]	; (800be0c <tcp_output_segment+0x1a8>)
 800bc7e:	4864      	ldr	r0, [pc, #400]	; (800be10 <tcp_output_segment+0x1ac>)
 800bc80:	f003 fc1c 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d106      	bne.n	800bc98 <tcp_output_segment+0x34>
 800bc8a:	4b5f      	ldr	r3, [pc, #380]	; (800be08 <tcp_output_segment+0x1a4>)
 800bc8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc90:	4960      	ldr	r1, [pc, #384]	; (800be14 <tcp_output_segment+0x1b0>)
 800bc92:	485f      	ldr	r0, [pc, #380]	; (800be10 <tcp_output_segment+0x1ac>)
 800bc94:	f003 fc12 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <tcp_output_segment+0x48>
 800bc9e:	4b5a      	ldr	r3, [pc, #360]	; (800be08 <tcp_output_segment+0x1a4>)
 800bca0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bca4:	495c      	ldr	r1, [pc, #368]	; (800be18 <tcp_output_segment+0x1b4>)
 800bca6:	485a      	ldr	r0, [pc, #360]	; (800be10 <tcp_output_segment+0x1ac>)
 800bca8:	f003 fc08 	bl	800f4bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f7ff ffb9 	bl	800bc24 <tcp_output_segment_busy>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e0a1      	b.n	800be00 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68dc      	ldr	r4, [r3, #12]
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	f7f8 ff68 	bl	8004b9a <lwip_htonl>
 800bcca:	4603      	mov	r3, r0
 800bccc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	68dc      	ldr	r4, [r3, #12]
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	f7f8 ff4a 	bl	8004b70 <lwip_htons>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bce8:	441a      	add	r2, r3
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	3314      	adds	r3, #20
 800bcf4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	7a9b      	ldrb	r3, [r3, #10]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d015      	beq.n	800bd2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3304      	adds	r3, #4
 800bd06:	461a      	mov	r2, r3
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bd0e:	f7fc fa33 	bl	8008178 <tcp_eff_send_mss_netif>
 800bd12:	4603      	mov	r3, r0
 800bd14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bd16:	8b7b      	ldrh	r3, [r7, #26]
 800bd18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f8 ff3c 	bl	8004b9a <lwip_htonl>
 800bd22:	4602      	mov	r2, r0
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	da02      	bge.n	800bd3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10c      	bne.n	800bd60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd46:	4b35      	ldr	r3, [pc, #212]	; (800be1c <tcp_output_segment+0x1b8>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f8 ff20 	bl	8004b9a <lwip_htonl>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	8959      	ldrh	r1, [r3, #10]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	8b3a      	ldrh	r2, [r7, #24]
 800bd7a:	1a8a      	subs	r2, r1, r2
 800bd7c:	b292      	uxth	r2, r2
 800bd7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	8919      	ldrh	r1, [r3, #8]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	8b3a      	ldrh	r2, [r7, #24]
 800bd8c:	1a8a      	subs	r2, r1, r2
 800bd8e:	b292      	uxth	r2, r2
 800bd90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	68d2      	ldr	r2, [r2, #12]
 800bd9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	741a      	strb	r2, [r3, #16]
 800bda4:	2200      	movs	r2, #0
 800bda6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	7a9b      	ldrb	r3, [r3, #10]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <tcp_output_segment+0x158>
 800bdb8:	2318      	movs	r3, #24
 800bdba:	e000      	b.n	800bdbe <tcp_output_segment+0x15a>
 800bdbc:	2314      	movs	r3, #20
 800bdbe:	4413      	add	r3, r2
 800bdc0:	69fa      	ldr	r2, [r7, #28]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d006      	beq.n	800bdd4 <tcp_output_segment+0x170>
 800bdc6:	4b10      	ldr	r3, [pc, #64]	; (800be08 <tcp_output_segment+0x1a4>)
 800bdc8:	f240 621c 	movw	r2, #1564	; 0x61c
 800bdcc:	4914      	ldr	r1, [pc, #80]	; (800be20 <tcp_output_segment+0x1bc>)
 800bdce:	4810      	ldr	r0, [pc, #64]	; (800be10 <tcp_output_segment+0x1ac>)
 800bdd0:	f003 fb74 	bl	800f4bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6858      	ldr	r0, [r3, #4]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	1d1c      	adds	r4, r3, #4
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	7add      	ldrb	r5, [r3, #11]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	7a9b      	ldrb	r3, [r3, #10]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	9202      	str	r2, [sp, #8]
 800bdea:	2206      	movs	r2, #6
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	462b      	mov	r3, r5
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	f002 fa34 	bl	800e260 <ip4_output_if>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bdfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3720      	adds	r7, #32
 800be04:	46bd      	mov	sp, r7
 800be06:	bdb0      	pop	{r4, r5, r7, pc}
 800be08:	080119b4 	.word	0x080119b4
 800be0c:	08011f78 	.word	0x08011f78
 800be10:	08011a08 	.word	0x08011a08
 800be14:	08011f98 	.word	0x08011f98
 800be18:	08011fb8 	.word	0x08011fb8
 800be1c:	2000829c 	.word	0x2000829c
 800be20:	08011fdc 	.word	0x08011fdc

0800be24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be24:	b5b0      	push	{r4, r5, r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <tcp_rexmit_rto_prepare+0x1c>
 800be32:	4b31      	ldr	r3, [pc, #196]	; (800bef8 <tcp_rexmit_rto_prepare+0xd4>)
 800be34:	f240 6263 	movw	r2, #1635	; 0x663
 800be38:	4930      	ldr	r1, [pc, #192]	; (800befc <tcp_rexmit_rto_prepare+0xd8>)
 800be3a:	4831      	ldr	r0, [pc, #196]	; (800bf00 <tcp_rexmit_rto_prepare+0xdc>)
 800be3c:	f003 fb3e 	bl	800f4bc <iprintf>

  if (pcb->unacked == NULL) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	2b00      	cmp	r3, #0
 800be46:	d102      	bne.n	800be4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be48:	f06f 0305 	mvn.w	r3, #5
 800be4c:	e050      	b.n	800bef0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	e00b      	b.n	800be6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff fee4 	bl	800bc24 <tcp_output_segment_busy>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be62:	f06f 0305 	mvn.w	r3, #5
 800be66:	e043      	b.n	800bef0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1ef      	bne.n	800be56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f7ff fed4 	bl	800bc24 <tcp_output_segment_busy>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be82:	f06f 0305 	mvn.w	r3, #5
 800be86:	e033      	b.n	800bef0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8b5b      	ldrh	r3, [r3, #26]
 800bea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f8 fe71 	bl	8004b9a <lwip_htonl>
 800beb8:	4604      	mov	r4, r0
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	891b      	ldrh	r3, [r3, #8]
 800bebe:	461d      	mov	r5, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	899b      	ldrh	r3, [r3, #12]
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	4618      	mov	r0, r3
 800beca:	f7f8 fe51 	bl	8004b70 <lwip_htons>
 800bece:	4603      	mov	r3, r0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <tcp_rexmit_rto_prepare+0xba>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <tcp_rexmit_rto_prepare+0xbc>
 800bede:	2300      	movs	r3, #0
 800bee0:	442b      	add	r3, r5
 800bee2:	18e2      	adds	r2, r4, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bdb0      	pop	{r4, r5, r7, pc}
 800bef8:	080119b4 	.word	0x080119b4
 800befc:	08011ff0 	.word	0x08011ff0
 800bf00:	08011a08 	.word	0x08011a08

0800bf04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <tcp_rexmit_rto_commit+0x1c>
 800bf12:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <tcp_rexmit_rto_commit+0x44>)
 800bf14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf18:	490c      	ldr	r1, [pc, #48]	; (800bf4c <tcp_rexmit_rto_commit+0x48>)
 800bf1a:	480d      	ldr	r0, [pc, #52]	; (800bf50 <tcp_rexmit_rto_commit+0x4c>)
 800bf1c:	f003 face 	bl	800f4bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf26:	2bff      	cmp	r3, #255	; 0xff
 800bf28:	d007      	beq.n	800bf3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf30:	3301      	adds	r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fc7e 	bl	800b83c <tcp_output>
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	080119b4 	.word	0x080119b4
 800bf4c:	08012014 	.word	0x08012014
 800bf50:	08011a08 	.word	0x08011a08

0800bf54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d106      	bne.n	800bf70 <tcp_rexmit_rto+0x1c>
 800bf62:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <tcp_rexmit_rto+0x38>)
 800bf64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bf68:	4909      	ldr	r1, [pc, #36]	; (800bf90 <tcp_rexmit_rto+0x3c>)
 800bf6a:	480a      	ldr	r0, [pc, #40]	; (800bf94 <tcp_rexmit_rto+0x40>)
 800bf6c:	f003 faa6 	bl	800f4bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ff57 	bl	800be24 <tcp_rexmit_rto_prepare>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff ffc1 	bl	800bf04 <tcp_rexmit_rto_commit>
  }
}
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	080119b4 	.word	0x080119b4
 800bf90:	08012038 	.word	0x08012038
 800bf94:	08011a08 	.word	0x08011a08

0800bf98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <tcp_rexmit+0x1c>
 800bfa6:	4b2f      	ldr	r3, [pc, #188]	; (800c064 <tcp_rexmit+0xcc>)
 800bfa8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bfac:	492e      	ldr	r1, [pc, #184]	; (800c068 <tcp_rexmit+0xd0>)
 800bfae:	482f      	ldr	r0, [pc, #188]	; (800c06c <tcp_rexmit+0xd4>)
 800bfb0:	f003 fa84 	bl	800f4bc <iprintf>

  if (pcb->unacked == NULL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bfbc:	f06f 0305 	mvn.w	r3, #5
 800bfc0:	e04c      	b.n	800c05c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bfc8:	68b8      	ldr	r0, [r7, #8]
 800bfca:	f7ff fe2b 	bl	800bc24 <tcp_output_segment_busy>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfd4:	f06f 0305 	mvn.w	r3, #5
 800bfd8:	e040      	b.n	800c05c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	336c      	adds	r3, #108	; 0x6c
 800bfe6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfe8:	e002      	b.n	800bff0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d011      	beq.n	800c01c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	f7f8 fdca 	bl	8004b9a <lwip_htonl>
 800c006:	4604      	mov	r4, r0
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7f8 fdc3 	bl	8004b9a <lwip_htonl>
 800c014:	4603      	mov	r3, r0
 800c016:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dbe6      	blt.n	800bfea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c040:	2bff      	cmp	r3, #255	; 0xff
 800c042:	d007      	beq.n	800c054 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c04a:	3301      	adds	r3, #1
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	bd90      	pop	{r4, r7, pc}
 800c064:	080119b4 	.word	0x080119b4
 800c068:	08012054 	.word	0x08012054
 800c06c:	08011a08 	.word	0x08011a08

0800c070 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <tcp_rexmit_fast+0x1c>
 800c07e:	4b2a      	ldr	r3, [pc, #168]	; (800c128 <tcp_rexmit_fast+0xb8>)
 800c080:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c084:	4929      	ldr	r1, [pc, #164]	; (800c12c <tcp_rexmit_fast+0xbc>)
 800c086:	482a      	ldr	r0, [pc, #168]	; (800c130 <tcp_rexmit_fast+0xc0>)
 800c088:	f003 fa18 	bl	800f4bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c090:	2b00      	cmp	r3, #0
 800c092:	d044      	beq.n	800c11e <tcp_rexmit_fast+0xae>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8b5b      	ldrh	r3, [r3, #26]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d13e      	bne.n	800c11e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff ff79 	bl	800bf98 <tcp_rexmit>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d138      	bne.n	800c11e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	bf28      	it	cs
 800c0bc:	4613      	movcs	r3, r2
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	0fda      	lsrs	r2, r3, #31
 800c0c2:	4413      	add	r3, r2
 800c0c4:	105b      	asrs	r3, r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d206      	bcs.n	800c0ee <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	0049      	lsls	r1, r1, #1
 800c0fc:	440b      	add	r3, r1
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	4413      	add	r3, r2
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	8b5b      	ldrh	r3, [r3, #26]
 800c10e:	f043 0304 	orr.w	r3, r3, #4
 800c112:	b29a      	uxth	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	080119b4 	.word	0x080119b4
 800c12c:	0801206c 	.word	0x0801206c
 800c130:	08011a08 	.word	0x08011a08

0800c134 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	460b      	mov	r3, r1
 800c140:	817b      	strh	r3, [r7, #10]
 800c142:	4613      	mov	r3, r2
 800c144:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c146:	897a      	ldrh	r2, [r7, #10]
 800c148:	893b      	ldrh	r3, [r7, #8]
 800c14a:	4413      	add	r3, r2
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	3314      	adds	r3, #20
 800c150:	b29b      	uxth	r3, r3
 800c152:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c156:	4619      	mov	r1, r3
 800c158:	2022      	movs	r0, #34	; 0x22
 800c15a:	f7f9 fd83 	bl	8005c64 <pbuf_alloc>
 800c15e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d04d      	beq.n	800c202 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c166:	897b      	ldrh	r3, [r7, #10]
 800c168:	3313      	adds	r3, #19
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	8952      	ldrh	r2, [r2, #10]
 800c16e:	4293      	cmp	r3, r2
 800c170:	db06      	blt.n	800c180 <tcp_output_alloc_header_common+0x4c>
 800c172:	4b26      	ldr	r3, [pc, #152]	; (800c20c <tcp_output_alloc_header_common+0xd8>)
 800c174:	f240 7223 	movw	r2, #1827	; 0x723
 800c178:	4925      	ldr	r1, [pc, #148]	; (800c210 <tcp_output_alloc_header_common+0xdc>)
 800c17a:	4826      	ldr	r0, [pc, #152]	; (800c214 <tcp_output_alloc_header_common+0xe0>)
 800c17c:	f003 f99e 	bl	800f4bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c186:	8c3b      	ldrh	r3, [r7, #32]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f8 fcf1 	bl	8004b70 <lwip_htons>
 800c18e:	4603      	mov	r3, r0
 800c190:	461a      	mov	r2, r3
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f8 fce9 	bl	8004b70 <lwip_htons>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f7f8 fcf4 	bl	8004b9a <lwip_htonl>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c1b8:	897b      	ldrh	r3, [r7, #10]
 800c1ba:	089b      	lsrs	r3, r3, #2
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3305      	adds	r3, #5
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	031b      	lsls	r3, r3, #12
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f8 fccd 	bl	8004b70 <lwip_htons>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7f8 fcc5 	bl	8004b70 <lwip_htons>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	741a      	strb	r2, [r3, #16]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	749a      	strb	r2, [r3, #18]
 800c1fe:	2200      	movs	r2, #0
 800c200:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c202:	697b      	ldr	r3, [r7, #20]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	080119b4 	.word	0x080119b4
 800c210:	0801208c 	.word	0x0801208c
 800c214:	08011a08 	.word	0x08011a08

0800c218 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c218:	b5b0      	push	{r4, r5, r7, lr}
 800c21a:	b08a      	sub	sp, #40	; 0x28
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	607b      	str	r3, [r7, #4]
 800c222:	460b      	mov	r3, r1
 800c224:	817b      	strh	r3, [r7, #10]
 800c226:	4613      	mov	r3, r2
 800c228:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d106      	bne.n	800c23e <tcp_output_alloc_header+0x26>
 800c230:	4b15      	ldr	r3, [pc, #84]	; (800c288 <tcp_output_alloc_header+0x70>)
 800c232:	f240 7242 	movw	r2, #1858	; 0x742
 800c236:	4915      	ldr	r1, [pc, #84]	; (800c28c <tcp_output_alloc_header+0x74>)
 800c238:	4815      	ldr	r0, [pc, #84]	; (800c290 <tcp_output_alloc_header+0x78>)
 800c23a:	f003 f93f 	bl	800f4bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	8adb      	ldrh	r3, [r3, #22]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	8b12      	ldrh	r2, [r2, #24]
 800c24a:	68f9      	ldr	r1, [r7, #12]
 800c24c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c24e:	893d      	ldrh	r5, [r7, #8]
 800c250:	897c      	ldrh	r4, [r7, #10]
 800c252:	9103      	str	r1, [sp, #12]
 800c254:	2110      	movs	r1, #16
 800c256:	9102      	str	r1, [sp, #8]
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	462a      	mov	r2, r5
 800c260:	4621      	mov	r1, r4
 800c262:	f7ff ff67 	bl	800c134 <tcp_output_alloc_header_common>
 800c266:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d006      	beq.n	800c27c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c276:	441a      	add	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c27c:	697b      	ldr	r3, [r7, #20]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bdb0      	pop	{r4, r5, r7, pc}
 800c286:	bf00      	nop
 800c288:	080119b4 	.word	0x080119b4
 800c28c:	080120bc 	.word	0x080120bc
 800c290:	08011a08 	.word	0x08011a08

0800c294 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	4611      	mov	r1, r2
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	71fb      	strb	r3, [r7, #7]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d106      	bne.n	800c2c2 <tcp_output_fill_options+0x2e>
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <tcp_output_fill_options+0x6c>)
 800c2b6:	f240 7256 	movw	r2, #1878	; 0x756
 800c2ba:	4912      	ldr	r1, [pc, #72]	; (800c304 <tcp_output_fill_options+0x70>)
 800c2bc:	4812      	ldr	r0, [pc, #72]	; (800c308 <tcp_output_fill_options+0x74>)
 800c2be:	f003 f8fd 	bl	800f4bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	3314      	adds	r3, #20
 800c2cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c2ce:	8bfb      	ldrh	r3, [r7, #30]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	f003 0304 	and.w	r3, r3, #4
 800c2dc:	4413      	add	r3, r2
 800c2de:	3314      	adds	r3, #20
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d006      	beq.n	800c2f8 <tcp_output_fill_options+0x64>
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <tcp_output_fill_options+0x6c>)
 800c2ec:	f240 7275 	movw	r2, #1909	; 0x775
 800c2f0:	4906      	ldr	r1, [pc, #24]	; (800c30c <tcp_output_fill_options+0x78>)
 800c2f2:	4805      	ldr	r0, [pc, #20]	; (800c308 <tcp_output_fill_options+0x74>)
 800c2f4:	f003 f8e2 	bl	800f4bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c2f8:	bf00      	nop
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	080119b4 	.word	0x080119b4
 800c304:	080120e4 	.word	0x080120e4
 800c308:	08011a08 	.word	0x08011a08
 800c30c:	08011fdc 	.word	0x08011fdc

0800c310 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08a      	sub	sp, #40	; 0x28
 800c314:	af04      	add	r7, sp, #16
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <tcp_output_control_segment+0x22>
 800c324:	4b1c      	ldr	r3, [pc, #112]	; (800c398 <tcp_output_control_segment+0x88>)
 800c326:	f240 7287 	movw	r2, #1927	; 0x787
 800c32a:	491c      	ldr	r1, [pc, #112]	; (800c39c <tcp_output_control_segment+0x8c>)
 800c32c:	481c      	ldr	r0, [pc, #112]	; (800c3a0 <tcp_output_control_segment+0x90>)
 800c32e:	f003 f8c5 	bl	800f4bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7fe fae8 	bl	800a90c <tcp_route>
 800c33c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c344:	23fc      	movs	r3, #252	; 0xfc
 800c346:	75fb      	strb	r3, [r7, #23]
 800c348:	e01c      	b.n	800c384 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d006      	beq.n	800c35e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	7adb      	ldrb	r3, [r3, #11]
 800c354:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	7a9b      	ldrb	r3, [r3, #10]
 800c35a:	757b      	strb	r3, [r7, #21]
 800c35c:	e003      	b.n	800c366 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c35e:	23ff      	movs	r3, #255	; 0xff
 800c360:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c366:	7dba      	ldrb	r2, [r7, #22]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	9302      	str	r3, [sp, #8]
 800c36c:	2306      	movs	r3, #6
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	7d7b      	ldrb	r3, [r7, #21]
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	68b8      	ldr	r0, [r7, #8]
 800c37c:	f001 ff70 	bl	800e260 <ip4_output_if>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c384:	68b8      	ldr	r0, [r7, #8]
 800c386:	f7f9 ff51 	bl	800622c <pbuf_free>
  return err;
 800c38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	080119b4 	.word	0x080119b4
 800c39c:	0801210c 	.word	0x0801210c
 800c3a0:	08011a08 	.word	0x08011a08

0800c3a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c3a4:	b590      	push	{r4, r7, lr}
 800c3a6:	b08b      	sub	sp, #44	; 0x2c
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d106      	bne.n	800c3c6 <tcp_rst+0x22>
 800c3b8:	4b1f      	ldr	r3, [pc, #124]	; (800c438 <tcp_rst+0x94>)
 800c3ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c3be:	491f      	ldr	r1, [pc, #124]	; (800c43c <tcp_rst+0x98>)
 800c3c0:	481f      	ldr	r0, [pc, #124]	; (800c440 <tcp_rst+0x9c>)
 800c3c2:	f003 f87b 	bl	800f4bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <tcp_rst+0x36>
 800c3cc:	4b1a      	ldr	r3, [pc, #104]	; (800c438 <tcp_rst+0x94>)
 800c3ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c3d2:	491c      	ldr	r1, [pc, #112]	; (800c444 <tcp_rst+0xa0>)
 800c3d4:	481a      	ldr	r0, [pc, #104]	; (800c440 <tcp_rst+0x9c>)
 800c3d6:	f003 f871 	bl	800f4bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3de:	f246 0308 	movw	r3, #24584	; 0x6008
 800c3e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	b29c      	uxth	r4, r3
 800c3e8:	68b8      	ldr	r0, [r7, #8]
 800c3ea:	f7f8 fbd6 	bl	8004b9a <lwip_htonl>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	8abb      	ldrh	r3, [r7, #20]
 800c3f2:	9303      	str	r3, [sp, #12]
 800c3f4:	2314      	movs	r3, #20
 800c3f6:	9302      	str	r3, [sp, #8]
 800c3f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	4613      	mov	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	4621      	mov	r1, r4
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff fe94 	bl	800c134 <tcp_output_alloc_header_common>
 800c40c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00c      	beq.n	800c42e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	2200      	movs	r2, #0
 800c418:	6939      	ldr	r1, [r7, #16]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff ff3a 	bl	800c294 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	6939      	ldr	r1, [r7, #16]
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f7ff ff72 	bl	800c310 <tcp_output_control_segment>
 800c42c:	e000      	b.n	800c430 <tcp_rst+0x8c>
    return;
 800c42e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	bd90      	pop	{r4, r7, pc}
 800c436:	bf00      	nop
 800c438:	080119b4 	.word	0x080119b4
 800c43c:	08012138 	.word	0x08012138
 800c440:	08011a08 	.word	0x08011a08
 800c444:	08012154 	.word	0x08012154

0800c448 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <tcp_send_empty_ack+0x24>
 800c45e:	4b28      	ldr	r3, [pc, #160]	; (800c500 <tcp_send_empty_ack+0xb8>)
 800c460:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c464:	4927      	ldr	r1, [pc, #156]	; (800c504 <tcp_send_empty_ack+0xbc>)
 800c466:	4828      	ldr	r0, [pc, #160]	; (800c508 <tcp_send_empty_ack+0xc0>)
 800c468:	f003 f828 	bl	800f4bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	b2db      	uxtb	r3, r3
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c478:	7d7b      	ldrb	r3, [r7, #21]
 800c47a:	b29c      	uxth	r4, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c480:	4618      	mov	r0, r3
 800c482:	f7f8 fb8a 	bl	8004b9a <lwip_htonl>
 800c486:	4603      	mov	r3, r0
 800c488:	2200      	movs	r2, #0
 800c48a:	4621      	mov	r1, r4
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff fec3 	bl	800c218 <tcp_output_alloc_header>
 800c492:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	8b5b      	ldrh	r3, [r3, #26]
 800c49e:	f043 0303 	orr.w	r3, r3, #3
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c4a8:	f06f 0301 	mvn.w	r3, #1
 800c4ac:	e023      	b.n	800c4f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c4ae:	7dbb      	ldrb	r3, [r7, #22]
 800c4b0:	7dfa      	ldrb	r2, [r7, #23]
 800c4b2:	6939      	ldr	r1, [r7, #16]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff feed 	bl	800c294 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	6939      	ldr	r1, [r7, #16]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff ff24 	bl	800c310 <tcp_output_control_segment>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d007      	beq.n	800c4e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8b5b      	ldrh	r3, [r3, #26]
 800c4d8:	f043 0303 	orr.w	r3, r3, #3
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	835a      	strh	r2, [r3, #26]
 800c4e2:	e006      	b.n	800c4f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	8b5b      	ldrh	r3, [r3, #26]
 800c4e8:	f023 0303 	bic.w	r3, r3, #3
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd90      	pop	{r4, r7, pc}
 800c4fe:	bf00      	nop
 800c500:	080119b4 	.word	0x080119b4
 800c504:	08012170 	.word	0x08012170
 800c508:	08011a08 	.word	0x08011a08

0800c50c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c514:	2300      	movs	r3, #0
 800c516:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d106      	bne.n	800c52c <tcp_keepalive+0x20>
 800c51e:	4b18      	ldr	r3, [pc, #96]	; (800c580 <tcp_keepalive+0x74>)
 800c520:	f640 0224 	movw	r2, #2084	; 0x824
 800c524:	4917      	ldr	r1, [pc, #92]	; (800c584 <tcp_keepalive+0x78>)
 800c526:	4818      	ldr	r0, [pc, #96]	; (800c588 <tcp_keepalive+0x7c>)
 800c528:	f002 ffc8 	bl	800f4bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	b29c      	uxth	r4, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c534:	3b01      	subs	r3, #1
 800c536:	4618      	mov	r0, r3
 800c538:	f7f8 fb2f 	bl	8004b9a <lwip_htonl>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2200      	movs	r2, #0
 800c540:	4621      	mov	r1, r4
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fe68 	bl	800c218 <tcp_output_alloc_header>
 800c548:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	e010      	b.n	800c578 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	2200      	movs	r2, #0
 800c55a:	6939      	ldr	r1, [r7, #16]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7ff fe99 	bl	800c294 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3304      	adds	r3, #4
 800c568:	6939      	ldr	r1, [r7, #16]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7ff fed0 	bl	800c310 <tcp_output_control_segment>
 800c570:	4603      	mov	r3, r0
 800c572:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	371c      	adds	r7, #28
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd90      	pop	{r4, r7, pc}
 800c580:	080119b4 	.word	0x080119b4
 800c584:	08012190 	.word	0x08012190
 800c588:	08011a08 	.word	0x08011a08

0800c58c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c58c:	b590      	push	{r4, r7, lr}
 800c58e:	b08b      	sub	sp, #44	; 0x2c
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c594:	2300      	movs	r3, #0
 800c596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <tcp_zero_window_probe+0x22>
 800c5a0:	4b4c      	ldr	r3, [pc, #304]	; (800c6d4 <tcp_zero_window_probe+0x148>)
 800c5a2:	f640 024f 	movw	r2, #2127	; 0x84f
 800c5a6:	494c      	ldr	r1, [pc, #304]	; (800c6d8 <tcp_zero_window_probe+0x14c>)
 800c5a8:	484c      	ldr	r0, [pc, #304]	; (800c6dc <tcp_zero_window_probe+0x150>)
 800c5aa:	f002 ff87 	bl	800f4bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e086      	b.n	800c6cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5c4:	2bff      	cmp	r3, #255	; 0xff
 800c5c6:	d007      	beq.n	800c5d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	899b      	ldrh	r3, [r3, #12]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f8 fac5 	bl	8004b70 <lwip_htons>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <tcp_zero_window_probe+0x72>
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	891b      	ldrh	r3, [r3, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <tcp_zero_window_probe+0x72>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <tcp_zero_window_probe+0x74>
 800c5fe:	2300      	movs	r3, #0
 800c600:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c602:	7ffb      	ldrb	r3, [r7, #31]
 800c604:	2b00      	cmp	r3, #0
 800c606:	bf0c      	ite	eq
 800c608:	2301      	moveq	r3, #1
 800c60a:	2300      	movne	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c614:	b299      	uxth	r1, r3
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	8bba      	ldrh	r2, [r7, #28]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff fdfa 	bl	800c218 <tcp_output_alloc_header>
 800c624:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c62c:	f04f 33ff 	mov.w	r3, #4294967295
 800c630:	e04c      	b.n	800c6cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c638:	7ffb      	ldrb	r3, [r7, #31]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d011      	beq.n	800c662 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	899b      	ldrh	r3, [r3, #12]
 800c642:	b29b      	uxth	r3, r3
 800c644:	b21b      	sxth	r3, r3
 800c646:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c64a:	b21c      	sxth	r4, r3
 800c64c:	2011      	movs	r0, #17
 800c64e:	f7f8 fa8f 	bl	8004b70 <lwip_htons>
 800c652:	4603      	mov	r3, r0
 800c654:	b21b      	sxth	r3, r3
 800c656:	4323      	orrs	r3, r4
 800c658:	b21b      	sxth	r3, r3
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	819a      	strh	r2, [r3, #12]
 800c660:	e010      	b.n	800c684 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	3314      	adds	r3, #20
 800c668:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	6858      	ldr	r0, [r3, #4]
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	891a      	ldrh	r2, [r3, #8]
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	891b      	ldrh	r3, [r3, #8]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	2201      	movs	r2, #1
 800c67e:	6939      	ldr	r1, [r7, #16]
 800c680:	f7f9 ffbe 	bl	8006600 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f8 fa85 	bl	8004b9a <lwip_htonl>
 800c690:	4603      	mov	r3, r0
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da02      	bge.n	800c6a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	69b9      	ldr	r1, [r7, #24]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff fdef 	bl	800c294 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	69b9      	ldr	r1, [r7, #24]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fe26 	bl	800c310 <tcp_output_control_segment>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c6c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	372c      	adds	r7, #44	; 0x2c
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd90      	pop	{r4, r7, pc}
 800c6d4:	080119b4 	.word	0x080119b4
 800c6d8:	080121ac 	.word	0x080121ac
 800c6dc:	08011a08 	.word	0x08011a08

0800c6e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6e8:	f7fa f878 	bl	80067dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <tcpip_tcp_timer+0x38>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d103      	bne.n	800c6fc <tcpip_tcp_timer+0x1c>
 800c6f4:	4b09      	ldr	r3, [pc, #36]	; (800c71c <tcpip_tcp_timer+0x3c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d005      	beq.n	800c708 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4908      	ldr	r1, [pc, #32]	; (800c720 <tcpip_tcp_timer+0x40>)
 800c700:	20fa      	movs	r0, #250	; 0xfa
 800c702:	f000 f8f3 	bl	800c8ec <sys_timeout>
 800c706:	e003      	b.n	800c710 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c708:	4b06      	ldr	r3, [pc, #24]	; (800c724 <tcpip_tcp_timer+0x44>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
  }
}
 800c70e:	bf00      	nop
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	200082a8 	.word	0x200082a8
 800c71c:	200082ac 	.word	0x200082ac
 800c720:	0800c6e1 	.word	0x0800c6e1
 800c724:	200082f4 	.word	0x200082f4

0800c728 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c72c:	4b0a      	ldr	r3, [pc, #40]	; (800c758 <tcp_timer_needed+0x30>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10f      	bne.n	800c754 <tcp_timer_needed+0x2c>
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <tcp_timer_needed+0x34>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d103      	bne.n	800c744 <tcp_timer_needed+0x1c>
 800c73c:	4b08      	ldr	r3, [pc, #32]	; (800c760 <tcp_timer_needed+0x38>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d007      	beq.n	800c754 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c744:	4b04      	ldr	r3, [pc, #16]	; (800c758 <tcp_timer_needed+0x30>)
 800c746:	2201      	movs	r2, #1
 800c748:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c74a:	2200      	movs	r2, #0
 800c74c:	4905      	ldr	r1, [pc, #20]	; (800c764 <tcp_timer_needed+0x3c>)
 800c74e:	20fa      	movs	r0, #250	; 0xfa
 800c750:	f000 f8cc 	bl	800c8ec <sys_timeout>
  }
}
 800c754:	bf00      	nop
 800c756:	bd80      	pop	{r7, pc}
 800c758:	200082f4 	.word	0x200082f4
 800c75c:	200082a8 	.word	0x200082a8
 800c760:	200082ac 	.word	0x200082ac
 800c764:	0800c6e1 	.word	0x0800c6e1

0800c768 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c774:	2006      	movs	r0, #6
 800c776:	f7f8 fe73 	bl	8005460 <memp_malloc>
 800c77a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d109      	bne.n	800c796 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d151      	bne.n	800c82c <sys_timeout_abs+0xc4>
 800c788:	4b2a      	ldr	r3, [pc, #168]	; (800c834 <sys_timeout_abs+0xcc>)
 800c78a:	22be      	movs	r2, #190	; 0xbe
 800c78c:	492a      	ldr	r1, [pc, #168]	; (800c838 <sys_timeout_abs+0xd0>)
 800c78e:	482b      	ldr	r0, [pc, #172]	; (800c83c <sys_timeout_abs+0xd4>)
 800c790:	f002 fe94 	bl	800f4bc <iprintf>
    return;
 800c794:	e04a      	b.n	800c82c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c7ae:	4b24      	ldr	r3, [pc, #144]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d103      	bne.n	800c7be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c7b6:	4a22      	ldr	r2, [pc, #136]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	6013      	str	r3, [r2, #0]
    return;
 800c7bc:	e037      	b.n	800c82e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	685a      	ldr	r2, [r3, #4]
 800c7c2:	4b1f      	ldr	r3, [pc, #124]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	0fdb      	lsrs	r3, r3, #31
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d007      	beq.n	800c7e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7d6:	4b1a      	ldr	r3, [pc, #104]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7de:	4a18      	ldr	r2, [pc, #96]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	e023      	b.n	800c82e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7e6:	4b16      	ldr	r3, [pc, #88]	; (800c840 <sys_timeout_abs+0xd8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e01a      	b.n	800c824 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00b      	beq.n	800c80e <sys_timeout_abs+0xa6>
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	685a      	ldr	r2, [r3, #4]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	0fdb      	lsrs	r3, r3, #31
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d007      	beq.n	800c81e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	601a      	str	r2, [r3, #0]
        break;
 800c81c:	e007      	b.n	800c82e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1e1      	bne.n	800c7ee <sys_timeout_abs+0x86>
 800c82a:	e000      	b.n	800c82e <sys_timeout_abs+0xc6>
    return;
 800c82c:	bf00      	nop
      }
    }
  }
}
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	080121d0 	.word	0x080121d0
 800c838:	08012204 	.word	0x08012204
 800c83c:	08012244 	.word	0x08012244
 800c840:	200082ec 	.word	0x200082ec

0800c844 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4798      	blx	r3

  now = sys_now();
 800c856:	f7f7 ff93 	bl	8004780 <sys_now>
 800c85a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	4b0f      	ldr	r3, [pc, #60]	; (800c8a0 <lwip_cyclic_timer+0x5c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4413      	add	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	0fdb      	lsrs	r3, r3, #31
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	d009      	beq.n	800c88e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	4413      	add	r3, r2
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4907      	ldr	r1, [pc, #28]	; (800c8a4 <lwip_cyclic_timer+0x60>)
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff ff6e 	bl	800c768 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c88c:	e004      	b.n	800c898 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	4904      	ldr	r1, [pc, #16]	; (800c8a4 <lwip_cyclic_timer+0x60>)
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7ff ff68 	bl	800c768 <sys_timeout_abs>
}
 800c898:	bf00      	nop
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200082f0 	.word	0x200082f0
 800c8a4:	0800c845 	.word	0x0800c845

0800c8a8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	607b      	str	r3, [r7, #4]
 800c8b2:	e00e      	b.n	800c8d2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c8b4:	4a0b      	ldr	r2, [pc, #44]	; (800c8e4 <sys_timeouts_init+0x3c>)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	4a08      	ldr	r2, [pc, #32]	; (800c8e4 <sys_timeouts_init+0x3c>)
 800c8c2:	4413      	add	r3, r2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4908      	ldr	r1, [pc, #32]	; (800c8e8 <sys_timeouts_init+0x40>)
 800c8c8:	f000 f810 	bl	800c8ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	607b      	str	r3, [r7, #4]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d9ed      	bls.n	800c8b4 <sys_timeouts_init+0xc>
  }
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	08012dbc 	.word	0x08012dbc
 800c8e8:	0800c845 	.word	0x0800c845

0800c8ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8fe:	d306      	bcc.n	800c90e <sys_timeout+0x22>
 800c900:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <sys_timeout+0x40>)
 800c902:	f240 1229 	movw	r2, #297	; 0x129
 800c906:	490a      	ldr	r1, [pc, #40]	; (800c930 <sys_timeout+0x44>)
 800c908:	480a      	ldr	r0, [pc, #40]	; (800c934 <sys_timeout+0x48>)
 800c90a:	f002 fdd7 	bl	800f4bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c90e:	f7f7 ff37 	bl	8004780 <sys_now>
 800c912:	4602      	mov	r2, r0
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	4413      	add	r3, r2
 800c918:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	6978      	ldr	r0, [r7, #20]
 800c920:	f7ff ff22 	bl	800c768 <sys_timeout_abs>
#endif
}
 800c924:	bf00      	nop
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	080121d0 	.word	0x080121d0
 800c930:	0801226c 	.word	0x0801226c
 800c934:	08012244 	.word	0x08012244

0800c938 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c93e:	f7f7 ff1f 	bl	8004780 <sys_now>
 800c942:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c944:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <sys_check_timeouts+0x78>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <sys_check_timeouts+0x1a>
 800c94e:	f7f9 f933 	bl	8005bb8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c952:	4b18      	ldr	r3, [pc, #96]	; (800c9b4 <sys_check_timeouts+0x7c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d022      	beq.n	800c9a4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	0fdb      	lsrs	r3, r3, #31
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d11a      	bne.n	800c9a8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a0f      	ldr	r2, [pc, #60]	; (800c9b4 <sys_check_timeouts+0x7c>)
 800c978:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	4a0b      	ldr	r2, [pc, #44]	; (800c9b8 <sys_check_timeouts+0x80>)
 800c98c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c98e:	68b9      	ldr	r1, [r7, #8]
 800c990:	2006      	movs	r0, #6
 800c992:	f7f8 fdd5 	bl	8005540 <memp_free>
    if (handler != NULL) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0d3      	beq.n	800c944 <sys_check_timeouts+0xc>
      handler(arg);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6838      	ldr	r0, [r7, #0]
 800c9a0:	4798      	blx	r3
  do {
 800c9a2:	e7cf      	b.n	800c944 <sys_check_timeouts+0xc>
      return;
 800c9a4:	bf00      	nop
 800c9a6:	e000      	b.n	800c9aa <sys_check_timeouts+0x72>
      return;
 800c9a8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20008299 	.word	0x20008299
 800c9b4:	200082ec 	.word	0x200082ec
 800c9b8:	200082f0 	.word	0x200082f0

0800c9bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c9c0:	f002 fc7c 	bl	800f2bc <rand>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	4b01      	ldr	r3, [pc, #4]	; (800c9dc <udp_init+0x20>)
 800c9d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9d8:	bf00      	nop
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20000028 	.word	0x20000028

0800c9e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d105      	bne.n	800ca00 <udp_input_local_match+0x20>
 800c9f4:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <udp_input_local_match+0xb4>)
 800c9f6:	2287      	movs	r2, #135	; 0x87
 800c9f8:	4927      	ldr	r1, [pc, #156]	; (800ca98 <udp_input_local_match+0xb8>)
 800c9fa:	4828      	ldr	r0, [pc, #160]	; (800ca9c <udp_input_local_match+0xbc>)
 800c9fc:	f002 fd5e 	bl	800f4bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d105      	bne.n	800ca12 <udp_input_local_match+0x32>
 800ca06:	4b23      	ldr	r3, [pc, #140]	; (800ca94 <udp_input_local_match+0xb4>)
 800ca08:	2288      	movs	r2, #136	; 0x88
 800ca0a:	4925      	ldr	r1, [pc, #148]	; (800caa0 <udp_input_local_match+0xc0>)
 800ca0c:	4823      	ldr	r0, [pc, #140]	; (800ca9c <udp_input_local_match+0xbc>)
 800ca0e:	f002 fd55 	bl	800f4bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	7a1b      	ldrb	r3, [r3, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00b      	beq.n	800ca32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	7a1a      	ldrb	r2, [r3, #8]
 800ca1e:	4b21      	ldr	r3, [pc, #132]	; (800caa4 <udp_input_local_match+0xc4>)
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca26:	3301      	adds	r3, #1
 800ca28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d001      	beq.n	800ca32 <udp_input_local_match+0x52>
    return 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e02b      	b.n	800ca8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca32:	79fb      	ldrb	r3, [r7, #7]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d018      	beq.n	800ca6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d013      	beq.n	800ca66 <udp_input_local_match+0x86>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00f      	beq.n	800ca66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca46:	4b17      	ldr	r3, [pc, #92]	; (800caa4 <udp_input_local_match+0xc4>)
 800ca48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d00a      	beq.n	800ca66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <udp_input_local_match+0xc4>)
 800ca56:	695b      	ldr	r3, [r3, #20]
 800ca58:	405a      	eors	r2, r3
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d110      	bne.n	800ca88 <udp_input_local_match+0xa8>
          return 1;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e00f      	b.n	800ca8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <udp_input_local_match+0xa4>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <udp_input_local_match+0xa4>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <udp_input_local_match+0xc4>)
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d101      	bne.n	800ca88 <udp_input_local_match+0xa8>
        return 1;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e000      	b.n	800ca8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	080122b8 	.word	0x080122b8
 800ca98:	080122e8 	.word	0x080122e8
 800ca9c:	0801230c 	.word	0x0801230c
 800caa0:	08012334 	.word	0x08012334
 800caa4:	20004d2c 	.word	0x20004d2c

0800caa8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800caa8:	b590      	push	{r4, r7, lr}
 800caaa:	b08d      	sub	sp, #52	; 0x34
 800caac:	af02      	add	r7, sp, #8
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d105      	bne.n	800cac8 <udp_input+0x20>
 800cabc:	4b7c      	ldr	r3, [pc, #496]	; (800ccb0 <udp_input+0x208>)
 800cabe:	22cf      	movs	r2, #207	; 0xcf
 800cac0:	497c      	ldr	r1, [pc, #496]	; (800ccb4 <udp_input+0x20c>)
 800cac2:	487d      	ldr	r0, [pc, #500]	; (800ccb8 <udp_input+0x210>)
 800cac4:	f002 fcfa 	bl	800f4bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d105      	bne.n	800cada <udp_input+0x32>
 800cace:	4b78      	ldr	r3, [pc, #480]	; (800ccb0 <udp_input+0x208>)
 800cad0:	22d0      	movs	r2, #208	; 0xd0
 800cad2:	497a      	ldr	r1, [pc, #488]	; (800ccbc <udp_input+0x214>)
 800cad4:	4878      	ldr	r0, [pc, #480]	; (800ccb8 <udp_input+0x210>)
 800cad6:	f002 fcf1 	bl	800f4bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	895b      	ldrh	r3, [r3, #10]
 800cade:	2b07      	cmp	r3, #7
 800cae0:	d803      	bhi.n	800caea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7f9 fba2 	bl	800622c <pbuf_free>
    goto end;
 800cae8:	e0de      	b.n	800cca8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800caf0:	4b73      	ldr	r3, [pc, #460]	; (800ccc0 <udp_input+0x218>)
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	4a72      	ldr	r2, [pc, #456]	; (800ccc0 <udp_input+0x218>)
 800caf6:	6812      	ldr	r2, [r2, #0]
 800caf8:	4611      	mov	r1, r2
 800cafa:	4618      	mov	r0, r3
 800cafc:	f001 fc88 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800cb00:	4603      	mov	r3, r0
 800cb02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f8 f830 	bl	8004b70 <lwip_htons>
 800cb10:	4603      	mov	r3, r0
 800cb12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	885b      	ldrh	r3, [r3, #2]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f8 f828 	bl	8004b70 <lwip_htons>
 800cb20:	4603      	mov	r3, r0
 800cb22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb30:	4b64      	ldr	r3, [pc, #400]	; (800ccc4 <udp_input+0x21c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	627b      	str	r3, [r7, #36]	; 0x24
 800cb36:	e054      	b.n	800cbe2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	8a5b      	ldrh	r3, [r3, #18]
 800cb3c:	89fa      	ldrh	r2, [r7, #14]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d14a      	bne.n	800cbd8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cb42:	7cfb      	ldrb	r3, [r7, #19]
 800cb44:	461a      	mov	r2, r3
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb4a:	f7ff ff49 	bl	800c9e0 <udp_input_local_match>
 800cb4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d041      	beq.n	800cbd8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	7c1b      	ldrb	r3, [r3, #16]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d11d      	bne.n	800cb9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	e017      	b.n	800cb9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cb6c:	7cfb      	ldrb	r3, [r7, #19]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d014      	beq.n	800cb9c <udp_input+0xf4>
 800cb72:	4b53      	ldr	r3, [pc, #332]	; (800ccc0 <udp_input+0x218>)
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7a:	d10f      	bne.n	800cb9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	3304      	adds	r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d008      	beq.n	800cb9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	3304      	adds	r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d101      	bne.n	800cb9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	8a9b      	ldrh	r3, [r3, #20]
 800cba0:	8a3a      	ldrh	r2, [r7, #16]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d118      	bne.n	800cbd8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d005      	beq.n	800cbba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	4b43      	ldr	r3, [pc, #268]	; (800ccc0 <udp_input+0x218>)
 800cbb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d10e      	bne.n	800cbd8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d014      	beq.n	800cbea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	68da      	ldr	r2, [r3, #12]
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cbc8:	4b3e      	ldr	r3, [pc, #248]	; (800ccc4 <udp_input+0x21c>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cbd0:	4a3c      	ldr	r2, [pc, #240]	; (800ccc4 <udp_input+0x21c>)
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cbd6:	e008      	b.n	800cbea <udp_input+0x142>
      }
    }

    prev = pcb;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1a7      	bne.n	800cb38 <udp_input+0x90>
 800cbe8:	e000      	b.n	800cbec <udp_input+0x144>
        break;
 800cbea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <udp_input+0x15a>
    for_us = 1;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	76fb      	strb	r3, [r7, #27]
 800cc00:	e00a      	b.n	800cc18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	3304      	adds	r3, #4
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	4b2d      	ldr	r3, [pc, #180]	; (800ccc0 <udp_input+0x218>)
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	bf0c      	ite	eq
 800cc10:	2301      	moveq	r3, #1
 800cc12:	2300      	movne	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cc18:	7efb      	ldrb	r3, [r7, #27]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d041      	beq.n	800cca2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cc1e:	2108      	movs	r1, #8
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7f9 fa7d 	bl	8006120 <pbuf_remove_header>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cc2c:	4b20      	ldr	r3, [pc, #128]	; (800ccb0 <udp_input+0x208>)
 800cc2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cc32:	4925      	ldr	r1, [pc, #148]	; (800ccc8 <udp_input+0x220>)
 800cc34:	4820      	ldr	r0, [pc, #128]	; (800ccb8 <udp_input+0x210>)
 800cc36:	f002 fc41 	bl	800f4bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f9 faf6 	bl	800622c <pbuf_free>
      goto end;
 800cc40:	e032      	b.n	800cca8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d012      	beq.n	800cc6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00a      	beq.n	800cc66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	699c      	ldr	r4, [r3, #24]
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	69d8      	ldr	r0, [r3, #28]
 800cc58:	8a3b      	ldrh	r3, [r7, #16]
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <udp_input+0x224>)
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cc64:	e021      	b.n	800ccaa <udp_input+0x202>
        pbuf_free(p);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7f9 fae0 	bl	800622c <pbuf_free>
        goto end;
 800cc6c:	e01c      	b.n	800cca8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cc6e:	7cfb      	ldrb	r3, [r7, #19]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d112      	bne.n	800cc9a <udp_input+0x1f2>
 800cc74:	4b12      	ldr	r3, [pc, #72]	; (800ccc0 <udp_input+0x218>)
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc7c:	2be0      	cmp	r3, #224	; 0xe0
 800cc7e:	d00c      	beq.n	800cc9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cc80:	4b0f      	ldr	r3, [pc, #60]	; (800ccc0 <udp_input+0x218>)
 800cc82:	899b      	ldrh	r3, [r3, #12]
 800cc84:	3308      	adds	r3, #8
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7f9 faba 	bl	8006206 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc92:	2103      	movs	r1, #3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f001 f89b 	bl	800ddd0 <icmp_dest_unreach>
      pbuf_free(p);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7f9 fac6 	bl	800622c <pbuf_free>
  return;
 800cca0:	e003      	b.n	800ccaa <udp_input+0x202>
    pbuf_free(p);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f9 fac2 	bl	800622c <pbuf_free>
  return;
 800cca8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ccaa:	372c      	adds	r7, #44	; 0x2c
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}
 800ccb0:	080122b8 	.word	0x080122b8
 800ccb4:	0801235c 	.word	0x0801235c
 800ccb8:	0801230c 	.word	0x0801230c
 800ccbc:	08012374 	.word	0x08012374
 800ccc0:	20004d2c 	.word	0x20004d2c
 800ccc4:	200082f8 	.word	0x200082f8
 800ccc8:	08012390 	.word	0x08012390
 800cccc:	20004d3c 	.word	0x20004d3c

0800ccd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01e      	beq.n	800cd1e <udp_netif_ip_addr_changed+0x4e>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01a      	beq.n	800cd1e <udp_netif_ip_addr_changed+0x4e>
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d017      	beq.n	800cd1e <udp_netif_ip_addr_changed+0x4e>
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d013      	beq.n	800cd1e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ccf6:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <udp_netif_ip_addr_changed+0x5c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e00c      	b.n	800cd18 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d103      	bne.n	800cd12 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1ef      	bne.n	800ccfe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cd1e:	bf00      	nop
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	200082f8 	.word	0x200082f8

0800cd30 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cd38:	4915      	ldr	r1, [pc, #84]	; (800cd90 <etharp_free_entry+0x60>)
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	4413      	add	r3, r2
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	440b      	add	r3, r1
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d013      	beq.n	800cd74 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cd4c:	4910      	ldr	r1, [pc, #64]	; (800cd90 <etharp_free_entry+0x60>)
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4613      	mov	r3, r2
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	4413      	add	r3, r2
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	440b      	add	r3, r1
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f9 fa65 	bl	800622c <pbuf_free>
    arp_table[i].q = NULL;
 800cd62:	490b      	ldr	r1, [pc, #44]	; (800cd90 <etharp_free_entry+0x60>)
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	4613      	mov	r3, r2
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	4413      	add	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	440b      	add	r3, r1
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cd74:	4906      	ldr	r1, [pc, #24]	; (800cd90 <etharp_free_entry+0x60>)
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	440b      	add	r3, r1
 800cd82:	3314      	adds	r3, #20
 800cd84:	2200      	movs	r2, #0
 800cd86:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	200082fc 	.word	0x200082fc

0800cd94 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	607b      	str	r3, [r7, #4]
 800cd9e:	e096      	b.n	800cece <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cda0:	494f      	ldr	r1, [pc, #316]	; (800cee0 <etharp_tmr+0x14c>)
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	4613      	mov	r3, r2
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	440b      	add	r3, r1
 800cdae:	3314      	adds	r3, #20
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 8086 	beq.w	800cec8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cdbc:	4948      	ldr	r1, [pc, #288]	; (800cee0 <etharp_tmr+0x14c>)
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	3312      	adds	r3, #18
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	b298      	uxth	r0, r3
 800cdd2:	4943      	ldr	r1, [pc, #268]	; (800cee0 <etharp_tmr+0x14c>)
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3312      	adds	r3, #18
 800cde2:	4602      	mov	r2, r0
 800cde4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cde6:	493e      	ldr	r1, [pc, #248]	; (800cee0 <etharp_tmr+0x14c>)
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	4613      	mov	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4413      	add	r3, r2
 800cdf0:	00db      	lsls	r3, r3, #3
 800cdf2:	440b      	add	r3, r1
 800cdf4:	3312      	adds	r3, #18
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cdfc:	d215      	bcs.n	800ce2a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cdfe:	4938      	ldr	r1, [pc, #224]	; (800cee0 <etharp_tmr+0x14c>)
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3314      	adds	r3, #20
 800ce0e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d10e      	bne.n	800ce32 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ce14:	4932      	ldr	r1, [pc, #200]	; (800cee0 <etharp_tmr+0x14c>)
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	440b      	add	r3, r1
 800ce22:	3312      	adds	r3, #18
 800ce24:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d903      	bls.n	800ce32 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff ff80 	bl	800cd30 <etharp_free_entry>
 800ce30:	e04a      	b.n	800cec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ce32:	492b      	ldr	r1, [pc, #172]	; (800cee0 <etharp_tmr+0x14c>)
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	440b      	add	r3, r1
 800ce40:	3314      	adds	r3, #20
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d10a      	bne.n	800ce5e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ce48:	4925      	ldr	r1, [pc, #148]	; (800cee0 <etharp_tmr+0x14c>)
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	4413      	add	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	440b      	add	r3, r1
 800ce56:	3314      	adds	r3, #20
 800ce58:	2204      	movs	r2, #4
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	e034      	b.n	800cec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ce5e:	4920      	ldr	r1, [pc, #128]	; (800cee0 <etharp_tmr+0x14c>)
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	4413      	add	r3, r2
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	440b      	add	r3, r1
 800ce6c:	3314      	adds	r3, #20
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b04      	cmp	r3, #4
 800ce72:	d10a      	bne.n	800ce8a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ce74:	491a      	ldr	r1, [pc, #104]	; (800cee0 <etharp_tmr+0x14c>)
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	4413      	add	r3, r2
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	440b      	add	r3, r1
 800ce82:	3314      	adds	r3, #20
 800ce84:	2202      	movs	r2, #2
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	e01e      	b.n	800cec8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce8a:	4915      	ldr	r1, [pc, #84]	; (800cee0 <etharp_tmr+0x14c>)
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	3314      	adds	r3, #20
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d113      	bne.n	800cec8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cea0:	490f      	ldr	r1, [pc, #60]	; (800cee0 <etharp_tmr+0x14c>)
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4613      	mov	r3, r2
 800cea6:	005b      	lsls	r3, r3, #1
 800cea8:	4413      	add	r3, r2
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	440b      	add	r3, r1
 800ceae:	3308      	adds	r3, #8
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	4413      	add	r3, r2
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	4a08      	ldr	r2, [pc, #32]	; (800cee0 <etharp_tmr+0x14c>)
 800cebe:	4413      	add	r3, r2
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	f000 fe6e 	bl	800dba4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3301      	adds	r3, #1
 800cecc:	607b      	str	r3, [r7, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b09      	cmp	r3, #9
 800ced2:	f77f af65 	ble.w	800cda0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	200082fc 	.word	0x200082fc

0800cee4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	; 0x28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	460b      	mov	r3, r1
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cef2:	230a      	movs	r3, #10
 800cef4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cef6:	230a      	movs	r3, #10
 800cef8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cefa:	230a      	movs	r3, #10
 800cefc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cf02:	230a      	movs	r3, #10
 800cf04:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	83bb      	strh	r3, [r7, #28]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	837b      	strh	r3, [r7, #26]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf12:	2300      	movs	r3, #0
 800cf14:	843b      	strh	r3, [r7, #32]
 800cf16:	e0ae      	b.n	800d076 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf1c:	49a6      	ldr	r1, [pc, #664]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	3314      	adds	r3, #20
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cf2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf32:	2b0a      	cmp	r3, #10
 800cf34:	d105      	bne.n	800cf42 <etharp_find_entry+0x5e>
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cf3c:	8c3b      	ldrh	r3, [r7, #32]
 800cf3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf40:	e095      	b.n	800d06e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 8092 	beq.w	800d06e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d009      	beq.n	800cf64 <etharp_find_entry+0x80>
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d806      	bhi.n	800cf64 <etharp_find_entry+0x80>
 800cf56:	4b99      	ldr	r3, [pc, #612]	; (800d1bc <etharp_find_entry+0x2d8>)
 800cf58:	f240 1223 	movw	r2, #291	; 0x123
 800cf5c:	4998      	ldr	r1, [pc, #608]	; (800d1c0 <etharp_find_entry+0x2dc>)
 800cf5e:	4899      	ldr	r0, [pc, #612]	; (800d1c4 <etharp_find_entry+0x2e0>)
 800cf60:	f002 faac 	bl	800f4bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d020      	beq.n	800cfac <etharp_find_entry+0xc8>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6819      	ldr	r1, [r3, #0]
 800cf6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf72:	4891      	ldr	r0, [pc, #580]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cf74:	4613      	mov	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	4403      	add	r3, r0
 800cf7e:	3304      	adds	r3, #4
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4299      	cmp	r1, r3
 800cf84:	d112      	bne.n	800cfac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00c      	beq.n	800cfa6 <etharp_find_entry+0xc2>
 800cf8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf90:	4989      	ldr	r1, [pc, #548]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cf92:	4613      	mov	r3, r2
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	4413      	add	r3, r2
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d102      	bne.n	800cfac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cfa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfaa:	e100      	b.n	800d1ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d140      	bne.n	800d034 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cfb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfb6:	4980      	ldr	r1, [pc, #512]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cfb8:	4613      	mov	r3, r2
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	4413      	add	r3, r2
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	440b      	add	r3, r1
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01a      	beq.n	800cffe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cfc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfcc:	497a      	ldr	r1, [pc, #488]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cfce:	4613      	mov	r3, r2
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	4413      	add	r3, r2
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	440b      	add	r3, r1
 800cfd8:	3312      	adds	r3, #18
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	8bba      	ldrh	r2, [r7, #28]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d845      	bhi.n	800d06e <etharp_find_entry+0x18a>
            old_queue = i;
 800cfe2:	8c3b      	ldrh	r3, [r7, #32]
 800cfe4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cfe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfea:	4973      	ldr	r1, [pc, #460]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800cfec:	4613      	mov	r3, r2
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	4413      	add	r3, r2
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	440b      	add	r3, r1
 800cff6:	3312      	adds	r3, #18
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	83bb      	strh	r3, [r7, #28]
 800cffc:	e037      	b.n	800d06e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d002:	496d      	ldr	r1, [pc, #436]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d004:	4613      	mov	r3, r2
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	4413      	add	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	440b      	add	r3, r1
 800d00e:	3312      	adds	r3, #18
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	8b7a      	ldrh	r2, [r7, #26]
 800d014:	429a      	cmp	r2, r3
 800d016:	d82a      	bhi.n	800d06e <etharp_find_entry+0x18a>
            old_pending = i;
 800d018:	8c3b      	ldrh	r3, [r7, #32]
 800d01a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d01c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d020:	4965      	ldr	r1, [pc, #404]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d022:	4613      	mov	r3, r2
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	4413      	add	r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	440b      	add	r3, r1
 800d02c:	3312      	adds	r3, #18
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	837b      	strh	r3, [r7, #26]
 800d032:	e01c      	b.n	800d06e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d919      	bls.n	800d06e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d03a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d03e:	495e      	ldr	r1, [pc, #376]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d040:	4613      	mov	r3, r2
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	4413      	add	r3, r2
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	440b      	add	r3, r1
 800d04a:	3312      	adds	r3, #18
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	8b3a      	ldrh	r2, [r7, #24]
 800d050:	429a      	cmp	r2, r3
 800d052:	d80c      	bhi.n	800d06e <etharp_find_entry+0x18a>
            old_stable = i;
 800d054:	8c3b      	ldrh	r3, [r7, #32]
 800d056:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d05c:	4956      	ldr	r1, [pc, #344]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d05e:	4613      	mov	r3, r2
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	4413      	add	r3, r2
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	440b      	add	r3, r1
 800d068:	3312      	adds	r3, #18
 800d06a:	881b      	ldrh	r3, [r3, #0]
 800d06c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d06e:	8c3b      	ldrh	r3, [r7, #32]
 800d070:	3301      	adds	r3, #1
 800d072:	b29b      	uxth	r3, r3
 800d074:	843b      	strh	r3, [r7, #32]
 800d076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d07a:	2b09      	cmp	r3, #9
 800d07c:	f77f af4c 	ble.w	800cf18 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	f003 0302 	and.w	r3, r3, #2
 800d086:	2b00      	cmp	r3, #0
 800d088:	d108      	bne.n	800d09c <etharp_find_entry+0x1b8>
 800d08a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d08e:	2b0a      	cmp	r3, #10
 800d090:	d107      	bne.n	800d0a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d102      	bne.n	800d0a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d09c:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a0:	e085      	b.n	800d1ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d0a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d0a6:	2b09      	cmp	r3, #9
 800d0a8:	dc02      	bgt.n	800d0b0 <etharp_find_entry+0x1cc>
    i = empty;
 800d0aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0ac:	843b      	strh	r3, [r7, #32]
 800d0ae:	e039      	b.n	800d124 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d0b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	dc14      	bgt.n	800d0e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d0bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0c0:	493d      	ldr	r1, [pc, #244]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d018      	beq.n	800d104 <etharp_find_entry+0x220>
 800d0d2:	4b3a      	ldr	r3, [pc, #232]	; (800d1bc <etharp_find_entry+0x2d8>)
 800d0d4:	f240 126d 	movw	r2, #365	; 0x16d
 800d0d8:	493b      	ldr	r1, [pc, #236]	; (800d1c8 <etharp_find_entry+0x2e4>)
 800d0da:	483a      	ldr	r0, [pc, #232]	; (800d1c4 <etharp_find_entry+0x2e0>)
 800d0dc:	f002 f9ee 	bl	800f4bc <iprintf>
 800d0e0:	e010      	b.n	800d104 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d0e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d0e6:	2b09      	cmp	r3, #9
 800d0e8:	dc02      	bgt.n	800d0f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d0ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0ec:	843b      	strh	r3, [r7, #32]
 800d0ee:	e009      	b.n	800d104 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d0f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d0f4:	2b09      	cmp	r3, #9
 800d0f6:	dc02      	bgt.n	800d0fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d0f8:	8bfb      	ldrh	r3, [r7, #30]
 800d0fa:	843b      	strh	r3, [r7, #32]
 800d0fc:	e002      	b.n	800d104 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d102:	e054      	b.n	800d1ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d104:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d108:	2b09      	cmp	r3, #9
 800d10a:	dd06      	ble.n	800d11a <etharp_find_entry+0x236>
 800d10c:	4b2b      	ldr	r3, [pc, #172]	; (800d1bc <etharp_find_entry+0x2d8>)
 800d10e:	f240 127f 	movw	r2, #383	; 0x17f
 800d112:	492e      	ldr	r1, [pc, #184]	; (800d1cc <etharp_find_entry+0x2e8>)
 800d114:	482b      	ldr	r0, [pc, #172]	; (800d1c4 <etharp_find_entry+0x2e0>)
 800d116:	f002 f9d1 	bl	800f4bc <iprintf>
    etharp_free_entry(i);
 800d11a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff fe06 	bl	800cd30 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d128:	2b09      	cmp	r3, #9
 800d12a:	dd06      	ble.n	800d13a <etharp_find_entry+0x256>
 800d12c:	4b23      	ldr	r3, [pc, #140]	; (800d1bc <etharp_find_entry+0x2d8>)
 800d12e:	f240 1283 	movw	r2, #387	; 0x183
 800d132:	4926      	ldr	r1, [pc, #152]	; (800d1cc <etharp_find_entry+0x2e8>)
 800d134:	4823      	ldr	r0, [pc, #140]	; (800d1c4 <etharp_find_entry+0x2e0>)
 800d136:	f002 f9c1 	bl	800f4bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d13a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d13e:	491e      	ldr	r1, [pc, #120]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d140:	4613      	mov	r3, r2
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	4413      	add	r3, r2
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	440b      	add	r3, r1
 800d14a:	3314      	adds	r3, #20
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d006      	beq.n	800d160 <etharp_find_entry+0x27c>
 800d152:	4b1a      	ldr	r3, [pc, #104]	; (800d1bc <etharp_find_entry+0x2d8>)
 800d154:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d158:	491d      	ldr	r1, [pc, #116]	; (800d1d0 <etharp_find_entry+0x2ec>)
 800d15a:	481a      	ldr	r0, [pc, #104]	; (800d1c4 <etharp_find_entry+0x2e0>)
 800d15c:	f002 f9ae 	bl	800f4bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00b      	beq.n	800d17e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6819      	ldr	r1, [r3, #0]
 800d16e:	4812      	ldr	r0, [pc, #72]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d170:	4613      	mov	r3, r2
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	4413      	add	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4403      	add	r3, r0
 800d17a:	3304      	adds	r3, #4
 800d17c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d17e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d182:	490d      	ldr	r1, [pc, #52]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d184:	4613      	mov	r3, r2
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	4413      	add	r3, r2
 800d18a:	00db      	lsls	r3, r3, #3
 800d18c:	440b      	add	r3, r1
 800d18e:	3312      	adds	r3, #18
 800d190:	2200      	movs	r2, #0
 800d192:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d194:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d198:	4907      	ldr	r1, [pc, #28]	; (800d1b8 <etharp_find_entry+0x2d4>)
 800d19a:	4613      	mov	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	4413      	add	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d1aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3728      	adds	r7, #40	; 0x28
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	200082fc 	.word	0x200082fc
 800d1bc:	0801261c 	.word	0x0801261c
 800d1c0:	08012654 	.word	0x08012654
 800d1c4:	08012694 	.word	0x08012694
 800d1c8:	080126bc 	.word	0x080126bc
 800d1cc:	080126d4 	.word	0x080126d4
 800d1d0:	080126e8 	.word	0x080126e8

0800d1d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1e8:	2b06      	cmp	r3, #6
 800d1ea:	d006      	beq.n	800d1fa <etharp_update_arp_entry+0x26>
 800d1ec:	4b48      	ldr	r3, [pc, #288]	; (800d310 <etharp_update_arp_entry+0x13c>)
 800d1ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d1f2:	4948      	ldr	r1, [pc, #288]	; (800d314 <etharp_update_arp_entry+0x140>)
 800d1f4:	4848      	ldr	r0, [pc, #288]	; (800d318 <etharp_update_arp_entry+0x144>)
 800d1f6:	f002 f961 	bl	800f4bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d012      	beq.n	800d226 <etharp_update_arp_entry+0x52>
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00e      	beq.n	800d226 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68f9      	ldr	r1, [r7, #12]
 800d20e:	4618      	mov	r0, r3
 800d210:	f001 f8fe 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800d214:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d222:	2be0      	cmp	r3, #224	; 0xe0
 800d224:	d102      	bne.n	800d22c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d226:	f06f 030f 	mvn.w	r3, #15
 800d22a:	e06c      	b.n	800d306 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d22c:	78fb      	ldrb	r3, [r7, #3]
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	4619      	mov	r1, r3
 800d232:	68b8      	ldr	r0, [r7, #8]
 800d234:	f7ff fe56 	bl	800cee4 <etharp_find_entry>
 800d238:	4603      	mov	r3, r0
 800d23a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d23c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d240:	2b00      	cmp	r3, #0
 800d242:	da02      	bge.n	800d24a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d244:	8afb      	ldrh	r3, [r7, #22]
 800d246:	b25b      	sxtb	r3, r3
 800d248:	e05d      	b.n	800d306 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d24a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d24e:	4933      	ldr	r1, [pc, #204]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d250:	4613      	mov	r3, r2
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	4413      	add	r3, r2
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	440b      	add	r3, r1
 800d25a:	3314      	adds	r3, #20
 800d25c:	2202      	movs	r2, #2
 800d25e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d260:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d264:	492d      	ldr	r1, [pc, #180]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d266:	4613      	mov	r3, r2
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	440b      	add	r3, r1
 800d270:	3308      	adds	r3, #8
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d276:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d27a:	4613      	mov	r3, r2
 800d27c:	005b      	lsls	r3, r3, #1
 800d27e:	4413      	add	r3, r2
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	3308      	adds	r3, #8
 800d284:	4a25      	ldr	r2, [pc, #148]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d286:	4413      	add	r3, r2
 800d288:	3304      	adds	r3, #4
 800d28a:	2206      	movs	r2, #6
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	f002 f9ef 	bl	800f672 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d298:	4920      	ldr	r1, [pc, #128]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	3312      	adds	r3, #18
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d2aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2ae:	491b      	ldr	r1, [pc, #108]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	4413      	add	r3, r2
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	440b      	add	r3, r1
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d021      	beq.n	800d304 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d2c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2c4:	4915      	ldr	r1, [pc, #84]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	4413      	add	r3, r2
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	440b      	add	r3, r1
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d2d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2d8:	4910      	ldr	r1, [pc, #64]	; (800d31c <etharp_update_arp_entry+0x148>)
 800d2da:	4613      	mov	r3, r2
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	4413      	add	r3, r2
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	440b      	add	r3, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d2ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6939      	ldr	r1, [r7, #16]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f001 ff97 	bl	800f22c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d2fe:	6938      	ldr	r0, [r7, #16]
 800d300:	f7f8 ff94 	bl	800622c <pbuf_free>
  }
  return ERR_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	0801261c 	.word	0x0801261c
 800d314:	08012714 	.word	0x08012714
 800d318:	08012694 	.word	0x08012694
 800d31c:	200082fc 	.word	0x200082fc

0800d320 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	e01e      	b.n	800d36c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d32e:	4913      	ldr	r1, [pc, #76]	; (800d37c <etharp_cleanup_netif+0x5c>)
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4613      	mov	r3, r2
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4413      	add	r3, r2
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	440b      	add	r3, r1
 800d33c:	3314      	adds	r3, #20
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d342:	7afb      	ldrb	r3, [r7, #11]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00e      	beq.n	800d366 <etharp_cleanup_netif+0x46>
 800d348:	490c      	ldr	r1, [pc, #48]	; (800d37c <etharp_cleanup_netif+0x5c>)
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	4613      	mov	r3, r2
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	4413      	add	r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	440b      	add	r3, r1
 800d356:	3308      	adds	r3, #8
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d102      	bne.n	800d366 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff fce5 	bl	800cd30 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3301      	adds	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b09      	cmp	r3, #9
 800d370:	dddd      	ble.n	800d32e <etharp_cleanup_netif+0xe>
    }
  }
}
 800d372:	bf00      	nop
 800d374:	bf00      	nop
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200082fc 	.word	0x200082fc

0800d380 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d380:	b5b0      	push	{r4, r5, r7, lr}
 800d382:	b08a      	sub	sp, #40	; 0x28
 800d384:	af04      	add	r7, sp, #16
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d107      	bne.n	800d3a0 <etharp_input+0x20>
 800d390:	4b3d      	ldr	r3, [pc, #244]	; (800d488 <etharp_input+0x108>)
 800d392:	f240 228a 	movw	r2, #650	; 0x28a
 800d396:	493d      	ldr	r1, [pc, #244]	; (800d48c <etharp_input+0x10c>)
 800d398:	483d      	ldr	r0, [pc, #244]	; (800d490 <etharp_input+0x110>)
 800d39a:	f002 f88f 	bl	800f4bc <iprintf>
 800d39e:	e06f      	b.n	800d480 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3b0:	d10c      	bne.n	800d3cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d3b6:	2b06      	cmp	r3, #6
 800d3b8:	d108      	bne.n	800d3cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d3be:	2b04      	cmp	r3, #4
 800d3c0:	d104      	bne.n	800d3cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d003      	beq.n	800d3d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7f8 ff2d 	bl	800622c <pbuf_free>
    return;
 800d3d2:	e055      	b.n	800d480 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	330e      	adds	r3, #14
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3318      	adds	r3, #24
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d102      	bne.n	800d3f4 <etharp_input+0x74>
    for_us = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75fb      	strb	r3, [r7, #23]
 800d3f2:	e009      	b.n	800d408 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	bf0c      	ite	eq
 800d400:	2301      	moveq	r3, #1
 800d402:	2300      	movne	r3, #0
 800d404:	b2db      	uxtb	r3, r3
 800d406:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	f103 0208 	add.w	r2, r3, #8
 800d40e:	7dfb      	ldrb	r3, [r7, #23]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <etharp_input+0x98>
 800d414:	2301      	movs	r3, #1
 800d416:	e000      	b.n	800d41a <etharp_input+0x9a>
 800d418:	2302      	movs	r3, #2
 800d41a:	f107 010c 	add.w	r1, r7, #12
 800d41e:	6838      	ldr	r0, [r7, #0]
 800d420:	f7ff fed8 	bl	800d1d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	88db      	ldrh	r3, [r3, #6]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d42e:	d003      	beq.n	800d438 <etharp_input+0xb8>
 800d430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d434:	d01e      	beq.n	800d474 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d436:	e020      	b.n	800d47a <etharp_input+0xfa>
      if (for_us) {
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d01c      	beq.n	800d478 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d458:	2102      	movs	r1, #2
 800d45a:	9103      	str	r1, [sp, #12]
 800d45c:	f107 010c 	add.w	r1, r7, #12
 800d460:	9102      	str	r1, [sp, #8]
 800d462:	9201      	str	r2, [sp, #4]
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	462b      	mov	r3, r5
 800d468:	4622      	mov	r2, r4
 800d46a:	4601      	mov	r1, r0
 800d46c:	6838      	ldr	r0, [r7, #0]
 800d46e:	f000 faeb 	bl	800da48 <etharp_raw>
      break;
 800d472:	e001      	b.n	800d478 <etharp_input+0xf8>
      break;
 800d474:	bf00      	nop
 800d476:	e000      	b.n	800d47a <etharp_input+0xfa>
      break;
 800d478:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7f8 fed6 	bl	800622c <pbuf_free>
}
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bdb0      	pop	{r4, r5, r7, pc}
 800d486:	bf00      	nop
 800d488:	0801261c 	.word	0x0801261c
 800d48c:	0801276c 	.word	0x0801276c
 800d490:	08012694 	.word	0x08012694

0800d494 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d4a2:	79fa      	ldrb	r2, [r7, #7]
 800d4a4:	4944      	ldr	r1, [pc, #272]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	4413      	add	r3, r2
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	440b      	add	r3, r1
 800d4b0:	3314      	adds	r3, #20
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d806      	bhi.n	800d4c6 <etharp_output_to_arp_index+0x32>
 800d4b8:	4b40      	ldr	r3, [pc, #256]	; (800d5bc <etharp_output_to_arp_index+0x128>)
 800d4ba:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d4be:	4940      	ldr	r1, [pc, #256]	; (800d5c0 <etharp_output_to_arp_index+0x12c>)
 800d4c0:	4840      	ldr	r0, [pc, #256]	; (800d5c4 <etharp_output_to_arp_index+0x130>)
 800d4c2:	f001 fffb 	bl	800f4bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d4c6:	79fa      	ldrb	r2, [r7, #7]
 800d4c8:	493b      	ldr	r1, [pc, #236]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3314      	adds	r3, #20
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d153      	bne.n	800d584 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	4936      	ldr	r1, [pc, #216]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3312      	adds	r3, #18
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d4f2:	d919      	bls.n	800d528 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d4f4:	79fa      	ldrb	r2, [r7, #7]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4413      	add	r3, r2
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	4a2e      	ldr	r2, [pc, #184]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d500:	4413      	add	r3, r2
 800d502:	3304      	adds	r3, #4
 800d504:	4619      	mov	r1, r3
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fb4c 	bl	800dba4 <etharp_request>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d138      	bne.n	800d584 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d512:	79fa      	ldrb	r2, [r7, #7]
 800d514:	4928      	ldr	r1, [pc, #160]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
 800d520:	3314      	adds	r3, #20
 800d522:	2203      	movs	r2, #3
 800d524:	701a      	strb	r2, [r3, #0]
 800d526:	e02d      	b.n	800d584 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d528:	79fa      	ldrb	r2, [r7, #7]
 800d52a:	4923      	ldr	r1, [pc, #140]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d52c:	4613      	mov	r3, r2
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4413      	add	r3, r2
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	440b      	add	r3, r1
 800d536:	3312      	adds	r3, #18
 800d538:	881b      	ldrh	r3, [r3, #0]
 800d53a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d53e:	d321      	bcc.n	800d584 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d540:	79fa      	ldrb	r2, [r7, #7]
 800d542:	4613      	mov	r3, r2
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	4413      	add	r3, r2
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	4a1b      	ldr	r2, [pc, #108]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d54c:	4413      	add	r3, r2
 800d54e:	1d19      	adds	r1, r3, #4
 800d550:	79fa      	ldrb	r2, [r7, #7]
 800d552:	4613      	mov	r3, r2
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	3308      	adds	r3, #8
 800d55c:	4a16      	ldr	r2, [pc, #88]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d55e:	4413      	add	r3, r2
 800d560:	3304      	adds	r3, #4
 800d562:	461a      	mov	r2, r3
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 fafb 	bl	800db60 <etharp_request_dst>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d109      	bne.n	800d584 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d570:	79fa      	ldrb	r2, [r7, #7]
 800d572:	4911      	ldr	r1, [pc, #68]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d574:	4613      	mov	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4413      	add	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	440b      	add	r3, r1
 800d57e:	3314      	adds	r3, #20
 800d580:	2203      	movs	r2, #3
 800d582:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d58a:	79fa      	ldrb	r2, [r7, #7]
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	3308      	adds	r3, #8
 800d596:	4a08      	ldr	r2, [pc, #32]	; (800d5b8 <etharp_output_to_arp_index+0x124>)
 800d598:	4413      	add	r3, r2
 800d59a:	3304      	adds	r3, #4
 800d59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5a0:	9200      	str	r2, [sp, #0]
 800d5a2:	460a      	mov	r2, r1
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f001 fe40 	bl	800f22c <ethernet_output>
 800d5ac:	4603      	mov	r3, r0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200082fc 	.word	0x200082fc
 800d5bc:	0801261c 	.word	0x0801261c
 800d5c0:	0801278c 	.word	0x0801278c
 800d5c4:	08012694 	.word	0x08012694

0800d5c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08a      	sub	sp, #40	; 0x28
 800d5cc:	af02      	add	r7, sp, #8
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <etharp_output+0x24>
 800d5de:	4b73      	ldr	r3, [pc, #460]	; (800d7ac <etharp_output+0x1e4>)
 800d5e0:	f240 321e 	movw	r2, #798	; 0x31e
 800d5e4:	4972      	ldr	r1, [pc, #456]	; (800d7b0 <etharp_output+0x1e8>)
 800d5e6:	4873      	ldr	r0, [pc, #460]	; (800d7b4 <etharp_output+0x1ec>)
 800d5e8:	f001 ff68 	bl	800f4bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <etharp_output+0x38>
 800d5f2:	4b6e      	ldr	r3, [pc, #440]	; (800d7ac <etharp_output+0x1e4>)
 800d5f4:	f240 321f 	movw	r2, #799	; 0x31f
 800d5f8:	496f      	ldr	r1, [pc, #444]	; (800d7b8 <etharp_output+0x1f0>)
 800d5fa:	486e      	ldr	r0, [pc, #440]	; (800d7b4 <etharp_output+0x1ec>)
 800d5fc:	f001 ff5e 	bl	800f4bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <etharp_output+0x4c>
 800d606:	4b69      	ldr	r3, [pc, #420]	; (800d7ac <etharp_output+0x1e4>)
 800d608:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d60c:	496b      	ldr	r1, [pc, #428]	; (800d7bc <etharp_output+0x1f4>)
 800d60e:	4869      	ldr	r0, [pc, #420]	; (800d7b4 <etharp_output+0x1ec>)
 800d610:	f001 ff54 	bl	800f4bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68f9      	ldr	r1, [r7, #12]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f000 fef8 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d002      	beq.n	800d62c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d626:	4b66      	ldr	r3, [pc, #408]	; (800d7c0 <etharp_output+0x1f8>)
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	e0af      	b.n	800d78c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d634:	2be0      	cmp	r3, #224	; 0xe0
 800d636:	d118      	bne.n	800d66a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d638:	2301      	movs	r3, #1
 800d63a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d63c:	2300      	movs	r3, #0
 800d63e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d640:	235e      	movs	r3, #94	; 0x5e
 800d642:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3301      	adds	r3, #1
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3302      	adds	r3, #2
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	3303      	adds	r3, #3
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d662:	f107 0310 	add.w	r3, r7, #16
 800d666:	61fb      	str	r3, [r7, #28]
 800d668:	e090      	b.n	800d78c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3304      	adds	r3, #4
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	405a      	eors	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3308      	adds	r3, #8
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d012      	beq.n	800d6a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d688:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d00b      	beq.n	800d6a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	330c      	adds	r3, #12
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	330c      	adds	r3, #12
 800d69e:	61bb      	str	r3, [r7, #24]
 800d6a0:	e002      	b.n	800d6a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d6a2:	f06f 0303 	mvn.w	r3, #3
 800d6a6:	e07d      	b.n	800d7a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6a8:	4b46      	ldr	r3, [pc, #280]	; (800d7c4 <etharp_output+0x1fc>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4a46      	ldr	r2, [pc, #280]	; (800d7c8 <etharp_output+0x200>)
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	440b      	add	r3, r1
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	3314      	adds	r3, #20
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d925      	bls.n	800d70e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d6c2:	4b40      	ldr	r3, [pc, #256]	; (800d7c4 <etharp_output+0x1fc>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4a3f      	ldr	r2, [pc, #252]	; (800d7c8 <etharp_output+0x200>)
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	440b      	add	r3, r1
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d117      	bne.n	800d70e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	4b38      	ldr	r3, [pc, #224]	; (800d7c4 <etharp_output+0x1fc>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	4937      	ldr	r1, [pc, #220]	; (800d7c8 <etharp_output+0x200>)
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	4403      	add	r3, r0
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	440b      	add	r3, r1
 800d6f4:	3304      	adds	r3, #4
 800d6f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d108      	bne.n	800d70e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d6fc:	4b31      	ldr	r3, [pc, #196]	; (800d7c4 <etharp_output+0x1fc>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff fec5 	bl	800d494 <etharp_output_to_arp_index>
 800d70a:	4603      	mov	r3, r0
 800d70c:	e04a      	b.n	800d7a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d70e:	2300      	movs	r3, #0
 800d710:	75fb      	strb	r3, [r7, #23]
 800d712:	e031      	b.n	800d778 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d714:	7dfa      	ldrb	r2, [r7, #23]
 800d716:	492c      	ldr	r1, [pc, #176]	; (800d7c8 <etharp_output+0x200>)
 800d718:	4613      	mov	r3, r2
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	4413      	add	r3, r2
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	440b      	add	r3, r1
 800d722:	3314      	adds	r3, #20
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d923      	bls.n	800d772 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d72a:	7dfa      	ldrb	r2, [r7, #23]
 800d72c:	4926      	ldr	r1, [pc, #152]	; (800d7c8 <etharp_output+0x200>)
 800d72e:	4613      	mov	r3, r2
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	4413      	add	r3, r2
 800d734:	00db      	lsls	r3, r3, #3
 800d736:	440b      	add	r3, r1
 800d738:	3308      	adds	r3, #8
 800d73a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d117      	bne.n	800d772 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	6819      	ldr	r1, [r3, #0]
 800d746:	7dfa      	ldrb	r2, [r7, #23]
 800d748:	481f      	ldr	r0, [pc, #124]	; (800d7c8 <etharp_output+0x200>)
 800d74a:	4613      	mov	r3, r2
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	4413      	add	r3, r2
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	4403      	add	r3, r0
 800d754:	3304      	adds	r3, #4
 800d756:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d758:	4299      	cmp	r1, r3
 800d75a:	d10a      	bne.n	800d772 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d75c:	4a19      	ldr	r2, [pc, #100]	; (800d7c4 <etharp_output+0x1fc>)
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
 800d760:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	461a      	mov	r2, r3
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7ff fe93 	bl	800d494 <etharp_output_to_arp_index>
 800d76e:	4603      	mov	r3, r0
 800d770:	e018      	b.n	800d7a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d772:	7dfb      	ldrb	r3, [r7, #23]
 800d774:	3301      	adds	r3, #1
 800d776:	75fb      	strb	r3, [r7, #23]
 800d778:	7dfb      	ldrb	r3, [r7, #23]
 800d77a:	2b09      	cmp	r3, #9
 800d77c:	d9ca      	bls.n	800d714 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	69b9      	ldr	r1, [r7, #24]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 f822 	bl	800d7cc <etharp_query>
 800d788:	4603      	mov	r3, r0
 800d78a:	e00b      	b.n	800d7a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f001 fd45 	bl	800f22c <ethernet_output>
 800d7a2:	4603      	mov	r3, r0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	0801261c 	.word	0x0801261c
 800d7b0:	0801276c 	.word	0x0801276c
 800d7b4:	08012694 	.word	0x08012694
 800d7b8:	080127bc 	.word	0x080127bc
 800d7bc:	0801275c 	.word	0x0801275c
 800d7c0:	08012dd8 	.word	0x08012dd8
 800d7c4:	200083ec 	.word	0x200083ec
 800d7c8:	200082fc 	.word	0x200082fc

0800d7cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08c      	sub	sp, #48	; 0x30
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3326      	adds	r3, #38	; 0x26
 800d7dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d7de:	23ff      	movs	r3, #255	; 0xff
 800d7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68f9      	ldr	r1, [r7, #12]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f000 fe0e 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10c      	bne.n	800d814 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d802:	2be0      	cmp	r3, #224	; 0xe0
 800d804:	d006      	beq.n	800d814 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d102      	bne.n	800d81a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d814:	f06f 030f 	mvn.w	r3, #15
 800d818:	e101      	b.n	800da1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	2101      	movs	r1, #1
 800d81e:	68b8      	ldr	r0, [r7, #8]
 800d820:	f7ff fb60 	bl	800cee4 <etharp_find_entry>
 800d824:	4603      	mov	r3, r0
 800d826:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	da02      	bge.n	800d836 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d830:	8a7b      	ldrh	r3, [r7, #18]
 800d832:	b25b      	sxtb	r3, r3
 800d834:	e0f3      	b.n	800da1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d836:	8a7b      	ldrh	r3, [r7, #18]
 800d838:	2b7e      	cmp	r3, #126	; 0x7e
 800d83a:	d906      	bls.n	800d84a <etharp_query+0x7e>
 800d83c:	4b7a      	ldr	r3, [pc, #488]	; (800da28 <etharp_query+0x25c>)
 800d83e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d842:	497a      	ldr	r1, [pc, #488]	; (800da2c <etharp_query+0x260>)
 800d844:	487a      	ldr	r0, [pc, #488]	; (800da30 <etharp_query+0x264>)
 800d846:	f001 fe39 	bl	800f4bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d84a:	8a7b      	ldrh	r3, [r7, #18]
 800d84c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d84e:	7c7a      	ldrb	r2, [r7, #17]
 800d850:	4978      	ldr	r1, [pc, #480]	; (800da34 <etharp_query+0x268>)
 800d852:	4613      	mov	r3, r2
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	4413      	add	r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	440b      	add	r3, r1
 800d85c:	3314      	adds	r3, #20
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d115      	bne.n	800d890 <etharp_query+0xc4>
    is_new_entry = 1;
 800d864:	2301      	movs	r3, #1
 800d866:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d868:	7c7a      	ldrb	r2, [r7, #17]
 800d86a:	4972      	ldr	r1, [pc, #456]	; (800da34 <etharp_query+0x268>)
 800d86c:	4613      	mov	r3, r2
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	4413      	add	r3, r2
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	440b      	add	r3, r1
 800d876:	3314      	adds	r3, #20
 800d878:	2201      	movs	r2, #1
 800d87a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d87c:	7c7a      	ldrb	r2, [r7, #17]
 800d87e:	496d      	ldr	r1, [pc, #436]	; (800da34 <etharp_query+0x268>)
 800d880:	4613      	mov	r3, r2
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	4413      	add	r3, r2
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	440b      	add	r3, r1
 800d88a:	3308      	adds	r3, #8
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d890:	7c7a      	ldrb	r2, [r7, #17]
 800d892:	4968      	ldr	r1, [pc, #416]	; (800da34 <etharp_query+0x268>)
 800d894:	4613      	mov	r3, r2
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	4413      	add	r3, r2
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	440b      	add	r3, r1
 800d89e:	3314      	adds	r3, #20
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d011      	beq.n	800d8ca <etharp_query+0xfe>
 800d8a6:	7c7a      	ldrb	r2, [r7, #17]
 800d8a8:	4962      	ldr	r1, [pc, #392]	; (800da34 <etharp_query+0x268>)
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	4413      	add	r3, r2
 800d8b0:	00db      	lsls	r3, r3, #3
 800d8b2:	440b      	add	r3, r1
 800d8b4:	3314      	adds	r3, #20
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d806      	bhi.n	800d8ca <etharp_query+0xfe>
 800d8bc:	4b5a      	ldr	r3, [pc, #360]	; (800da28 <etharp_query+0x25c>)
 800d8be:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d8c2:	495d      	ldr	r1, [pc, #372]	; (800da38 <etharp_query+0x26c>)
 800d8c4:	485a      	ldr	r0, [pc, #360]	; (800da30 <etharp_query+0x264>)
 800d8c6:	f001 fdf9 	bl	800f4bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <etharp_query+0x10a>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10c      	bne.n	800d8f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d8d6:	68b9      	ldr	r1, [r7, #8]
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 f963 	bl	800dba4 <etharp_request>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <etharp_query+0x124>
      return result;
 800d8ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8ee:	e096      	b.n	800da1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <etharp_query+0x138>
 800d8f6:	4b4c      	ldr	r3, [pc, #304]	; (800da28 <etharp_query+0x25c>)
 800d8f8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d8fc:	494f      	ldr	r1, [pc, #316]	; (800da3c <etharp_query+0x270>)
 800d8fe:	484c      	ldr	r0, [pc, #304]	; (800da30 <etharp_query+0x264>)
 800d900:	f001 fddc 	bl	800f4bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d904:	7c7a      	ldrb	r2, [r7, #17]
 800d906:	494b      	ldr	r1, [pc, #300]	; (800da34 <etharp_query+0x268>)
 800d908:	4613      	mov	r3, r2
 800d90a:	005b      	lsls	r3, r3, #1
 800d90c:	4413      	add	r3, r2
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	440b      	add	r3, r1
 800d912:	3314      	adds	r3, #20
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d917      	bls.n	800d94a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d91a:	4a49      	ldr	r2, [pc, #292]	; (800da40 <etharp_query+0x274>)
 800d91c:	7c7b      	ldrb	r3, [r7, #17]
 800d91e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d920:	7c7a      	ldrb	r2, [r7, #17]
 800d922:	4613      	mov	r3, r2
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	4413      	add	r3, r2
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	3308      	adds	r3, #8
 800d92c:	4a41      	ldr	r2, [pc, #260]	; (800da34 <etharp_query+0x268>)
 800d92e:	4413      	add	r3, r2
 800d930:	3304      	adds	r3, #4
 800d932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d936:	9200      	str	r2, [sp, #0]
 800d938:	697a      	ldr	r2, [r7, #20]
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f001 fc75 	bl	800f22c <ethernet_output>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d948:	e067      	b.n	800da1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d94a:	7c7a      	ldrb	r2, [r7, #17]
 800d94c:	4939      	ldr	r1, [pc, #228]	; (800da34 <etharp_query+0x268>)
 800d94e:	4613      	mov	r3, r2
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4413      	add	r3, r2
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	440b      	add	r3, r1
 800d958:	3314      	adds	r3, #20
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d15c      	bne.n	800da1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d968:	e01c      	b.n	800d9a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	895a      	ldrh	r2, [r3, #10]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	891b      	ldrh	r3, [r3, #8]
 800d972:	429a      	cmp	r2, r3
 800d974:	d10a      	bne.n	800d98c <etharp_query+0x1c0>
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d006      	beq.n	800d98c <etharp_query+0x1c0>
 800d97e:	4b2a      	ldr	r3, [pc, #168]	; (800da28 <etharp_query+0x25c>)
 800d980:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d984:	492f      	ldr	r1, [pc, #188]	; (800da44 <etharp_query+0x278>)
 800d986:	482a      	ldr	r0, [pc, #168]	; (800da30 <etharp_query+0x264>)
 800d988:	f001 fd98 	bl	800f4bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	7b1b      	ldrb	r3, [r3, #12]
 800d990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <etharp_query+0x1d2>
        copy_needed = 1;
 800d998:	2301      	movs	r3, #1
 800d99a:	61bb      	str	r3, [r7, #24]
        break;
 800d99c:	e005      	b.n	800d9aa <etharp_query+0x1de>
      }
      p = p->next;
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1df      	bne.n	800d96a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d9b6:	200e      	movs	r0, #14
 800d9b8:	f7f8 fe94 	bl	80066e4 <pbuf_clone>
 800d9bc:	61f8      	str	r0, [r7, #28]
 800d9be:	e004      	b.n	800d9ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d9c4:	69f8      	ldr	r0, [r7, #28]
 800d9c6:	f7f8 fcd1 	bl	800636c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d021      	beq.n	800da14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d9d0:	7c7a      	ldrb	r2, [r7, #17]
 800d9d2:	4918      	ldr	r1, [pc, #96]	; (800da34 <etharp_query+0x268>)
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	4413      	add	r3, r2
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	440b      	add	r3, r1
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00a      	beq.n	800d9fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d9e4:	7c7a      	ldrb	r2, [r7, #17]
 800d9e6:	4913      	ldr	r1, [pc, #76]	; (800da34 <etharp_query+0x268>)
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	005b      	lsls	r3, r3, #1
 800d9ec:	4413      	add	r3, r2
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	440b      	add	r3, r1
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f8 fc19 	bl	800622c <pbuf_free>
      }
      arp_table[i].q = p;
 800d9fa:	7c7a      	ldrb	r2, [r7, #17]
 800d9fc:	490d      	ldr	r1, [pc, #52]	; (800da34 <etharp_query+0x268>)
 800d9fe:	4613      	mov	r3, r2
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	4413      	add	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	440b      	add	r3, r1
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da12:	e002      	b.n	800da1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800da14:	23ff      	movs	r3, #255	; 0xff
 800da16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800da1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3728      	adds	r7, #40	; 0x28
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	0801261c 	.word	0x0801261c
 800da2c:	080127c8 	.word	0x080127c8
 800da30:	08012694 	.word	0x08012694
 800da34:	200082fc 	.word	0x200082fc
 800da38:	080127d8 	.word	0x080127d8
 800da3c:	080127bc 	.word	0x080127bc
 800da40:	200083ec 	.word	0x200083ec
 800da44:	08012800 	.word	0x08012800

0800da48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08a      	sub	sp, #40	; 0x28
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d106      	bne.n	800da6e <etharp_raw+0x26>
 800da60:	4b3a      	ldr	r3, [pc, #232]	; (800db4c <etharp_raw+0x104>)
 800da62:	f240 4257 	movw	r2, #1111	; 0x457
 800da66:	493a      	ldr	r1, [pc, #232]	; (800db50 <etharp_raw+0x108>)
 800da68:	483a      	ldr	r0, [pc, #232]	; (800db54 <etharp_raw+0x10c>)
 800da6a:	f001 fd27 	bl	800f4bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800da6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da72:	211c      	movs	r1, #28
 800da74:	200e      	movs	r0, #14
 800da76:	f7f8 f8f5 	bl	8005c64 <pbuf_alloc>
 800da7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800da82:	f04f 33ff 	mov.w	r3, #4294967295
 800da86:	e05d      	b.n	800db44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	895b      	ldrh	r3, [r3, #10]
 800da8c:	2b1b      	cmp	r3, #27
 800da8e:	d806      	bhi.n	800da9e <etharp_raw+0x56>
 800da90:	4b2e      	ldr	r3, [pc, #184]	; (800db4c <etharp_raw+0x104>)
 800da92:	f240 4262 	movw	r2, #1122	; 0x462
 800da96:	4930      	ldr	r1, [pc, #192]	; (800db58 <etharp_raw+0x110>)
 800da98:	482e      	ldr	r0, [pc, #184]	; (800db54 <etharp_raw+0x10c>)
 800da9a:	f001 fd0f 	bl	800f4bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800daa4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7f7 f862 	bl	8004b70 <lwip_htons>
 800daac:	4603      	mov	r3, r0
 800daae:	461a      	mov	r2, r3
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800daba:	2b06      	cmp	r3, #6
 800dabc:	d006      	beq.n	800dacc <etharp_raw+0x84>
 800dabe:	4b23      	ldr	r3, [pc, #140]	; (800db4c <etharp_raw+0x104>)
 800dac0:	f240 4269 	movw	r2, #1129	; 0x469
 800dac4:	4925      	ldr	r1, [pc, #148]	; (800db5c <etharp_raw+0x114>)
 800dac6:	4823      	ldr	r0, [pc, #140]	; (800db54 <etharp_raw+0x10c>)
 800dac8:	f001 fcf8 	bl	800f4bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	3308      	adds	r3, #8
 800dad0:	2206      	movs	r2, #6
 800dad2:	6839      	ldr	r1, [r7, #0]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f001 fdcc 	bl	800f672 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	3312      	adds	r3, #18
 800dade:	2206      	movs	r2, #6
 800dae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dae2:	4618      	mov	r0, r3
 800dae4:	f001 fdc5 	bl	800f672 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	330e      	adds	r3, #14
 800daec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daee:	6812      	ldr	r2, [r2, #0]
 800daf0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	3318      	adds	r3, #24
 800daf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf8:	6812      	ldr	r2, [r2, #0]
 800dafa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2200      	movs	r2, #0
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	2200      	movs	r2, #0
 800db04:	f042 0201 	orr.w	r2, r2, #1
 800db08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f042 0208 	orr.w	r2, r2, #8
 800db12:	709a      	strb	r2, [r3, #2]
 800db14:	2200      	movs	r2, #0
 800db16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2206      	movs	r2, #6
 800db1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2204      	movs	r2, #4
 800db22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800db24:	f640 0306 	movw	r3, #2054	; 0x806
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	69b9      	ldr	r1, [r7, #24]
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f001 fb7b 	bl	800f22c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800db36:	69b8      	ldr	r0, [r7, #24]
 800db38:	f7f8 fb78 	bl	800622c <pbuf_free>
  p = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800db40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	0801261c 	.word	0x0801261c
 800db50:	0801276c 	.word	0x0801276c
 800db54:	08012694 	.word	0x08012694
 800db58:	0801281c 	.word	0x0801281c
 800db5c:	08012850 	.word	0x08012850

0800db60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af04      	add	r7, sp, #16
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db7c:	2201      	movs	r2, #1
 800db7e:	9203      	str	r2, [sp, #12]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	9202      	str	r2, [sp, #8]
 800db84:	4a06      	ldr	r2, [pc, #24]	; (800dba0 <etharp_request_dst+0x40>)
 800db86:	9201      	str	r2, [sp, #4]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	4603      	mov	r3, r0
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff ff5a 	bl	800da48 <etharp_raw>
 800db94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	08012de0 	.word	0x08012de0

0800dba4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dbae:	4a05      	ldr	r2, [pc, #20]	; (800dbc4 <etharp_request+0x20>)
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff ffd4 	bl	800db60 <etharp_request_dst>
 800dbb8:	4603      	mov	r3, r0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08012dd8 	.word	0x08012dd8

0800dbc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08e      	sub	sp, #56	; 0x38
 800dbcc:	af04      	add	r7, sp, #16
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dbd2:	4b79      	ldr	r3, [pc, #484]	; (800ddb8 <icmp_input+0x1f0>)
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	f003 030f 	and.w	r3, r3, #15
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800dbe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbea:	2b13      	cmp	r3, #19
 800dbec:	f240 80cd 	bls.w	800dd8a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	895b      	ldrh	r3, [r3, #10]
 800dbf4:	2b03      	cmp	r3, #3
 800dbf6:	f240 80ca 	bls.w	800dd8e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dc04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f000 80b7 	beq.w	800dd7c <icmp_input+0x1b4>
 800dc0e:	2b08      	cmp	r3, #8
 800dc10:	f040 80b7 	bne.w	800dd82 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dc14:	4b69      	ldr	r3, [pc, #420]	; (800ddbc <icmp_input+0x1f4>)
 800dc16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc18:	4b67      	ldr	r3, [pc, #412]	; (800ddb8 <icmp_input+0x1f0>)
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc20:	2be0      	cmp	r3, #224	; 0xe0
 800dc22:	f000 80bb 	beq.w	800dd9c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dc26:	4b64      	ldr	r3, [pc, #400]	; (800ddb8 <icmp_input+0x1f0>)
 800dc28:	695b      	ldr	r3, [r3, #20]
 800dc2a:	4a63      	ldr	r2, [pc, #396]	; (800ddb8 <icmp_input+0x1f0>)
 800dc2c:	6812      	ldr	r2, [r2, #0]
 800dc2e:	4611      	mov	r1, r2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 fbed 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f040 80b1 	bne.w	800dda0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	891b      	ldrh	r3, [r3, #8]
 800dc42:	2b07      	cmp	r3, #7
 800dc44:	f240 80a5 	bls.w	800dd92 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc4a:	330e      	adds	r3, #14
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7f8 fa56 	bl	8006100 <pbuf_add_header>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d04b      	beq.n	800dcf2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	891a      	ldrh	r2, [r3, #8]
 800dc5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc60:	4413      	add	r3, r2
 800dc62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	891b      	ldrh	r3, [r3, #8]
 800dc68:	8b7a      	ldrh	r2, [r7, #26]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	f0c0 809a 	bcc.w	800dda4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dc70:	8b7b      	ldrh	r3, [r7, #26]
 800dc72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc76:	4619      	mov	r1, r3
 800dc78:	200e      	movs	r0, #14
 800dc7a:	f7f7 fff3 	bl	8005c64 <pbuf_alloc>
 800dc7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 8090 	beq.w	800dda8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	895b      	ldrh	r3, [r3, #10]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc90:	3308      	adds	r3, #8
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d203      	bcs.n	800dc9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc96:	6978      	ldr	r0, [r7, #20]
 800dc98:	f7f8 fac8 	bl	800622c <pbuf_free>
          goto icmperr;
 800dc9c:	e085      	b.n	800ddaa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dca6:	4618      	mov	r0, r3
 800dca8:	f001 fce3 	bl	800f672 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dcac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6978      	ldr	r0, [r7, #20]
 800dcb2:	f7f8 fa35 	bl	8006120 <pbuf_remove_header>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dcbc:	4b40      	ldr	r3, [pc, #256]	; (800ddc0 <icmp_input+0x1f8>)
 800dcbe:	22b6      	movs	r2, #182	; 0xb6
 800dcc0:	4940      	ldr	r1, [pc, #256]	; (800ddc4 <icmp_input+0x1fc>)
 800dcc2:	4841      	ldr	r0, [pc, #260]	; (800ddc8 <icmp_input+0x200>)
 800dcc4:	f001 fbfa 	bl	800f4bc <iprintf>
          pbuf_free(r);
 800dcc8:	6978      	ldr	r0, [r7, #20]
 800dcca:	f7f8 faaf 	bl	800622c <pbuf_free>
          goto icmperr;
 800dcce:	e06c      	b.n	800ddaa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dcd0:	6879      	ldr	r1, [r7, #4]
 800dcd2:	6978      	ldr	r0, [r7, #20]
 800dcd4:	f7f8 fbc2 	bl	800645c <pbuf_copy>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dcde:	6978      	ldr	r0, [r7, #20]
 800dce0:	f7f8 faa4 	bl	800622c <pbuf_free>
          goto icmperr;
 800dce4:	e061      	b.n	800ddaa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7f8 faa0 	bl	800622c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	607b      	str	r3, [r7, #4]
 800dcf0:	e00f      	b.n	800dd12 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dcf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcf4:	330e      	adds	r3, #14
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7f8 fa11 	bl	8006120 <pbuf_remove_header>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d006      	beq.n	800dd12 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dd04:	4b2e      	ldr	r3, [pc, #184]	; (800ddc0 <icmp_input+0x1f8>)
 800dd06:	22c7      	movs	r2, #199	; 0xc7
 800dd08:	4930      	ldr	r1, [pc, #192]	; (800ddcc <icmp_input+0x204>)
 800dd0a:	482f      	ldr	r0, [pc, #188]	; (800ddc8 <icmp_input+0x200>)
 800dd0c:	f001 fbd6 	bl	800f4bc <iprintf>
          goto icmperr;
 800dd10:	e04b      	b.n	800ddaa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7f8 f9ef 	bl	8006100 <pbuf_add_header>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d12b      	bne.n	800dd80 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd36:	4b20      	ldr	r3, [pc, #128]	; (800ddb8 <icmp_input+0x1f0>)
 800dd38:	691a      	ldr	r2, [r3, #16]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2200      	movs	r2, #0
 800dd42:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	2200      	movs	r2, #0
 800dd48:	709a      	strb	r2, [r3, #2]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	22ff      	movs	r2, #255	; 0xff
 800dd52:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	729a      	strb	r2, [r3, #10]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	9302      	str	r3, [sp, #8]
 800dd62:	2301      	movs	r3, #1
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	23ff      	movs	r3, #255	; 0xff
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	69f9      	ldr	r1, [r7, #28]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 fa75 	bl	800e260 <ip4_output_if>
 800dd76:	4603      	mov	r3, r0
 800dd78:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dd7a:	e001      	b.n	800dd80 <icmp_input+0x1b8>
      break;
 800dd7c:	bf00      	nop
 800dd7e:	e000      	b.n	800dd82 <icmp_input+0x1ba>
      break;
 800dd80:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7f8 fa52 	bl	800622c <pbuf_free>
  return;
 800dd88:	e013      	b.n	800ddb2 <icmp_input+0x1ea>
    goto lenerr;
 800dd8a:	bf00      	nop
 800dd8c:	e002      	b.n	800dd94 <icmp_input+0x1cc>
    goto lenerr;
 800dd8e:	bf00      	nop
 800dd90:	e000      	b.n	800dd94 <icmp_input+0x1cc>
        goto lenerr;
 800dd92:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7f8 fa49 	bl	800622c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd9a:	e00a      	b.n	800ddb2 <icmp_input+0x1ea>
        goto icmperr;
 800dd9c:	bf00      	nop
 800dd9e:	e004      	b.n	800ddaa <icmp_input+0x1e2>
        goto icmperr;
 800dda0:	bf00      	nop
 800dda2:	e002      	b.n	800ddaa <icmp_input+0x1e2>
          goto icmperr;
 800dda4:	bf00      	nop
 800dda6:	e000      	b.n	800ddaa <icmp_input+0x1e2>
          goto icmperr;
 800dda8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7f8 fa3e 	bl	800622c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ddb0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ddb2:	3728      	adds	r7, #40	; 0x28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20004d2c 	.word	0x20004d2c
 800ddbc:	20004d40 	.word	0x20004d40
 800ddc0:	08012894 	.word	0x08012894
 800ddc4:	080128cc 	.word	0x080128cc
 800ddc8:	08012904 	.word	0x08012904
 800ddcc:	0801292c 	.word	0x0801292c

0800ddd0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dddc:	78fb      	ldrb	r3, [r7, #3]
 800ddde:	461a      	mov	r2, r3
 800dde0:	2103      	movs	r1, #3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 f814 	bl	800de10 <icmp_send_response>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ddfc:	78fb      	ldrb	r3, [r7, #3]
 800ddfe:	461a      	mov	r2, r3
 800de00:	210b      	movs	r1, #11
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f804 	bl	800de10 <icmp_send_response>
}
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b08c      	sub	sp, #48	; 0x30
 800de14:	af04      	add	r7, sp, #16
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
 800de1c:	4613      	mov	r3, r2
 800de1e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800de20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de24:	2124      	movs	r1, #36	; 0x24
 800de26:	2022      	movs	r0, #34	; 0x22
 800de28:	f7f7 ff1c 	bl	8005c64 <pbuf_alloc>
 800de2c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d04c      	beq.n	800dece <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	895b      	ldrh	r3, [r3, #10]
 800de38:	2b23      	cmp	r3, #35	; 0x23
 800de3a:	d806      	bhi.n	800de4a <icmp_send_response+0x3a>
 800de3c:	4b26      	ldr	r3, [pc, #152]	; (800ded8 <icmp_send_response+0xc8>)
 800de3e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800de42:	4926      	ldr	r1, [pc, #152]	; (800dedc <icmp_send_response+0xcc>)
 800de44:	4826      	ldr	r0, [pc, #152]	; (800dee0 <icmp_send_response+0xd0>)
 800de46:	f001 fb39 	bl	800f4bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	78fa      	ldrb	r2, [r7, #3]
 800de5a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	78ba      	ldrb	r2, [r7, #2]
 800de60:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2200      	movs	r2, #0
 800de66:	711a      	strb	r2, [r3, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2200      	movs	r2, #0
 800de70:	719a      	strb	r2, [r3, #6]
 800de72:	2200      	movs	r2, #0
 800de74:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	f103 0008 	add.w	r0, r3, #8
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	221c      	movs	r2, #28
 800de84:	4619      	mov	r1, r3
 800de86:	f001 fbf4 	bl	800f672 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de90:	f107 030c 	add.w	r3, r7, #12
 800de94:	4618      	mov	r0, r3
 800de96:	f000 f825 	bl	800dee4 <ip4_route>
 800de9a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d011      	beq.n	800dec6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2200      	movs	r2, #0
 800dea6:	709a      	strb	r2, [r3, #2]
 800dea8:	2200      	movs	r2, #0
 800deaa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800deac:	f107 020c 	add.w	r2, r7, #12
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	9302      	str	r3, [sp, #8]
 800deb4:	2301      	movs	r3, #1
 800deb6:	9301      	str	r3, [sp, #4]
 800deb8:	2300      	movs	r3, #0
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	23ff      	movs	r3, #255	; 0xff
 800debe:	2100      	movs	r1, #0
 800dec0:	69f8      	ldr	r0, [r7, #28]
 800dec2:	f000 f9cd 	bl	800e260 <ip4_output_if>
  }
  pbuf_free(q);
 800dec6:	69f8      	ldr	r0, [r7, #28]
 800dec8:	f7f8 f9b0 	bl	800622c <pbuf_free>
 800decc:	e000      	b.n	800ded0 <icmp_send_response+0xc0>
    return;
 800dece:	bf00      	nop
}
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	08012894 	.word	0x08012894
 800dedc:	08012960 	.word	0x08012960
 800dee0:	08012904 	.word	0x08012904

0800dee4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800deec:	4b33      	ldr	r3, [pc, #204]	; (800dfbc <ip4_route+0xd8>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	e036      	b.n	800df62 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d02b      	beq.n	800df5c <ip4_route+0x78>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df0a:	089b      	lsrs	r3, r3, #2
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d022      	beq.n	800df5c <ip4_route+0x78>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3304      	adds	r3, #4
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d01d      	beq.n	800df5c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3304      	adds	r3, #4
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	405a      	eors	r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	3308      	adds	r3, #8
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4013      	ands	r3, r2
 800df34:	2b00      	cmp	r3, #0
 800df36:	d101      	bne.n	800df3c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	e038      	b.n	800dfae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df42:	f003 0302 	and.w	r3, r3, #2
 800df46:	2b00      	cmp	r3, #0
 800df48:	d108      	bne.n	800df5c <ip4_route+0x78>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	330c      	adds	r3, #12
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	429a      	cmp	r2, r3
 800df56:	d101      	bne.n	800df5c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	e028      	b.n	800dfae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	60fb      	str	r3, [r7, #12]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1c5      	bne.n	800def4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df68:	4b15      	ldr	r3, [pc, #84]	; (800dfc0 <ip4_route+0xdc>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01a      	beq.n	800dfa6 <ip4_route+0xc2>
 800df70:	4b13      	ldr	r3, [pc, #76]	; (800dfc0 <ip4_route+0xdc>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df78:	f003 0301 	and.w	r3, r3, #1
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d012      	beq.n	800dfa6 <ip4_route+0xc2>
 800df80:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <ip4_route+0xdc>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00a      	beq.n	800dfa6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <ip4_route+0xdc>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3304      	adds	r3, #4
 800df96:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d004      	beq.n	800dfa6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	2b7f      	cmp	r3, #127	; 0x7f
 800dfa4:	d101      	bne.n	800dfaa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e001      	b.n	800dfae <ip4_route+0xca>
  }

  return netif_default;
 800dfaa:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <ip4_route+0xdc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	20008290 	.word	0x20008290
 800dfc0:	20008294 	.word	0x20008294

0800dfc4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d016      	beq.n	800e00a <ip4_input_accept+0x46>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d011      	beq.n	800e00a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <ip4_input_accept+0x50>)
 800dfe8:	695a      	ldr	r2, [r3, #20]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3304      	adds	r3, #4
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d008      	beq.n	800e006 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dff4:	4b07      	ldr	r3, [pc, #28]	; (800e014 <ip4_input_accept+0x50>)
 800dff6:	695b      	ldr	r3, [r3, #20]
 800dff8:	6879      	ldr	r1, [r7, #4]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 fa08 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800e000:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e006:	2301      	movs	r3, #1
 800e008:	e000      	b.n	800e00c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20004d2c 	.word	0x20004d2c

0800e018 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	091b      	lsrs	r3, r3, #4
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b04      	cmp	r3, #4
 800e032:	d004      	beq.n	800e03e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7f8 f8f9 	bl	800622c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	e107      	b.n	800e24e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	f003 030f 	and.w	r3, r3, #15
 800e046:	b2db      	uxtb	r3, r3
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	885b      	ldrh	r3, [r3, #2]
 800e052:	b29b      	uxth	r3, r3
 800e054:	4618      	mov	r0, r3
 800e056:	f7f6 fd8b 	bl	8004b70 <lwip_htons>
 800e05a:	4603      	mov	r3, r0
 800e05c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	891b      	ldrh	r3, [r3, #8]
 800e062:	89ba      	ldrh	r2, [r7, #12]
 800e064:	429a      	cmp	r2, r3
 800e066:	d204      	bcs.n	800e072 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e068:	89bb      	ldrh	r3, [r7, #12]
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7f7 ff57 	bl	8005f20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	895b      	ldrh	r3, [r3, #10]
 800e076:	89fa      	ldrh	r2, [r7, #14]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d807      	bhi.n	800e08c <ip4_input+0x74>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	891b      	ldrh	r3, [r3, #8]
 800e080:	89ba      	ldrh	r2, [r7, #12]
 800e082:	429a      	cmp	r2, r3
 800e084:	d802      	bhi.n	800e08c <ip4_input+0x74>
 800e086:	89fb      	ldrh	r3, [r7, #14]
 800e088:	2b13      	cmp	r3, #19
 800e08a:	d804      	bhi.n	800e096 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7f8 f8cd 	bl	800622c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e092:	2300      	movs	r3, #0
 800e094:	e0db      	b.n	800e24e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	4a6f      	ldr	r2, [pc, #444]	; (800e258 <ip4_input+0x240>)
 800e09c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	4a6d      	ldr	r2, [pc, #436]	; (800e258 <ip4_input+0x240>)
 800e0a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e0a6:	4b6c      	ldr	r3, [pc, #432]	; (800e258 <ip4_input+0x240>)
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0ae:	2be0      	cmp	r3, #224	; 0xe0
 800e0b0:	d112      	bne.n	800e0d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <ip4_input+0xba>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <ip4_input+0xba>
      netif = inp;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	613b      	str	r3, [r7, #16]
 800e0d0:	e02a      	b.n	800e128 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	613b      	str	r3, [r7, #16]
 800e0d6:	e027      	b.n	800e128 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e0d8:	6838      	ldr	r0, [r7, #0]
 800e0da:	f7ff ff73 	bl	800dfc4 <ip4_input_accept>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <ip4_input+0xd2>
      netif = inp;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	613b      	str	r3, [r7, #16]
 800e0e8:	e01e      	b.n	800e128 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e0ee:	4b5a      	ldr	r3, [pc, #360]	; (800e258 <ip4_input+0x240>)
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b7f      	cmp	r3, #127	; 0x7f
 800e0f6:	d017      	beq.n	800e128 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e0f8:	4b58      	ldr	r3, [pc, #352]	; (800e25c <ip4_input+0x244>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	613b      	str	r3, [r7, #16]
 800e0fe:	e00e      	b.n	800e11e <ip4_input+0x106>
          if (netif == inp) {
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	429a      	cmp	r2, r3
 800e106:	d006      	beq.n	800e116 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e108:	6938      	ldr	r0, [r7, #16]
 800e10a:	f7ff ff5b 	bl	800dfc4 <ip4_input_accept>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d108      	bne.n	800e126 <ip4_input+0x10e>
 800e114:	e000      	b.n	800e118 <ip4_input+0x100>
            continue;
 800e116:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	613b      	str	r3, [r7, #16]
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1ed      	bne.n	800e100 <ip4_input+0xe8>
 800e124:	e000      	b.n	800e128 <ip4_input+0x110>
            break;
 800e126:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e128:	4b4b      	ldr	r3, [pc, #300]	; (800e258 <ip4_input+0x240>)
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 f96e 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e13a:	4b47      	ldr	r3, [pc, #284]	; (800e258 <ip4_input+0x240>)
 800e13c:	691b      	ldr	r3, [r3, #16]
 800e13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e142:	2be0      	cmp	r3, #224	; 0xe0
 800e144:	d104      	bne.n	800e150 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7f8 f870 	bl	800622c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e14c:	2300      	movs	r3, #0
 800e14e:	e07e      	b.n	800e24e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d104      	bne.n	800e160 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7f8 f868 	bl	800622c <pbuf_free>
    return ERR_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	e076      	b.n	800e24e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	88db      	ldrh	r3, [r3, #6]
 800e164:	b29b      	uxth	r3, r3
 800e166:	461a      	mov	r2, r3
 800e168:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e16c:	4013      	ands	r3, r2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fc92 	bl	800ea9c <ip4_reass>
 800e178:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <ip4_input+0x16c>
      return ERR_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	e064      	b.n	800e24e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e18a:	4a33      	ldr	r2, [pc, #204]	; (800e258 <ip4_input+0x240>)
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e190:	4a31      	ldr	r2, [pc, #196]	; (800e258 <ip4_input+0x240>)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e196:	4a30      	ldr	r2, [pc, #192]	; (800e258 <ip4_input+0x240>)
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	4b2a      	ldr	r3, [pc, #168]	; (800e258 <ip4_input+0x240>)
 800e1ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e1b0:	89fb      	ldrh	r3, [r7, #14]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7f7 ffb3 	bl	8006120 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	7a5b      	ldrb	r3, [r3, #9]
 800e1be:	2b11      	cmp	r3, #17
 800e1c0:	d006      	beq.n	800e1d0 <ip4_input+0x1b8>
 800e1c2:	2b11      	cmp	r3, #17
 800e1c4:	dc13      	bgt.n	800e1ee <ip4_input+0x1d6>
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d00c      	beq.n	800e1e4 <ip4_input+0x1cc>
 800e1ca:	2b06      	cmp	r3, #6
 800e1cc:	d005      	beq.n	800e1da <ip4_input+0x1c2>
 800e1ce:	e00e      	b.n	800e1ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e1d0:	6839      	ldr	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7fe fc68 	bl	800caa8 <udp_input>
        break;
 800e1d8:	e026      	b.n	800e228 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7fa f889 	bl	80082f4 <tcp_input>
        break;
 800e1e2:	e021      	b.n	800e228 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff fcee 	bl	800dbc8 <icmp_input>
        break;
 800e1ec:	e01c      	b.n	800e228 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1ee:	4b1a      	ldr	r3, [pc, #104]	; (800e258 <ip4_input+0x240>)
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	6939      	ldr	r1, [r7, #16]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f000 f90b 	bl	800e410 <ip4_addr_isbroadcast_u32>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d10f      	bne.n	800e220 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e200:	4b15      	ldr	r3, [pc, #84]	; (800e258 <ip4_input+0x240>)
 800e202:	695b      	ldr	r3, [r3, #20]
 800e204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e208:	2be0      	cmp	r3, #224	; 0xe0
 800e20a:	d009      	beq.n	800e220 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e20c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7f7 fff7 	bl	8006206 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e218:	2102      	movs	r1, #2
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fdd8 	bl	800ddd0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7f8 f803 	bl	800622c <pbuf_free>
        break;
 800e226:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e228:	4b0b      	ldr	r3, [pc, #44]	; (800e258 <ip4_input+0x240>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e22e:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <ip4_input+0x240>)
 800e230:	2200      	movs	r2, #0
 800e232:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e234:	4b08      	ldr	r3, [pc, #32]	; (800e258 <ip4_input+0x240>)
 800e236:	2200      	movs	r2, #0
 800e238:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e23a:	4b07      	ldr	r3, [pc, #28]	; (800e258 <ip4_input+0x240>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e240:	4b05      	ldr	r3, [pc, #20]	; (800e258 <ip4_input+0x240>)
 800e242:	2200      	movs	r2, #0
 800e244:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e246:	4b04      	ldr	r3, [pc, #16]	; (800e258 <ip4_input+0x240>)
 800e248:	2200      	movs	r2, #0
 800e24a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20004d2c 	.word	0x20004d2c
 800e25c:	20008290 	.word	0x20008290

0800e260 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08a      	sub	sp, #40	; 0x28
 800e264:	af04      	add	r7, sp, #16
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d009      	beq.n	800e28c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <ip4_output_if+0x26>
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d102      	bne.n	800e28c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	3304      	adds	r3, #4
 800e28a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e28c:	78fa      	ldrb	r2, [r7, #3]
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	9302      	str	r3, [sp, #8]
 800e292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	6979      	ldr	r1, [r7, #20]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f000 f805 	bl	800e2b4 <ip4_output_if_src>
 800e2aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	607a      	str	r2, [r7, #4]
 800e2c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	7b9b      	ldrb	r3, [r3, #14]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d006      	beq.n	800e2d8 <ip4_output_if_src+0x24>
 800e2ca:	4b4b      	ldr	r3, [pc, #300]	; (800e3f8 <ip4_output_if_src+0x144>)
 800e2cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e2d0:	494a      	ldr	r1, [pc, #296]	; (800e3fc <ip4_output_if_src+0x148>)
 800e2d2:	484b      	ldr	r0, [pc, #300]	; (800e400 <ip4_output_if_src+0x14c>)
 800e2d4:	f001 f8f2 	bl	800f4bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d060      	beq.n	800e3a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e2de:	2314      	movs	r3, #20
 800e2e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e2e2:	2114      	movs	r1, #20
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7f7 ff0b 	bl	8006100 <pbuf_add_header>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e2f0:	f06f 0301 	mvn.w	r3, #1
 800e2f4:	e07c      	b.n	800e3f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	895b      	ldrh	r3, [r3, #10]
 800e300:	2b13      	cmp	r3, #19
 800e302:	d806      	bhi.n	800e312 <ip4_output_if_src+0x5e>
 800e304:	4b3c      	ldr	r3, [pc, #240]	; (800e3f8 <ip4_output_if_src+0x144>)
 800e306:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e30a:	493e      	ldr	r1, [pc, #248]	; (800e404 <ip4_output_if_src+0x150>)
 800e30c:	483c      	ldr	r0, [pc, #240]	; (800e400 <ip4_output_if_src+0x14c>)
 800e30e:	f001 f8d5 	bl	800f4bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	78fa      	ldrb	r2, [r7, #3]
 800e316:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e31e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e328:	8b7b      	ldrh	r3, [r7, #26]
 800e32a:	089b      	lsrs	r3, r3, #2
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e334:	b2da      	uxtb	r2, r3
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e340:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	891b      	ldrh	r3, [r3, #8]
 800e346:	4618      	mov	r0, r3
 800e348:	f7f6 fc12 	bl	8004b70 <lwip_htons>
 800e34c:	4603      	mov	r3, r0
 800e34e:	461a      	mov	r2, r3
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	2200      	movs	r2, #0
 800e358:	719a      	strb	r2, [r3, #6]
 800e35a:	2200      	movs	r2, #0
 800e35c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e35e:	4b2a      	ldr	r3, [pc, #168]	; (800e408 <ip4_output_if_src+0x154>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	4618      	mov	r0, r3
 800e364:	f7f6 fc04 	bl	8004b70 <lwip_htons>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e370:	4b25      	ldr	r3, [pc, #148]	; (800e408 <ip4_output_if_src+0x154>)
 800e372:	881b      	ldrh	r3, [r3, #0]
 800e374:	3301      	adds	r3, #1
 800e376:	b29a      	uxth	r2, r3
 800e378:	4b23      	ldr	r3, [pc, #140]	; (800e408 <ip4_output_if_src+0x154>)
 800e37a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d104      	bne.n	800e38c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e382:	4b22      	ldr	r3, [pc, #136]	; (800e40c <ip4_output_if_src+0x158>)
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	60da      	str	r2, [r3, #12]
 800e38a:	e003      	b.n	800e394 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	2200      	movs	r2, #0
 800e398:	729a      	strb	r2, [r3, #10]
 800e39a:	2200      	movs	r2, #0
 800e39c:	72da      	strb	r2, [r3, #11]
 800e39e:	e00f      	b.n	800e3c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	895b      	ldrh	r3, [r3, #10]
 800e3a4:	2b13      	cmp	r3, #19
 800e3a6:	d802      	bhi.n	800e3ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e3a8:	f06f 0301 	mvn.w	r3, #1
 800e3ac:	e020      	b.n	800e3f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e3ba:	f107 0314 	add.w	r3, r7, #20
 800e3be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00c      	beq.n	800e3e2 <ip4_output_if_src+0x12e>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	891a      	ldrh	r2, [r3, #8]
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d906      	bls.n	800e3e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 fd53 	bl	800ee84 <ip4_frag>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	e006      	b.n	800e3f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	68f9      	ldr	r1, [r7, #12]
 800e3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3ec:	4798      	blx	r3
 800e3ee:	4603      	mov	r3, r0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3720      	adds	r7, #32
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	0801298c 	.word	0x0801298c
 800e3fc:	080129c0 	.word	0x080129c0
 800e400:	080129cc 	.word	0x080129cc
 800e404:	080129f4 	.word	0x080129f4
 800e408:	200083ee 	.word	0x200083ee
 800e40c:	08012dd4 	.word	0x08012dd4

0800e410 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e424:	d002      	beq.n	800e42c <ip4_addr_isbroadcast_u32+0x1c>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e02a      	b.n	800e486 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	e021      	b.n	800e486 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	3304      	adds	r3, #4
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d101      	bne.n	800e452 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	e019      	b.n	800e486 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	3304      	adds	r3, #4
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	405a      	eors	r2, r3
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	3308      	adds	r3, #8
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4013      	ands	r3, r2
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10d      	bne.n	800e484 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	43da      	mvns	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3308      	adds	r3, #8
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d101      	bne.n	800e484 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e480:	2301      	movs	r3, #1
 800e482:	e000      	b.n	800e486 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e484:	2300      	movs	r3, #0
  }
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
	...

0800e494 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e49e:	4b12      	ldr	r3, [pc, #72]	; (800e4e8 <ip_reass_tmr+0x54>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e4a4:	e018      	b.n	800e4d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	7fdb      	ldrb	r3, [r3, #31]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <ip_reass_tmr+0x32>
      r->timer--;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	7fdb      	ldrb	r3, [r3, #31]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	e008      	b.n	800e4d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e4d0:	68b9      	ldr	r1, [r7, #8]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f80a 	bl	800e4ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1e3      	bne.n	800e4a6 <ip_reass_tmr+0x12>
    }
  }
}
 800e4de:	bf00      	nop
 800e4e0:	bf00      	nop
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	200083f0 	.word	0x200083f0

0800e4ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e4fa:	683a      	ldr	r2, [r7, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d105      	bne.n	800e50e <ip_reass_free_complete_datagram+0x22>
 800e502:	4b45      	ldr	r3, [pc, #276]	; (800e618 <ip_reass_free_complete_datagram+0x12c>)
 800e504:	22ab      	movs	r2, #171	; 0xab
 800e506:	4945      	ldr	r1, [pc, #276]	; (800e61c <ip_reass_free_complete_datagram+0x130>)
 800e508:	4845      	ldr	r0, [pc, #276]	; (800e620 <ip_reass_free_complete_datagram+0x134>)
 800e50a:	f000 ffd7 	bl	800f4bc <iprintf>
  if (prev != NULL) {
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00a      	beq.n	800e52a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d005      	beq.n	800e52a <ip_reass_free_complete_datagram+0x3e>
 800e51e:	4b3e      	ldr	r3, [pc, #248]	; (800e618 <ip_reass_free_complete_datagram+0x12c>)
 800e520:	22ad      	movs	r2, #173	; 0xad
 800e522:	4940      	ldr	r1, [pc, #256]	; (800e624 <ip_reass_free_complete_datagram+0x138>)
 800e524:	483e      	ldr	r0, [pc, #248]	; (800e620 <ip_reass_free_complete_datagram+0x134>)
 800e526:	f000 ffc9 	bl	800f4bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	889b      	ldrh	r3, [r3, #4]
 800e536:	b29b      	uxth	r3, r3
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d12a      	bne.n	800e592 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	6858      	ldr	r0, [r3, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	3308      	adds	r3, #8
 800e552:	2214      	movs	r2, #20
 800e554:	4619      	mov	r1, r3
 800e556:	f001 f88c 	bl	800f672 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e55a:	2101      	movs	r1, #1
 800e55c:	69b8      	ldr	r0, [r7, #24]
 800e55e:	f7ff fc47 	bl	800ddf0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e562:	69b8      	ldr	r0, [r7, #24]
 800e564:	f7f7 feea 	bl	800633c <pbuf_clen>
 800e568:	4603      	mov	r3, r0
 800e56a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e56c:	8bfa      	ldrh	r2, [r7, #30]
 800e56e:	8a7b      	ldrh	r3, [r7, #18]
 800e570:	4413      	add	r3, r2
 800e572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e576:	db05      	blt.n	800e584 <ip_reass_free_complete_datagram+0x98>
 800e578:	4b27      	ldr	r3, [pc, #156]	; (800e618 <ip_reass_free_complete_datagram+0x12c>)
 800e57a:	22bc      	movs	r2, #188	; 0xbc
 800e57c:	492a      	ldr	r1, [pc, #168]	; (800e628 <ip_reass_free_complete_datagram+0x13c>)
 800e57e:	4828      	ldr	r0, [pc, #160]	; (800e620 <ip_reass_free_complete_datagram+0x134>)
 800e580:	f000 ff9c 	bl	800f4bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e584:	8bfa      	ldrh	r2, [r7, #30]
 800e586:	8a7b      	ldrh	r3, [r7, #18]
 800e588:	4413      	add	r3, r2
 800e58a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e58c:	69b8      	ldr	r0, [r7, #24]
 800e58e:	f7f7 fe4d 	bl	800622c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e598:	e01f      	b.n	800e5da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7f7 fec6 	bl	800633c <pbuf_clen>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e5b4:	8bfa      	ldrh	r2, [r7, #30]
 800e5b6:	8a7b      	ldrh	r3, [r7, #18]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5be:	db05      	blt.n	800e5cc <ip_reass_free_complete_datagram+0xe0>
 800e5c0:	4b15      	ldr	r3, [pc, #84]	; (800e618 <ip_reass_free_complete_datagram+0x12c>)
 800e5c2:	22cc      	movs	r2, #204	; 0xcc
 800e5c4:	4918      	ldr	r1, [pc, #96]	; (800e628 <ip_reass_free_complete_datagram+0x13c>)
 800e5c6:	4816      	ldr	r0, [pc, #88]	; (800e620 <ip_reass_free_complete_datagram+0x134>)
 800e5c8:	f000 ff78 	bl	800f4bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e5cc:	8bfa      	ldrh	r2, [r7, #30]
 800e5ce:	8a7b      	ldrh	r3, [r7, #18]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f7f7 fe29 	bl	800622c <pbuf_free>
  while (p != NULL) {
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1dc      	bne.n	800e59a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f8c2 	bl	800e76c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e5e8:	4b10      	ldr	r3, [pc, #64]	; (800e62c <ip_reass_free_complete_datagram+0x140>)
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	8bfa      	ldrh	r2, [r7, #30]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d905      	bls.n	800e5fe <ip_reass_free_complete_datagram+0x112>
 800e5f2:	4b09      	ldr	r3, [pc, #36]	; (800e618 <ip_reass_free_complete_datagram+0x12c>)
 800e5f4:	22d2      	movs	r2, #210	; 0xd2
 800e5f6:	490e      	ldr	r1, [pc, #56]	; (800e630 <ip_reass_free_complete_datagram+0x144>)
 800e5f8:	4809      	ldr	r0, [pc, #36]	; (800e620 <ip_reass_free_complete_datagram+0x134>)
 800e5fa:	f000 ff5f 	bl	800f4bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e5fe:	4b0b      	ldr	r3, [pc, #44]	; (800e62c <ip_reass_free_complete_datagram+0x140>)
 800e600:	881a      	ldrh	r2, [r3, #0]
 800e602:	8bfb      	ldrh	r3, [r7, #30]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	b29a      	uxth	r2, r3
 800e608:	4b08      	ldr	r3, [pc, #32]	; (800e62c <ip_reass_free_complete_datagram+0x140>)
 800e60a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e60c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	08012a24 	.word	0x08012a24
 800e61c:	08012a60 	.word	0x08012a60
 800e620:	08012a6c 	.word	0x08012a6c
 800e624:	08012a94 	.word	0x08012a94
 800e628:	08012aa8 	.word	0x08012aa8
 800e62c:	200083f4 	.word	0x200083f4
 800e630:	08012ac8 	.word	0x08012ac8

0800e634 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b08a      	sub	sp, #40	; 0x28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e642:	2300      	movs	r3, #0
 800e644:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e652:	4b28      	ldr	r3, [pc, #160]	; (800e6f4 <ip_reass_remove_oldest_datagram+0xc0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e658:	e030      	b.n	800e6bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	695a      	ldr	r2, [r3, #20]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	429a      	cmp	r2, r3
 800e664:	d10c      	bne.n	800e680 <ip_reass_remove_oldest_datagram+0x4c>
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	699a      	ldr	r2, [r3, #24]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d106      	bne.n	800e680 <ip_reass_remove_oldest_datagram+0x4c>
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	899a      	ldrh	r2, [r3, #12]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	889b      	ldrh	r3, [r3, #4]
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d014      	beq.n	800e6aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	3301      	adds	r3, #1
 800e684:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	61bb      	str	r3, [r7, #24]
 800e694:	e009      	b.n	800e6aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	7fda      	ldrb	r2, [r3, #31]
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	7fdb      	ldrb	r3, [r3, #31]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d803      	bhi.n	800e6aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1cb      	bne.n	800e65a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d008      	beq.n	800e6da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e6c8:	69b9      	ldr	r1, [r7, #24]
 800e6ca:	6a38      	ldr	r0, [r7, #32]
 800e6cc:	f7ff ff0e 	bl	800e4ec <ip_reass_free_complete_datagram>
 800e6d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e6d2:	697a      	ldr	r2, [r7, #20]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e6da:	697a      	ldr	r2, [r7, #20]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	da02      	bge.n	800e6e8 <ip_reass_remove_oldest_datagram+0xb4>
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	dcac      	bgt.n	800e642 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e6e8:	697b      	ldr	r3, [r7, #20]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3728      	adds	r7, #40	; 0x28
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	200083f0 	.word	0x200083f0

0800e6f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e702:	2004      	movs	r0, #4
 800e704:	f7f6 feac 	bl	8005460 <memp_malloc>
 800e708:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d110      	bne.n	800e732 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e710:	6839      	ldr	r1, [r7, #0]
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff ff8e 	bl	800e634 <ip_reass_remove_oldest_datagram>
 800e718:	4602      	mov	r2, r0
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	4293      	cmp	r3, r2
 800e71e:	dc03      	bgt.n	800e728 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e720:	2004      	movs	r0, #4
 800e722:	f7f6 fe9d 	bl	8005460 <memp_malloc>
 800e726:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d101      	bne.n	800e732 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	e016      	b.n	800e760 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e732:	2220      	movs	r2, #32
 800e734:	2100      	movs	r1, #0
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f000 ff25 	bl	800f586 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	220f      	movs	r2, #15
 800e740:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e742:	4b09      	ldr	r3, [pc, #36]	; (800e768 <ip_reass_enqueue_new_datagram+0x70>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e74a:	4a07      	ldr	r2, [pc, #28]	; (800e768 <ip_reass_enqueue_new_datagram+0x70>)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	3308      	adds	r3, #8
 800e754:	2214      	movs	r2, #20
 800e756:	6879      	ldr	r1, [r7, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 ff8a 	bl	800f672 <memcpy>
  return ipr;
 800e75e:	68fb      	ldr	r3, [r7, #12]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	200083f0 	.word	0x200083f0

0800e76c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e776:	4b10      	ldr	r3, [pc, #64]	; (800e7b8 <ip_reass_dequeue_datagram+0x4c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d104      	bne.n	800e78a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a0c      	ldr	r2, [pc, #48]	; (800e7b8 <ip_reass_dequeue_datagram+0x4c>)
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	e00d      	b.n	800e7a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d106      	bne.n	800e79e <ip_reass_dequeue_datagram+0x32>
 800e790:	4b0a      	ldr	r3, [pc, #40]	; (800e7bc <ip_reass_dequeue_datagram+0x50>)
 800e792:	f240 1245 	movw	r2, #325	; 0x145
 800e796:	490a      	ldr	r1, [pc, #40]	; (800e7c0 <ip_reass_dequeue_datagram+0x54>)
 800e798:	480a      	ldr	r0, [pc, #40]	; (800e7c4 <ip_reass_dequeue_datagram+0x58>)
 800e79a:	f000 fe8f 	bl	800f4bc <iprintf>
    prev->next = ipr->next;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	2004      	movs	r0, #4
 800e7aa:	f7f6 fec9 	bl	8005540 <memp_free>
}
 800e7ae:	bf00      	nop
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	200083f0 	.word	0x200083f0
 800e7bc:	08012a24 	.word	0x08012a24
 800e7c0:	08012aec 	.word	0x08012aec
 800e7c4:	08012a6c 	.word	0x08012a6c

0800e7c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08c      	sub	sp, #48	; 0x30
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	885b      	ldrh	r3, [r3, #2]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f6 f9c1 	bl	8004b70 <lwip_htons>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e800:	7e7b      	ldrb	r3, [r7, #25]
 800e802:	b29b      	uxth	r3, r3
 800e804:	8b7a      	ldrh	r2, [r7, #26]
 800e806:	429a      	cmp	r2, r3
 800e808:	d202      	bcs.n	800e810 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e80a:	f04f 33ff 	mov.w	r3, #4294967295
 800e80e:	e135      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e810:	7e7b      	ldrb	r3, [r7, #25]
 800e812:	b29b      	uxth	r3, r3
 800e814:	8b7a      	ldrh	r2, [r7, #26]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	88db      	ldrh	r3, [r3, #6]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7f6 f9a5 	bl	8004b70 <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	00db      	lsls	r3, r3, #3
 800e830:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
 800e83e:	2200      	movs	r2, #0
 800e840:	705a      	strb	r2, [r3, #1]
 800e842:	2200      	movs	r2, #0
 800e844:	709a      	strb	r2, [r3, #2]
 800e846:	2200      	movs	r2, #0
 800e848:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	8afa      	ldrh	r2, [r7, #22]
 800e84e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e850:	8afa      	ldrh	r2, [r7, #22]
 800e852:	8b7b      	ldrh	r3, [r7, #26]
 800e854:	4413      	add	r3, r2
 800e856:	b29a      	uxth	r2, r3
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	88db      	ldrh	r3, [r3, #6]
 800e860:	b29b      	uxth	r3, r3
 800e862:	8afa      	ldrh	r2, [r7, #22]
 800e864:	429a      	cmp	r2, r3
 800e866:	d902      	bls.n	800e86e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e868:	f04f 33ff 	mov.w	r3, #4294967295
 800e86c:	e106      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	627b      	str	r3, [r7, #36]	; 0x24
 800e874:	e068      	b.n	800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	889b      	ldrh	r3, [r3, #4]
 800e880:	b29a      	uxth	r2, r3
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	889b      	ldrh	r3, [r3, #4]
 800e886:	b29b      	uxth	r3, r3
 800e888:	429a      	cmp	r2, r3
 800e88a:	d235      	bcs.n	800e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e890:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	2b00      	cmp	r3, #0
 800e896:	d020      	beq.n	800e8da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	889b      	ldrh	r3, [r3, #4]
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	88db      	ldrh	r3, [r3, #6]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d307      	bcc.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	88db      	ldrh	r3, [r3, #6]
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	889b      	ldrh	r3, [r3, #4]
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d902      	bls.n	800e8be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	e0de      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	88db      	ldrh	r3, [r3, #6]
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	889b      	ldrh	r3, [r3, #4]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d03d      	beq.n	800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e8d8:	e03a      	b.n	800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	88db      	ldrh	r3, [r3, #6]
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	889b      	ldrh	r3, [r3, #4]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d902      	bls.n	800e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ee:	e0c5      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	605a      	str	r2, [r3, #4]
      break;
 800e8f6:	e02b      	b.n	800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	889b      	ldrh	r3, [r3, #4]
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	889b      	ldrh	r3, [r3, #4]
 800e902:	b29b      	uxth	r3, r3
 800e904:	429a      	cmp	r2, r3
 800e906:	d102      	bne.n	800e90e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e908:	f04f 33ff 	mov.w	r3, #4294967295
 800e90c:	e0b6      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	889b      	ldrh	r3, [r3, #4]
 800e912:	b29a      	uxth	r2, r3
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	88db      	ldrh	r3, [r3, #6]
 800e918:	b29b      	uxth	r3, r3
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d202      	bcs.n	800e924 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	e0ab      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	88db      	ldrh	r3, [r3, #6]
 800e92e:	b29a      	uxth	r2, r3
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	889b      	ldrh	r3, [r3, #4]
 800e934:	b29b      	uxth	r3, r3
 800e936:	429a      	cmp	r2, r3
 800e938:	d001      	beq.n	800e93e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d193      	bne.n	800e876 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e94e:	e000      	b.n	800e952 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e950:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	d12d      	bne.n	800e9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d01c      	beq.n	800e998 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	88db      	ldrh	r3, [r3, #6]
 800e962:	b29a      	uxth	r2, r3
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	889b      	ldrh	r3, [r3, #4]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d906      	bls.n	800e97c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e96e:	4b45      	ldr	r3, [pc, #276]	; (800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e970:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e974:	4944      	ldr	r1, [pc, #272]	; (800ea88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e976:	4845      	ldr	r0, [pc, #276]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e978:	f000 fda0 	bl	800f4bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	88db      	ldrh	r3, [r3, #6]
 800e986:	b29a      	uxth	r2, r3
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	889b      	ldrh	r3, [r3, #4]
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	429a      	cmp	r2, r3
 800e990:	d010      	beq.n	800e9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	623b      	str	r3, [r7, #32]
 800e996:	e00d      	b.n	800e9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d006      	beq.n	800e9ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e9a0:	4b38      	ldr	r3, [pc, #224]	; (800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9a2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e9a6:	493a      	ldr	r1, [pc, #232]	; (800ea90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e9a8:	4838      	ldr	r0, [pc, #224]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9aa:	f000 fd87 	bl	800f4bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d105      	bne.n	800e9c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	7f9b      	ldrb	r3, [r3, #30]
 800e9be:	f003 0301 	and.w	r3, r3, #1
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d059      	beq.n	800ea7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d04f      	beq.n	800ea6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d006      	beq.n	800e9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	889b      	ldrh	r3, [r3, #4]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	623b      	str	r3, [r7, #32]
 800e9e6:	e041      	b.n	800ea6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e9f2:	e012      	b.n	800ea1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	88db      	ldrh	r3, [r3, #6]
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	889b      	ldrh	r3, [r3, #4]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d002      	beq.n	800ea10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	623b      	str	r3, [r7, #32]
            break;
 800ea0e:	e007      	b.n	800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ea14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e9      	bne.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d022      	beq.n	800ea6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d106      	bne.n	800ea3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ea2e:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea30:	f240 12df 	movw	r2, #479	; 0x1df
 800ea34:	4917      	ldr	r1, [pc, #92]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea36:	4815      	ldr	r0, [pc, #84]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea38:	f000 fd40 	bl	800f4bc <iprintf>
          LWIP_ASSERT("sanity check",
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d106      	bne.n	800ea56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ea48:	4b0e      	ldr	r3, [pc, #56]	; (800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ea4e:	4911      	ldr	r1, [pc, #68]	; (800ea94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ea50:	480e      	ldr	r0, [pc, #56]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea52:	f000 fd33 	bl	800f4bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d006      	beq.n	800ea6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ea5e:	4b09      	ldr	r3, [pc, #36]	; (800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ea64:	490c      	ldr	r1, [pc, #48]	; (800ea98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ea66:	4809      	ldr	r0, [pc, #36]	; (800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea68:	f000 fd28 	bl	800f4bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	bf14      	ite	ne
 800ea72:	2301      	movne	r3, #1
 800ea74:	2300      	moveq	r3, #0
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	e000      	b.n	800ea7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3730      	adds	r7, #48	; 0x30
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	08012a24 	.word	0x08012a24
 800ea88:	08012b08 	.word	0x08012b08
 800ea8c:	08012a6c 	.word	0x08012a6c
 800ea90:	08012b28 	.word	0x08012b28
 800ea94:	08012b60 	.word	0x08012b60
 800ea98:	08012b70 	.word	0x08012b70

0800ea9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08e      	sub	sp, #56	; 0x38
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	f003 030f 	and.w	r3, r3, #15
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	2b14      	cmp	r3, #20
 800eaba:	f040 8171 	bne.w	800eda0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac0:	88db      	ldrh	r3, [r3, #6]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7f6 f853 	bl	8004b70 <lwip_htons>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f6 f847 	bl	8004b70 <lwip_htons>
 800eae2:	4603      	mov	r3, r0
 800eae4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	f003 030f 	and.w	r3, r3, #15
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eaf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eafe:	429a      	cmp	r2, r3
 800eb00:	f0c0 8150 	bcc.w	800eda4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eb04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7f7 fc13 	bl	800633c <pbuf_clen>
 800eb16:	4603      	mov	r3, r0
 800eb18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eb1a:	4b8c      	ldr	r3, [pc, #560]	; (800ed4c <ip4_reass+0x2b0>)
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	8c3b      	ldrh	r3, [r7, #32]
 800eb22:	4413      	add	r3, r2
 800eb24:	2b0a      	cmp	r3, #10
 800eb26:	dd10      	ble.n	800eb4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb28:	8c3b      	ldrh	r3, [r7, #32]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb2e:	f7ff fd81 	bl	800e634 <ip_reass_remove_oldest_datagram>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 8137 	beq.w	800eda8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eb3a:	4b84      	ldr	r3, [pc, #528]	; (800ed4c <ip4_reass+0x2b0>)
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	8c3b      	ldrh	r3, [r7, #32]
 800eb42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eb44:	2b0a      	cmp	r3, #10
 800eb46:	f300 812f 	bgt.w	800eda8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb4a:	4b81      	ldr	r3, [pc, #516]	; (800ed50 <ip4_reass+0x2b4>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	633b      	str	r3, [r7, #48]	; 0x30
 800eb50:	e015      	b.n	800eb7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	695a      	ldr	r2, [r3, #20]
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d10c      	bne.n	800eb78 <ip4_reass+0xdc>
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	699a      	ldr	r2, [r3, #24]
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d106      	bne.n	800eb78 <ip4_reass+0xdc>
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	899a      	ldrh	r2, [r3, #12]
 800eb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb70:	889b      	ldrh	r3, [r3, #4]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d006      	beq.n	800eb86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1e6      	bne.n	800eb52 <ip4_reass+0xb6>
 800eb84:	e000      	b.n	800eb88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eb86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d109      	bne.n	800eba2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb8e:	8c3b      	ldrh	r3, [r7, #32]
 800eb90:	4619      	mov	r1, r3
 800eb92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb94:	f7ff fdb0 	bl	800e6f8 <ip_reass_enqueue_new_datagram>
 800eb98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d11c      	bne.n	800ebda <ip4_reass+0x13e>
      goto nullreturn;
 800eba0:	e105      	b.n	800edae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	88db      	ldrh	r3, [r3, #6]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f5 ffe1 	bl	8004b70 <lwip_htons>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d110      	bne.n	800ebda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebba:	89db      	ldrh	r3, [r3, #14]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7f5 ffd7 	bl	8004b70 <lwip_htons>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d006      	beq.n	800ebda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	3308      	adds	r3, #8
 800ebd0:	2214      	movs	r2, #20
 800ebd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 fd4c 	bl	800f672 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	88db      	ldrh	r3, [r3, #6]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	f003 0320 	and.w	r3, r3, #32
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bf0c      	ite	eq
 800ebe8:	2301      	moveq	r3, #1
 800ebea:	2300      	movne	r3, #0
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00e      	beq.n	800ec14 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ebf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ebf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebfa:	4413      	add	r3, r2
 800ebfc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ebfe:	8b7a      	ldrh	r2, [r7, #26]
 800ec00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec02:	429a      	cmp	r2, r3
 800ec04:	f0c0 80a0 	bcc.w	800ed48 <ip4_reass+0x2ac>
 800ec08:	8b7b      	ldrh	r3, [r7, #26]
 800ec0a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	f200 809a 	bhi.w	800ed48 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	6879      	ldr	r1, [r7, #4]
 800ec18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec1a:	f7ff fdd5 	bl	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate>
 800ec1e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec26:	f000 809b 	beq.w	800ed60 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ec2a:	4b48      	ldr	r3, [pc, #288]	; (800ed4c <ip4_reass+0x2b0>)
 800ec2c:	881a      	ldrh	r2, [r3, #0]
 800ec2e:	8c3b      	ldrh	r3, [r7, #32]
 800ec30:	4413      	add	r3, r2
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	4b45      	ldr	r3, [pc, #276]	; (800ed4c <ip4_reass+0x2b0>)
 800ec36:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00d      	beq.n	800ec5a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec42:	4413      	add	r3, r2
 800ec44:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	8a7a      	ldrh	r2, [r7, #18]
 800ec4a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	7f9b      	ldrb	r3, [r3, #30]
 800ec50:	f043 0301 	orr.w	r3, r3, #1
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d171      	bne.n	800ed44 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	8b9b      	ldrh	r3, [r3, #28]
 800ec64:	3314      	adds	r3, #20
 800ec66:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	3308      	adds	r3, #8
 800ec7e:	2214      	movs	r2, #20
 800ec80:	4619      	mov	r1, r3
 800ec82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec84:	f000 fcf5 	bl	800f672 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec88:	8a3b      	ldrh	r3, [r7, #16]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7f5 ff70 	bl	8004b70 <lwip_htons>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
 800ec94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec96:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	719a      	strb	r2, [r3, #6]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca4:	2200      	movs	r2, #0
 800eca6:	729a      	strb	r2, [r3, #10]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ecb2:	e00d      	b.n	800ecd0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ecb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ecba:	2114      	movs	r1, #20
 800ecbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecbe:	f7f7 fa2f 	bl	8006120 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ecc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7f7 fb73 	bl	80063b0 <pbuf_cat>
      r = iprh->next_pbuf;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ecd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d1ee      	bne.n	800ecb4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ecd6:	4b1e      	ldr	r3, [pc, #120]	; (800ed50 <ip4_reass+0x2b4>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d102      	bne.n	800ece6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ece0:	2300      	movs	r3, #0
 800ece2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ece4:	e010      	b.n	800ed08 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ece6:	4b1a      	ldr	r3, [pc, #104]	; (800ed50 <ip4_reass+0x2b4>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecec:	e007      	b.n	800ecfe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d006      	beq.n	800ed06 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1f4      	bne.n	800ecee <ip4_reass+0x252>
 800ed04:	e000      	b.n	800ed08 <ip4_reass+0x26c>
          break;
 800ed06:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0c:	f7ff fd2e 	bl	800e76c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7f7 fb13 	bl	800633c <pbuf_clen>
 800ed16:	4603      	mov	r3, r0
 800ed18:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ed1a:	4b0c      	ldr	r3, [pc, #48]	; (800ed4c <ip4_reass+0x2b0>)
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	8c3a      	ldrh	r2, [r7, #32]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d906      	bls.n	800ed32 <ip4_reass+0x296>
 800ed24:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <ip4_reass+0x2b8>)
 800ed26:	f240 229b 	movw	r2, #667	; 0x29b
 800ed2a:	490b      	ldr	r1, [pc, #44]	; (800ed58 <ip4_reass+0x2bc>)
 800ed2c:	480b      	ldr	r0, [pc, #44]	; (800ed5c <ip4_reass+0x2c0>)
 800ed2e:	f000 fbc5 	bl	800f4bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ed32:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <ip4_reass+0x2b0>)
 800ed34:	881a      	ldrh	r2, [r3, #0]
 800ed36:	8c3b      	ldrh	r3, [r7, #32]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	4b03      	ldr	r3, [pc, #12]	; (800ed4c <ip4_reass+0x2b0>)
 800ed3e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	e038      	b.n	800edb6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ed44:	2300      	movs	r3, #0
 800ed46:	e036      	b.n	800edb6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ed48:	bf00      	nop
 800ed4a:	e00a      	b.n	800ed62 <ip4_reass+0x2c6>
 800ed4c:	200083f4 	.word	0x200083f4
 800ed50:	200083f0 	.word	0x200083f0
 800ed54:	08012a24 	.word	0x08012a24
 800ed58:	08012b94 	.word	0x08012b94
 800ed5c:	08012a6c 	.word	0x08012a6c
    goto nullreturn_ipr;
 800ed60:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <ip4_reass+0x2da>
 800ed68:	4b15      	ldr	r3, [pc, #84]	; (800edc0 <ip4_reass+0x324>)
 800ed6a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ed6e:	4915      	ldr	r1, [pc, #84]	; (800edc4 <ip4_reass+0x328>)
 800ed70:	4815      	ldr	r0, [pc, #84]	; (800edc8 <ip4_reass+0x32c>)
 800ed72:	f000 fba3 	bl	800f4bc <iprintf>
  if (ipr->p == NULL) {
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d116      	bne.n	800edac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ed7e:	4b13      	ldr	r3, [pc, #76]	; (800edcc <ip4_reass+0x330>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d006      	beq.n	800ed96 <ip4_reass+0x2fa>
 800ed88:	4b0d      	ldr	r3, [pc, #52]	; (800edc0 <ip4_reass+0x324>)
 800ed8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed8e:	4910      	ldr	r1, [pc, #64]	; (800edd0 <ip4_reass+0x334>)
 800ed90:	480d      	ldr	r0, [pc, #52]	; (800edc8 <ip4_reass+0x32c>)
 800ed92:	f000 fb93 	bl	800f4bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ed96:	2100      	movs	r1, #0
 800ed98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed9a:	f7ff fce7 	bl	800e76c <ip_reass_dequeue_datagram>
 800ed9e:	e006      	b.n	800edae <ip4_reass+0x312>
    goto nullreturn;
 800eda0:	bf00      	nop
 800eda2:	e004      	b.n	800edae <ip4_reass+0x312>
    goto nullreturn;
 800eda4:	bf00      	nop
 800eda6:	e002      	b.n	800edae <ip4_reass+0x312>
      goto nullreturn;
 800eda8:	bf00      	nop
 800edaa:	e000      	b.n	800edae <ip4_reass+0x312>
  }

nullreturn:
 800edac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7f7 fa3c 	bl	800622c <pbuf_free>
  return NULL;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3738      	adds	r7, #56	; 0x38
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	08012a24 	.word	0x08012a24
 800edc4:	08012bb0 	.word	0x08012bb0
 800edc8:	08012a6c 	.word	0x08012a6c
 800edcc:	200083f0 	.word	0x200083f0
 800edd0:	08012bbc 	.word	0x08012bbc

0800edd4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800edd8:	2005      	movs	r0, #5
 800edda:	f7f6 fb41 	bl	8005460 <memp_malloc>
 800edde:	4603      	mov	r3, r0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <ip_frag_free_pbuf_custom_ref+0x1c>
 800edf2:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800edf4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800edf8:	4906      	ldr	r1, [pc, #24]	; (800ee14 <ip_frag_free_pbuf_custom_ref+0x30>)
 800edfa:	4807      	ldr	r0, [pc, #28]	; (800ee18 <ip_frag_free_pbuf_custom_ref+0x34>)
 800edfc:	f000 fb5e 	bl	800f4bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee00:	6879      	ldr	r1, [r7, #4]
 800ee02:	2005      	movs	r0, #5
 800ee04:	f7f6 fb9c 	bl	8005540 <memp_free>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	08012a24 	.word	0x08012a24
 800ee14:	08012bdc 	.word	0x08012bdc
 800ee18:	08012a6c 	.word	0x08012a6c

0800ee1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <ipfrag_free_pbuf_custom+0x20>
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <ipfrag_free_pbuf_custom+0x58>)
 800ee30:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ee34:	4910      	ldr	r1, [pc, #64]	; (800ee78 <ipfrag_free_pbuf_custom+0x5c>)
 800ee36:	4811      	ldr	r0, [pc, #68]	; (800ee7c <ipfrag_free_pbuf_custom+0x60>)
 800ee38:	f000 fb40 	bl	800f4bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d006      	beq.n	800ee52 <ipfrag_free_pbuf_custom+0x36>
 800ee44:	4b0b      	ldr	r3, [pc, #44]	; (800ee74 <ipfrag_free_pbuf_custom+0x58>)
 800ee46:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ee4a:	490d      	ldr	r1, [pc, #52]	; (800ee80 <ipfrag_free_pbuf_custom+0x64>)
 800ee4c:	480b      	ldr	r0, [pc, #44]	; (800ee7c <ipfrag_free_pbuf_custom+0x60>)
 800ee4e:	f000 fb35 	bl	800f4bc <iprintf>
  if (pcr->original != NULL) {
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	695b      	ldr	r3, [r3, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d004      	beq.n	800ee64 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f7 f9e4 	bl	800622c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f7ff ffbd 	bl	800ede4 <ip_frag_free_pbuf_custom_ref>
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	08012a24 	.word	0x08012a24
 800ee78:	08012be8 	.word	0x08012be8
 800ee7c:	08012a6c 	.word	0x08012a6c
 800ee80:	08012bf4 	.word	0x08012bf4

0800ee84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b094      	sub	sp, #80	; 0x50
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ee90:	2300      	movs	r3, #0
 800ee92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee9a:	3b14      	subs	r3, #20
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	da00      	bge.n	800eea2 <ip4_frag+0x1e>
 800eea0:	3307      	adds	r3, #7
 800eea2:	10db      	asrs	r3, r3, #3
 800eea4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eea6:	2314      	movs	r3, #20
 800eea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800eeb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f003 030f 	and.w	r3, r3, #15
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	2b14      	cmp	r3, #20
 800eec4:	d002      	beq.n	800eecc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800eec6:	f06f 0305 	mvn.w	r3, #5
 800eeca:	e110      	b.n	800f0ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	895b      	ldrh	r3, [r3, #10]
 800eed0:	2b13      	cmp	r3, #19
 800eed2:	d809      	bhi.n	800eee8 <ip4_frag+0x64>
 800eed4:	4b88      	ldr	r3, [pc, #544]	; (800f0f8 <ip4_frag+0x274>)
 800eed6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800eeda:	4988      	ldr	r1, [pc, #544]	; (800f0fc <ip4_frag+0x278>)
 800eedc:	4888      	ldr	r0, [pc, #544]	; (800f100 <ip4_frag+0x27c>)
 800eede:	f000 faed 	bl	800f4bc <iprintf>
 800eee2:	f06f 0305 	mvn.w	r3, #5
 800eee6:	e102      	b.n	800f0ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	88db      	ldrh	r3, [r3, #6]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f5 fe3e 	bl	8004b70 <lwip_htons>
 800eef4:	4603      	mov	r3, r0
 800eef6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800eef8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eefa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eefe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef08:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	891b      	ldrh	r3, [r3, #8]
 800ef0e:	3b14      	subs	r3, #20
 800ef10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ef14:	e0e1      	b.n	800f0da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ef16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef18:	00db      	lsls	r3, r3, #3
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bf28      	it	cs
 800ef24:	4613      	movcs	r3, r2
 800ef26:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ef28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef2c:	2114      	movs	r1, #20
 800ef2e:	200e      	movs	r0, #14
 800ef30:	f7f6 fe98 	bl	8005c64 <pbuf_alloc>
 800ef34:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80d5 	beq.w	800f0e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	895b      	ldrh	r3, [r3, #10]
 800ef42:	2b13      	cmp	r3, #19
 800ef44:	d806      	bhi.n	800ef54 <ip4_frag+0xd0>
 800ef46:	4b6c      	ldr	r3, [pc, #432]	; (800f0f8 <ip4_frag+0x274>)
 800ef48:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ef4c:	496d      	ldr	r1, [pc, #436]	; (800f104 <ip4_frag+0x280>)
 800ef4e:	486c      	ldr	r0, [pc, #432]	; (800f100 <ip4_frag+0x27c>)
 800ef50:	f000 fab4 	bl	800f4bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	2214      	movs	r2, #20
 800ef5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 fb88 	bl	800f672 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ef68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ef6e:	e064      	b.n	800f03a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	895a      	ldrh	r2, [r3, #10]
 800ef74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	895b      	ldrh	r3, [r3, #10]
 800ef7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d906      	bls.n	800ef92 <ip4_frag+0x10e>
 800ef84:	4b5c      	ldr	r3, [pc, #368]	; (800f0f8 <ip4_frag+0x274>)
 800ef86:	f240 322d 	movw	r2, #813	; 0x32d
 800ef8a:	495f      	ldr	r1, [pc, #380]	; (800f108 <ip4_frag+0x284>)
 800ef8c:	485c      	ldr	r0, [pc, #368]	; (800f100 <ip4_frag+0x27c>)
 800ef8e:	f000 fa95 	bl	800f4bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ef92:	8bfa      	ldrh	r2, [r7, #30]
 800ef94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	bf28      	it	cs
 800ef9c:	4613      	movcs	r3, r2
 800ef9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800efa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d105      	bne.n	800efb6 <ip4_frag+0x132>
        poff = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]
        continue;
 800efb4:	e041      	b.n	800f03a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800efb6:	f7ff ff0d 	bl	800edd4 <ip_frag_alloc_pbuf_custom_ref>
 800efba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d103      	bne.n	800efca <ip4_frag+0x146>
        pbuf_free(rambuf);
 800efc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efc4:	f7f7 f932 	bl	800622c <pbuf_free>
        goto memerr;
 800efc8:	e08f      	b.n	800f0ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800efd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efd2:	4413      	add	r3, r2
 800efd4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800efd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800efdc:	9201      	str	r2, [sp, #4]
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	4603      	mov	r3, r0
 800efe2:	2241      	movs	r2, #65	; 0x41
 800efe4:	2000      	movs	r0, #0
 800efe6:	f7f6 ff67 	bl	8005eb8 <pbuf_alloced_custom>
 800efea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d106      	bne.n	800f000 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eff2:	69b8      	ldr	r0, [r7, #24]
 800eff4:	f7ff fef6 	bl	800ede4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800effa:	f7f7 f917 	bl	800622c <pbuf_free>
        goto memerr;
 800effe:	e074      	b.n	800f0ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7f7 f9b3 	bl	800636c <pbuf_ref>
      pcr->original = p;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	4a3f      	ldr	r2, [pc, #252]	; (800f10c <ip4_frag+0x288>)
 800f010:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f012:	6979      	ldr	r1, [r7, #20]
 800f014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f016:	f7f7 f9cb 	bl	80063b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f01a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f01e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d004      	beq.n	800f03a <ip4_frag+0x1b6>
        poff = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f03a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d196      	bne.n	800ef70 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f042:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f048:	4413      	add	r3, r2
 800f04a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f050:	f1a3 0213 	sub.w	r2, r3, #19
 800f054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f058:	429a      	cmp	r2, r3
 800f05a:	bfcc      	ite	gt
 800f05c:	2301      	movgt	r3, #1
 800f05e:	2300      	movle	r3, #0
 800f060:	b2db      	uxtb	r3, r3
 800f062:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f06c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <ip4_frag+0x1f6>
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	2b00      	cmp	r3, #0
 800f078:	d003      	beq.n	800f082 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f07a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f07c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f080:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f084:	4618      	mov	r0, r3
 800f086:	f7f5 fd73 	bl	8004b70 <lwip_htons>
 800f08a:	4603      	mov	r3, r0
 800f08c:	461a      	mov	r2, r3
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f094:	3314      	adds	r3, #20
 800f096:	b29b      	uxth	r3, r3
 800f098:	4618      	mov	r0, r3
 800f09a:	f7f5 fd69 	bl	8004b70 <lwip_htons>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	729a      	strb	r2, [r3, #10]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	695b      	ldr	r3, [r3, #20]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0b8:	68b8      	ldr	r0, [r7, #8]
 800f0ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0be:	f7f7 f8b5 	bl	800622c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f0c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f0ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f0d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f0d4:	4413      	add	r3, r2
 800f0d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f0da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f47f af19 	bne.w	800ef16 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	e002      	b.n	800f0ee <ip4_frag+0x26a>
      goto memerr;
 800f0e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f0ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3748      	adds	r7, #72	; 0x48
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	08012a24 	.word	0x08012a24
 800f0fc:	08012c00 	.word	0x08012c00
 800f100:	08012a6c 	.word	0x08012a6c
 800f104:	08012c1c 	.word	0x08012c1c
 800f108:	08012c3c 	.word	0x08012c3c
 800f10c:	0800ee1d 	.word	0x0800ee1d

0800f110 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f11a:	230e      	movs	r3, #14
 800f11c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	895b      	ldrh	r3, [r3, #10]
 800f122:	2b0e      	cmp	r3, #14
 800f124:	d96e      	bls.n	800f204 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7bdb      	ldrb	r3, [r3, #15]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d106      	bne.n	800f13c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f134:	3301      	adds	r3, #1
 800f136:	b2da      	uxtb	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	7b1a      	ldrb	r2, [r3, #12]
 800f146:	7b5b      	ldrb	r3, [r3, #13]
 800f148:	021b      	lsls	r3, r3, #8
 800f14a:	4313      	orrs	r3, r2
 800f14c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	f003 0301 	and.w	r3, r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	d023      	beq.n	800f1a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d10f      	bne.n	800f182 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	785b      	ldrb	r3, [r3, #1]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d11b      	bne.n	800f1a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f16e:	2b5e      	cmp	r3, #94	; 0x5e
 800f170:	d117      	bne.n	800f1a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	7b5b      	ldrb	r3, [r3, #13]
 800f176:	f043 0310 	orr.w	r3, r3, #16
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	735a      	strb	r2, [r3, #13]
 800f180:	e00f      	b.n	800f1a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	2206      	movs	r2, #6
 800f186:	4928      	ldr	r1, [pc, #160]	; (800f228 <ethernet_input+0x118>)
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f9ec 	bl	800f566 <memcmp>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	d106      	bne.n	800f1a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7b5b      	ldrb	r3, [r3, #13]
 800f198:	f043 0308 	orr.w	r3, r3, #8
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f1a2:	89fb      	ldrh	r3, [r7, #14]
 800f1a4:	2b08      	cmp	r3, #8
 800f1a6:	d003      	beq.n	800f1b0 <ethernet_input+0xa0>
 800f1a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f1ac:	d014      	beq.n	800f1d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f1ae:	e032      	b.n	800f216 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1b6:	f003 0308 	and.w	r3, r3, #8
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d024      	beq.n	800f208 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f1be:	8afb      	ldrh	r3, [r7, #22]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7f6 ffac 	bl	8006120 <pbuf_remove_header>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d11e      	bne.n	800f20c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7fe ff21 	bl	800e018 <ip4_input>
      break;
 800f1d6:	e013      	b.n	800f200 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1de:	f003 0308 	and.w	r3, r3, #8
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d014      	beq.n	800f210 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f1e6:	8afb      	ldrh	r3, [r7, #22]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7f6 ff98 	bl	8006120 <pbuf_remove_header>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10e      	bne.n	800f214 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7fe f8c1 	bl	800d380 <etharp_input>
      break;
 800f1fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f200:	2300      	movs	r3, #0
 800f202:	e00c      	b.n	800f21e <ethernet_input+0x10e>
    goto free_and_return;
 800f204:	bf00      	nop
 800f206:	e006      	b.n	800f216 <ethernet_input+0x106>
        goto free_and_return;
 800f208:	bf00      	nop
 800f20a:	e004      	b.n	800f216 <ethernet_input+0x106>
        goto free_and_return;
 800f20c:	bf00      	nop
 800f20e:	e002      	b.n	800f216 <ethernet_input+0x106>
        goto free_and_return;
 800f210:	bf00      	nop
 800f212:	e000      	b.n	800f216 <ethernet_input+0x106>
        goto free_and_return;
 800f214:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7f7 f808 	bl	800622c <pbuf_free>
  return ERR_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	08012dd8 	.word	0x08012dd8

0800f22c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
 800f238:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f23a:	8c3b      	ldrh	r3, [r7, #32]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7f5 fc97 	bl	8004b70 <lwip_htons>
 800f242:	4603      	mov	r3, r0
 800f244:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f246:	210e      	movs	r1, #14
 800f248:	68b8      	ldr	r0, [r7, #8]
 800f24a:	f7f6 ff59 	bl	8006100 <pbuf_add_header>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d125      	bne.n	800f2a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	8afa      	ldrh	r2, [r7, #22]
 800f25e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2206      	movs	r2, #6
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fa03 	bl	800f672 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	3306      	adds	r3, #6
 800f270:	2206      	movs	r2, #6
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	f000 f9fc 	bl	800f672 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f280:	2b06      	cmp	r3, #6
 800f282:	d006      	beq.n	800f292 <ethernet_output+0x66>
 800f284:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <ethernet_output+0x84>)
 800f286:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f28a:	490a      	ldr	r1, [pc, #40]	; (800f2b4 <ethernet_output+0x88>)
 800f28c:	480a      	ldr	r0, [pc, #40]	; (800f2b8 <ethernet_output+0x8c>)
 800f28e:	f000 f915 	bl	800f4bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	699b      	ldr	r3, [r3, #24]
 800f296:	68b9      	ldr	r1, [r7, #8]
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	4798      	blx	r3
 800f29c:	4603      	mov	r3, r0
 800f29e:	e002      	b.n	800f2a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f2a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f2a2:	f06f 0301 	mvn.w	r3, #1
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	08012c4c 	.word	0x08012c4c
 800f2b4:	08012c84 	.word	0x08012c84
 800f2b8:	08012cb8 	.word	0x08012cb8

0800f2bc <rand>:
 800f2bc:	4b16      	ldr	r3, [pc, #88]	; (800f318 <rand+0x5c>)
 800f2be:	b510      	push	{r4, lr}
 800f2c0:	681c      	ldr	r4, [r3, #0]
 800f2c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2c4:	b9b3      	cbnz	r3, 800f2f4 <rand+0x38>
 800f2c6:	2018      	movs	r0, #24
 800f2c8:	f000 fa4c 	bl	800f764 <malloc>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	6320      	str	r0, [r4, #48]	; 0x30
 800f2d0:	b920      	cbnz	r0, 800f2dc <rand+0x20>
 800f2d2:	4b12      	ldr	r3, [pc, #72]	; (800f31c <rand+0x60>)
 800f2d4:	4812      	ldr	r0, [pc, #72]	; (800f320 <rand+0x64>)
 800f2d6:	2152      	movs	r1, #82	; 0x52
 800f2d8:	f000 f9da 	bl	800f690 <__assert_func>
 800f2dc:	4911      	ldr	r1, [pc, #68]	; (800f324 <rand+0x68>)
 800f2de:	4b12      	ldr	r3, [pc, #72]	; (800f328 <rand+0x6c>)
 800f2e0:	e9c0 1300 	strd	r1, r3, [r0]
 800f2e4:	4b11      	ldr	r3, [pc, #68]	; (800f32c <rand+0x70>)
 800f2e6:	6083      	str	r3, [r0, #8]
 800f2e8:	230b      	movs	r3, #11
 800f2ea:	8183      	strh	r3, [r0, #12]
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	2001      	movs	r0, #1
 800f2f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f2f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f2f6:	480e      	ldr	r0, [pc, #56]	; (800f330 <rand+0x74>)
 800f2f8:	690b      	ldr	r3, [r1, #16]
 800f2fa:	694c      	ldr	r4, [r1, #20]
 800f2fc:	4a0d      	ldr	r2, [pc, #52]	; (800f334 <rand+0x78>)
 800f2fe:	4358      	muls	r0, r3
 800f300:	fb02 0004 	mla	r0, r2, r4, r0
 800f304:	fba3 3202 	umull	r3, r2, r3, r2
 800f308:	3301      	adds	r3, #1
 800f30a:	eb40 0002 	adc.w	r0, r0, r2
 800f30e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f312:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f316:	bd10      	pop	{r4, pc}
 800f318:	20000084 	.word	0x20000084
 800f31c:	08012de6 	.word	0x08012de6
 800f320:	08012dfd 	.word	0x08012dfd
 800f324:	abcd330e 	.word	0xabcd330e
 800f328:	e66d1234 	.word	0xe66d1234
 800f32c:	0005deec 	.word	0x0005deec
 800f330:	5851f42d 	.word	0x5851f42d
 800f334:	4c957f2d 	.word	0x4c957f2d

0800f338 <std>:
 800f338:	2300      	movs	r3, #0
 800f33a:	b510      	push	{r4, lr}
 800f33c:	4604      	mov	r4, r0
 800f33e:	e9c0 3300 	strd	r3, r3, [r0]
 800f342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f346:	6083      	str	r3, [r0, #8]
 800f348:	8181      	strh	r1, [r0, #12]
 800f34a:	6643      	str	r3, [r0, #100]	; 0x64
 800f34c:	81c2      	strh	r2, [r0, #14]
 800f34e:	6183      	str	r3, [r0, #24]
 800f350:	4619      	mov	r1, r3
 800f352:	2208      	movs	r2, #8
 800f354:	305c      	adds	r0, #92	; 0x5c
 800f356:	f000 f916 	bl	800f586 <memset>
 800f35a:	4b0d      	ldr	r3, [pc, #52]	; (800f390 <std+0x58>)
 800f35c:	6263      	str	r3, [r4, #36]	; 0x24
 800f35e:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <std+0x5c>)
 800f360:	62a3      	str	r3, [r4, #40]	; 0x28
 800f362:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <std+0x60>)
 800f364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f366:	4b0d      	ldr	r3, [pc, #52]	; (800f39c <std+0x64>)
 800f368:	6323      	str	r3, [r4, #48]	; 0x30
 800f36a:	4b0d      	ldr	r3, [pc, #52]	; (800f3a0 <std+0x68>)
 800f36c:	6224      	str	r4, [r4, #32]
 800f36e:	429c      	cmp	r4, r3
 800f370:	d006      	beq.n	800f380 <std+0x48>
 800f372:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f376:	4294      	cmp	r4, r2
 800f378:	d002      	beq.n	800f380 <std+0x48>
 800f37a:	33d0      	adds	r3, #208	; 0xd0
 800f37c:	429c      	cmp	r4, r3
 800f37e:	d105      	bne.n	800f38c <std+0x54>
 800f380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f388:	f000 b970 	b.w	800f66c <__retarget_lock_init_recursive>
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	bf00      	nop
 800f390:	0800f4e1 	.word	0x0800f4e1
 800f394:	0800f503 	.word	0x0800f503
 800f398:	0800f53b 	.word	0x0800f53b
 800f39c:	0800f55f 	.word	0x0800f55f
 800f3a0:	200083f8 	.word	0x200083f8

0800f3a4 <stdio_exit_handler>:
 800f3a4:	4a02      	ldr	r2, [pc, #8]	; (800f3b0 <stdio_exit_handler+0xc>)
 800f3a6:	4903      	ldr	r1, [pc, #12]	; (800f3b4 <stdio_exit_handler+0x10>)
 800f3a8:	4803      	ldr	r0, [pc, #12]	; (800f3b8 <stdio_exit_handler+0x14>)
 800f3aa:	f000 b869 	b.w	800f480 <_fwalk_sglue>
 800f3ae:	bf00      	nop
 800f3b0:	2000002c 	.word	0x2000002c
 800f3b4:	0800ff81 	.word	0x0800ff81
 800f3b8:	20000038 	.word	0x20000038

0800f3bc <cleanup_stdio>:
 800f3bc:	6841      	ldr	r1, [r0, #4]
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <cleanup_stdio+0x34>)
 800f3c0:	4299      	cmp	r1, r3
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	d001      	beq.n	800f3cc <cleanup_stdio+0x10>
 800f3c8:	f000 fdda 	bl	800ff80 <_fflush_r>
 800f3cc:	68a1      	ldr	r1, [r4, #8]
 800f3ce:	4b09      	ldr	r3, [pc, #36]	; (800f3f4 <cleanup_stdio+0x38>)
 800f3d0:	4299      	cmp	r1, r3
 800f3d2:	d002      	beq.n	800f3da <cleanup_stdio+0x1e>
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f000 fdd3 	bl	800ff80 <_fflush_r>
 800f3da:	68e1      	ldr	r1, [r4, #12]
 800f3dc:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <cleanup_stdio+0x3c>)
 800f3de:	4299      	cmp	r1, r3
 800f3e0:	d004      	beq.n	800f3ec <cleanup_stdio+0x30>
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e8:	f000 bdca 	b.w	800ff80 <_fflush_r>
 800f3ec:	bd10      	pop	{r4, pc}
 800f3ee:	bf00      	nop
 800f3f0:	200083f8 	.word	0x200083f8
 800f3f4:	20008460 	.word	0x20008460
 800f3f8:	200084c8 	.word	0x200084c8

0800f3fc <global_stdio_init.part.0>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <global_stdio_init.part.0+0x30>)
 800f400:	4c0b      	ldr	r4, [pc, #44]	; (800f430 <global_stdio_init.part.0+0x34>)
 800f402:	4a0c      	ldr	r2, [pc, #48]	; (800f434 <global_stdio_init.part.0+0x38>)
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	4620      	mov	r0, r4
 800f408:	2200      	movs	r2, #0
 800f40a:	2104      	movs	r1, #4
 800f40c:	f7ff ff94 	bl	800f338 <std>
 800f410:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f414:	2201      	movs	r2, #1
 800f416:	2109      	movs	r1, #9
 800f418:	f7ff ff8e 	bl	800f338 <std>
 800f41c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f420:	2202      	movs	r2, #2
 800f422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f426:	2112      	movs	r1, #18
 800f428:	f7ff bf86 	b.w	800f338 <std>
 800f42c:	20008530 	.word	0x20008530
 800f430:	200083f8 	.word	0x200083f8
 800f434:	0800f3a5 	.word	0x0800f3a5

0800f438 <__sfp_lock_acquire>:
 800f438:	4801      	ldr	r0, [pc, #4]	; (800f440 <__sfp_lock_acquire+0x8>)
 800f43a:	f000 b918 	b.w	800f66e <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	20008539 	.word	0x20008539

0800f444 <__sfp_lock_release>:
 800f444:	4801      	ldr	r0, [pc, #4]	; (800f44c <__sfp_lock_release+0x8>)
 800f446:	f000 b913 	b.w	800f670 <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	20008539 	.word	0x20008539

0800f450 <__sinit>:
 800f450:	b510      	push	{r4, lr}
 800f452:	4604      	mov	r4, r0
 800f454:	f7ff fff0 	bl	800f438 <__sfp_lock_acquire>
 800f458:	6a23      	ldr	r3, [r4, #32]
 800f45a:	b11b      	cbz	r3, 800f464 <__sinit+0x14>
 800f45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f460:	f7ff bff0 	b.w	800f444 <__sfp_lock_release>
 800f464:	4b04      	ldr	r3, [pc, #16]	; (800f478 <__sinit+0x28>)
 800f466:	6223      	str	r3, [r4, #32]
 800f468:	4b04      	ldr	r3, [pc, #16]	; (800f47c <__sinit+0x2c>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1f5      	bne.n	800f45c <__sinit+0xc>
 800f470:	f7ff ffc4 	bl	800f3fc <global_stdio_init.part.0>
 800f474:	e7f2      	b.n	800f45c <__sinit+0xc>
 800f476:	bf00      	nop
 800f478:	0800f3bd 	.word	0x0800f3bd
 800f47c:	20008530 	.word	0x20008530

0800f480 <_fwalk_sglue>:
 800f480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f484:	4607      	mov	r7, r0
 800f486:	4688      	mov	r8, r1
 800f488:	4614      	mov	r4, r2
 800f48a:	2600      	movs	r6, #0
 800f48c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f490:	f1b9 0901 	subs.w	r9, r9, #1
 800f494:	d505      	bpl.n	800f4a2 <_fwalk_sglue+0x22>
 800f496:	6824      	ldr	r4, [r4, #0]
 800f498:	2c00      	cmp	r4, #0
 800f49a:	d1f7      	bne.n	800f48c <_fwalk_sglue+0xc>
 800f49c:	4630      	mov	r0, r6
 800f49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4a2:	89ab      	ldrh	r3, [r5, #12]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d907      	bls.n	800f4b8 <_fwalk_sglue+0x38>
 800f4a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	d003      	beq.n	800f4b8 <_fwalk_sglue+0x38>
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	47c0      	blx	r8
 800f4b6:	4306      	orrs	r6, r0
 800f4b8:	3568      	adds	r5, #104	; 0x68
 800f4ba:	e7e9      	b.n	800f490 <_fwalk_sglue+0x10>

0800f4bc <iprintf>:
 800f4bc:	b40f      	push	{r0, r1, r2, r3}
 800f4be:	b507      	push	{r0, r1, r2, lr}
 800f4c0:	4906      	ldr	r1, [pc, #24]	; (800f4dc <iprintf+0x20>)
 800f4c2:	ab04      	add	r3, sp, #16
 800f4c4:	6808      	ldr	r0, [r1, #0]
 800f4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ca:	6881      	ldr	r1, [r0, #8]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	f000 fa27 	bl	800f920 <_vfiprintf_r>
 800f4d2:	b003      	add	sp, #12
 800f4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4d8:	b004      	add	sp, #16
 800f4da:	4770      	bx	lr
 800f4dc:	20000084 	.word	0x20000084

0800f4e0 <__sread>:
 800f4e0:	b510      	push	{r4, lr}
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e8:	f000 f878 	bl	800f5dc <_read_r>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	bfab      	itete	ge
 800f4f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800f4f4:	181b      	addge	r3, r3, r0
 800f4f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4fa:	bfac      	ite	ge
 800f4fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4fe:	81a3      	strhlt	r3, [r4, #12]
 800f500:	bd10      	pop	{r4, pc}

0800f502 <__swrite>:
 800f502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f506:	461f      	mov	r7, r3
 800f508:	898b      	ldrh	r3, [r1, #12]
 800f50a:	05db      	lsls	r3, r3, #23
 800f50c:	4605      	mov	r5, r0
 800f50e:	460c      	mov	r4, r1
 800f510:	4616      	mov	r6, r2
 800f512:	d505      	bpl.n	800f520 <__swrite+0x1e>
 800f514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f518:	2302      	movs	r3, #2
 800f51a:	2200      	movs	r2, #0
 800f51c:	f000 f84c 	bl	800f5b8 <_lseek_r>
 800f520:	89a3      	ldrh	r3, [r4, #12]
 800f522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f52a:	81a3      	strh	r3, [r4, #12]
 800f52c:	4632      	mov	r2, r6
 800f52e:	463b      	mov	r3, r7
 800f530:	4628      	mov	r0, r5
 800f532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f536:	f000 b863 	b.w	800f600 <_write_r>

0800f53a <__sseek>:
 800f53a:	b510      	push	{r4, lr}
 800f53c:	460c      	mov	r4, r1
 800f53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f542:	f000 f839 	bl	800f5b8 <_lseek_r>
 800f546:	1c43      	adds	r3, r0, #1
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	bf15      	itete	ne
 800f54c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f54e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f556:	81a3      	strheq	r3, [r4, #12]
 800f558:	bf18      	it	ne
 800f55a:	81a3      	strhne	r3, [r4, #12]
 800f55c:	bd10      	pop	{r4, pc}

0800f55e <__sclose>:
 800f55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f562:	f000 b819 	b.w	800f598 <_close_r>

0800f566 <memcmp>:
 800f566:	b510      	push	{r4, lr}
 800f568:	3901      	subs	r1, #1
 800f56a:	4402      	add	r2, r0
 800f56c:	4290      	cmp	r0, r2
 800f56e:	d101      	bne.n	800f574 <memcmp+0xe>
 800f570:	2000      	movs	r0, #0
 800f572:	e005      	b.n	800f580 <memcmp+0x1a>
 800f574:	7803      	ldrb	r3, [r0, #0]
 800f576:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f57a:	42a3      	cmp	r3, r4
 800f57c:	d001      	beq.n	800f582 <memcmp+0x1c>
 800f57e:	1b18      	subs	r0, r3, r4
 800f580:	bd10      	pop	{r4, pc}
 800f582:	3001      	adds	r0, #1
 800f584:	e7f2      	b.n	800f56c <memcmp+0x6>

0800f586 <memset>:
 800f586:	4402      	add	r2, r0
 800f588:	4603      	mov	r3, r0
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d100      	bne.n	800f590 <memset+0xa>
 800f58e:	4770      	bx	lr
 800f590:	f803 1b01 	strb.w	r1, [r3], #1
 800f594:	e7f9      	b.n	800f58a <memset+0x4>
	...

0800f598 <_close_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4d06      	ldr	r5, [pc, #24]	; (800f5b4 <_close_r+0x1c>)
 800f59c:	2300      	movs	r3, #0
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	602b      	str	r3, [r5, #0]
 800f5a4:	f7f1 fa75 	bl	8000a92 <_close>
 800f5a8:	1c43      	adds	r3, r0, #1
 800f5aa:	d102      	bne.n	800f5b2 <_close_r+0x1a>
 800f5ac:	682b      	ldr	r3, [r5, #0]
 800f5ae:	b103      	cbz	r3, 800f5b2 <_close_r+0x1a>
 800f5b0:	6023      	str	r3, [r4, #0]
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	20008534 	.word	0x20008534

0800f5b8 <_lseek_r>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4d07      	ldr	r5, [pc, #28]	; (800f5d8 <_lseek_r+0x20>)
 800f5bc:	4604      	mov	r4, r0
 800f5be:	4608      	mov	r0, r1
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	602a      	str	r2, [r5, #0]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f7f1 fa8a 	bl	8000ae0 <_lseek>
 800f5cc:	1c43      	adds	r3, r0, #1
 800f5ce:	d102      	bne.n	800f5d6 <_lseek_r+0x1e>
 800f5d0:	682b      	ldr	r3, [r5, #0]
 800f5d2:	b103      	cbz	r3, 800f5d6 <_lseek_r+0x1e>
 800f5d4:	6023      	str	r3, [r4, #0]
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	20008534 	.word	0x20008534

0800f5dc <_read_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4d07      	ldr	r5, [pc, #28]	; (800f5fc <_read_r+0x20>)
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	602a      	str	r2, [r5, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f7f1 fa18 	bl	8000a20 <_read>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d102      	bne.n	800f5fa <_read_r+0x1e>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	b103      	cbz	r3, 800f5fa <_read_r+0x1e>
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	bd38      	pop	{r3, r4, r5, pc}
 800f5fc:	20008534 	.word	0x20008534

0800f600 <_write_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4d07      	ldr	r5, [pc, #28]	; (800f620 <_write_r+0x20>)
 800f604:	4604      	mov	r4, r0
 800f606:	4608      	mov	r0, r1
 800f608:	4611      	mov	r1, r2
 800f60a:	2200      	movs	r2, #0
 800f60c:	602a      	str	r2, [r5, #0]
 800f60e:	461a      	mov	r2, r3
 800f610:	f7f1 fa23 	bl	8000a5a <_write>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_write_r+0x1e>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_write_r+0x1e>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	20008534 	.word	0x20008534

0800f624 <__libc_init_array>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	4d0d      	ldr	r5, [pc, #52]	; (800f65c <__libc_init_array+0x38>)
 800f628:	4c0d      	ldr	r4, [pc, #52]	; (800f660 <__libc_init_array+0x3c>)
 800f62a:	1b64      	subs	r4, r4, r5
 800f62c:	10a4      	asrs	r4, r4, #2
 800f62e:	2600      	movs	r6, #0
 800f630:	42a6      	cmp	r6, r4
 800f632:	d109      	bne.n	800f648 <__libc_init_array+0x24>
 800f634:	4d0b      	ldr	r5, [pc, #44]	; (800f664 <__libc_init_array+0x40>)
 800f636:	4c0c      	ldr	r4, [pc, #48]	; (800f668 <__libc_init_array+0x44>)
 800f638:	f000 fe52 	bl	80102e0 <_init>
 800f63c:	1b64      	subs	r4, r4, r5
 800f63e:	10a4      	asrs	r4, r4, #2
 800f640:	2600      	movs	r6, #0
 800f642:	42a6      	cmp	r6, r4
 800f644:	d105      	bne.n	800f652 <__libc_init_array+0x2e>
 800f646:	bd70      	pop	{r4, r5, r6, pc}
 800f648:	f855 3b04 	ldr.w	r3, [r5], #4
 800f64c:	4798      	blx	r3
 800f64e:	3601      	adds	r6, #1
 800f650:	e7ee      	b.n	800f630 <__libc_init_array+0xc>
 800f652:	f855 3b04 	ldr.w	r3, [r5], #4
 800f656:	4798      	blx	r3
 800f658:	3601      	adds	r6, #1
 800f65a:	e7f2      	b.n	800f642 <__libc_init_array+0x1e>
 800f65c:	08012ecc 	.word	0x08012ecc
 800f660:	08012ecc 	.word	0x08012ecc
 800f664:	08012ecc 	.word	0x08012ecc
 800f668:	08012ed0 	.word	0x08012ed0

0800f66c <__retarget_lock_init_recursive>:
 800f66c:	4770      	bx	lr

0800f66e <__retarget_lock_acquire_recursive>:
 800f66e:	4770      	bx	lr

0800f670 <__retarget_lock_release_recursive>:
 800f670:	4770      	bx	lr

0800f672 <memcpy>:
 800f672:	440a      	add	r2, r1
 800f674:	4291      	cmp	r1, r2
 800f676:	f100 33ff 	add.w	r3, r0, #4294967295
 800f67a:	d100      	bne.n	800f67e <memcpy+0xc>
 800f67c:	4770      	bx	lr
 800f67e:	b510      	push	{r4, lr}
 800f680:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f684:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f688:	4291      	cmp	r1, r2
 800f68a:	d1f9      	bne.n	800f680 <memcpy+0xe>
 800f68c:	bd10      	pop	{r4, pc}
	...

0800f690 <__assert_func>:
 800f690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f692:	4614      	mov	r4, r2
 800f694:	461a      	mov	r2, r3
 800f696:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <__assert_func+0x2c>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4605      	mov	r5, r0
 800f69c:	68d8      	ldr	r0, [r3, #12]
 800f69e:	b14c      	cbz	r4, 800f6b4 <__assert_func+0x24>
 800f6a0:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <__assert_func+0x30>)
 800f6a2:	9100      	str	r1, [sp, #0]
 800f6a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6a8:	4906      	ldr	r1, [pc, #24]	; (800f6c4 <__assert_func+0x34>)
 800f6aa:	462b      	mov	r3, r5
 800f6ac:	f000 fc90 	bl	800ffd0 <fiprintf>
 800f6b0:	f000 fd46 	bl	8010140 <abort>
 800f6b4:	4b04      	ldr	r3, [pc, #16]	; (800f6c8 <__assert_func+0x38>)
 800f6b6:	461c      	mov	r4, r3
 800f6b8:	e7f3      	b.n	800f6a2 <__assert_func+0x12>
 800f6ba:	bf00      	nop
 800f6bc:	20000084 	.word	0x20000084
 800f6c0:	08012e55 	.word	0x08012e55
 800f6c4:	08012e62 	.word	0x08012e62
 800f6c8:	08012e90 	.word	0x08012e90

0800f6cc <_free_r>:
 800f6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ce:	2900      	cmp	r1, #0
 800f6d0:	d044      	beq.n	800f75c <_free_r+0x90>
 800f6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6d6:	9001      	str	r0, [sp, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f1a1 0404 	sub.w	r4, r1, #4
 800f6de:	bfb8      	it	lt
 800f6e0:	18e4      	addlt	r4, r4, r3
 800f6e2:	f000 f8e7 	bl	800f8b4 <__malloc_lock>
 800f6e6:	4a1e      	ldr	r2, [pc, #120]	; (800f760 <_free_r+0x94>)
 800f6e8:	9801      	ldr	r0, [sp, #4]
 800f6ea:	6813      	ldr	r3, [r2, #0]
 800f6ec:	b933      	cbnz	r3, 800f6fc <_free_r+0x30>
 800f6ee:	6063      	str	r3, [r4, #4]
 800f6f0:	6014      	str	r4, [r2, #0]
 800f6f2:	b003      	add	sp, #12
 800f6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6f8:	f000 b8e2 	b.w	800f8c0 <__malloc_unlock>
 800f6fc:	42a3      	cmp	r3, r4
 800f6fe:	d908      	bls.n	800f712 <_free_r+0x46>
 800f700:	6825      	ldr	r5, [r4, #0]
 800f702:	1961      	adds	r1, r4, r5
 800f704:	428b      	cmp	r3, r1
 800f706:	bf01      	itttt	eq
 800f708:	6819      	ldreq	r1, [r3, #0]
 800f70a:	685b      	ldreq	r3, [r3, #4]
 800f70c:	1949      	addeq	r1, r1, r5
 800f70e:	6021      	streq	r1, [r4, #0]
 800f710:	e7ed      	b.n	800f6ee <_free_r+0x22>
 800f712:	461a      	mov	r2, r3
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	b10b      	cbz	r3, 800f71c <_free_r+0x50>
 800f718:	42a3      	cmp	r3, r4
 800f71a:	d9fa      	bls.n	800f712 <_free_r+0x46>
 800f71c:	6811      	ldr	r1, [r2, #0]
 800f71e:	1855      	adds	r5, r2, r1
 800f720:	42a5      	cmp	r5, r4
 800f722:	d10b      	bne.n	800f73c <_free_r+0x70>
 800f724:	6824      	ldr	r4, [r4, #0]
 800f726:	4421      	add	r1, r4
 800f728:	1854      	adds	r4, r2, r1
 800f72a:	42a3      	cmp	r3, r4
 800f72c:	6011      	str	r1, [r2, #0]
 800f72e:	d1e0      	bne.n	800f6f2 <_free_r+0x26>
 800f730:	681c      	ldr	r4, [r3, #0]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	6053      	str	r3, [r2, #4]
 800f736:	440c      	add	r4, r1
 800f738:	6014      	str	r4, [r2, #0]
 800f73a:	e7da      	b.n	800f6f2 <_free_r+0x26>
 800f73c:	d902      	bls.n	800f744 <_free_r+0x78>
 800f73e:	230c      	movs	r3, #12
 800f740:	6003      	str	r3, [r0, #0]
 800f742:	e7d6      	b.n	800f6f2 <_free_r+0x26>
 800f744:	6825      	ldr	r5, [r4, #0]
 800f746:	1961      	adds	r1, r4, r5
 800f748:	428b      	cmp	r3, r1
 800f74a:	bf04      	itt	eq
 800f74c:	6819      	ldreq	r1, [r3, #0]
 800f74e:	685b      	ldreq	r3, [r3, #4]
 800f750:	6063      	str	r3, [r4, #4]
 800f752:	bf04      	itt	eq
 800f754:	1949      	addeq	r1, r1, r5
 800f756:	6021      	streq	r1, [r4, #0]
 800f758:	6054      	str	r4, [r2, #4]
 800f75a:	e7ca      	b.n	800f6f2 <_free_r+0x26>
 800f75c:	b003      	add	sp, #12
 800f75e:	bd30      	pop	{r4, r5, pc}
 800f760:	2000853c 	.word	0x2000853c

0800f764 <malloc>:
 800f764:	4b02      	ldr	r3, [pc, #8]	; (800f770 <malloc+0xc>)
 800f766:	4601      	mov	r1, r0
 800f768:	6818      	ldr	r0, [r3, #0]
 800f76a:	f000 b823 	b.w	800f7b4 <_malloc_r>
 800f76e:	bf00      	nop
 800f770:	20000084 	.word	0x20000084

0800f774 <sbrk_aligned>:
 800f774:	b570      	push	{r4, r5, r6, lr}
 800f776:	4e0e      	ldr	r6, [pc, #56]	; (800f7b0 <sbrk_aligned+0x3c>)
 800f778:	460c      	mov	r4, r1
 800f77a:	6831      	ldr	r1, [r6, #0]
 800f77c:	4605      	mov	r5, r0
 800f77e:	b911      	cbnz	r1, 800f786 <sbrk_aligned+0x12>
 800f780:	f000 fcce 	bl	8010120 <_sbrk_r>
 800f784:	6030      	str	r0, [r6, #0]
 800f786:	4621      	mov	r1, r4
 800f788:	4628      	mov	r0, r5
 800f78a:	f000 fcc9 	bl	8010120 <_sbrk_r>
 800f78e:	1c43      	adds	r3, r0, #1
 800f790:	d00a      	beq.n	800f7a8 <sbrk_aligned+0x34>
 800f792:	1cc4      	adds	r4, r0, #3
 800f794:	f024 0403 	bic.w	r4, r4, #3
 800f798:	42a0      	cmp	r0, r4
 800f79a:	d007      	beq.n	800f7ac <sbrk_aligned+0x38>
 800f79c:	1a21      	subs	r1, r4, r0
 800f79e:	4628      	mov	r0, r5
 800f7a0:	f000 fcbe 	bl	8010120 <_sbrk_r>
 800f7a4:	3001      	adds	r0, #1
 800f7a6:	d101      	bne.n	800f7ac <sbrk_aligned+0x38>
 800f7a8:	f04f 34ff 	mov.w	r4, #4294967295
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}
 800f7b0:	20008540 	.word	0x20008540

0800f7b4 <_malloc_r>:
 800f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	1ccd      	adds	r5, r1, #3
 800f7ba:	f025 0503 	bic.w	r5, r5, #3
 800f7be:	3508      	adds	r5, #8
 800f7c0:	2d0c      	cmp	r5, #12
 800f7c2:	bf38      	it	cc
 800f7c4:	250c      	movcc	r5, #12
 800f7c6:	2d00      	cmp	r5, #0
 800f7c8:	4607      	mov	r7, r0
 800f7ca:	db01      	blt.n	800f7d0 <_malloc_r+0x1c>
 800f7cc:	42a9      	cmp	r1, r5
 800f7ce:	d905      	bls.n	800f7dc <_malloc_r+0x28>
 800f7d0:	230c      	movs	r3, #12
 800f7d2:	603b      	str	r3, [r7, #0]
 800f7d4:	2600      	movs	r6, #0
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f8b0 <_malloc_r+0xfc>
 800f7e0:	f000 f868 	bl	800f8b4 <__malloc_lock>
 800f7e4:	f8d8 3000 	ldr.w	r3, [r8]
 800f7e8:	461c      	mov	r4, r3
 800f7ea:	bb5c      	cbnz	r4, 800f844 <_malloc_r+0x90>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	f7ff ffc0 	bl	800f774 <sbrk_aligned>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	d155      	bne.n	800f8a6 <_malloc_r+0xf2>
 800f7fa:	f8d8 4000 	ldr.w	r4, [r8]
 800f7fe:	4626      	mov	r6, r4
 800f800:	2e00      	cmp	r6, #0
 800f802:	d145      	bne.n	800f890 <_malloc_r+0xdc>
 800f804:	2c00      	cmp	r4, #0
 800f806:	d048      	beq.n	800f89a <_malloc_r+0xe6>
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	4631      	mov	r1, r6
 800f80c:	4638      	mov	r0, r7
 800f80e:	eb04 0903 	add.w	r9, r4, r3
 800f812:	f000 fc85 	bl	8010120 <_sbrk_r>
 800f816:	4581      	cmp	r9, r0
 800f818:	d13f      	bne.n	800f89a <_malloc_r+0xe6>
 800f81a:	6821      	ldr	r1, [r4, #0]
 800f81c:	1a6d      	subs	r5, r5, r1
 800f81e:	4629      	mov	r1, r5
 800f820:	4638      	mov	r0, r7
 800f822:	f7ff ffa7 	bl	800f774 <sbrk_aligned>
 800f826:	3001      	adds	r0, #1
 800f828:	d037      	beq.n	800f89a <_malloc_r+0xe6>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	442b      	add	r3, r5
 800f82e:	6023      	str	r3, [r4, #0]
 800f830:	f8d8 3000 	ldr.w	r3, [r8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d038      	beq.n	800f8aa <_malloc_r+0xf6>
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	42a2      	cmp	r2, r4
 800f83c:	d12b      	bne.n	800f896 <_malloc_r+0xe2>
 800f83e:	2200      	movs	r2, #0
 800f840:	605a      	str	r2, [r3, #4]
 800f842:	e00f      	b.n	800f864 <_malloc_r+0xb0>
 800f844:	6822      	ldr	r2, [r4, #0]
 800f846:	1b52      	subs	r2, r2, r5
 800f848:	d41f      	bmi.n	800f88a <_malloc_r+0xd6>
 800f84a:	2a0b      	cmp	r2, #11
 800f84c:	d917      	bls.n	800f87e <_malloc_r+0xca>
 800f84e:	1961      	adds	r1, r4, r5
 800f850:	42a3      	cmp	r3, r4
 800f852:	6025      	str	r5, [r4, #0]
 800f854:	bf18      	it	ne
 800f856:	6059      	strne	r1, [r3, #4]
 800f858:	6863      	ldr	r3, [r4, #4]
 800f85a:	bf08      	it	eq
 800f85c:	f8c8 1000 	streq.w	r1, [r8]
 800f860:	5162      	str	r2, [r4, r5]
 800f862:	604b      	str	r3, [r1, #4]
 800f864:	4638      	mov	r0, r7
 800f866:	f104 060b 	add.w	r6, r4, #11
 800f86a:	f000 f829 	bl	800f8c0 <__malloc_unlock>
 800f86e:	f026 0607 	bic.w	r6, r6, #7
 800f872:	1d23      	adds	r3, r4, #4
 800f874:	1af2      	subs	r2, r6, r3
 800f876:	d0ae      	beq.n	800f7d6 <_malloc_r+0x22>
 800f878:	1b9b      	subs	r3, r3, r6
 800f87a:	50a3      	str	r3, [r4, r2]
 800f87c:	e7ab      	b.n	800f7d6 <_malloc_r+0x22>
 800f87e:	42a3      	cmp	r3, r4
 800f880:	6862      	ldr	r2, [r4, #4]
 800f882:	d1dd      	bne.n	800f840 <_malloc_r+0x8c>
 800f884:	f8c8 2000 	str.w	r2, [r8]
 800f888:	e7ec      	b.n	800f864 <_malloc_r+0xb0>
 800f88a:	4623      	mov	r3, r4
 800f88c:	6864      	ldr	r4, [r4, #4]
 800f88e:	e7ac      	b.n	800f7ea <_malloc_r+0x36>
 800f890:	4634      	mov	r4, r6
 800f892:	6876      	ldr	r6, [r6, #4]
 800f894:	e7b4      	b.n	800f800 <_malloc_r+0x4c>
 800f896:	4613      	mov	r3, r2
 800f898:	e7cc      	b.n	800f834 <_malloc_r+0x80>
 800f89a:	230c      	movs	r3, #12
 800f89c:	603b      	str	r3, [r7, #0]
 800f89e:	4638      	mov	r0, r7
 800f8a0:	f000 f80e 	bl	800f8c0 <__malloc_unlock>
 800f8a4:	e797      	b.n	800f7d6 <_malloc_r+0x22>
 800f8a6:	6025      	str	r5, [r4, #0]
 800f8a8:	e7dc      	b.n	800f864 <_malloc_r+0xb0>
 800f8aa:	605b      	str	r3, [r3, #4]
 800f8ac:	deff      	udf	#255	; 0xff
 800f8ae:	bf00      	nop
 800f8b0:	2000853c 	.word	0x2000853c

0800f8b4 <__malloc_lock>:
 800f8b4:	4801      	ldr	r0, [pc, #4]	; (800f8bc <__malloc_lock+0x8>)
 800f8b6:	f7ff beda 	b.w	800f66e <__retarget_lock_acquire_recursive>
 800f8ba:	bf00      	nop
 800f8bc:	20008538 	.word	0x20008538

0800f8c0 <__malloc_unlock>:
 800f8c0:	4801      	ldr	r0, [pc, #4]	; (800f8c8 <__malloc_unlock+0x8>)
 800f8c2:	f7ff bed5 	b.w	800f670 <__retarget_lock_release_recursive>
 800f8c6:	bf00      	nop
 800f8c8:	20008538 	.word	0x20008538

0800f8cc <__sfputc_r>:
 800f8cc:	6893      	ldr	r3, [r2, #8]
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	b410      	push	{r4}
 800f8d4:	6093      	str	r3, [r2, #8]
 800f8d6:	da08      	bge.n	800f8ea <__sfputc_r+0x1e>
 800f8d8:	6994      	ldr	r4, [r2, #24]
 800f8da:	42a3      	cmp	r3, r4
 800f8dc:	db01      	blt.n	800f8e2 <__sfputc_r+0x16>
 800f8de:	290a      	cmp	r1, #10
 800f8e0:	d103      	bne.n	800f8ea <__sfputc_r+0x1e>
 800f8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8e6:	f000 bb85 	b.w	800fff4 <__swbuf_r>
 800f8ea:	6813      	ldr	r3, [r2, #0]
 800f8ec:	1c58      	adds	r0, r3, #1
 800f8ee:	6010      	str	r0, [r2, #0]
 800f8f0:	7019      	strb	r1, [r3, #0]
 800f8f2:	4608      	mov	r0, r1
 800f8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <__sfputs_r>:
 800f8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	460f      	mov	r7, r1
 800f900:	4614      	mov	r4, r2
 800f902:	18d5      	adds	r5, r2, r3
 800f904:	42ac      	cmp	r4, r5
 800f906:	d101      	bne.n	800f90c <__sfputs_r+0x12>
 800f908:	2000      	movs	r0, #0
 800f90a:	e007      	b.n	800f91c <__sfputs_r+0x22>
 800f90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f910:	463a      	mov	r2, r7
 800f912:	4630      	mov	r0, r6
 800f914:	f7ff ffda 	bl	800f8cc <__sfputc_r>
 800f918:	1c43      	adds	r3, r0, #1
 800f91a:	d1f3      	bne.n	800f904 <__sfputs_r+0xa>
 800f91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f920 <_vfiprintf_r>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	460d      	mov	r5, r1
 800f926:	b09d      	sub	sp, #116	; 0x74
 800f928:	4614      	mov	r4, r2
 800f92a:	4698      	mov	r8, r3
 800f92c:	4606      	mov	r6, r0
 800f92e:	b118      	cbz	r0, 800f938 <_vfiprintf_r+0x18>
 800f930:	6a03      	ldr	r3, [r0, #32]
 800f932:	b90b      	cbnz	r3, 800f938 <_vfiprintf_r+0x18>
 800f934:	f7ff fd8c 	bl	800f450 <__sinit>
 800f938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f93a:	07d9      	lsls	r1, r3, #31
 800f93c:	d405      	bmi.n	800f94a <_vfiprintf_r+0x2a>
 800f93e:	89ab      	ldrh	r3, [r5, #12]
 800f940:	059a      	lsls	r2, r3, #22
 800f942:	d402      	bmi.n	800f94a <_vfiprintf_r+0x2a>
 800f944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f946:	f7ff fe92 	bl	800f66e <__retarget_lock_acquire_recursive>
 800f94a:	89ab      	ldrh	r3, [r5, #12]
 800f94c:	071b      	lsls	r3, r3, #28
 800f94e:	d501      	bpl.n	800f954 <_vfiprintf_r+0x34>
 800f950:	692b      	ldr	r3, [r5, #16]
 800f952:	b99b      	cbnz	r3, 800f97c <_vfiprintf_r+0x5c>
 800f954:	4629      	mov	r1, r5
 800f956:	4630      	mov	r0, r6
 800f958:	f000 fb8a 	bl	8010070 <__swsetup_r>
 800f95c:	b170      	cbz	r0, 800f97c <_vfiprintf_r+0x5c>
 800f95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f960:	07dc      	lsls	r4, r3, #31
 800f962:	d504      	bpl.n	800f96e <_vfiprintf_r+0x4e>
 800f964:	f04f 30ff 	mov.w	r0, #4294967295
 800f968:	b01d      	add	sp, #116	; 0x74
 800f96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96e:	89ab      	ldrh	r3, [r5, #12]
 800f970:	0598      	lsls	r0, r3, #22
 800f972:	d4f7      	bmi.n	800f964 <_vfiprintf_r+0x44>
 800f974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f976:	f7ff fe7b 	bl	800f670 <__retarget_lock_release_recursive>
 800f97a:	e7f3      	b.n	800f964 <_vfiprintf_r+0x44>
 800f97c:	2300      	movs	r3, #0
 800f97e:	9309      	str	r3, [sp, #36]	; 0x24
 800f980:	2320      	movs	r3, #32
 800f982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f986:	f8cd 800c 	str.w	r8, [sp, #12]
 800f98a:	2330      	movs	r3, #48	; 0x30
 800f98c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fb40 <_vfiprintf_r+0x220>
 800f990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f994:	f04f 0901 	mov.w	r9, #1
 800f998:	4623      	mov	r3, r4
 800f99a:	469a      	mov	sl, r3
 800f99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9a0:	b10a      	cbz	r2, 800f9a6 <_vfiprintf_r+0x86>
 800f9a2:	2a25      	cmp	r2, #37	; 0x25
 800f9a4:	d1f9      	bne.n	800f99a <_vfiprintf_r+0x7a>
 800f9a6:	ebba 0b04 	subs.w	fp, sl, r4
 800f9aa:	d00b      	beq.n	800f9c4 <_vfiprintf_r+0xa4>
 800f9ac:	465b      	mov	r3, fp
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7ff ffa1 	bl	800f8fa <__sfputs_r>
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	f000 80a9 	beq.w	800fb10 <_vfiprintf_r+0x1f0>
 800f9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9c0:	445a      	add	r2, fp
 800f9c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f000 80a1 	beq.w	800fb10 <_vfiprintf_r+0x1f0>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9d8:	f10a 0a01 	add.w	sl, sl, #1
 800f9dc:	9304      	str	r3, [sp, #16]
 800f9de:	9307      	str	r3, [sp, #28]
 800f9e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9e4:	931a      	str	r3, [sp, #104]	; 0x68
 800f9e6:	4654      	mov	r4, sl
 800f9e8:	2205      	movs	r2, #5
 800f9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ee:	4854      	ldr	r0, [pc, #336]	; (800fb40 <_vfiprintf_r+0x220>)
 800f9f0:	f7f0 fbf6 	bl	80001e0 <memchr>
 800f9f4:	9a04      	ldr	r2, [sp, #16]
 800f9f6:	b9d8      	cbnz	r0, 800fa30 <_vfiprintf_r+0x110>
 800f9f8:	06d1      	lsls	r1, r2, #27
 800f9fa:	bf44      	itt	mi
 800f9fc:	2320      	movmi	r3, #32
 800f9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa02:	0713      	lsls	r3, r2, #28
 800fa04:	bf44      	itt	mi
 800fa06:	232b      	movmi	r3, #43	; 0x2b
 800fa08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa0c:	f89a 3000 	ldrb.w	r3, [sl]
 800fa10:	2b2a      	cmp	r3, #42	; 0x2a
 800fa12:	d015      	beq.n	800fa40 <_vfiprintf_r+0x120>
 800fa14:	9a07      	ldr	r2, [sp, #28]
 800fa16:	4654      	mov	r4, sl
 800fa18:	2000      	movs	r0, #0
 800fa1a:	f04f 0c0a 	mov.w	ip, #10
 800fa1e:	4621      	mov	r1, r4
 800fa20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa24:	3b30      	subs	r3, #48	; 0x30
 800fa26:	2b09      	cmp	r3, #9
 800fa28:	d94d      	bls.n	800fac6 <_vfiprintf_r+0x1a6>
 800fa2a:	b1b0      	cbz	r0, 800fa5a <_vfiprintf_r+0x13a>
 800fa2c:	9207      	str	r2, [sp, #28]
 800fa2e:	e014      	b.n	800fa5a <_vfiprintf_r+0x13a>
 800fa30:	eba0 0308 	sub.w	r3, r0, r8
 800fa34:	fa09 f303 	lsl.w	r3, r9, r3
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	9304      	str	r3, [sp, #16]
 800fa3c:	46a2      	mov	sl, r4
 800fa3e:	e7d2      	b.n	800f9e6 <_vfiprintf_r+0xc6>
 800fa40:	9b03      	ldr	r3, [sp, #12]
 800fa42:	1d19      	adds	r1, r3, #4
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	9103      	str	r1, [sp, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bfbb      	ittet	lt
 800fa4c:	425b      	neglt	r3, r3
 800fa4e:	f042 0202 	orrlt.w	r2, r2, #2
 800fa52:	9307      	strge	r3, [sp, #28]
 800fa54:	9307      	strlt	r3, [sp, #28]
 800fa56:	bfb8      	it	lt
 800fa58:	9204      	strlt	r2, [sp, #16]
 800fa5a:	7823      	ldrb	r3, [r4, #0]
 800fa5c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa5e:	d10c      	bne.n	800fa7a <_vfiprintf_r+0x15a>
 800fa60:	7863      	ldrb	r3, [r4, #1]
 800fa62:	2b2a      	cmp	r3, #42	; 0x2a
 800fa64:	d134      	bne.n	800fad0 <_vfiprintf_r+0x1b0>
 800fa66:	9b03      	ldr	r3, [sp, #12]
 800fa68:	1d1a      	adds	r2, r3, #4
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	9203      	str	r2, [sp, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bfb8      	it	lt
 800fa72:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa76:	3402      	adds	r4, #2
 800fa78:	9305      	str	r3, [sp, #20]
 800fa7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fb50 <_vfiprintf_r+0x230>
 800fa7e:	7821      	ldrb	r1, [r4, #0]
 800fa80:	2203      	movs	r2, #3
 800fa82:	4650      	mov	r0, sl
 800fa84:	f7f0 fbac 	bl	80001e0 <memchr>
 800fa88:	b138      	cbz	r0, 800fa9a <_vfiprintf_r+0x17a>
 800fa8a:	9b04      	ldr	r3, [sp, #16]
 800fa8c:	eba0 000a 	sub.w	r0, r0, sl
 800fa90:	2240      	movs	r2, #64	; 0x40
 800fa92:	4082      	lsls	r2, r0
 800fa94:	4313      	orrs	r3, r2
 800fa96:	3401      	adds	r4, #1
 800fa98:	9304      	str	r3, [sp, #16]
 800fa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa9e:	4829      	ldr	r0, [pc, #164]	; (800fb44 <_vfiprintf_r+0x224>)
 800faa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faa4:	2206      	movs	r2, #6
 800faa6:	f7f0 fb9b 	bl	80001e0 <memchr>
 800faaa:	2800      	cmp	r0, #0
 800faac:	d03f      	beq.n	800fb2e <_vfiprintf_r+0x20e>
 800faae:	4b26      	ldr	r3, [pc, #152]	; (800fb48 <_vfiprintf_r+0x228>)
 800fab0:	bb1b      	cbnz	r3, 800fafa <_vfiprintf_r+0x1da>
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	3307      	adds	r3, #7
 800fab6:	f023 0307 	bic.w	r3, r3, #7
 800faba:	3308      	adds	r3, #8
 800fabc:	9303      	str	r3, [sp, #12]
 800fabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac0:	443b      	add	r3, r7
 800fac2:	9309      	str	r3, [sp, #36]	; 0x24
 800fac4:	e768      	b.n	800f998 <_vfiprintf_r+0x78>
 800fac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800faca:	460c      	mov	r4, r1
 800facc:	2001      	movs	r0, #1
 800face:	e7a6      	b.n	800fa1e <_vfiprintf_r+0xfe>
 800fad0:	2300      	movs	r3, #0
 800fad2:	3401      	adds	r4, #1
 800fad4:	9305      	str	r3, [sp, #20]
 800fad6:	4619      	mov	r1, r3
 800fad8:	f04f 0c0a 	mov.w	ip, #10
 800fadc:	4620      	mov	r0, r4
 800fade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fae2:	3a30      	subs	r2, #48	; 0x30
 800fae4:	2a09      	cmp	r2, #9
 800fae6:	d903      	bls.n	800faf0 <_vfiprintf_r+0x1d0>
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d0c6      	beq.n	800fa7a <_vfiprintf_r+0x15a>
 800faec:	9105      	str	r1, [sp, #20]
 800faee:	e7c4      	b.n	800fa7a <_vfiprintf_r+0x15a>
 800faf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800faf4:	4604      	mov	r4, r0
 800faf6:	2301      	movs	r3, #1
 800faf8:	e7f0      	b.n	800fadc <_vfiprintf_r+0x1bc>
 800fafa:	ab03      	add	r3, sp, #12
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	462a      	mov	r2, r5
 800fb00:	4b12      	ldr	r3, [pc, #72]	; (800fb4c <_vfiprintf_r+0x22c>)
 800fb02:	a904      	add	r1, sp, #16
 800fb04:	4630      	mov	r0, r6
 800fb06:	f3af 8000 	nop.w
 800fb0a:	4607      	mov	r7, r0
 800fb0c:	1c78      	adds	r0, r7, #1
 800fb0e:	d1d6      	bne.n	800fabe <_vfiprintf_r+0x19e>
 800fb10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb12:	07d9      	lsls	r1, r3, #31
 800fb14:	d405      	bmi.n	800fb22 <_vfiprintf_r+0x202>
 800fb16:	89ab      	ldrh	r3, [r5, #12]
 800fb18:	059a      	lsls	r2, r3, #22
 800fb1a:	d402      	bmi.n	800fb22 <_vfiprintf_r+0x202>
 800fb1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb1e:	f7ff fda7 	bl	800f670 <__retarget_lock_release_recursive>
 800fb22:	89ab      	ldrh	r3, [r5, #12]
 800fb24:	065b      	lsls	r3, r3, #25
 800fb26:	f53f af1d 	bmi.w	800f964 <_vfiprintf_r+0x44>
 800fb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb2c:	e71c      	b.n	800f968 <_vfiprintf_r+0x48>
 800fb2e:	ab03      	add	r3, sp, #12
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	462a      	mov	r2, r5
 800fb34:	4b05      	ldr	r3, [pc, #20]	; (800fb4c <_vfiprintf_r+0x22c>)
 800fb36:	a904      	add	r1, sp, #16
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 f879 	bl	800fc30 <_printf_i>
 800fb3e:	e7e4      	b.n	800fb0a <_vfiprintf_r+0x1ea>
 800fb40:	08012e91 	.word	0x08012e91
 800fb44:	08012e9b 	.word	0x08012e9b
 800fb48:	00000000 	.word	0x00000000
 800fb4c:	0800f8fb 	.word	0x0800f8fb
 800fb50:	08012e97 	.word	0x08012e97

0800fb54 <_printf_common>:
 800fb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb58:	4616      	mov	r6, r2
 800fb5a:	4699      	mov	r9, r3
 800fb5c:	688a      	ldr	r2, [r1, #8]
 800fb5e:	690b      	ldr	r3, [r1, #16]
 800fb60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb64:	4293      	cmp	r3, r2
 800fb66:	bfb8      	it	lt
 800fb68:	4613      	movlt	r3, r2
 800fb6a:	6033      	str	r3, [r6, #0]
 800fb6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb70:	4607      	mov	r7, r0
 800fb72:	460c      	mov	r4, r1
 800fb74:	b10a      	cbz	r2, 800fb7a <_printf_common+0x26>
 800fb76:	3301      	adds	r3, #1
 800fb78:	6033      	str	r3, [r6, #0]
 800fb7a:	6823      	ldr	r3, [r4, #0]
 800fb7c:	0699      	lsls	r1, r3, #26
 800fb7e:	bf42      	ittt	mi
 800fb80:	6833      	ldrmi	r3, [r6, #0]
 800fb82:	3302      	addmi	r3, #2
 800fb84:	6033      	strmi	r3, [r6, #0]
 800fb86:	6825      	ldr	r5, [r4, #0]
 800fb88:	f015 0506 	ands.w	r5, r5, #6
 800fb8c:	d106      	bne.n	800fb9c <_printf_common+0x48>
 800fb8e:	f104 0a19 	add.w	sl, r4, #25
 800fb92:	68e3      	ldr	r3, [r4, #12]
 800fb94:	6832      	ldr	r2, [r6, #0]
 800fb96:	1a9b      	subs	r3, r3, r2
 800fb98:	42ab      	cmp	r3, r5
 800fb9a:	dc26      	bgt.n	800fbea <_printf_common+0x96>
 800fb9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fba0:	1e13      	subs	r3, r2, #0
 800fba2:	6822      	ldr	r2, [r4, #0]
 800fba4:	bf18      	it	ne
 800fba6:	2301      	movne	r3, #1
 800fba8:	0692      	lsls	r2, r2, #26
 800fbaa:	d42b      	bmi.n	800fc04 <_printf_common+0xb0>
 800fbac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbb0:	4649      	mov	r1, r9
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	47c0      	blx	r8
 800fbb6:	3001      	adds	r0, #1
 800fbb8:	d01e      	beq.n	800fbf8 <_printf_common+0xa4>
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	6922      	ldr	r2, [r4, #16]
 800fbbe:	f003 0306 	and.w	r3, r3, #6
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	bf02      	ittt	eq
 800fbc6:	68e5      	ldreq	r5, [r4, #12]
 800fbc8:	6833      	ldreq	r3, [r6, #0]
 800fbca:	1aed      	subeq	r5, r5, r3
 800fbcc:	68a3      	ldr	r3, [r4, #8]
 800fbce:	bf0c      	ite	eq
 800fbd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbd4:	2500      	movne	r5, #0
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	bfc4      	itt	gt
 800fbda:	1a9b      	subgt	r3, r3, r2
 800fbdc:	18ed      	addgt	r5, r5, r3
 800fbde:	2600      	movs	r6, #0
 800fbe0:	341a      	adds	r4, #26
 800fbe2:	42b5      	cmp	r5, r6
 800fbe4:	d11a      	bne.n	800fc1c <_printf_common+0xc8>
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	e008      	b.n	800fbfc <_printf_common+0xa8>
 800fbea:	2301      	movs	r3, #1
 800fbec:	4652      	mov	r2, sl
 800fbee:	4649      	mov	r1, r9
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	47c0      	blx	r8
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	d103      	bne.n	800fc00 <_printf_common+0xac>
 800fbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc00:	3501      	adds	r5, #1
 800fc02:	e7c6      	b.n	800fb92 <_printf_common+0x3e>
 800fc04:	18e1      	adds	r1, r4, r3
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	2030      	movs	r0, #48	; 0x30
 800fc0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc0e:	4422      	add	r2, r4
 800fc10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc18:	3302      	adds	r3, #2
 800fc1a:	e7c7      	b.n	800fbac <_printf_common+0x58>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	4622      	mov	r2, r4
 800fc20:	4649      	mov	r1, r9
 800fc22:	4638      	mov	r0, r7
 800fc24:	47c0      	blx	r8
 800fc26:	3001      	adds	r0, #1
 800fc28:	d0e6      	beq.n	800fbf8 <_printf_common+0xa4>
 800fc2a:	3601      	adds	r6, #1
 800fc2c:	e7d9      	b.n	800fbe2 <_printf_common+0x8e>
	...

0800fc30 <_printf_i>:
 800fc30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc34:	7e0f      	ldrb	r7, [r1, #24]
 800fc36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc38:	2f78      	cmp	r7, #120	; 0x78
 800fc3a:	4691      	mov	r9, r2
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	460c      	mov	r4, r1
 800fc40:	469a      	mov	sl, r3
 800fc42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc46:	d807      	bhi.n	800fc58 <_printf_i+0x28>
 800fc48:	2f62      	cmp	r7, #98	; 0x62
 800fc4a:	d80a      	bhi.n	800fc62 <_printf_i+0x32>
 800fc4c:	2f00      	cmp	r7, #0
 800fc4e:	f000 80d4 	beq.w	800fdfa <_printf_i+0x1ca>
 800fc52:	2f58      	cmp	r7, #88	; 0x58
 800fc54:	f000 80c0 	beq.w	800fdd8 <_printf_i+0x1a8>
 800fc58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc60:	e03a      	b.n	800fcd8 <_printf_i+0xa8>
 800fc62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc66:	2b15      	cmp	r3, #21
 800fc68:	d8f6      	bhi.n	800fc58 <_printf_i+0x28>
 800fc6a:	a101      	add	r1, pc, #4	; (adr r1, 800fc70 <_printf_i+0x40>)
 800fc6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc70:	0800fcc9 	.word	0x0800fcc9
 800fc74:	0800fcdd 	.word	0x0800fcdd
 800fc78:	0800fc59 	.word	0x0800fc59
 800fc7c:	0800fc59 	.word	0x0800fc59
 800fc80:	0800fc59 	.word	0x0800fc59
 800fc84:	0800fc59 	.word	0x0800fc59
 800fc88:	0800fcdd 	.word	0x0800fcdd
 800fc8c:	0800fc59 	.word	0x0800fc59
 800fc90:	0800fc59 	.word	0x0800fc59
 800fc94:	0800fc59 	.word	0x0800fc59
 800fc98:	0800fc59 	.word	0x0800fc59
 800fc9c:	0800fde1 	.word	0x0800fde1
 800fca0:	0800fd09 	.word	0x0800fd09
 800fca4:	0800fd9b 	.word	0x0800fd9b
 800fca8:	0800fc59 	.word	0x0800fc59
 800fcac:	0800fc59 	.word	0x0800fc59
 800fcb0:	0800fe03 	.word	0x0800fe03
 800fcb4:	0800fc59 	.word	0x0800fc59
 800fcb8:	0800fd09 	.word	0x0800fd09
 800fcbc:	0800fc59 	.word	0x0800fc59
 800fcc0:	0800fc59 	.word	0x0800fc59
 800fcc4:	0800fda3 	.word	0x0800fda3
 800fcc8:	682b      	ldr	r3, [r5, #0]
 800fcca:	1d1a      	adds	r2, r3, #4
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	602a      	str	r2, [r5, #0]
 800fcd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e09f      	b.n	800fe1c <_printf_i+0x1ec>
 800fcdc:	6820      	ldr	r0, [r4, #0]
 800fcde:	682b      	ldr	r3, [r5, #0]
 800fce0:	0607      	lsls	r7, r0, #24
 800fce2:	f103 0104 	add.w	r1, r3, #4
 800fce6:	6029      	str	r1, [r5, #0]
 800fce8:	d501      	bpl.n	800fcee <_printf_i+0xbe>
 800fcea:	681e      	ldr	r6, [r3, #0]
 800fcec:	e003      	b.n	800fcf6 <_printf_i+0xc6>
 800fcee:	0646      	lsls	r6, r0, #25
 800fcf0:	d5fb      	bpl.n	800fcea <_printf_i+0xba>
 800fcf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fcf6:	2e00      	cmp	r6, #0
 800fcf8:	da03      	bge.n	800fd02 <_printf_i+0xd2>
 800fcfa:	232d      	movs	r3, #45	; 0x2d
 800fcfc:	4276      	negs	r6, r6
 800fcfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd02:	485a      	ldr	r0, [pc, #360]	; (800fe6c <_printf_i+0x23c>)
 800fd04:	230a      	movs	r3, #10
 800fd06:	e012      	b.n	800fd2e <_printf_i+0xfe>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	6820      	ldr	r0, [r4, #0]
 800fd0c:	1d19      	adds	r1, r3, #4
 800fd0e:	6029      	str	r1, [r5, #0]
 800fd10:	0605      	lsls	r5, r0, #24
 800fd12:	d501      	bpl.n	800fd18 <_printf_i+0xe8>
 800fd14:	681e      	ldr	r6, [r3, #0]
 800fd16:	e002      	b.n	800fd1e <_printf_i+0xee>
 800fd18:	0641      	lsls	r1, r0, #25
 800fd1a:	d5fb      	bpl.n	800fd14 <_printf_i+0xe4>
 800fd1c:	881e      	ldrh	r6, [r3, #0]
 800fd1e:	4853      	ldr	r0, [pc, #332]	; (800fe6c <_printf_i+0x23c>)
 800fd20:	2f6f      	cmp	r7, #111	; 0x6f
 800fd22:	bf0c      	ite	eq
 800fd24:	2308      	moveq	r3, #8
 800fd26:	230a      	movne	r3, #10
 800fd28:	2100      	movs	r1, #0
 800fd2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd2e:	6865      	ldr	r5, [r4, #4]
 800fd30:	60a5      	str	r5, [r4, #8]
 800fd32:	2d00      	cmp	r5, #0
 800fd34:	bfa2      	ittt	ge
 800fd36:	6821      	ldrge	r1, [r4, #0]
 800fd38:	f021 0104 	bicge.w	r1, r1, #4
 800fd3c:	6021      	strge	r1, [r4, #0]
 800fd3e:	b90e      	cbnz	r6, 800fd44 <_printf_i+0x114>
 800fd40:	2d00      	cmp	r5, #0
 800fd42:	d04b      	beq.n	800fddc <_printf_i+0x1ac>
 800fd44:	4615      	mov	r5, r2
 800fd46:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd4a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd4e:	5dc7      	ldrb	r7, [r0, r7]
 800fd50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd54:	4637      	mov	r7, r6
 800fd56:	42bb      	cmp	r3, r7
 800fd58:	460e      	mov	r6, r1
 800fd5a:	d9f4      	bls.n	800fd46 <_printf_i+0x116>
 800fd5c:	2b08      	cmp	r3, #8
 800fd5e:	d10b      	bne.n	800fd78 <_printf_i+0x148>
 800fd60:	6823      	ldr	r3, [r4, #0]
 800fd62:	07de      	lsls	r6, r3, #31
 800fd64:	d508      	bpl.n	800fd78 <_printf_i+0x148>
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	6861      	ldr	r1, [r4, #4]
 800fd6a:	4299      	cmp	r1, r3
 800fd6c:	bfde      	ittt	le
 800fd6e:	2330      	movle	r3, #48	; 0x30
 800fd70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd78:	1b52      	subs	r2, r2, r5
 800fd7a:	6122      	str	r2, [r4, #16]
 800fd7c:	f8cd a000 	str.w	sl, [sp]
 800fd80:	464b      	mov	r3, r9
 800fd82:	aa03      	add	r2, sp, #12
 800fd84:	4621      	mov	r1, r4
 800fd86:	4640      	mov	r0, r8
 800fd88:	f7ff fee4 	bl	800fb54 <_printf_common>
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	d14a      	bne.n	800fe26 <_printf_i+0x1f6>
 800fd90:	f04f 30ff 	mov.w	r0, #4294967295
 800fd94:	b004      	add	sp, #16
 800fd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	f043 0320 	orr.w	r3, r3, #32
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	4833      	ldr	r0, [pc, #204]	; (800fe70 <_printf_i+0x240>)
 800fda4:	2778      	movs	r7, #120	; 0x78
 800fda6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	6829      	ldr	r1, [r5, #0]
 800fdae:	061f      	lsls	r7, r3, #24
 800fdb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdb4:	d402      	bmi.n	800fdbc <_printf_i+0x18c>
 800fdb6:	065f      	lsls	r7, r3, #25
 800fdb8:	bf48      	it	mi
 800fdba:	b2b6      	uxthmi	r6, r6
 800fdbc:	07df      	lsls	r7, r3, #31
 800fdbe:	bf48      	it	mi
 800fdc0:	f043 0320 	orrmi.w	r3, r3, #32
 800fdc4:	6029      	str	r1, [r5, #0]
 800fdc6:	bf48      	it	mi
 800fdc8:	6023      	strmi	r3, [r4, #0]
 800fdca:	b91e      	cbnz	r6, 800fdd4 <_printf_i+0x1a4>
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	f023 0320 	bic.w	r3, r3, #32
 800fdd2:	6023      	str	r3, [r4, #0]
 800fdd4:	2310      	movs	r3, #16
 800fdd6:	e7a7      	b.n	800fd28 <_printf_i+0xf8>
 800fdd8:	4824      	ldr	r0, [pc, #144]	; (800fe6c <_printf_i+0x23c>)
 800fdda:	e7e4      	b.n	800fda6 <_printf_i+0x176>
 800fddc:	4615      	mov	r5, r2
 800fdde:	e7bd      	b.n	800fd5c <_printf_i+0x12c>
 800fde0:	682b      	ldr	r3, [r5, #0]
 800fde2:	6826      	ldr	r6, [r4, #0]
 800fde4:	6961      	ldr	r1, [r4, #20]
 800fde6:	1d18      	adds	r0, r3, #4
 800fde8:	6028      	str	r0, [r5, #0]
 800fdea:	0635      	lsls	r5, r6, #24
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	d501      	bpl.n	800fdf4 <_printf_i+0x1c4>
 800fdf0:	6019      	str	r1, [r3, #0]
 800fdf2:	e002      	b.n	800fdfa <_printf_i+0x1ca>
 800fdf4:	0670      	lsls	r0, r6, #25
 800fdf6:	d5fb      	bpl.n	800fdf0 <_printf_i+0x1c0>
 800fdf8:	8019      	strh	r1, [r3, #0]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	6123      	str	r3, [r4, #16]
 800fdfe:	4615      	mov	r5, r2
 800fe00:	e7bc      	b.n	800fd7c <_printf_i+0x14c>
 800fe02:	682b      	ldr	r3, [r5, #0]
 800fe04:	1d1a      	adds	r2, r3, #4
 800fe06:	602a      	str	r2, [r5, #0]
 800fe08:	681d      	ldr	r5, [r3, #0]
 800fe0a:	6862      	ldr	r2, [r4, #4]
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f7f0 f9e6 	bl	80001e0 <memchr>
 800fe14:	b108      	cbz	r0, 800fe1a <_printf_i+0x1ea>
 800fe16:	1b40      	subs	r0, r0, r5
 800fe18:	6060      	str	r0, [r4, #4]
 800fe1a:	6863      	ldr	r3, [r4, #4]
 800fe1c:	6123      	str	r3, [r4, #16]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe24:	e7aa      	b.n	800fd7c <_printf_i+0x14c>
 800fe26:	6923      	ldr	r3, [r4, #16]
 800fe28:	462a      	mov	r2, r5
 800fe2a:	4649      	mov	r1, r9
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	47d0      	blx	sl
 800fe30:	3001      	adds	r0, #1
 800fe32:	d0ad      	beq.n	800fd90 <_printf_i+0x160>
 800fe34:	6823      	ldr	r3, [r4, #0]
 800fe36:	079b      	lsls	r3, r3, #30
 800fe38:	d413      	bmi.n	800fe62 <_printf_i+0x232>
 800fe3a:	68e0      	ldr	r0, [r4, #12]
 800fe3c:	9b03      	ldr	r3, [sp, #12]
 800fe3e:	4298      	cmp	r0, r3
 800fe40:	bfb8      	it	lt
 800fe42:	4618      	movlt	r0, r3
 800fe44:	e7a6      	b.n	800fd94 <_printf_i+0x164>
 800fe46:	2301      	movs	r3, #1
 800fe48:	4632      	mov	r2, r6
 800fe4a:	4649      	mov	r1, r9
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	47d0      	blx	sl
 800fe50:	3001      	adds	r0, #1
 800fe52:	d09d      	beq.n	800fd90 <_printf_i+0x160>
 800fe54:	3501      	adds	r5, #1
 800fe56:	68e3      	ldr	r3, [r4, #12]
 800fe58:	9903      	ldr	r1, [sp, #12]
 800fe5a:	1a5b      	subs	r3, r3, r1
 800fe5c:	42ab      	cmp	r3, r5
 800fe5e:	dcf2      	bgt.n	800fe46 <_printf_i+0x216>
 800fe60:	e7eb      	b.n	800fe3a <_printf_i+0x20a>
 800fe62:	2500      	movs	r5, #0
 800fe64:	f104 0619 	add.w	r6, r4, #25
 800fe68:	e7f5      	b.n	800fe56 <_printf_i+0x226>
 800fe6a:	bf00      	nop
 800fe6c:	08012ea2 	.word	0x08012ea2
 800fe70:	08012eb3 	.word	0x08012eb3

0800fe74 <__sflush_r>:
 800fe74:	898a      	ldrh	r2, [r1, #12]
 800fe76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7a:	4605      	mov	r5, r0
 800fe7c:	0710      	lsls	r0, r2, #28
 800fe7e:	460c      	mov	r4, r1
 800fe80:	d458      	bmi.n	800ff34 <__sflush_r+0xc0>
 800fe82:	684b      	ldr	r3, [r1, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	dc05      	bgt.n	800fe94 <__sflush_r+0x20>
 800fe88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	dc02      	bgt.n	800fe94 <__sflush_r+0x20>
 800fe8e:	2000      	movs	r0, #0
 800fe90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe96:	2e00      	cmp	r6, #0
 800fe98:	d0f9      	beq.n	800fe8e <__sflush_r+0x1a>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fea0:	682f      	ldr	r7, [r5, #0]
 800fea2:	6a21      	ldr	r1, [r4, #32]
 800fea4:	602b      	str	r3, [r5, #0]
 800fea6:	d032      	beq.n	800ff0e <__sflush_r+0x9a>
 800fea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800feaa:	89a3      	ldrh	r3, [r4, #12]
 800feac:	075a      	lsls	r2, r3, #29
 800feae:	d505      	bpl.n	800febc <__sflush_r+0x48>
 800feb0:	6863      	ldr	r3, [r4, #4]
 800feb2:	1ac0      	subs	r0, r0, r3
 800feb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800feb6:	b10b      	cbz	r3, 800febc <__sflush_r+0x48>
 800feb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800feba:	1ac0      	subs	r0, r0, r3
 800febc:	2300      	movs	r3, #0
 800febe:	4602      	mov	r2, r0
 800fec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fec2:	6a21      	ldr	r1, [r4, #32]
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b0      	blx	r6
 800fec8:	1c43      	adds	r3, r0, #1
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	d106      	bne.n	800fedc <__sflush_r+0x68>
 800fece:	6829      	ldr	r1, [r5, #0]
 800fed0:	291d      	cmp	r1, #29
 800fed2:	d82b      	bhi.n	800ff2c <__sflush_r+0xb8>
 800fed4:	4a29      	ldr	r2, [pc, #164]	; (800ff7c <__sflush_r+0x108>)
 800fed6:	410a      	asrs	r2, r1
 800fed8:	07d6      	lsls	r6, r2, #31
 800feda:	d427      	bmi.n	800ff2c <__sflush_r+0xb8>
 800fedc:	2200      	movs	r2, #0
 800fede:	6062      	str	r2, [r4, #4]
 800fee0:	04d9      	lsls	r1, r3, #19
 800fee2:	6922      	ldr	r2, [r4, #16]
 800fee4:	6022      	str	r2, [r4, #0]
 800fee6:	d504      	bpl.n	800fef2 <__sflush_r+0x7e>
 800fee8:	1c42      	adds	r2, r0, #1
 800feea:	d101      	bne.n	800fef0 <__sflush_r+0x7c>
 800feec:	682b      	ldr	r3, [r5, #0]
 800feee:	b903      	cbnz	r3, 800fef2 <__sflush_r+0x7e>
 800fef0:	6560      	str	r0, [r4, #84]	; 0x54
 800fef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fef4:	602f      	str	r7, [r5, #0]
 800fef6:	2900      	cmp	r1, #0
 800fef8:	d0c9      	beq.n	800fe8e <__sflush_r+0x1a>
 800fefa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fefe:	4299      	cmp	r1, r3
 800ff00:	d002      	beq.n	800ff08 <__sflush_r+0x94>
 800ff02:	4628      	mov	r0, r5
 800ff04:	f7ff fbe2 	bl	800f6cc <_free_r>
 800ff08:	2000      	movs	r0, #0
 800ff0a:	6360      	str	r0, [r4, #52]	; 0x34
 800ff0c:	e7c0      	b.n	800fe90 <__sflush_r+0x1c>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	4628      	mov	r0, r5
 800ff12:	47b0      	blx	r6
 800ff14:	1c41      	adds	r1, r0, #1
 800ff16:	d1c8      	bne.n	800feaa <__sflush_r+0x36>
 800ff18:	682b      	ldr	r3, [r5, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d0c5      	beq.n	800feaa <__sflush_r+0x36>
 800ff1e:	2b1d      	cmp	r3, #29
 800ff20:	d001      	beq.n	800ff26 <__sflush_r+0xb2>
 800ff22:	2b16      	cmp	r3, #22
 800ff24:	d101      	bne.n	800ff2a <__sflush_r+0xb6>
 800ff26:	602f      	str	r7, [r5, #0]
 800ff28:	e7b1      	b.n	800fe8e <__sflush_r+0x1a>
 800ff2a:	89a3      	ldrh	r3, [r4, #12]
 800ff2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff30:	81a3      	strh	r3, [r4, #12]
 800ff32:	e7ad      	b.n	800fe90 <__sflush_r+0x1c>
 800ff34:	690f      	ldr	r7, [r1, #16]
 800ff36:	2f00      	cmp	r7, #0
 800ff38:	d0a9      	beq.n	800fe8e <__sflush_r+0x1a>
 800ff3a:	0793      	lsls	r3, r2, #30
 800ff3c:	680e      	ldr	r6, [r1, #0]
 800ff3e:	bf08      	it	eq
 800ff40:	694b      	ldreq	r3, [r1, #20]
 800ff42:	600f      	str	r7, [r1, #0]
 800ff44:	bf18      	it	ne
 800ff46:	2300      	movne	r3, #0
 800ff48:	eba6 0807 	sub.w	r8, r6, r7
 800ff4c:	608b      	str	r3, [r1, #8]
 800ff4e:	f1b8 0f00 	cmp.w	r8, #0
 800ff52:	dd9c      	ble.n	800fe8e <__sflush_r+0x1a>
 800ff54:	6a21      	ldr	r1, [r4, #32]
 800ff56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff58:	4643      	mov	r3, r8
 800ff5a:	463a      	mov	r2, r7
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	47b0      	blx	r6
 800ff60:	2800      	cmp	r0, #0
 800ff62:	dc06      	bgt.n	800ff72 <__sflush_r+0xfe>
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff6a:	81a3      	strh	r3, [r4, #12]
 800ff6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff70:	e78e      	b.n	800fe90 <__sflush_r+0x1c>
 800ff72:	4407      	add	r7, r0
 800ff74:	eba8 0800 	sub.w	r8, r8, r0
 800ff78:	e7e9      	b.n	800ff4e <__sflush_r+0xda>
 800ff7a:	bf00      	nop
 800ff7c:	dfbffffe 	.word	0xdfbffffe

0800ff80 <_fflush_r>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	690b      	ldr	r3, [r1, #16]
 800ff84:	4605      	mov	r5, r0
 800ff86:	460c      	mov	r4, r1
 800ff88:	b913      	cbnz	r3, 800ff90 <_fflush_r+0x10>
 800ff8a:	2500      	movs	r5, #0
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	bd38      	pop	{r3, r4, r5, pc}
 800ff90:	b118      	cbz	r0, 800ff9a <_fflush_r+0x1a>
 800ff92:	6a03      	ldr	r3, [r0, #32]
 800ff94:	b90b      	cbnz	r3, 800ff9a <_fflush_r+0x1a>
 800ff96:	f7ff fa5b 	bl	800f450 <__sinit>
 800ff9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d0f3      	beq.n	800ff8a <_fflush_r+0xa>
 800ffa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffa4:	07d0      	lsls	r0, r2, #31
 800ffa6:	d404      	bmi.n	800ffb2 <_fflush_r+0x32>
 800ffa8:	0599      	lsls	r1, r3, #22
 800ffaa:	d402      	bmi.n	800ffb2 <_fflush_r+0x32>
 800ffac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffae:	f7ff fb5e 	bl	800f66e <__retarget_lock_acquire_recursive>
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	4621      	mov	r1, r4
 800ffb6:	f7ff ff5d 	bl	800fe74 <__sflush_r>
 800ffba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffbc:	07da      	lsls	r2, r3, #31
 800ffbe:	4605      	mov	r5, r0
 800ffc0:	d4e4      	bmi.n	800ff8c <_fflush_r+0xc>
 800ffc2:	89a3      	ldrh	r3, [r4, #12]
 800ffc4:	059b      	lsls	r3, r3, #22
 800ffc6:	d4e1      	bmi.n	800ff8c <_fflush_r+0xc>
 800ffc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffca:	f7ff fb51 	bl	800f670 <__retarget_lock_release_recursive>
 800ffce:	e7dd      	b.n	800ff8c <_fflush_r+0xc>

0800ffd0 <fiprintf>:
 800ffd0:	b40e      	push	{r1, r2, r3}
 800ffd2:	b503      	push	{r0, r1, lr}
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	ab03      	add	r3, sp, #12
 800ffd8:	4805      	ldr	r0, [pc, #20]	; (800fff0 <fiprintf+0x20>)
 800ffda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffde:	6800      	ldr	r0, [r0, #0]
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	f7ff fc9d 	bl	800f920 <_vfiprintf_r>
 800ffe6:	b002      	add	sp, #8
 800ffe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffec:	b003      	add	sp, #12
 800ffee:	4770      	bx	lr
 800fff0:	20000084 	.word	0x20000084

0800fff4 <__swbuf_r>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	460e      	mov	r6, r1
 800fff8:	4614      	mov	r4, r2
 800fffa:	4605      	mov	r5, r0
 800fffc:	b118      	cbz	r0, 8010006 <__swbuf_r+0x12>
 800fffe:	6a03      	ldr	r3, [r0, #32]
 8010000:	b90b      	cbnz	r3, 8010006 <__swbuf_r+0x12>
 8010002:	f7ff fa25 	bl	800f450 <__sinit>
 8010006:	69a3      	ldr	r3, [r4, #24]
 8010008:	60a3      	str	r3, [r4, #8]
 801000a:	89a3      	ldrh	r3, [r4, #12]
 801000c:	071a      	lsls	r2, r3, #28
 801000e:	d525      	bpl.n	801005c <__swbuf_r+0x68>
 8010010:	6923      	ldr	r3, [r4, #16]
 8010012:	b31b      	cbz	r3, 801005c <__swbuf_r+0x68>
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	6922      	ldr	r2, [r4, #16]
 8010018:	1a98      	subs	r0, r3, r2
 801001a:	6963      	ldr	r3, [r4, #20]
 801001c:	b2f6      	uxtb	r6, r6
 801001e:	4283      	cmp	r3, r0
 8010020:	4637      	mov	r7, r6
 8010022:	dc04      	bgt.n	801002e <__swbuf_r+0x3a>
 8010024:	4621      	mov	r1, r4
 8010026:	4628      	mov	r0, r5
 8010028:	f7ff ffaa 	bl	800ff80 <_fflush_r>
 801002c:	b9e0      	cbnz	r0, 8010068 <__swbuf_r+0x74>
 801002e:	68a3      	ldr	r3, [r4, #8]
 8010030:	3b01      	subs	r3, #1
 8010032:	60a3      	str	r3, [r4, #8]
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	1c5a      	adds	r2, r3, #1
 8010038:	6022      	str	r2, [r4, #0]
 801003a:	701e      	strb	r6, [r3, #0]
 801003c:	6962      	ldr	r2, [r4, #20]
 801003e:	1c43      	adds	r3, r0, #1
 8010040:	429a      	cmp	r2, r3
 8010042:	d004      	beq.n	801004e <__swbuf_r+0x5a>
 8010044:	89a3      	ldrh	r3, [r4, #12]
 8010046:	07db      	lsls	r3, r3, #31
 8010048:	d506      	bpl.n	8010058 <__swbuf_r+0x64>
 801004a:	2e0a      	cmp	r6, #10
 801004c:	d104      	bne.n	8010058 <__swbuf_r+0x64>
 801004e:	4621      	mov	r1, r4
 8010050:	4628      	mov	r0, r5
 8010052:	f7ff ff95 	bl	800ff80 <_fflush_r>
 8010056:	b938      	cbnz	r0, 8010068 <__swbuf_r+0x74>
 8010058:	4638      	mov	r0, r7
 801005a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005c:	4621      	mov	r1, r4
 801005e:	4628      	mov	r0, r5
 8010060:	f000 f806 	bl	8010070 <__swsetup_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	d0d5      	beq.n	8010014 <__swbuf_r+0x20>
 8010068:	f04f 37ff 	mov.w	r7, #4294967295
 801006c:	e7f4      	b.n	8010058 <__swbuf_r+0x64>
	...

08010070 <__swsetup_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4b2a      	ldr	r3, [pc, #168]	; (801011c <__swsetup_r+0xac>)
 8010074:	4605      	mov	r5, r0
 8010076:	6818      	ldr	r0, [r3, #0]
 8010078:	460c      	mov	r4, r1
 801007a:	b118      	cbz	r0, 8010084 <__swsetup_r+0x14>
 801007c:	6a03      	ldr	r3, [r0, #32]
 801007e:	b90b      	cbnz	r3, 8010084 <__swsetup_r+0x14>
 8010080:	f7ff f9e6 	bl	800f450 <__sinit>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801008a:	0718      	lsls	r0, r3, #28
 801008c:	d422      	bmi.n	80100d4 <__swsetup_r+0x64>
 801008e:	06d9      	lsls	r1, r3, #27
 8010090:	d407      	bmi.n	80100a2 <__swsetup_r+0x32>
 8010092:	2309      	movs	r3, #9
 8010094:	602b      	str	r3, [r5, #0]
 8010096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e034      	b.n	801010c <__swsetup_r+0x9c>
 80100a2:	0758      	lsls	r0, r3, #29
 80100a4:	d512      	bpl.n	80100cc <__swsetup_r+0x5c>
 80100a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100a8:	b141      	cbz	r1, 80100bc <__swsetup_r+0x4c>
 80100aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100ae:	4299      	cmp	r1, r3
 80100b0:	d002      	beq.n	80100b8 <__swsetup_r+0x48>
 80100b2:	4628      	mov	r0, r5
 80100b4:	f7ff fb0a 	bl	800f6cc <_free_r>
 80100b8:	2300      	movs	r3, #0
 80100ba:	6363      	str	r3, [r4, #52]	; 0x34
 80100bc:	89a3      	ldrh	r3, [r4, #12]
 80100be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	2300      	movs	r3, #0
 80100c6:	6063      	str	r3, [r4, #4]
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	6023      	str	r3, [r4, #0]
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	f043 0308 	orr.w	r3, r3, #8
 80100d2:	81a3      	strh	r3, [r4, #12]
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	b94b      	cbnz	r3, 80100ec <__swsetup_r+0x7c>
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100e2:	d003      	beq.n	80100ec <__swsetup_r+0x7c>
 80100e4:	4621      	mov	r1, r4
 80100e6:	4628      	mov	r0, r5
 80100e8:	f000 f857 	bl	801019a <__smakebuf_r>
 80100ec:	89a0      	ldrh	r0, [r4, #12]
 80100ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100f2:	f010 0301 	ands.w	r3, r0, #1
 80100f6:	d00a      	beq.n	801010e <__swsetup_r+0x9e>
 80100f8:	2300      	movs	r3, #0
 80100fa:	60a3      	str	r3, [r4, #8]
 80100fc:	6963      	ldr	r3, [r4, #20]
 80100fe:	425b      	negs	r3, r3
 8010100:	61a3      	str	r3, [r4, #24]
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	b943      	cbnz	r3, 8010118 <__swsetup_r+0xa8>
 8010106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801010a:	d1c4      	bne.n	8010096 <__swsetup_r+0x26>
 801010c:	bd38      	pop	{r3, r4, r5, pc}
 801010e:	0781      	lsls	r1, r0, #30
 8010110:	bf58      	it	pl
 8010112:	6963      	ldrpl	r3, [r4, #20]
 8010114:	60a3      	str	r3, [r4, #8]
 8010116:	e7f4      	b.n	8010102 <__swsetup_r+0x92>
 8010118:	2000      	movs	r0, #0
 801011a:	e7f7      	b.n	801010c <__swsetup_r+0x9c>
 801011c:	20000084 	.word	0x20000084

08010120 <_sbrk_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4d06      	ldr	r5, [pc, #24]	; (801013c <_sbrk_r+0x1c>)
 8010124:	2300      	movs	r3, #0
 8010126:	4604      	mov	r4, r0
 8010128:	4608      	mov	r0, r1
 801012a:	602b      	str	r3, [r5, #0]
 801012c:	f7f0 fce6 	bl	8000afc <_sbrk>
 8010130:	1c43      	adds	r3, r0, #1
 8010132:	d102      	bne.n	801013a <_sbrk_r+0x1a>
 8010134:	682b      	ldr	r3, [r5, #0]
 8010136:	b103      	cbz	r3, 801013a <_sbrk_r+0x1a>
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	20008534 	.word	0x20008534

08010140 <abort>:
 8010140:	b508      	push	{r3, lr}
 8010142:	2006      	movs	r0, #6
 8010144:	f000 f88e 	bl	8010264 <raise>
 8010148:	2001      	movs	r0, #1
 801014a:	f7f0 fc5f 	bl	8000a0c <_exit>

0801014e <__swhatbuf_r>:
 801014e:	b570      	push	{r4, r5, r6, lr}
 8010150:	460c      	mov	r4, r1
 8010152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010156:	2900      	cmp	r1, #0
 8010158:	b096      	sub	sp, #88	; 0x58
 801015a:	4615      	mov	r5, r2
 801015c:	461e      	mov	r6, r3
 801015e:	da0d      	bge.n	801017c <__swhatbuf_r+0x2e>
 8010160:	89a3      	ldrh	r3, [r4, #12]
 8010162:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010166:	f04f 0100 	mov.w	r1, #0
 801016a:	bf0c      	ite	eq
 801016c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010170:	2340      	movne	r3, #64	; 0x40
 8010172:	2000      	movs	r0, #0
 8010174:	6031      	str	r1, [r6, #0]
 8010176:	602b      	str	r3, [r5, #0]
 8010178:	b016      	add	sp, #88	; 0x58
 801017a:	bd70      	pop	{r4, r5, r6, pc}
 801017c:	466a      	mov	r2, sp
 801017e:	f000 f879 	bl	8010274 <_fstat_r>
 8010182:	2800      	cmp	r0, #0
 8010184:	dbec      	blt.n	8010160 <__swhatbuf_r+0x12>
 8010186:	9901      	ldr	r1, [sp, #4]
 8010188:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801018c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010190:	4259      	negs	r1, r3
 8010192:	4159      	adcs	r1, r3
 8010194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010198:	e7eb      	b.n	8010172 <__swhatbuf_r+0x24>

0801019a <__smakebuf_r>:
 801019a:	898b      	ldrh	r3, [r1, #12]
 801019c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801019e:	079d      	lsls	r5, r3, #30
 80101a0:	4606      	mov	r6, r0
 80101a2:	460c      	mov	r4, r1
 80101a4:	d507      	bpl.n	80101b6 <__smakebuf_r+0x1c>
 80101a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	6123      	str	r3, [r4, #16]
 80101ae:	2301      	movs	r3, #1
 80101b0:	6163      	str	r3, [r4, #20]
 80101b2:	b002      	add	sp, #8
 80101b4:	bd70      	pop	{r4, r5, r6, pc}
 80101b6:	ab01      	add	r3, sp, #4
 80101b8:	466a      	mov	r2, sp
 80101ba:	f7ff ffc8 	bl	801014e <__swhatbuf_r>
 80101be:	9900      	ldr	r1, [sp, #0]
 80101c0:	4605      	mov	r5, r0
 80101c2:	4630      	mov	r0, r6
 80101c4:	f7ff faf6 	bl	800f7b4 <_malloc_r>
 80101c8:	b948      	cbnz	r0, 80101de <__smakebuf_r+0x44>
 80101ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101ce:	059a      	lsls	r2, r3, #22
 80101d0:	d4ef      	bmi.n	80101b2 <__smakebuf_r+0x18>
 80101d2:	f023 0303 	bic.w	r3, r3, #3
 80101d6:	f043 0302 	orr.w	r3, r3, #2
 80101da:	81a3      	strh	r3, [r4, #12]
 80101dc:	e7e3      	b.n	80101a6 <__smakebuf_r+0xc>
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	6020      	str	r0, [r4, #0]
 80101e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e6:	81a3      	strh	r3, [r4, #12]
 80101e8:	9b00      	ldr	r3, [sp, #0]
 80101ea:	6163      	str	r3, [r4, #20]
 80101ec:	9b01      	ldr	r3, [sp, #4]
 80101ee:	6120      	str	r0, [r4, #16]
 80101f0:	b15b      	cbz	r3, 801020a <__smakebuf_r+0x70>
 80101f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101f6:	4630      	mov	r0, r6
 80101f8:	f000 f84e 	bl	8010298 <_isatty_r>
 80101fc:	b128      	cbz	r0, 801020a <__smakebuf_r+0x70>
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f023 0303 	bic.w	r3, r3, #3
 8010204:	f043 0301 	orr.w	r3, r3, #1
 8010208:	81a3      	strh	r3, [r4, #12]
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	431d      	orrs	r5, r3
 801020e:	81a5      	strh	r5, [r4, #12]
 8010210:	e7cf      	b.n	80101b2 <__smakebuf_r+0x18>

08010212 <_raise_r>:
 8010212:	291f      	cmp	r1, #31
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	d904      	bls.n	8010226 <_raise_r+0x14>
 801021c:	2316      	movs	r3, #22
 801021e:	6003      	str	r3, [r0, #0]
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	bd38      	pop	{r3, r4, r5, pc}
 8010226:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010228:	b112      	cbz	r2, 8010230 <_raise_r+0x1e>
 801022a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801022e:	b94b      	cbnz	r3, 8010244 <_raise_r+0x32>
 8010230:	4620      	mov	r0, r4
 8010232:	f000 f853 	bl	80102dc <_getpid_r>
 8010236:	462a      	mov	r2, r5
 8010238:	4601      	mov	r1, r0
 801023a:	4620      	mov	r0, r4
 801023c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010240:	f000 b83a 	b.w	80102b8 <_kill_r>
 8010244:	2b01      	cmp	r3, #1
 8010246:	d00a      	beq.n	801025e <_raise_r+0x4c>
 8010248:	1c59      	adds	r1, r3, #1
 801024a:	d103      	bne.n	8010254 <_raise_r+0x42>
 801024c:	2316      	movs	r3, #22
 801024e:	6003      	str	r3, [r0, #0]
 8010250:	2001      	movs	r0, #1
 8010252:	e7e7      	b.n	8010224 <_raise_r+0x12>
 8010254:	2400      	movs	r4, #0
 8010256:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801025a:	4628      	mov	r0, r5
 801025c:	4798      	blx	r3
 801025e:	2000      	movs	r0, #0
 8010260:	e7e0      	b.n	8010224 <_raise_r+0x12>
	...

08010264 <raise>:
 8010264:	4b02      	ldr	r3, [pc, #8]	; (8010270 <raise+0xc>)
 8010266:	4601      	mov	r1, r0
 8010268:	6818      	ldr	r0, [r3, #0]
 801026a:	f7ff bfd2 	b.w	8010212 <_raise_r>
 801026e:	bf00      	nop
 8010270:	20000084 	.word	0x20000084

08010274 <_fstat_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4d07      	ldr	r5, [pc, #28]	; (8010294 <_fstat_r+0x20>)
 8010278:	2300      	movs	r3, #0
 801027a:	4604      	mov	r4, r0
 801027c:	4608      	mov	r0, r1
 801027e:	4611      	mov	r1, r2
 8010280:	602b      	str	r3, [r5, #0]
 8010282:	f7f0 fc12 	bl	8000aaa <_fstat>
 8010286:	1c43      	adds	r3, r0, #1
 8010288:	d102      	bne.n	8010290 <_fstat_r+0x1c>
 801028a:	682b      	ldr	r3, [r5, #0]
 801028c:	b103      	cbz	r3, 8010290 <_fstat_r+0x1c>
 801028e:	6023      	str	r3, [r4, #0]
 8010290:	bd38      	pop	{r3, r4, r5, pc}
 8010292:	bf00      	nop
 8010294:	20008534 	.word	0x20008534

08010298 <_isatty_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4d06      	ldr	r5, [pc, #24]	; (80102b4 <_isatty_r+0x1c>)
 801029c:	2300      	movs	r3, #0
 801029e:	4604      	mov	r4, r0
 80102a0:	4608      	mov	r0, r1
 80102a2:	602b      	str	r3, [r5, #0]
 80102a4:	f7f0 fc11 	bl	8000aca <_isatty>
 80102a8:	1c43      	adds	r3, r0, #1
 80102aa:	d102      	bne.n	80102b2 <_isatty_r+0x1a>
 80102ac:	682b      	ldr	r3, [r5, #0]
 80102ae:	b103      	cbz	r3, 80102b2 <_isatty_r+0x1a>
 80102b0:	6023      	str	r3, [r4, #0]
 80102b2:	bd38      	pop	{r3, r4, r5, pc}
 80102b4:	20008534 	.word	0x20008534

080102b8 <_kill_r>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4d07      	ldr	r5, [pc, #28]	; (80102d8 <_kill_r+0x20>)
 80102bc:	2300      	movs	r3, #0
 80102be:	4604      	mov	r4, r0
 80102c0:	4608      	mov	r0, r1
 80102c2:	4611      	mov	r1, r2
 80102c4:	602b      	str	r3, [r5, #0]
 80102c6:	f7f0 fb8f 	bl	80009e8 <_kill>
 80102ca:	1c43      	adds	r3, r0, #1
 80102cc:	d102      	bne.n	80102d4 <_kill_r+0x1c>
 80102ce:	682b      	ldr	r3, [r5, #0]
 80102d0:	b103      	cbz	r3, 80102d4 <_kill_r+0x1c>
 80102d2:	6023      	str	r3, [r4, #0]
 80102d4:	bd38      	pop	{r3, r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	20008534 	.word	0x20008534

080102dc <_getpid_r>:
 80102dc:	f7f0 bb7c 	b.w	80009d8 <_getpid>

080102e0 <_init>:
 80102e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e2:	bf00      	nop
 80102e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102e6:	bc08      	pop	{r3}
 80102e8:	469e      	mov	lr, r3
 80102ea:	4770      	bx	lr

080102ec <_fini>:
 80102ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ee:	bf00      	nop
 80102f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f2:	bc08      	pop	{r3}
 80102f4:	469e      	mov	lr, r3
 80102f6:	4770      	bx	lr
